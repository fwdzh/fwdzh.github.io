{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u5706\u5934\u8004\u800b\u7684\u4e66\u67b6","text":"<p>\u9996\u9875\u611f\u89c9\u4e0d\u592a\u77e5\u9053\u8bf4\u70b9\u4ec0\u4e48\u4e86...</p> <p>\u53ef\u4ee5\u7ed9\u6211\u70b9\u5efa\u8bae\u5417\uff1f\ud83e\udd13\ud83e\udd13\ud83e\udd13</p>"},{"location":"index_1/","title":"Start","text":"<p>\u60f3\u5c3d\u91cf\u591a\u8bb0\u5f55\u4e00\u4e9b\u4e1c\u897f\uff0c \u8bc1\u660e\u6211\u5b58\u5728\u8fc7\u3002</p> <p>\u4e4b\u524d\u5199\u8fc7\u5f88\u591a\u4e86\uff0c\u4f46\u90fd\u611f\u89c9\u6ca1\u5565\u7528\uff0c\u4e5f\u786e\u5b9e\u6ca1\u5565\u7528</p>"},{"location":"index_1/#_1","title":"\u5e0c\u671b\u80fd\u591a\u4ea7\u751f\u4e00\u4e9b\u6709\u7528\u7684\u4e1c\u897f","text":"<p>\u53ef\u4ee5\u5e2e\u52a9\u6211\u81ea\u5df1\u8bb0\u4f4f\u66f4\u591a\u4e1c\u897f\uff0c \u8fd8\u53ef\u4ee5\u5e2e\u52a9\u5176\u4ed6\u4eba\uff0c\u5206\u4eab\u4e00\u4e9b\u7ecf\u9a8c\u3002</p>"},{"location":"index_1/#_2","title":"\u5077\u5077\u522b\u4eba\u7684\u535a\u5ba2","text":"<p>\u7ecf\u5e38\u5c31\u662f\u770b\u8fc7\u5f88\u591a\u6709\u7528\u7684\u535a\u5ba2\uff0c\u5bf9\u6211\u5f88\u6709\u5e2e\u52a9\u7684\u3002 \u4f46\u662f\u4e0b\u6b21\u60f3\u627e\u5c31\u5f88\u96be\u627e\u4e86\uff0c\u6216\u8005\u6709\u7684\u6839\u672c\u518d\u4e5f\u627e\u4e0d\u5230\u4e86\u3002 \u5982\u679c\u6536\u85cf\u7684\u8bdd\uff0c\u4e5f\u5f88\u96be\u6574\u7406\uff0c\u800c\u4e14\u53ef\u80fd\u4f1a\u65f6\u95f4\u957f\u4e86\u627e\u4e0d\u5230\u4e86\uff0c\u6216\u8005\u6587\u7ae0\u88ab\u5220\u4e86\u4e4b\u7c7b\u7684\u3002\u6240\u4ee5\u8f6c\u79fb\u5230\u81ea\u5df1\u8fd9\u8fb9\u53ef\u4ee5\u968f\u65f6\u65b9\u4fbf\u67e5\u770b\u3002</p>"},{"location":"index_1/#markdown","title":"\u8fd9\u4e2a\u9875\u9762\u80fd\u8ba9\u5199markdown\u53d8\u5f97\u66f4\u6709\u610f\u601d","text":"<p>\u672c\u6765\u5982\u679c\u4f60\u5728\u81ea\u5df1\u7684\u7535\u8111\u4e0a\u5199markdown\uff0c\u53ea\u8981\u4f60\u4e0d\u53d1\u7ed9\u522b\u4eba\uff0c\u90a3\u4e48\u53ea\u6709\u4f60\u4e00\u4e2a\u4eba\u80fd\u770b\u89c1\u3002\u867d\u7136\u8fd9\u4e2apages\u5728\u8fd9\u65b9\u9762\u5dee\u4e0d\u591a\uff0c\u4f46\u662f\u5c31\u662f\u4e0d\u4e00\u6837\u7684\u611f\u89c9\u3002 \u800c\u4e14\u65b9\u4fbf\u5bfc\u5165\u5230\u5176\u4ed6\u5e73\u53f0\uff0c\u8fd9\u4e2a\u4e3b\u9898\u5206\u7c7b\u6574\u7406\u5f88\u597d\u770b\uff0c\u5f88\u7b80\u6d01\u3002</p> <p>\u5e0c\u671b\u5927\u5bb6\u90fd\u53d8\u5f97\u66f4\u597d\u5440\uff01</p>"},{"location":"index_2/","title":"Index 2","text":""},{"location":"index_2/#what-can-i-say","title":"What can I say?","text":"<p>\u5927\u5bb6\u597d\u5440\uff0c\u6b22\u8fce\u5927\u5bb6\u8bbf\u95ee\u8fd9\u4e2a\u9875\u9762\u3002\u6211\u5c06\u968f\u673a\u5728\u8fd9\u91cc\u66f4\u65b0\u4e00\u4e9b\u5185\u5bb9\u3002\u3002\u3002</p> <p>\u611f\u89c9\u8fd8\u662f\u591a\u5199\u70b9\u535a\u5ba2\uff0c\u591a\u5b66\u70b9\u4e1c\u897f\uff0c\u8bb0\u5f55\u4e00\u4e0b\u81ea\u5df1\u7684\u751f\u6d3b\uff0c\u5c31\u633a\u597d\u7684\u5427\u3002</p> <p>\u5176\u5b9e\u611f\u89c9\u6211\u5e76\u4e0d\u662f\u4ec0\u4e48\u80fd\u575a\u6301\u5199\u535a\u5ba2\u6216\u8005\u65e5\u8bb0\u7684\u4eba\u5462\u3002\u3002\u3002\ud83e\udd23\ud83e\udd23\ud83e\udd23\u4f46\u662f\u4e0d\u575a\u6301\u7684\u6b21\u6570\u591a\u4e86\uff0c\u4e5f\u80fd\u7d2f\u79ef\u5f88\u591a\u5185\u5bb9\uff0c\uff0c\uff0c\u53ea\u8981\u4e0d\u5220\u7684\u8bdd\u3002\u6162\u6162\u6765\u5c31\u597d\u4e86\u3002</p>"},{"location":"index_2/#_1","title":"\u6211\u4ee5\u540e\u518d\u4e5f\u4e0d\u4f1a\u5220\u535a\u5ba2\u4e86","text":"<p>\u4e4b\u524d\u5176\u5b9e\u7ecf\u5e38\u6709\u50cf\u8fd9\u6837\u5199\u70b9\u4e1c\u897f\uff0c\u4f46\u662f\u6211\u90fd\u5199\u4e00\u6bb5\u65f6\u95f4\u5c31\u4f1a\u5220\u535a\u5ba2\u6216\u8005\u6ce8\u9500\u8d26\u53f7\u4e86\u3002\u3002\u3002\u8fd9\u4e00\u6b21\u6211\u4e00\u5b9a\u4e0d\u4f1a\u90a3\u6837\u4e86\u3002</p> <p>\u8fd9\u4e2a\u53c8\u65b9\u4fbf\uff0c\u53c8\u6ca1\u6709\u5e7f\u544a\uff0c\u914d\u7f6e\u8fd8\u7b80\u5355\u3002\u800c\u4e14\u5c31\u7b97\u7535\u8111\u70b8\u4e86\uff0c\u4e5f\u4e0d\u4f1a\u5f71\u54cd\u535a\u5ba2\u3002\u8fd9\u662f\u5f04\u5728github pages\u7684\uff0c\u672c\u5730\u90e8\u7f72\u73af\u5883\u53ea\u662f\u4e3a\u4e86\u53ef\u4ee5\u63d0\u524d\u9884\u89c8\u4e00\u4e0b\uff0c\u4f46\u662fpush\u5230github\u4e4b\u540e\uff0c\u4e5f\u662f\u7b49\u4e00\u5206\u949f\u6216\u8005\u66f4\u5feb\u9875\u9762\u5c31\u66f4\u65b0\u4e86\u3002\u5c31\u5f88\u597d\u3002</p> <p>\u800c\u4e14\u6211\u89c9\u5f97\u4e00\u5929\u79ef\u6512\u4e00\u70b9\u70b9\u5185\u5bb9\uff0c\u4e00\u6bb5\u65f6\u95f4\u4e4b\u540e\u4f1a\u975e\u5e38\u7684\u6050\u6016\u3002</p> <p>\u8fd9\u56de\u6211\u4e00\u5b9a\u4f1a\u5fcd\u4f4f\uff0c\u81ea\u5df1\u5199\u5f97\u518d\u70c2\u7684\u4e1c\u897f\uff0c\u4e5f\u4e0d\u8981\u5220\uff0c\u5c31\u4e00\u76f4\u7559\u7740\u3002\u53ef\u80fd\u5185\u5bb9\u672c\u8eab\u6ca1\u6709\u4ec0\u4e48\u5e2e\u52a9\uff0c\u4f46\u662f\u53ef\u4ee5\u5e2e\u6211\u7559\u4f4f\u4e00\u4e9b\u4e1c\u897f\u3002\u4e5f\u662f\u4e00\u79cd\u6210\u957f\u5427\u3002</p>"},{"location":"XCPC/Invitational/24Beijing/","title":"2025\u5e74\u5317\u4eac\u5e02\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u66a8\u201c\u5c0f\u7c73\u676f\u201d\u5168\u56fd\u9080\u8bf7\u8d5b","text":"<p>2025-05-06</p> <p>gym: https://codeforces.com/gym/105851</p> <p></p> <p>\u65b0\u961f\u4f0d\u7684\u7b2c\u4e00\u573a\u6bd4\u8d5b\uff0c\u6709\u4e2a\u961f\u53cb\u6709\u4e8b\u6765\u4e0d\u4e86\u3002\u8fd9\u573a\u9080\u8bf7\u8d5b\u633a\u96be\u3002\u4e5f\u662f\u6709\u7684\u9898\u6ca1\u8865\u3002</p>"},{"location":"XCPC/Invitational/24Beijing/#a","title":"A","text":"<p>\u7b7e\u5230\uff0c\u53ea\u9700\u8981\u7a0d\u5fae\u8ba8\u8bba\u4e0b\u3002\u5f53\u65f6\u72b6\u6001\u4e0d\u592a\u597d\u6765\u7740\uff0c\u6700\u8fd1\u8fd8\u662f\u5f97\u597d\u597d\u4f11\u606f\u4e0b\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid solve()\n{\n    int n;\n    cin &gt;&gt; n;\n    string s;\n    cin &gt;&gt; s;\n    if(s[0] != s[n - 1]){\n        cout &lt;&lt; \"empty\\n\";\n        return;\n    }\n    if(n == 1){\n        cout &lt;&lt; s &lt;&lt; '\\n';\n        return;\n    }\n\n    if(s[0] == '0'){\n        // 010010010\n        int ans = n, cnt = 0;\n        for(int i = 0; i &lt; n; i++){\n            if(s[i] == '1'){\n                ans = min(ans, cnt);\n\n                cnt = 0;\n            }else cnt++;\n        }\n        ans = min(ans, cnt);\n        if(ans == 0){\n            cout &lt;&lt; \"empty\\n\";\n            return;\n        }\n        cout &lt;&lt; string(ans, '0') &lt;&lt; '\\n';\n    }else{\n        // 111101110111\n        int ans = n, cnt = 0;\n        for(int i = 0; i &lt; n; i++){\n            if(s[i] == '0'){\n                ans = min(ans, cnt);\n\n                cnt = 0;\n            }else cnt++;\n        }\n        ans = min(ans, cnt);\n        if(ans == 0){\n            cout &lt;&lt; \"empty\\n\";\n            return;\n        }\n        cout &lt;&lt; string(ans, '1') &lt;&lt; '\\n';\n    }//0010001110100\n}\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr), cout.tie(nullptr);\n    int T;\n    cin &gt;&gt; T;\n    while(T--)\n        solve();\n    return 0;\n}\n</code></pre>"},{"location":"XCPC/Invitational/24Beijing/#c","title":"C","text":"<p>\u8fd9\u9898\u8fd8\u633a\u5de7\u5999\u7684\uff0c\u60f3\u4e86\u4e00\u4f1a\u3002\u8ddf\u4e8c\u8fdb\u5236\u6709\u5173\uff0c\u5982\u679c\u4f60\u6709\u6bcf\u4e2a \\(2^i\\) \u8fd9\u4e9b\u91cd\u91cf\u7684\u781d\u7801\uff0c\u90a3\u4e48\u4e00\u5b9a\u53ef\u4ee5\u8868\u793a\u51fa\u6bcf\u4e00\u4e2a\u91cd\u91cf\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nusing ll = long long;\n\nvoid solve()\n{\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    if(m &lt; __lg(n) + 1){\n        cout &lt;&lt; \"-1\\n\";\n        return;\n    }\n    ll ans = ll(2e10);\n    for(int i = 0; i &lt;= __lg(n); i++){\n        ll max_val = (1LL &lt;&lt; (i + 1)) - 1;\n        if(max_val &gt; n) break;\n        if(m - i - 1 == 0){\n            if(max_val &gt;= n)\n                ans = min(ans, 1LL &lt;&lt; i);\n            break;\n        }\n        ll X = (n - max_val - 1) / (m - i - 1) + 1;\n        // cerr &lt;&lt; max_val &lt;&lt; \" \" &lt;&lt; X &lt;&lt; '\\n';\n        if(X &lt;= max_val){\n            ans = min(ans, max(X, 1LL &lt;&lt; i));\n        }\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr), cout.tie(nullptr);\n    int T = 1;\n    cin &gt;&gt; T;\n    while(T--)\n        solve();\n    return 0;\n}\n</code></pre>"},{"location":"XCPC/Invitational/24Beijing/#g","title":"G","text":"<p>\u8bb0\u5f55\u6bcf\u79cd\u8d28\u56e0\u5b50\uff0c\u6700\u957f\u548c\u6b21\u957f\u7684\u957f\u5ea6\u4ee5\u53ca\u989c\u8272\uff0c\u53ea\u9700\u8981\u8bb0\u4e24\u79cd\u989c\u8272\u5c31\u884c\u3002\u7136\u540e\u5bf9\u4e8e\u4e00\u4e2a\u6570\u5b57\uff0c\u4e00\u5b9a\u662f\u7b97\u6bcf\u4e00\u4e2a\u8d28\u56e0\u5b50\u7684\u603b\u7684\u957f\u5ea6\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nusing ll = long long;\n#define cln cerr &lt;&lt; \"LINE: \" &lt;&lt; __LINE__ &lt;&lt; \" \"\nconstexpr int N = int(5e6);\n// bitset&lt;N+1&gt;is;\nint minp[N + 1];\n// vector&lt;int&gt;primes;\nstruct node{\n    int fir_len, fir_col, sec_len, sec_col;\n    node(int val = 0){fir_len = fir_col = sec_len = sec_col = val;}\n};\nnode info[N + 1];\n// vector&lt;vector&lt;int&gt;&gt;f(N + 1);\n\nvoid solve()\n{\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;int&gt;w(n + 1), c(n + 1);\n    for(int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; w[i];\n    for(int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; c[i];\n    int ans = 0;\n    auto work = [&amp;](int x,int idx){\n        /*\n        \u9700\u8981\u8bb0\u5f55\u7684\u662f\uff0c\u76f8\u540c\u7684\u8d28\u56e0\u5b50\uff0c\u6700\u957f\u7684\u957f\u5ea6\u548c\u6b21\u957f\u7684\u957f\u5ea6\u5bf9\u5e94\u7684\u989c\u8272\n        \u8fd9\u4e24\u4e2a\u4e00\u5b9a\u989c\u8272\u4e0d\u540c\uff0c\u989c\u8272\u76f8\u540c\u80af\u5b9a\u662f\u4e00\u6837\u7684\u957f\u5ea6\n        */\n        int cur = 0;\n        vector&lt;int&gt; p;\n        while(x != 1){\n            int prime = minp[x];\n            while(x % prime == 0)\n                x /= prime;\n            // \u548b\u641e\u6765\u7740\uff0c\u8bb0\u6700\u957f\u7684\u989c\u8272\u548c\u957f\u5ea6\uff0c\u6b21\u957f\u7684\u989c\u8272\u548c\u957f\u5ea6\n            if(c[idx] == info[prime].fir_col) cur = max(cur, info[prime].sec_len);\n            else cur = max(cur, info[prime].fir_len);\n            p.push_back(prime);\n        }\n        ans = max(ans, ++cur);\n        for(auto prime : p){\n            if(info[prime].fir_col == c[idx])\n                info[prime].fir_len = max(info[prime].fir_len, cur);\n            else if(cur &gt; info[prime].sec_len){\n                info[prime].sec_col = c[idx];\n                info[prime].sec_len = cur;\n            }\n            if(info[prime].fir_len &lt; info[prime].sec_len){\n                swap(info[prime].fir_col, info[prime].sec_col);\n                swap(info[prime].fir_len, info[prime].sec_len);\n            }\n        }\n    };\n    for(int i = 1; i &lt;= n; i++)\n        work(w[i], i);\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\nint main()\n{\n    // freopen(\"2.in\", \"r\", stdin);\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr), cout.tie(nullptr);\n    for(int i = 2; i &lt;= N; i++){\n        if(minp[i]) continue;\n        minp[i] = i;\n        if((ll)i * i &gt; N) continue;\n        for(int j = i * i; j &lt;= N; j += i)\n            minp[j] = i;\n    }\n    // for(int i = 1;i &lt;=35;i++)\n    //     cln &lt;&lt; minp[i] &lt;&lt; '\\n';\n    // cerr &lt;&lt; primes.back() &lt;&lt; '\\n';\n    // cerr &lt;&lt; primes.size() &lt;&lt; '\\n';\n    int T = 1;\n    // cin &gt;&gt; T;\n    while(T--)\n        solve();\n    return 0;\n}\n</code></pre>"},{"location":"XCPC/Invitational/24Shandong/","title":"2024 CCPC \u5168\u56fd\u9080\u8bf7\u8d5b\uff08\u5c71\u4e1c\uff09\u66a8\u5c71\u4e1c\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b","text":"<p>2025-03-16</p> <p>7\u9898 \u7f5a\u65f61247 \u94f6</p> <p>\u6bd4\u8d5b\u94fe\u63a5: https://codeforces.com/gym/105385</p> <p>\u699c\u5355\u8fde\u63a5: https://board.xcpcio.com/provincial-contest%2F2024%2Fshandong?group=official</p> <p>AC\u987a\u5e8f: I A F K C J D</p> <p>K\u662f\u6784\u9020\u7684\u90a3\u4e2a\uff0c\u6211\u4e00\u76f4\u6ca1\u60f3\u51fa\u6765\uff0c\u5b66\u5f1f\u60f3\u51fa\u6765\u4e86\uff0c\u53ef\u4ee5\u7684\u3002</p> <p>D\u662f\u6700\u540e\u778e\u641e\u778e\u4ea4\u4e86\uff0c\u7136\u540e\u771f\u8fc7\u4e86\uff0c\u601d\u8def\u662f\u5bf9\u7684\uff08\uff09\u3002</p> <p>\u7136\u540e\u5176\u4ed6\u9898\u76ee\u57fa\u672c\u90fd\u662f\u6a21\u62df\u5427\uff0c\u5176\u5b9e\u6709\u7684\u8fd8\u662f\u6709\u4e00\u70b9\u96be\u5ea6\u7684\u3002\u7b97\u662f\u6700\u8fd1\u6253\u5f97\u6700\u597d\u7684\u4e00\u573a\u4e86\uff0c\u4e0d\u7ba1\u600e\u4e48\u8bf4\uff0c\u8be5\u5199\u51fa\u6765\u7684\u9898\u90fd\u51fa\u6765\u4e86\u3002\u867d\u7136\u5403\u4e86\u5f88\u591a\u53d1\u7f5a\u65f6\u5c31\u662f\u4e86\u3002\u3002\u8fd8\u662f\u592a\u6025\u4e86\u4e00\u70b9\u3002</p>"},{"location":"XCPC/Invitational/24Shandong/#a","title":"A","text":"<p>\u5c31\u662f\u4e00\u4e2a\u6bd4\u8f83\u57fa\u7840\u7684\u4e8c\u5206\u3002\u3002\u4f46\u662f\u4f60check\u7684\u65f6\u5019\u548c\u53ef\u80fd\u4f1a\u8d85\u8fc7 <code>long long</code> \uff0c\u8fd9\u4e2a\u6545\u4e8b\u544a\u8bc9\u6211\u4eec\uff0ccheck\u7684\u65f6\u5019\u8981\u517b\u6210\u53ca\u65f6 <code>return</code> \u7684\u597d\u4e60\u60ef\u3002\u8fd9\u4e2a\u5176\u5b9e\u51fa\u73b0\u7684\u6b21\u6570\u633a\u591a\u7684\uff0c\u6700\u597d\u6ce8\u610f\u4e00\u4e0b\u3002</p> <pre><code>using ll = long long;\n\nvoid solve()\n{\n    int n, k;\n    cin &gt;&gt; n &gt;&gt; k;\n    vector&lt;int&gt; t(n + 1), l(n + 1), w(n + 1);\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; t[i] &gt;&gt; l[i] &gt;&gt; w[i];\n    ll lo = 0, hi = 4e18 + 1;\n    auto check = [&amp;](ll x)\n    {\n        ll res = 0;\n        for (int i = 1; i &lt;= n; i++)\n        {\n            ll y = 1LL * t[i] * l[i] + w[i];\n            res += x / y * l[i] + min(1LL * l[i], (x % y) / t[i]);\n            if (res &gt;= k)\n                return true;\n        }\n        // cerr&lt;&lt;res&lt;&lt;'\\n';\n        return res &gt;= k;\n    };\n    while (lo &lt; hi - 1)\n    {\n        ll mid = (lo + hi) &gt;&gt; 1;\n        if (check(mid))\n            hi = mid;\n        else\n            lo = mid;\n    }\n    // cerr&lt;&lt;check(10)&lt;&lt;'\\n';\n    cout &lt;&lt; hi &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"XCPC/Invitational/24Shandong/#c","title":"C","text":"<p>\u5c11\u6709\u7684\u4e00\u6b21AC\u7684\u9898\u3002\u3002\u5176\u5b9e\u633a\u7b80\u5355\u3002</p> <p>\u53ea\u7528\u8003\u8651\u5de6\u7aef\u70b9\u5728\u81ea\u5df1\u524d\u9762\u7684\u548c\u81ea\u5df1\u76f8\u4ea4\u7684\u7ebf\u6bb5\uff0c\u81ea\u5df1\u7684\u989c\u8272\u53ea\u8981\u4e0d\u548c\u5b83\u4eec\u4e00\u6837\u5c31\u597d\u4e86\u3002</p> <pre><code>using ll = long long;\n\nconstexpr int mod = 998244353;\n\nvoid solve()\n{\n    int n, k;\n    cin &gt;&gt; n &gt;&gt; k;\n    vector&lt;pair&lt;int, int&gt;&gt; seg(n);\n    for (int i = 0; i &lt; n; i++)\n        cin &gt;&gt; seg[i].first &gt;&gt; seg[i].second;\n    sort(seg.begin(), seg.end());\n    priority_queue&lt;int, vector&lt;int&gt;, greater&lt;&gt;&gt; pq;\n    int cnt = 0;\n    ll res = 1;\n    for (int i = 0; i &lt; n; i++)\n    {\n        while (!pq.empty() &amp;&amp; pq.top() &lt; seg[i].first)\n        {\n            pq.pop();\n            cnt--;\n        }\n        if (k - cnt &gt; 0)\n        {\n            // cerr &lt;&lt; cnt &lt;&lt; '\\n';\n\n            res = res * (k - cnt) % mod;\n            pq.push(seg[i].second);\n            cnt++;\n        }\n        else\n        {\n            res = 0;\n            break;\n        }\n    }\n    cout &lt;&lt; res &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"XCPC/Invitational/24Shandong/#d","title":"D","text":"<p>\u521a\u5f00\u59cb\u60f3\u6cd5\u662f\uff0c\u6700\u521d\u53ef\u80fd\u53ef\u4ee5\u5f88\u591a\u6b21\u628a\u94b1\u82b1\u5149\u53bb\u8d5a\u94b1\uff0c\u90a3\u6211\u4eec\u5148\u628a\u8fd9\u4e2a\u60c5\u51b5\u7ed9\u5904\u7406\u5b8c\uff0c\u7136\u540e\u53ea\u80fd\u82b1\u4e00\u90e8\u5206\u7684\u94b1\u4e86\u56e0\u4e3a\u65f6\u95f4\u4e0d\u591f\uff0c\u7136\u540e\u8fd9\u4e00\u6b65\u662f\u53ef\u4ee5\u4e8c\u5206\u7684\u3002</p> <p>\u6700\u5f00\u59cb\u5c31\u662f\u76f4\u63a5\u6a21\u62df\u7b2c\u4e00\u6b65\u7684\u64cd\u4f5c\uff0c\u4f46\u662f\u5403\u4e86\u51e0\u53d1 TLE \uff0c\u672c\u6765\u611f\u89c9\u8fd9\u4e2a\u64cd\u4f5c\u4e0d\u4f1a\u5f88\u591a\u6b21\uff0c\u9519\u8bef\u7684\u611f\u89c9\u4e86\u6b21\u6570\u5f88\u5c11\u3002\u3002</p> <p>\u4f46\u662f\u5176\u5b9e\u8fd9\u4e2a\u719f\u7ec3\u53ef\u80fd\u548c <code>t</code> \u4f1a\u662f\u4e00\u4e2a\u7ea7\u522b\u7684\u3002\u3002\u3002</p> <p>\u7136\u540e\u5c31\u60f3\u5230\u4e86\uff0c\u53ef\u80fd\u662f\u975e\u5e38\u591a\u6b21\u90fd\u662f\u80fd\u4e70\u7684\u6570\u91cf\u662f\u4e00\u6837\u7684\uff0c\u8fd9\u5c31\u4f1a\u6d6a\u8d39\u975e\u5e38\u591a\u7684\u65f6\u95f4\u3002</p> <p>\u6240\u4ee5\u5982\u679c\u8fd9\u4e00\u6b21\u4e4b\u540e\uff0c\u53ef\u4ee5\u4e70\u7684\u6570\u91cf\u6ca1\u6709\u589e\u52a0\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u8df3\u5230\u4e0b\u4e00\u4e2a \\(\\lfloor \\frac{m}{p} \\rfloor +1\\) \u3002\u56e0\u4e3a\u4e2d\u95f4\u5f88\u591a\u6b21\u4e70\u7684\u6570\u91cf\u662f\u4e00\u6837\u7684\uff0c\u4e5f\u5c31\u662f\u82b1\u7684\u65f6\u95f4\u548c\u94b1\u662f\u4e00\u6837\u7684\uff0c\u53ef\u4ee5\u76f4\u63a5\u8df3\u8fc7\u4e86\u3002</p> <p>\u8fd9\u6837\u54b1\u4eec\u6bcf\u6b21\u52a0\u7684\u90fd\u662f\u4e0d\u540c\u7684\u6570\u91cf\uff0c\u4e70\u4e00\u4e2a\u6700\u5c11\u9700\u8981 \\(2\\) \u65f6\u95f4 \uff0c \u6240\u4ee5 \\(2(1 + 2 + ... + k)\\le t\\) \uff0c\u6240\u4ee5\u5faa\u73af\u6b21\u6570\u6700\u591a \\(\\sqrt t\\) \u6b21\u3002</p> <p>\u7136\u540e\u5c31\u76f4\u63a5\u7b97\u7b54\u6848\u5c31\u884c\uff0c\u5176\u5b9e\u5e76\u4e0d\u9700\u8981\u4e8c\u5206\u4e86\u3002\u3002\u3002\u4f60\u770b\u6211\u90a3\u4e2a\u4e8c\u5206\uff0c\u76f4\u63a5\u5199\u4e2a\u9664\u6cd5\u5c31\u597d\u4e86\u7684\u5427\u3002\u3002\u3002</p> <pre><code>using ll = long long;\nusing pii = pair&lt;int, int&gt;;\n\nvoid solve()\n{\n    ll p, a, b, q, c, d, m, t;\n    cin &gt;&gt; p &gt;&gt; a &gt;&gt; b &gt;&gt; q &gt;&gt; c &gt;&gt; d &gt;&gt; m &gt;&gt; t;\n\n    /*\n    (m/p)*(a+b)+c+d &lt;= t\n\n    */\n    for (int i = 1;; i++)\n    {\n\n        ll x = m / p;\n        if (!x)\n            break;\n        __int128 cost = a * x + b + c * x + d;\n        if (cost &lt;= t)\n        {\n            // cerr&lt;&lt;t&lt;&lt;'\\n';\n            t -= cost;\n            m = q * x + (m % p);\n        }\n        else\n            break;\n        ll z = t / ((a + c) * x + b + d); // \u6700\u591a\u8fd8\u80fd\u64cd\u4f5c\u7684\u6b21\u6570\n\n        ll y = (x + 1) * p;\n        if (m &lt; y)\n        {\n            if (m + z * (q - p) * x &lt; y)\n            {\n                m += z * x * (q - p);\n                t %= ((a + c) * x + b + d);\n                break;\n            }\n            else\n            {\n                ll zz = (y - m) / ((q - p) * x);\n                m += zz * (q - p) * x;\n                t -= zz * ((a + c) * x + b + d);\n            }\n        }\n    }\n    // cerr &lt;&lt; \"m t: \" &lt;&lt; m &lt;&lt; \" \" &lt;&lt; t &lt;&lt; '\\n';\n    auto check = [&amp;](ll x)\n    {\n        return (__int128)a * x + b + c * x + d &lt;= t;\n    };\n    ll lo = 0, hi = m / p + 1;\n    while (lo &lt; hi - 1)\n    {\n        ll mid = (lo + hi) &gt;&gt; 1;\n        if (check(mid))\n            lo = mid;\n        else\n            hi = mid;\n    }\n    m += (q - p) * lo;\n    cout &lt;&lt; m &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"XCPC/Invitational/24Shandong/#f","title":"F","text":"<p>\u4ece \\(k=n\\) \u5f00\u59cb\u8003\u8651\u3002\u6211\u4eec\u5982\u679c\u8981\u7b97 \\(n-1\\) \u7684\u60c5\u51b5\uff0c\u5c31\u662f\u628a\u67d0\u4e24\u4e2a\u76f8\u90bb\u7684\u6570\u5b57\u5408\u5e76\u5230\u4e00\u8d77\u3002</p> <p>\u90a3\u4e48\u8fd9\u4e2a\u8d21\u732e\u662f\u591a\u5c11\u5462\uff1f</p> <p>\u6211\u4eec\u53ea\u8003\u8651\u5411\u540e\u5408\u5e76\u7684\uff0c\u6bd4\u5982\u628a \\(a_i\\) \u548c \\(a_{i+1}\\) \u5408\u5e76\u5230\u4e00\u8d77\u3002\u90a3\u4e48\u540e\u9762\u7684\u6240\u6709\u6570\u5b57\u7684\u4e0b\u6807\u90fd\u4f1a \\(-1\\) \uff0c\u800c \\(a_i\\) \u81ea\u5df1\uff0c\u672c\u8d28\u4e0a\u5b83\u7684\u8d21\u732e\u662f\u4e0d\u53d8\u7684\u3002\u6240\u4ee5\u5bf9\u4e8e\u6bcf\u4e00\u4e2a \\(i\\) \uff0c\u628a\u5b83\u5411\u540e\u5408\u5e76\uff0c\u4ea7\u751f\u7684\u8d21\u732e\u4f1a\u662f \\(-suf_{i+1}\\) \uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u6bcf\u6b21\u627e\u6700\u5c0f\u7684\u540e\u7f00\uff0c\u90a3\u4e48\u65b0\u7684\u503c\u5c31\u662f\u4e0a\u4e00\u4e2a\u7684\u51cf\u53bb\u8fd9\u4e2a\u540e\u7f00\u3002</p> <pre><code>using ll = long long;\nusing pll = pair&lt;long long, long long&gt;;\n\nvoid solve()\n{\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;ll&gt; ans;\n    vector&lt;int&gt; a(n + 1);\n    ll now = 0;\n    for (int i = 1; i &lt;= n; i++)\n    {\n        cin &gt;&gt; a[i];\n        now += 1LL * a[i] * i;\n    }\n    // ans[n] = now;\n    ans.push_back(now);\n    ll suf = a[n];\n    set&lt;pll&gt; st1, st2;\n    st2.insert({1, a[1]});\n    st2.insert({n, a[n]});\n    if (n &gt; 1)\n        st1.insert({suf, n});\n    for (int i = n - 1; i &gt;= 2; i--)\n    {\n        suf += a[i];\n        st1.insert({suf, i});\n        st2.insert({i, a[i]});\n    }\n    while (!st1.empty())\n    {\n        auto [val, i] = *st1.begin();\n        st1.erase(st1.begin());\n        auto it = st2.lower_bound({i, 0});\n        auto [j1, x1] = *it;\n        auto [j2, x2] = *prev(it);\n        now -= val;\n        ans.push_back(now);\n        st2.erase({j1, x1});\n        st2.erase({j2, x2});\n        st2.insert({j2, x1 + x2});\n    }\n    reverse(ans.begin(), ans.end());\n    for (auto x : ans)\n        cout &lt;&lt; x &lt;&lt; \" \";\n    cout &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"XCPC/Invitational/24Shandong/#i","title":"I","text":"<p>\u53ea\u6709\u51fa\u73b0\u4e24\u4e2a\u76f8\u540c\u5b57\u7b26\u76f8\u90bb\u7684\u60c5\u51b5\uff0c\u6216\u8005\u539f\u672c\u5c31\u662f\u9996\u5c3e\u76f8\u540c\uff0c\u624d\u662f\u53ef\u4ee5\u7684\u3002</p> <pre><code>void solve()\n{\n    string s;\n    cin&gt;&gt;s;\n    if(s.front()==s.back()){\n        cout&lt;&lt;\"0\\n\";\n        return;\n    }\n    for(int i=0;i+1&lt;s.size();i++){\n        if(s[i]==s[i+1]){\n            cout&lt;&lt;i+1&lt;&lt;'\\n';\n            return;\n        }\n    }\n    cout&lt;&lt;\"-1\\n\";\n}\n</code></pre>"},{"location":"XCPC/Invitational/24Shandong/#j","title":"J","text":"<p>\u5176\u5b9e\u4e5f\u4e0d\u96be\u7684\uff0c\u5fd8\u8bb0 <code>long long</code> WA \u4e86\u4e00\u6b21\uff0c\u5f53\u7136\u7b2c\u4e00\u6b21\u662f\u56e0\u4e3a\u5199\u4e86\u4e00\u4e2a\u9519\u7684\u505a\u6cd5\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u6362\u4e00\u4e2a\u60f3\u6cd5\u554a\uff0c\u5c31\u662f\u6211\u4eec\u5148\u628a \\(n\\) \u4e2a\u4e0d\u540c\u989c\u8272\u7684\u70b9\u8fde\u6210\u4e00\u9897\u6743\u503c\u6700\u5c0f\u7684\u6811\uff0c\u7136\u540e\u518d\u628a\u5269\u4e0b\u7684\u6240\u6709\u70b9\uff0c\u76f4\u63a5\u5168\u90e8\u8fde\u6743\u503c\u6700\u5c0f\u7684\u8fb9\u3002\u56e0\u4e3a\u7ecf\u8fc7\u7b2c\u4e00\u6b65\u64cd\u4f5c\u4e4b\u540e\uff0c\u6240\u6709\u70b9\u90fd\u5728\u6811\u4e0a\u4e86\uff0c\u5269\u4e0b\u7684\u76f4\u63a5\u54ea\u4e2a\u5c0f\u8fde\u54ea\u4e2a\u5c31\u884c\u4e86\u3002</p> <p>\u7531\u4e8e\u6bcf\u4e2a\u989c\u8272\u7684\u70b9\u4e00\u5b9a\u4e0d\u53ef\u80fd\u53ea\u8fde\u81ea\u5df1\u8eab\u4e0a\u7684\uff0c\u4e00\u5b9a\u4f1a\u6709\u8fde\u5230\u522b\u7684\u70b9\u4e0a\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u8fd9\u6837\u505a\u5c31\u4e00\u5b9a\u662f\u5bf9\u7684\u3002</p> <pre><code>using ll = long long;\nusing pii = pair&lt;int, int&gt;;\n\nvoid solve()\n{\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;int&gt; a(n + 1);\n    vector&lt;vector&lt;int&gt;&gt; b(n + 1, vector&lt;int&gt;(n + 1));\n    ll sum = 0;\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; a[i], a[i]--;\n    for (int i = 1; i &lt;= n; i++)\n        for (int j = 1; j &lt;= n; j++)\n            cin &gt;&gt; b[i][j];\n    set&lt;int&gt; vis;\n    priority_queue&lt;pii, vector&lt;pii&gt;, greater&lt;&gt;&gt; pq;\n    // \u5148\u6bcf\u79cd\u989c\u8272\u90fd\u53ea\u7528\u4e00\u4e2a\u70b9 \u518d\u6162\u6162\u52a0\u4e0a\u53bb\n    vis.insert(1);\n    for (int i = 2; i &lt;= n; i++)\n        pq.push({b[1][i], i});\n    while (!pq.empty())\n    {\n        auto [val, i] = pq.top();\n        pq.pop();\n        if (vis.count(i))\n            continue;\n        vis.insert(i);\n        sum += val;\n        for (int j = 1; j &lt;= n; j++)\n        {\n            if (vis.count(j))\n                continue;\n            pq.push({b[i][j], j});\n        }\n    }\n    // cerr &lt;&lt; sum &lt;&lt; '\\n';\n    for(int i=1;i&lt;=n;i++){\n        sum+=1LL*a[i]*(*min_element(b[i].begin()+1,b[i].end()));\n    }\n    cout&lt;&lt;sum&lt;&lt;'\\n';\n}\n</code></pre>"},{"location":"XCPC/Invitational/24Shandong/#k","title":"K","text":"<p>\u6784\u9020\u9898\u3002\u3002</p> <p>\u65b9\u6cd5\u5176\u5b9e\u4e5f\u662f\u633a\u591a\u7684\u3002</p> <p>\u9898\u89e3\u7684\u662f\u524d n-2 \u884c \uff0c\u6bcf\u884c\u90fd\u7528 1 \u4e2a\u4e0d\u540c\u7684\u6570\u5b57\u3002</p> <p>\u7136\u540e\u6700\u540e\u4e24\u884c\uff0c\u524d n-2 \u5217\uff0c\u6bcf\u5217 2 \u4e2a\u4e00\u6837\u7684\u6570\u5b57\uff0c\u6700\u540e\u56db\u4e2a\u6570\u5b57\u7528\u4e0d\u4e00\u6837\u7684\u6570\u5b57\u3002</p> <pre><code>1111\n2222\n3456\n3478\n</code></pre> <p>\u597d\u725b\u3002\u3002\u3002</p> <p>\u6211\u4eec\u7684\u662f\u56db\u4e2a\u89d2\u653e\u4e0d\u540c\u7684\uff0c\u7136\u540e\u7b2c\u4e00\u884c\u5269\u4f59\u7684\u4f4d\u7f6e\u653e\u4e0d\u540c\u7684\u6570\u5b57\uff0c\u6700\u540e\u4e00\u884c\u548c\u5b83\u76f8\u540c\uff0c\u7136\u540e\u5269\u4f59\u7684\u6bcf\u884c\u586b\u4e00\u4e2a\u4e0d\u540c\u7684\u6570\u5b57\u3002\u3002</p> <p>\u4e5f\u662f\u975e\u5e38\u7684\u5bf9\u3002</p> <p>\u8fd9\u9898 \u5b66\u5f1f \u62ff\u4e86 <code>mvp</code> \ud83d\ude0e\ud83d\ude0e\ud83d\ude0e\u3002</p> <pre><code>1562\n7777\n8888\n3564\n</code></pre> <pre><code>using ll = long long;\n\nvoid solve()\n{\n    int n;\n    cin&gt;&gt;n;\n    vector&lt;vector&lt;int&gt;&gt;a(n+1,vector&lt;int&gt;(n+1));\n    a[1][1]=1,a[1][n]=2,a[n][1]=3,a[n][n]=4;\n    int tot=5;\n    for(int i=2;i&lt;n;i++){\n        a[1][i]=a[n][i]=tot++;\n    }\n    for(int i=2;i&lt;n;i++){\n        for(int j=1;j&lt;=n;j++)\n            a[i][j]=tot;\n        tot++;\n    }\n    cout&lt;&lt;\"Yes\\n\";\n    for(int i=1;i&lt;=n;i++)\n        for(int j=1;j&lt;=n;j++)\n            cout&lt;&lt;a[i][j]&lt;&lt;\" \\n\"[j==n];\n}\n</code></pre>"},{"location":"XCPC/Invitational/24Wuhan/","title":"\u7b2c 49 \u5c4a ICPC \u56fd\u9645\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u9080\u8bf7\u8d5b\u6b66\u6c49\u7ad9","text":"<p>2025-04-20</p> <p>\u53bb\u5e74\u5176\u5b9eVP\u8fc7\u4e00\u6b21\uff0c\u4f46\u662f\u6ca1\u5565\u5199\u7684\uff0c\u800c\u4e14\u4e5f\u60f3\u518d\u8bd5\u4e0b\u8fd9\u4e2a\u3002\u4e5f\u8fd8\u884c\u5427\uff0c\u7b2c\u56db\u4e2a\u5176\u5b9e\u60f3\u4e0d\u5230\u4e5f\u6b63\u5e38\uff0c\u770b\u4e86\u9898\u89e3\u3002</p> <p>B \u53bb\u5e74\u5c45\u7136\u4e3aWA\u4e86 3 \u4e2a\u5c0f\u65f6\u3002\u3002\u3002\u4e14\u6700\u540e\u4e5f\u6ca1\u5bf9\uff0c\u73b0\u5728\u770b\u6765\u786e\u5b9e\u53ea\u662f\u4e2a\u4f4d\u8fd0\u7b97\u7684\u5f88\u7b80\u5355\u7684\u9898\u76ee\u3002</p>"},{"location":"XCPC/Invitational/24Wuhan/#b","title":"B","text":"<p>\u7b80\u5355\u6765\u8bf4\u5c31\u662f\u6784\u9020 \\(n\\) \u4e2a\u975e\u8d1f\u6574\u6570\uff0c\u4f7f\u5f97\u5b83\u4eec\u7684\u548c\u4e3a \\(sum\\) \uff0c\u4e14\u6309\u4f4d\u6216\u7684\u503c\u6700\u5c0f\uff0c\u7b80\u5355\u7684\u8d2a\u5fc3\u4e00\u4e0b\u5c31\u597d\u4e86\u3002\u8fd8\u662f\u6709\u4e00\u70b9\u70b9\u7ec6\u8282\u8981\u6ce8\u610f\u7684\uff0c\u8fd9\u6b21\u8fd8WA\u4e86\u4e24\u6b21\uff0c\u53bb\u5e74\u4e5f\u662f\u8fd9\u91cc\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nusing ll = long long;\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.tie(nullptr);\n    int n;\n    cin &gt;&gt; n;\n    ll sum = 0;\n    for (int i = 1; i &lt;= n; i++)\n    {\n        int x;\n        cin &gt;&gt; x;\n        sum += x;\n    }\n    // cerr&lt;&lt;(1LL&lt;&lt;30);\n    // cerr &lt;&lt; sum &lt;&lt; '\\n';\n    ll res = 0;\n    for (int i = 30; i &gt;= 0; i--)\n    {\n        ll val = ((1LL &lt;&lt; i) - 1) * n;\n        if (val &gt;= sum)\n            continue;\n        if (sum &gt;= (1LL &lt;&lt; i) * n)\n            sum -= (1LL &lt;&lt; i) * n;\n        else\n            sum %= (1LL &lt;&lt; i);\n        res |= 1LL &lt;&lt; i;\n    } // 1001\n    cout &lt;&lt; res &lt;&lt; '\\n';\n    return 0;\n}\n</code></pre>"},{"location":"XCPC/Invitational/24Wuhan/#f","title":"F","text":"<p>\u4e8c\u5206\u90a3\u4e2a\u6570\u5b57\u7684\u503c\uff0c\u6ca1\u95ee\u9898\uff0c\u4f46\u662f\u518d\u600e\u4e48\u641e\u5462\uff1f\u6211\u5012\u662f\u770b\u51fa\u6765\u4e86\u524d \\(k\\) \u5c0f\u7684\u6570\u4f1a\u88ab\u5708\u5728\u53f3\u4e0a\u89d2\u3002\u4e14\u6bcf\u5217\u7684\u957f\u5ea6\u662f\u5c0f\u4e8e\u7b49\u4e8e\u5de6\u8fb9\u4e00\u5217\u7684\u957f\u5ea6\uff0c\u6bcf\u884c\u4e5f\u662f\u7c7b\u4f3c\u7684\uff0c\u4f46\u662f\u6ca1\u60f3\u5230\u8fd9\u4e2a\u600e\u4e48\u5904\u7406\u3002</p> <p>\u82e5\u662f\u518d\u5bf9\u6bcf\u884c\u8fdb\u884c\u4e8c\u5206\uff0c\u5219\u603b\u5171\u9700\u8981 \\(n\\log n \\log n^2\\) \u6b21\u64cd\u4f5c\uff0c\u663e\u7136\u4e0d\u592a\u884c\u3002</p> <p>\u6ca1\u60f3\u5230\u963f\uff0c\u9898\u89e3\u91cc\u5b83\u662f\u5047\u8bbe\u5f00\u59cb\u662f \\(r,c\\) \u4f4d\u7f6e\uff0c\u82e5 \\(\\le x\\) \uff0c\u5219\u68c0\u67e5 \\(r,c+1\\) \uff0c\u5426\u5219\u68c0\u67e5 \\(r-1,c\\) \uff0c\u5219\u603b\u6b21\u6570\u6700\u591a \\(2n\\log n^2\\) \uff0c\u521a\u597d\u591f\u7528\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nusing ll = long long;\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.tie(nullptr);\n    int n,k;\n    cin&gt;&gt;n&gt;&gt;k;\n    k=n*n-k+1;\n    auto ask=[&amp;](int i,int j,int x){\n        cout&lt;&lt;\"? \"&lt;&lt;i&lt;&lt;\" \"&lt;&lt;j&lt;&lt;\" \"&lt;&lt;x&lt;&lt;endl;\n        int res; cin &gt;&gt; res;\n        return res;\n    };\n    auto check=[&amp;](int x){\n        int r=n,c=1,cnt=0;\n        while(r&gt;0&amp;&amp;c&lt;=n){\n            if(ask(r,c,x)) cnt+=r,c++;\n            else r--;\n        }\n        return cnt&gt;=k;\n    };\n    int lo=0,hi=n*n+1;\n    while(lo&lt;hi-1){\n        int mid=(lo+hi)&gt;&gt;1;\n        if(check(mid)) hi=mid;\n        else lo=mid;\n        // cerr&lt;&lt;lo&lt;&lt;\" \"&lt;&lt;hi&lt;&lt;endl;\n    }\n    cout&lt;&lt;\"! \"&lt;&lt;hi&lt;&lt;endl;\n    return 0;\n}\n</code></pre>"},{"location":"XCPC/Invitational/24Wuhan/#i","title":"I","text":"<p>\u7b80\u5355\u627e\u89c4\u5f8b</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nusing ll = long long;\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.tie(nullptr);\n    string s;\n    cin&gt;&gt;s;\n    int cnt=0;\n    if(s[0]=='1') cnt++;\n    for(int i=1;i&lt;s.size();i++){\n        if(s[i]=='1'&amp;&amp;s[i-1]=='0')  cnt++;\n    }\n    if(cnt==0) cout&lt;&lt;cnt&lt;&lt;'\\n';\n    else if(s.back()=='1') cout&lt;&lt;cnt-1&lt;&lt;'\\n';\n    else cout&lt;&lt;cnt&lt;&lt;'\\n';\n    return 0;\n}\n</code></pre>"},{"location":"XCPC/Invitational/24Wuhan/#k","title":"K","text":"<p>\u6253\u8868\u770b\u770b\u5c31\u77e5\u9053\u4e86\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nusing ll = long long;\n\nconstexpr int N = int(1e6);\nint s[N+1];\n\nvoid solve()\n{\n    int n;\n    cin&gt;&gt;n;\n    // cerr&lt;&lt;s[n]&lt;&lt;\" \";\n    if(s[n]==0) cout&lt;&lt;\"Pinkie Pie\\n\";\n    else if(s[n]==1||s[n]==n) cout&lt;&lt;\"Fluttershy\\n\";\n    else if(s[n]==n+1) cout&lt;&lt;\"Pinkie Pie\\n\";\n}\n/*\n1 2 3 4 5 ,1\n\n\n*/\nint main()\n{\n    // ios::sync_with_stdio(false);\n    // cin.tie(nullptr);\n    // cout.tie(nullptr);\n    for(int i=1;i&lt;=N;i++){\n\n        s[i]=i^s[i-1];\n        // cerr&lt;&lt;i&lt;&lt;\" \"&lt;&lt;s[i]&lt;&lt; '\\n';\n    }\n    int T;\n    cin&gt;&gt;T;\n    while(T--)\n        solve();\n    return 0;\n}\n</code></pre>"},{"location":"XCPC/Invitational/25Nanchang/","title":"2025\u5e74icpc\u5168\u56fd\u9080\u8bf7\u8d5b\uff08\u5357\u660c\uff09\u66a82025\u5e74\uff08icpc\uff09\u6c5f\u897f\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b","text":"<p>\u4eca\u5e74\u6253\u7684\u4e09\u573a\u9080\u8bf7\u8d5b\u91cc\uff0c\u552f\u4e00\u62ff\u5230\u5956\u724c\u7684\u4e00\u573a\uff0c\u4e5f\u662f\u4e0a\u534a\u5e74\u80fd\u6253\u7684\u6700\u540e\u4e00\u573a\u6bd4\u8d5b\u3002\u975e\u5e38\u5f00\u5fc3\uff0c\u4f46\u6b64\u523b\u4e0d\u77e5\u9053\u8bf4\u4ec0\u4e48\u3002</p> <p>\u8d76\u7d27\u628a\u9898\u76ee\u8865\u4e86\u5427\uff0c\u6709\u70b9\u5510\u4e86\uff0c\u8fd9\u4e2aG\u8fd9\u4e48\u7b80\u5355\u3002</p> <p>gym: https://codeforces.com/gym/105911</p> <p>I \u9898\u770b\u4e86\u9898\u89e3\u4f46\u73b0\u5728\u4e0d\u60f3\u5199\uff0c\ud83d\ude2d\uff0c\u4e0b\u6b21\u52a0\u4e0a\u3002</p> <p>ok\u5df2\u7ecf\u52a0\u4e86\u3002\u3002\u3002\u73b0\u5728\u662f\u8981\u7761\u89c9\u7684\u65f6\u95f4\uff0c\u5176\u4f59\u90e8\u5206\u662f\u4e0a\u5348\u4e0a\u8bfe\u5199\u7684\u3002\u3002\u3002\u8d76\u7d27\u628a\u8fd9\u5957\u9898\u7ed3\u675f\u4e86\uff0c\u4e0d\u80fd\u4e00\u76f4\u62d6\u7740\u3002</p>"},{"location":"XCPC/Invitational/25Nanchang/#a","title":"A","text":"<p>\u7b7e\u5230\uff0c\u6211\u672c\u6765\u771f\u6253\u7b97\u76f4\u63a5\u8f93\u51fa <code>a * b * c * d</code> \u7684\uff0c\u4f46\u662f\u591a\u770b\u4e86\u4e00\u4f1a\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint main() {\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr), cout.tie(nullptr);\n    int a, b, c, d;\n    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d;\n    cout &lt;&lt; (a + b + c) * d &lt;&lt; '\\n';\n    return 0;\n}\n</code></pre>"},{"location":"XCPC/Invitational/25Nanchang/#d","title":"D","text":"<p>\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5750\u6807\uff0c\u6211\u4eec\u53ef\u4ee5\u5206\u5f00\u8003\u8651\u3002</p> <p>\u6bd4\u5982\u5982\u679c\u6211\u4eec\u9009\u53d6\u7684\u5e73\u9762\u662f \\(x = x_0\\)\uff0c\u90a3\u4e48\u7b54\u6848\u5c31\u4e3a \\(x_1 \\le x0\\) \u4e14 \\(x_2 \\ge x_0\\) \u7684\u7ebf\u6bb5\u7684\u6570\u91cf\uff0c\u53ef\u4ee5\u901a\u8fc7\u5dee\u5206\u5f88\u5bb9\u6613\u6c42\u51fa\u6765\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nusing pii = pair&lt;int, int&gt;;\n\nvoid solve() {\n    int n, a, b, c;\n    cin &gt;&gt; n &gt;&gt; a &gt;&gt; b &gt;&gt; c;\n    vector&lt;vector&lt;int&gt;&gt; vec1(3, vector&lt;int&gt;(n)), vec2(3, vector&lt;int&gt;(n));\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = 0; j &lt; 3; j++)\n            cin &gt;&gt; vec1[j][i];\n        for (int j = 0; j &lt; 3; j++)\n            cin &gt;&gt; vec2[j][i];\n    }\n    int ans = 0;\n    auto work = [&amp;](vector&lt;int&gt; a, vector&lt;int&gt; b) {\n        /* \u79bb\u6563\u5316\u4e00\u4e0b\n         * \u5bf9\u4e8e\u4e00\u4e2a x\uff0c\u6211\u4eec\u9700\u8981\u627e a &lt;= x &amp;&amp; b &gt;= x \u7684 pair \u7684\u6570\u91cf\n         * \u5dee\u5206\u786e\u5b9e\u5f88\u5bf9\u554a\u3002\u3002\u3002\u8d5b\u65f6\u5199\u5f97\u662f\u6811\u72b6\u6570\u7ec4\u8c03\u597d\u4e45 \u8fd8\u597d\u961f\u53cb\u5e2e\u6211\u9020\u4e86\u5f88\u591a\u6570\u636e\n         */\n        {\n            vector&lt;pii&gt; tmp(2 * n);\n            for (int i = 0; i &lt; n; i++) {\n                tmp[i].first = b[i];\n                tmp[i].second = i;\n            }\n            for (int i = 0; i &lt; n; i++) {\n                tmp[i + n].first = a[i];\n                tmp[i + n].second = i + n;\n            }\n            ranges::sort(tmp);\n            int tot = 1, lst = tmp[0].first;\n            tmp[0].first = 1;\n            for (int i = 1; i &lt; 2 * n; i++) {\n                if (tmp[i].first != lst) {\n                    ++tot;\n                    lst = tmp[i].first;\n                }\n                tmp[i].first = tot;\n            }\n            ranges::sort(tmp, [](pii x, pii y) {\n                return x.second &lt; y.second;\n            });\n            for (int i = 0; i &lt; n; i++) {\n                b[i] = tmp[i].first;\n                // cerr &lt;&lt; b[i] &lt;&lt; ' ';\n            }\n            for (int i = 0; i &lt; n; i++)\n                a[i] = tmp[i + n].first;\n\n        }\n        vector&lt;int&gt; d(2 * n + 10);\n        for (int i = 0; i &lt; n; i++) {\n            // cerr &lt;&lt; a[i] &lt;&lt; ' ' &lt;&lt; b[i] &lt;&lt; \" \\n\";\n            if (a[i] &gt; b[i]) swap(a[i], b[i]);\n            d[a[i]] += 1, d[b[i] + 1] -= 1;\n        }\n        int now = 0;\n        for (int i = 1; i &lt;= 2 * n; i++) {\n            now += d[i];\n            ans = max(ans, now);\n        }\n    };\n    work(vec1[0], vec2[0]);\n    work(vec1[1], vec2[1]);\n    work(vec1[2], vec2[2]);\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\nint main() {\n    cout &lt;&lt; fixed &lt;&lt; setprecision(12);\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr), cout.tie(nullptr);\n    int T = 1;\n    // cin &gt;&gt; T;\n    while(T--)\n        solve();\n    return 0;\n}\n</code></pre>"},{"location":"XCPC/Invitational/25Nanchang/#e","title":"E","text":"<p>\u6211\u4eec\u9700\u8981\u627e\u7684\u662f \\([l, r]\\) \u4e2d\u6709\u591a\u5c11\u4e2a\u5b57\u4e32 \\(s\\) \u91cd\u65b0\u6392\u5217\u540e\u53ef\u4ee5\u88ab \\(k\\) \u4e2a\u76f8\u540c\u5b57\u7b26\u4e32 \\(t\\) \u7ec4\u6210\uff0c\u90a3\u4e48\u76f8\u5f53\u4e8e\u662f\u6709\u591a\u5c11\u4e2a \\(s\\) \u6bcf\u79cd\u5b57\u7b26\u7684\u6570\u91cf\u90fd\u4e3a \\(k\\) \u7684\u500d\u6570\u3002</p> <p>\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u8f6c\u6362\u6210\u524d\u7f00\u548c\u95ee\u9898\uff0c\u82e5\u4e24\u4e2a\u524d\u7f00\u7684\u6bcf\u79cd\u5b57\u7b26\u6570\u91cf\u6a21 \\(k\\) \u4e4b\u540e\u90fd\u76f8\u540c\uff0c\u90a3\u4e48\u53ef\u4ee5\u4ea7\u751f\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684\u5b57\u4e32\u3002</p> <p>\u6240\u4ee5\u5c31\u53ef\u4ee5\u7528\u83ab\u961f\u4e86\uff0c\u786e\u5b9e\u662f\u5f88\u677f\u7684\u9898\u76ee\uff0c\u4f46\u662f\u54c8\u5e0c\u6211\u4e0d\u548b\u4f1a\u3002\u3002\u3002\u641e\u4e86\u534a\u5929\u3002\u5f53\u7136\u8d5b\u65f6\u6211\u662f\u6ca1\u770b\u8fc7\u8fd9\u9898\u7684\uff0c\u770b\u4e86\u4e5f\u4e0d\u4f1a\u3002</p> <p>\u7ed9\u4e00\u9053\u4e00\u6837\u7684\u9898\uff0c\u5176\u5b9e\u90fd\u662f\u83ab\u961f\u6a21\u677f\u9898\uff0cP4462 [CQOI2018] \u5f02\u6216\u5e8f\u5217\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n#define int long long\nusing pii = pair&lt;int, int&gt;;\nusing ll = long long;\nusing ull = unsigned long long;\n\nstruct node {\n    int l, r, idx;\n};\n\nmt19937_64 rng(time(NULL));\nll rand_integer(ll l, ll r) {\n    uniform_int_distribution&lt;ll&gt; dis(l, r);\n    return dis(rng);\n}\n\nvoid solve() {\n    int n, k, q;\n    cin &gt;&gt; n &gt;&gt; k &gt;&gt; q;\n    string s;\n    cin &gt;&gt; s;\n    vector&lt;int&gt; pos(n + 1);\n\n    vector&lt;ull&gt; val(26), pre(n + 1);\n    for(int i = 0; i &lt; 26; i++)\n        val[i] = rng();\n    vector&lt;int&gt; cnt(26);\n\n    for(int i = 1; i &lt;= n; i++){\n        int x = s[i - 1] - 'a';\n        cnt[x] = (cnt[x] + 1) % k;\n        for(int j = 0; j &lt; 26; j++)\n            pre[i] += val[j] * cnt[j];\n    }\n    {\n        vector&lt;pair&lt;ull, ull&gt;&gt; tmp(n + 1);\n        for(int i = 0; i &lt;= n; i++)\n            tmp[i] = {pre[i], i};\n        ranges::sort(tmp);\n        int tot = 1;\n        ull lst = tmp[0].first;\n        tmp[0].first = 1;\n        for(int i = 1; i &lt;= n; i++){\n            if(tmp[i].first != lst){\n                ++tot;\n                lst = tmp[i].first;\n            }\n            tmp[i].first = tot;\n        }\n        ranges::sort(tmp, [](pii x, pii y){return x.second &lt; y.second;});\n        for(int i = 0; i &lt;= n; i++) pre[i] = tmp[i].first;\n    }\n    int siz = sqrt(n);\n    for (int i = 1; i &lt;= n; i++) {\n        pos[i] = i / siz;\n    }\n\n    vector&lt;node&gt; ask(q);\n    for (int i = 0; i &lt; q; i++) {\n        cin &gt;&gt; ask[i].l &gt;&gt; ask[i].r;\n        ask[i].l--;\n        ask[i].idx = i;\n    }\n\n    ranges::sort(ask, [&amp;](node x, node y) {\n        return (pos[x.l] == pos[y.l]) ? (x.r &lt; y.r) : (pos[x.l] &lt; pos[y.l]);\n    });\n\n    vector&lt;int&gt; res(q), mp(n + 10);\n    ll ans = 0;\n    int L = 0, R = -1;\n\n    auto add = [&amp;](int i) {\n        ans += mp[pre[i]]++;\n    };\n\n    auto del = [&amp;](int i) {\n        ans -= --mp[pre[i]];\n    };\n\n    for (auto [l, r, idx] : ask) {\n        while (L &lt; l) del(L++);\n        while (L &gt; l) add(--L);\n        while (R &lt; r) add(++R);\n        while (R &gt; r) del(R--);\n        res[idx] = ans;\n    }\n\n    for (int i = 0; i &lt; q; i++) {\n        cout &lt;&lt; res[i] &lt;&lt; '\\n';\n    }\n}\n\nint32_t main() {\n    // freopen(\"1.in\", \"r\", stdin);\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr), cout.tie(nullptr);\n    int T = 1;\n    while(T--)\n        solve();\n    return 0;\n}\n</code></pre>"},{"location":"XCPC/Invitational/25Nanchang/#f","title":"F","text":"<p>\u961f\u53cb @tanxf \u7ed9\u6211\u770b\u51fa\u6765\u4e86\uff0c\u5e78\u597d\u6709\u4f60\u3002</p> <p>\\(r\\) \u4e00\u5b9a\u53d6\u6700\u5c0f\uff0c\u8fd9\u8c01\u6562\u8fd9\u6837\u731c\u554a\u3002\u3002\u3002\u867d\u7136\u96be\u5ea6\u4ed6\u4eec\u9884\u8bbe\u7684\u662f\u524d\u671f\u7684\u9898\uff0c\u4f46\u662f\u8fd9\u662f\u901a\u8fc7\u4eba\u6570\u7b2c\u4e94\u7684\u9898\u3002</p> <p>\u8fd8\u597d\u6709\u597d\u961f\u53cb\uff0c\u5c31\u5f88\u723d\u4e86\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid solve() {\n    int n, k;\n    cin &gt;&gt; n &gt;&gt; k;\n    vector&lt;double&gt; r(n + 1), c(n + 1);\n    cin &gt;&gt; r[0] &gt;&gt; c[0];\n    double p, L, R;\n    cin &gt;&gt; p &gt;&gt; L &gt;&gt; R;\n    for (int i = 1; i &lt;= n; i++)\n        r[i] = L;\n    for (int i = 1; i &lt;= k; i++) {\n        int id;\n        double v;\n        cin &gt;&gt; id &gt;&gt; v;\n        r[id] = v;\n    }\n    double ans = 0;\n    for (int i = 1; i &lt;= n; i++) {\n        c[i] = p * c[i - 1] + (1 - p) * r[i - 1];\n        ans += c[i] - r[i];\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\nint main() {\n    cout &lt;&lt; fixed &lt;&lt; setprecision(12);\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr), cout.tie(nullptr);\n    int T;\n    cin &gt;&gt; T;\n    while(T--)\n        solve();\n    return 0;\n}\n</code></pre>"},{"location":"XCPC/Invitational/25Nanchang/#g","title":"G","text":"<p>\u670d\u4e86\uff0c\u8fd8\u4ee5\u4e3a\u591a\u96be\u5462\u3002\u3002\u3002\u5927\u5bb6\u90fd\u80fd\u60f3\u5230\u5427\uff0c\u5c31\u662f\u6c42\u6bcf\u4e2a\u70b9\u7ecf\u8fc7 \\(x\\) \u6761\u8fb9\u7684\u6700\u5927\u8fb9\u6743\u4e58\u79ef\uff0c\u4f46\u662f\u600e\u4e48\u7b97\u5462\uff1f\u5c31\u7b97\u7528 dp \u600e\u4e48\u7b97\u5462\uff1f</p> <p>\u5176\u5b9e\u6211\u8111\u5b50\u91cc\u4e00\u76f4\u8003\u8651\u7684\u662f\uff0c\u201c\u6211\u8981\u4ece\u54ea\u5f00\u59cb dfs \u5462\uff1f\u201d\u3002\u3002\u3002\u54c8\u54c8\u54c8\u54c8\uff0c\u7136\u540e\u65e9\u4e0a\u7a0d\u5fae\u60f3\u4e86\u4e00\u4e0b\uff0c\u8fd9\u4e0d\u662f\u76f4\u63a5\u5faa\u73af\u5c31\u884c\u7684\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nusing ll = long long;\nusing pii = pair&lt;int, int&gt;;\nconstexpr ll inf = int(1e9) + 1;\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr), cout.tie(nullptr);\n    int n, m, q;\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;\n    vector&lt;vector&lt;pii&gt;&gt; g(n + 1, vector&lt;pii&gt;());\n    for(int i = 1; i &lt;= m; i++){\n        int u, v, d;\n        cin &gt;&gt; u &gt;&gt; v &gt;&gt; d;\n        g[u].push_back({v, d});\n    }\n    // \u53ef\u80fd\u591a\u4e2a\u91cd\u590d\u7684\u8fb9\uff0c\u597d\u5427 \u8fd9\u4e2a\u597d\u50cf\u4e0d\u7528\u7ba1\u7684\n    vector&lt;vector&lt;ll&gt;&gt; dp(n + 1, vector&lt;ll&gt;(32, 1));\n    for(int edge = 1; edge &lt;= 31; edge++){\n        for(int i = 1; i &lt;= n; i++){\n            for(auto [v, d] : g[i]){\n                dp[i][edge] = max(dp[i][edge], dp[v][edge - 1] * d);\n                dp[i][edge] = min(dp[i][edge], inf);\n            }\n        }\n    }\n    while(q--){\n        int p, x;\n        cin &gt;&gt; p &gt;&gt; x;\n        for(int edge = 1; ; edge++){\n            if(dp[p][edge] &gt; x){\n                cout &lt;&lt; edge &lt;&lt; '\\n';\n                break;\n            }\n        }\n    }\n    return 0;\n}\n</code></pre>"},{"location":"XCPC/Invitational/25Nanchang/#i","title":"I","text":"<p>\u770b\u9898\u89e3\u7684\u601d\u8def\u5f04\u7684\uff0c\u8fd8\u6ca1\u4ed4\u7ec6\u60f3\u3002\u3002\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nusing ll = long long;\nusing pii = pair&lt;int, int&gt;;\nconstexpr int mod = 998244353;\n\nconstexpr int N = int(2e5);\nll fac[N + 1], inv[N + 1];\n\nll ksm(ll a, ll b)\n{\n    ll res = 1;\n    while (b) {\n        if (b &amp; 1)\n            res = res * a % mod;\n        a = a * a % mod, b &gt;&gt;= 1;\n    }\n    return res;\n}\nll C(ll n, ll m) { return fac[n] * inv[m] % mod * inv[n - m] % mod; }\n\nvoid solve()\n{\n    int n, k;\n    cin &gt;&gt; n &gt;&gt; k;\n    string s;\n    cin &gt;&gt; s;\n    if(count(s.begin(), s.end(), '1') &lt; k){\n        cout &lt;&lt; \"0\\n\";\n        return;\n    }\n    s = \" \" + s;\n    vector&lt;int&gt; pos(n + 1, 1), pre(n + 1);\n    queue&lt;int&gt; q;\n    int cnt = 0;\n    for (int i = 1, j = 1; i &lt;= n; i++) {\n        pre[i] = pre[i - 1] + (s[i] == '1');\n        if (s[i] == '1')\n            cnt++;\n        while (cnt &gt; k)\n            if (s[j++] == '1')\n                cnt--;\n        if (cnt &lt; k)\n            pos[i] = 1;\n        else\n            pos[i] = j;\n    }\n    vector&lt;ll&gt; dp(n + 1);\n    dp[0] = 1;\n    for (int i = 1; i &lt;= n; i++) {\n        // cerr &lt;&lt; pos[i] &lt;&lt; \" \\n\"[i == n];\n        dp[i] = dp[i - 1];\n        // if (pos[i] == 0)\n        //     continue;\n        if (s[i] == '1') {\n            if (i - pos[i] + 1 == pre[i] - pre[pos[i] - 1])\n                continue;\n            // \u53cd\u6b63\u90fd\u662f\u770b\u4e2d\u95f4\u7684 0 \u7684\u4e2a\u6570\uff0c\u8981\u653e\u4e24\u4e2a 1\n            dp[i] = (dp[i] + C(i - pos[i], pre[i] - pre[pos[i] - 1])) % mod;\n        } else {\n            // \u4e2d\u95f4\u8981\u653e\u591a\u5c11\u4e2a0\n            if(pre[i] - pre[pos[i] - 1])\n                dp[i] = (dp[i] + C(i - pos[i], pre[i] - pre[pos[i] - 1] - 1)) % mod;\n        }\n    }\n    dp[n] = (dp[n] + mod) % mod;\n    cout &lt;&lt; dp[n] &lt;&lt; '\\n';\n}\nint main()\n{\n    // freopen(\"1.in\", \"r\", stdin);\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr), cout.tie(nullptr);\n    fac[0] = 1;\n    for (int i = 1; i &lt;= N; i++)\n        fac[i] = (ll)fac[i - 1] * i % mod;\n    inv[N] = ksm(fac[N], mod - 2);\n    for (int i = N - 1; i &gt;= 0; i--)\n        inv[i] = (ll)inv[i + 1] * (i + 1) % mod;\n\n    int t;\n    cin &gt;&gt; t;\n    while (t--)\n        solve();\n    return 0;\n}\n</code></pre>"},{"location":"XCPC/Invitational/25Nanchang/#k","title":"K","text":"<p>\u611f\u89c9\u8fd8\u662f\u6709\u70b9\u96be\u60f3\u7684\u3002\u5c3d\u7ba1\u662f\u7b2c\u4e8c\u4e2a ac \u7684\u9898\u76ee\u3002</p> <p>\u6bcf\u4e2a\u4eba\u601d\u8def\u90fd\u4e0d\u4e00\u6837\u5427\uff0c\u8bf4\u8bf4\u6211\u4eec\u7684\u3002</p> <p>\u9996\u5148\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u80af\u5b9a\u6700\u591a\u4e5f\u5c31\u64cd\u4f5c \\(3\\) \u6b21\uff0c\u6240\u4ee5\u6700\u591a\u7684\u64cd\u4f5c\u6b21\u6570\u9876\u591a\u4e5f\u5c31\u662f \\(3n\\) \u5de6\u53f3\u3002\u53ef\u4ee5\u76f4\u63a5\u679a\u4e3e\u8fdb\u884c\u4e86\u591a\u5c11\u6b21\u64cd\u4f5c\u3002</p> <p>\u6211\u4eec\u60f3\u6cd5\u662f\u5047\u8bbe\u8fdb\u884c\u7684\u64cd\u4f5c\u5168\u662f\u4fee\u6539\u6240\u6709\u6570\u5b57\uff0c\u90a3\u4e48\u64cd\u4f5c\u540e\u4e5f\u4f1a\u6709 \\(1\\)\uff0c \\(2\\), \\(3\\)\uff0c\u8fd9\u4e9b\u6570\u5b57\uff0c\u90a3\u4e48\u7ed9\u4f1a\u53d8\u6210 \\(1\\) \u7684\u6570\u5b57\u8fdb\u884c\u4e00\u6b21\u53e6\u4e00\u79cd\u64cd\u4f5c\u5e76\u5c11\u4e00\u6b21\u5168\u5c40\u64cd\u4f5c\uff0c\u90a3\u4e48\u5b83\u80af\u5b9a\u4f1a\u53d8\u6210 \\(0\\)\u3002\u6240\u4ee5\u82e5\u64cd\u4f5c\u540e\u6240\u6709\u6570\u5b57\u7684\u548c\u5c0f\u4e8e\u7b49\u4e8e\u64cd\u4f5c\u6b21\u6570\uff0c\u5c31\u53ef\u4ee5\u4f7f\u5f97\u6240\u6709\u6570\u5b57\u53d8\u6210 \\(0\\)\u3002</p> <p>\u611f\u89c9\u662f\u4e0d\u662f\u53ef\u80fd\u6709\u70b9\u4e0d\u592a\u5bf9\uff0c\u53ea\u662f\u521a\u597d\u5bf9\u4e86 \ud83d\ude18\ud83d\ude18\ud83d\ude18\u3002\u4e0d\u4e0d\u4e0d\uff0c\u597d\u50cf\u6ca1\u95ee\u9898\uff0c\u56e0\u4e3a\u4f60\u4e0d\u540c\u64cd\u4f5c\u6b21\u6570\u7684\u8bdd\uff0c\u6bcf\u4e2a\u6570\u5b57\u7684\u79cd\u7c7b\u80af\u5b9a\u90fd\u4e0d\u4e00\u6837\uff0c\u8fd9\u6837\u80af\u5b9a\u662f\u5bf9\u7684\u3002\u6211\u8fd9\u79cd\u601d\u8def\u5e94\u8be5\u662f\u6ca1\u529e\u6cd5 O(\\(1\\)) \u7684\uff0c\u4e5f\u6ca1\u529e\u6cd5\u4e8c\u5206\uff0c\u53cd\u6b63\u6b21\u6570\u4e0d\u591a\u4e3a\u5565\u4e0d\u76f4\u63a5\u5faa\u73af\u5462\u3002</p> <pre><code>//\n// Created by ilyha on 25-5-20.\n//\n#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint main() {\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr), cout.tie(nullptr);\n    int n;\n    cin&gt;&gt;n;\n    int cnt[]{0, 0, 0, 0};\n    for (int i = 0; i &lt; n; i++) {\n        int x; cin &gt;&gt; x;\n        cnt[x]++;\n    }\n    if (cnt[0] == n) {\n        cout &lt;&lt; \"0\\n\";\n        return 0;\n    }\n    for (int i = 1; ; i++) {\n        int tnc[4];\n        for (int j = 0; j &lt; 4; j++) {\n            tnc[(j + i) % 4] = cnt[j];\n        }\n        int sum = 0;\n        for (int j = 0; j &lt; 4; j++) {\n            sum += tnc[j] * j;\n        }\n        if (sum &lt;= i) {\n            cout &lt;&lt; i &lt;&lt; '\\n';\n            return 0;\n        }\n    }\n    return 0;\n}\n</code></pre>"},{"location":"XCPC/Invitational/25Nanchang/#m","title":"M","text":"<p>\u968f\u4fbf\u63a8\u4e00\u4e0b\u5c31\u51fa\u6765\u4e86\u3002</p> <p>\u987a\u4fbf\u4e00\u63d0\uff0c\u8fd9\u9898\u8d21\u732e\u4e86\u6211\u4eec\u672c\u573a\u552f\u4e00\u4e00\u6b21\u7f5a\u65f6\u3002\u3002\u597d\u50cf\u662f\u6211\u628a\u671d\u4e0a\u548c\u671d\u4e0b\u641e\u53cd\u4e86\uff0c\u7136\u540e\u6d4b\u4e86\u633a\u591a\u6837\u4f8b\u6211\u4eec\u6ca1\u548b\u770b\u51fa\u6765\uff0c\u4e8e\u662f\u4ea4\u4e86\uff0c\u7136\u540e\u60f3\u8d77\u6765\u4e86\u6539\u4e86\u8fc7\u4e86\u3002</p> <p>\u5982\u679c\u80fd\u60f3\u5230\u7b2c\u4e00\u5806\u653e \\(k\\) \u4e2a\uff0c\u7b2c\u4e8c\u5806\u653e \\(n - k\\) \u4e2a\uff0c\u5c31\u6bd4\u8f83\u5bb9\u6613\u63a8\u51fa\u6765\u4e86\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint main() {\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr), cout.tie(nullptr);\n    int n, k;\n    cin &gt;&gt; n &gt;&gt; k;\n    /*\n     * \u5047\u8bbe\u524d\u9762\u662f x \u4e2a\u671d\u4e0b\u7684\uff0ck - x \u4e2a\u671d\u4e0a\n     * \u540e\u9762\u662f k - x \u4e2a\u671d\u4e0a\u7684\n     */\n    cout &lt;&lt; string(k, '1') + string(n - k, '4') &lt;&lt; '\\n';\n    return 0;\n}\n</code></pre>"},{"location":"XCPC/Lanqiao/2025/National/CPP_B/","title":"2025 \u84dd\u6865\u676f\u56fd\u8d5bB\u7ec4 C/C++","text":"<p>2025-06-15</p> <p>\u8fd9\u6b21\u6765\u6b66\u6c49\u8f6f\u4ef6\u804c\u4e1a\u6280\u672f\u5b66\u9662\u6bd4\u8d5b\u7684\uff0c\u4ed6\u4eec\u5b66\u6821\u8fd8\u633a\u5927\u7684\uff0c\u800c\u4e14\u7535\u8111\u4e5f\u8fd8\u884c\uff0c\u8fd8\u53d1\u4e86\u5403\u7684\uff0c\u4e24\u4e2a\u5c0f\u9762\u5305\uff0c\u8fd8\u6709\u77ff\u6cc9\u6c34\u9700\u8981\u53ef\u4ee5\u62ff\u3002\u786e\u5b9e\u633a\u4e0d\u9519\u554a\u3002</p> <p>\u53bb\u5e74\u53bb\u6e56\u5317\u6587\u7406\u6bd4\u8d5b\u7684\uff0c\u4e5f\u633a\u4e0d\u9519\uff0c\u4f46\u662f\u662f win7 \u7cfb\u7edf\uff0ccmd\u90fd\u4e0d\u80fd\u7c98\u8d34\u7684\u3002\u3002\u3002\u4e5f\u53ef\u80fd\u53ef\u4ee5\uff0c\u4f46\u662f\u662f\u522b\u7684\u5feb\u6377\u952e\u3002\u3002\u3002\u53cd\u6b63\u5f88\u96be\u53d7\u5f53\u65f6\uff0c\u800c\u4e14\u6211\u611f\u89c9\u5f53\u65f6\u5e94\u8be5\u5199\u5f97\u4e5f\u5f88\u70c2\uff0c\u8fd9\u6b21\u4e5f\u662f\u3002</p> <p></p> <p>\u96be\u5ea6\u653e\u6d1b\u8c37\u4e24\u4e2a\u84dd\u4e00\u4e2a\u7eff\u5176\u4ed6\u5168\u662f\u9ec4\u3002\u3002\u3002\u4f46\u662f\u62113\u4e2a\u9ec4\u6ca1\u5199\u51fa\u6765\uff0c\u8fd9\u4e5f\u592a\u83dc\u4e86\uff0c\u8fd8\u6709\u4e00\u4e2a\u662f\u5199\u8fc7\u4e00\u6a21\u4e00\u6837\u7684\u539f\u3002\u53e6\u4e00\u4e2a\u7eff\u4e00\u773c\u6570\u4f4dDP\uff0c\u4ee5\u524d\u57fa\u672c\u4e00\u9898\u6ca1\u5199\u8fc7\uff0c\u4f46\u662f\u6709\u7c7b\u4f3c\u7684\u4e5f\u89c1\u8fc7\uff0c\u770b\u4e86\u89c6\u9891\u4f46\u6ca1\u5199\u5427\uff0c\u7136\u540e\u82b1\u4e86\u633a\u4e45\u5199\u51fa\u6765\u4e86\uff0c\u4e5f\u52c9\u5f3a\u8fd8\u884c\u4e86\u3002</p> <p></p>"},{"location":"XCPC/Lanqiao/2025/National/CPP_B/#a","title":"A","text":"<p>\u8fd9\u4e2a\u5f88\u7b80\u5355\u4e86\uff0c\u6bd5\u7adf\u586b\u7a7a\u9898\uff0c\u6253\u8868\u5c31\u884c\uff0c\u5f88\u5bb9\u6613\u5199\u51fa \\(2024 ^ 3\\) \u7684 dp\uff0c\u51e0\u79d2\u5c31\u80fd\u51fa\u7ed3\u679c\u3002\u628aLCM\u5b58\u6570\u7ec4\u91cc\u4f1a\u66f4\u5feb\uff0c\u8fd9\u4e2a\u8fd0\u7b97\u4e5f\u633a\u8d39\u65f6\u95f4\u7684\uff0c\u867d\u7136\u662f log \u590d\u6742\u5ea6\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nusing ll = long long;\n\nconstexpr int mod = int(1e9) + 7;\nll lcm(ll a, ll b)\n{\n    return a / __gcd(a, b) * b;\n}\nint LCM[2026][2026];\nint main()\n{\n    for(int i = 1; i &lt;= 2025; i++)\n        for(int j = 1; j &lt;= 2025; j++)\n            LCM[i][j] = lcm(i, j);\n    vector&lt;int&gt; dp(2026, 1);\n    for(int k = 2; k &lt;= 2025; k++){\n        vector&lt;int&gt; ndp(2026);\n        for(int x = 1; x &lt;= 2025; x++){\n            for(int y = 1; y &lt;= 2025; y++){\n                if(LCM[x][y] == 2025)\n                    ndp[y] = (ndp[y] + dp[x]) % mod;\n            }\n        }\n        dp = ndp;\n    }\n    ll ans = 0;\n    for(int i = 1; i &lt;= 2025; i++)\n        ans = (ans + dp[i]) % mod;\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n    cout &lt;&lt; 385787853 &lt;&lt; '\\n';\n    return 0;\n}\n</code></pre>"},{"location":"XCPC/Lanqiao/2025/National/CPP_B/#c","title":"C","text":"<p>\u624b\u63a8\u4e00\u4e0b\uff0c\u53d1\u73b0\u4ed6\u90a3\u4e2a\u64cd\u4f5c\uff0c\u76f8\u5f53\u4e8e\u662f\u628a\u6570\u7ec4\u5faa\u73af\u5de6\u79fb 2 \u4f4d\u3002</p> <p>\u800c\u4e00\u5f00\u59cb\u662f\u5de6\u79fb\u4e86 \\(k\\) \u4f4d\uff0c\u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u8981\u4f7f\u5f97\u79fb\u52a8\u7684\u603b\u4f4d\u6570\u662f \\(n\\) \u7684\u500d\u6570\u624d\u53ef\u4ee5\u8fd8\u539f\u5230\u6700\u521d\u7684\u72b6\u6001\u3002</p> <p>\u7a0d\u5fae\u5206\u7c7b\u8ba8\u8bba\u4e00\u4e0b\uff0c\u82e5 \\(k\\) \u4e3a\u5947\u6570\uff0c\u5219\u82e5 \\(n\\) \u4e3a\u5947\u6570\uff0c\u90a3\u6700\u7ec8 \\(n\\) \u6b21\u79fb\u52a8\u5c31\u884c\uff0c\u5426\u5219\u5dee\u503c\u59cb\u7ec8\u4e3a\u5947\u6570\uff0c\u65e0\u6cd5\u5230\u8fbe\uff1b\u82e5 \\(k\\) \u4e3a\u5076\u6570\uff0c\u5219\u8981\u4e48\u6700\u7ec8\u662f\u79fb\u52a8 \\(n\\) \u4f4d\uff0c\u8981\u4e48\u662f \\(2n\\) \u3002</p> <p>\u5176\u5b9e\u6bd4\u8d5b\u65f6\u548c\u521a\u624d\uff0c\u6211\u90fd\u6709\u70b9\u4e0d\u592a\u76f8\u4fe1\u8fd9\u662f\u5bf9\u7684\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nusing ll = long long;\n\nvoid solve()\n{\n    int n, k;\n    cin &gt;&gt; n &gt;&gt; k;\n    k %= n;\n    int ans = INT_MAX;\n    if(k == 0) ans = min(ans, 0);\n    if((n - k) % 2 == 0) ans = min(ans, (n - k) / 2);\n    if((2 * n - k) % 2 == 0) ans = min(ans, (2 * n - k) / 2);\n    if(ans == INT_MAX) ans = -1;\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr), cout.tie(nullptr);\n    int T;\n    cin &gt;&gt; T;\n    while(T--)\n        solve();\n    return 0;\n}\n</code></pre>"},{"location":"XCPC/Lanqiao/2025/National/CPP_B/#d","title":"D","text":"<p>\u53c8\u662f\u5f88\u7b80\u5355\u7684 dp\uff0c\u5bf9\u4e8e\u5927\u4e8e \\(2\\) \u7684 \\(i\\)\uff0c \\(s_i\\) \u7684\u7b54\u6848\u4f1a\u7b49\u4e8e \\(s_{i-2}\\) \u7684\u7b54\u6848 + \\(s_{i - 1}\\) \u7684\u7b54\u6848 + \\(s_{i-2}\\) \u4e2d\u7684 \\(1\\) \u7684\u6570\u91cf * \\(s_{i - 1}\\) \u4e2d\u7684 \\(0\\) \u7684\u6570\u91cf\u3002</p> <p>\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u9012\u63a8\u5f97\u5230\u7b54\u6848\uff0c\u8bb0\u5f97\u8981\u9884\u5904\u7406\uff0c\u5426\u5219 O(Tn) \u4f1a T \u7684\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nusing ll = long long;\n\nconstexpr int N = int(1e5) + 10;\nconstexpr int mod = int(1e9) + 7;\n\nint zeros[N], ones[N], ans[N];\n\nvoid solve()\n{\n    int n;\n    cin &gt;&gt; n;\n    cout &lt;&lt; ans[n] &lt;&lt; '\\n';\n}\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr), cout.tie(nullptr);\n    // 0 1\n    zeros[1] = 1, ones[2] = 1;\n    for(int i = 3; i &lt; N; i++){\n        zeros[i] = (zeros[i - 1] + zeros[i - 2]) % mod;\n        ones[i] = (ones[i - 1] + ones[i - 2]) % mod;\n        ans[i] = (ans[i - 1] + ans[i - 2]) % mod;\n        ans[i] = (ans[i] + 1LL * ones[i - 2] * zeros[i - 1] % mod) % mod;\n    }\n    int T;\n    cin &gt;&gt; T;\n    while(T--)\n        solve();\n    return 0;\n}\n</code></pre>"},{"location":"XCPC/Lanqiao/2025/National/CPP_B/#f","title":"F","text":"<p>\u4e00\u773c\u5c31\u662f\u6570\u4f4dDP\u5427\uff0c\u5c31\u7b97\u6211\u4e0d\u4f1a\uff0c\u4e5f\u80fd\u770b\u51fa\u6765\u65f6\u662f\u6570\u4f4dDP\u3002\u3002\u3002\u4f46\u662f\u5176\u5b9e\u6570\u4f4dDP\u57fa\u7840\u7684\u9898\u76ee\u5e76\u4e0d\u662f\u5f88\u96be\u3002</p> <p>\u6211\u4eec\u53ea\u8981\u80fd\u7b97\u51fa \\([1, l]\\) \u5185\u6ee1\u8db3\u6761\u4ef6\u7684\u6570\u5b57\u7684\u6570\u91cf\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7\u4e8c\u5206\u6c42\u51fa\u6700\u5c0f\u7684\u4f7f\u5f97\u6570\u91cf\u5927\u4e8e\u7b49\u4e8e \\(n\\) \u7684\u6570\u5b57\u662f\u591a\u5c11\u3002</p> <p>\u8fd9\u4e2a\u5176\u5b9e\u4e5f\u4e0d\u96be\u6c42\uff0c\u628a\u4f4d\u6570\u5c0f\u4e8e \\(l\\) \u7684\u6570\u5b57\u52a0\u4e0a\uff0c\u7136\u540e\u6bcf\u4e00\u4f4d\u662f\u5426\u8d34\u7740\u8fb9\u754c\u53bb\u53d6\uff0c\u5982\u679c\u53d6\u4e0d\u5230\u4e0a\u9650\uff0c\u5219\u540e\u9762\u7684\u4f4d\u90fd\u53ef\u4ee5\u968f\u4fbf\u53bb\u53d6\u4e86\uff0c\u56e0\u4e3a\u65e0\u8bba\u5982\u4f55\u90fd\u4e0d\u4f1a\u5927\u4e8e \\(l\\)\u3002\u8bb0\u5f97\u5982\u679c \\(l\\) \u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684\u6570\u5b57\uff0c\u5219\u7b54\u6848\u8981 + 1\uff0c\u676d\u7535\u6625\u5b63\u8d5b\u6709\u4e2a\u9898\u76ee\u8ddf\u8fd9\u5dee\u4e0d\u591a\uff0c\u662f\u4e00\u4e2a\u5f02\u6216\u7684\u9898\u76ee\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nusing ll = long long;\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr), cout.tie(nullptr);\n    vector&lt;ll&gt; f(18);\n    f[0] = 1;\n    for(int i = 1; i &lt;= 17; i++)\n        f[i] = f[i - 1] * 5;\n    vector&lt;ll&gt; cnt(18);\n    cnt[2] = 45;\n    for(int i = 3; i &lt;= 17; i++)\n        cnt[i] = cnt[i - 1] * 5;\n\n    auto get = [&amp;](ll x){\n        ll res = 0;\n        string tmp = to_string(x);\n        int len = tmp.size();\n        vector&lt;int&gt; a(18);\n        for(int i = 0; i &lt; len; i++)\n            a[i] = tmp[i] - '0';\n        for(int i = 1; i &lt; len; i++)\n            res += cnt[i];\n        res += (a[0] - 1) * f[len - 1];\n        bool ok = true;\n        for(int i = 1, p = (a[0] &amp; 1) ^ 1; i &lt; len; i++, p ^= 1){\n            if((a[i] &amp; 1) != p){\n                int cnt = 0;\n                for(int j = p; j &lt; a[i]; j += 2)\n                    cnt++;\n                res += cnt * f[len - i -1];\n                ok = false;\n                break;\n            }else{\n                int cnt = 0;\n                for(int j = p; j &lt; a[i]; j += 2)\n                    cnt++;\n                res += cnt * f[len - i -1];\n            }\n        }\n        if(ok) res++;\n        return res;\n    };\n    ll n;\n    cin &gt;&gt; n;\n    ll lo = 9, hi = ll(1e17);\n    while(lo &lt; hi - 1){\n        ll mid = (lo + hi) &gt;&gt; 1;\n        if(get(mid) &gt;= n) hi = mid;\n        else lo = mid;\n    }\n    cout &lt;&lt; hi &lt;&lt; '\\n';\n    return 0;\n}\n</code></pre>"},{"location":"XCPC/Lanqiao/2025/National/CPP_B/#g","title":"G","text":"<p>\u8d81\u6211\u8fd8\u8bb0\u5f97\uff0c\u6254\u4e00\u4e0b\u539f\u9898\u94fe\u63a5\uff0cCF1883E\uff0c\u6d1b\u8c37P12642\u3002</p> <p>\u539f\u9898\uff0c\u6211\u8bb0\u5f97\u5199\u8fc7\u4e00\u6a21\u4e00\u6837\u7684\u9898\u76ee\uff0c\u4f46\u662f\u6ca1\u6709\u627e\u5230\u9898\u76ee\u94fe\u63a5\u3002\u3002\u3002\u56e0\u4e3a\u770b\u4e86\u9898\u89e3\u6240\u4ee5\u5370\u8c61\u5f88\u6df1\u523b\uff0c\u4e8e\u662f\u4e00\u4e0b\u5c31\u5199\u51fa\u6765\u4e86\uff0c\u4e0d\u7136\u5e94\u8be5\u8981\u591a\u60f3\u4e00\u4f1a\u3002</p> <p>\u6709\u7fa4\u53cb\u627e\u5230\u6d1b\u8c37\u539f\u9898\u94fe\u63a5\uff0c\u4f46\u6211\u8bb0\u5f97\u6211\u5199\u7684\u4e0d\u662f\u90a3\u4e2a\uff0c\u627e\u4e0d\u5230\u5f88\u96be\u53d7\u554a\u3002\u4f46\u662f\u53d1\u73b0CF\u4e5f\u6709\u4e2a\u539f\u9898\uff0c\u4f46\u662f\u6211\u4e5f\u6ca1\u5199\u8fc7\u3002\u3002\u3002\u90fd\u662f\u548c\u4eca\u5929\u6bd4\u8d5b\u8fd9\u4e2a\u9898\u76ee\u662f\u4e00\u6a21\u4e00\u6837\u7684\u3002</p> <p>\u6211\u4eec\u5c31\u662f\u53ef\u4ee5\u628a\u6bcf\u4e2a \\(a_i\\) \u90fd\u8ba9\u5b83\u521a\u597d\u5927\u4e8e\u7b49\u4e8e \\(a_{i-1}\\) \u4e14\u5c0f\u4e8e \\(2a_{i-1}\\)\uff0c\u5b83\u53ef\u80fd\u8981\u9664\u51e0\u6b21\uff0c\u56e0\u4e3a\u53ef\u80fd\u4e00\u5f00\u59cb\u5c31\u5f88\u5927\u3002\u90a3\u4e48\u8fd9\u4e4b\u540e\uff0c\\(a_{i - 1}\\) \u9700\u8981\u4e58\u591a\u5c11\u6b21\uff0c\\(a_i\\) \u5c31\u9700\u8981\u4e58\u591a\u5c11\u6b21\u3002</p> <p>\u597d\u60f3\u77e5\u9053\u5f53\u65f6\u5199\u7684\u90a3\u4e2a\u9898\u662f\u54ea\u4e2a\u9898\uff0c\u6d1b\u8c37\u9898\u89e3\u7684\u4ee3\u7801\u5c31\u662f\u8fd9\u6837\u5199\u7684\uff0c\u4e8e\u662f\u6211\u6bd4\u8d5b\u65f6\u6709\u70b9\u5370\u8c61\u5c31\u76f4\u63a5\u5199\u4e86\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nusing ll = long long;\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr), cout.tie(nullptr);\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;ll&gt; a(n + 1), b(n + 1);\n    for(int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; a[i];\n    ll ans = 0;\n    for(int i = 2; i &lt;= n; i++){\n        ll x = a[i];\n        while(x &gt;= a[i - 1] * 2){\n            x /= 2;\n            b[i]--;\n        }\n        while(x &lt; a[i - 1]){\n            x *= 2;\n            b[i]++;\n        }\n        b[i] += max(b[i - 1], 0LL);\n        b[i] = max(b[i], 0LL);\n        ans += b[i];\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n    return 0;\n}\n</code></pre>"},{"location":"XCPC/Lanqiao/2025/National/CPP_B/#summary","title":"summary","text":"<p>\u611f\u89c9\u5bf9\u4e8e\u6211\u6765\u8bf4\uff0c\u9ec4\u9898\u5199\u4e0d\u51fa\u6765\u6709\u70b9\u592a\u4e22\u4eba\u4e86\u54c8\u3002\u3002\u3002\u867d\u7136\u672c\u6765\u4e5f\u5f88\u83dc\uff0c\u4f46\u662f\u8fd9\u8fd9\u6709\u70b9\u62bd\u8c61\u4e86\u3002</p> <p>\u5176\u5b9e\u672c\u4eba\u5bf9\u4e8e\u81ea\u5df1\u6ca1\u6709\u5f88\u9ad8\u7684\u8981\u6c42\uff0c\u5199\u8fd9\u7bc7\u535a\u5ba2\u4e5f\u4ec5\u4ec5\u662f\u4e3a\u4e86\u8bb0\u5f55\u751f\u6d3b\u3002</p>"},{"location":"XCPC/Lanqiao/2025/Provincial/CPP_B/","title":"2025\u84dd\u6865\u676f\u7701\u8d5bB\u7ec4 C/C++","text":"<p>2025-04-12</p> <p>\u83dc\u9ebb\u4e86,\u4e24\u9053\u586b\u7a7a\u9898\u90fd\u6ca1\u5bf9,\u6700\u540e\u4e00\u9898\u90fd\u6ca1\u770b,\u63d0\u524d\u4e00\u5c0f\u65f6\u8d70\u3002\u3002\u3002\u670d\u4e86\u963f\uff0c\u8fd9\u4e2a\u6700\u540e\u4e00\u9898\u5f88\u7b80\u5355\u963f\uff0c\u6bd4\u8d77FG\u611f\u89c9\u7b80\u5355\u5f88\u591a\uff0c\u5f53\u65f6\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u591a\u770b\u4e00\u4f1a\u5462\uff1f\u4e3a\u4ec0\u4e48\u4e0d\u60f3\u60f3\u627e\u89c4\u5f8b\u5462\uff1f\u6211\u7684\u4e09\u767e\u5757...</p> <p></p>"},{"location":"XCPC/Lanqiao/2025/Provincial/CPP_B/#a","title":"A","text":"<p>\u6700\u77ed\u7684\u8ddd\u79bb\u5c31\u662f\u4e00\u4e2a\u534a\u5f84\u52a0\u4e0a\u4e00\u6bb5\u5f27\u957f\u3002\u4e3a\u4ec0\u4e48\u5199\u9519\u4e86\u5462\uff1f\u56e0\u4e3a\u6211\u4ee5\u4e3a\u53ea\u7528\u6c42\u65b9\u5f0f\u4e00\u79fb\u52a8\u7684\u8ddd\u79bb\u3002\u3002\u3002</p> <p>\u6c42\u89d2\u5ea6\u53ef\u4ee5\u7528 <code>atan2</code> , <code>acos</code> \u8fd9\u4e9b\u51fd\u6570\u3002</p> <pre><code>void ChatGptDeepSeek() // Date: 2025-04-12\n{                      // Time: 17:53:59 \n    double degree=atan2(666,233);\n    double r=sqrt(666*666+233*233);\n    cout&lt;&lt;r+degree*r&lt;&lt;'\\n';\n}\n</code></pre>"},{"location":"XCPC/Lanqiao/2025/Provincial/CPP_B/#b","title":"B","text":"<p>\u6ca1\u600e\u4e48\u8bc1\u660e\uff0c\u4f46\u662f\u63d0\u524d\u5728\u7fa4\u91cc\u770b\u5230\u6709\u4eba\u8bf4\u7b54\u6848\u662f \\(2^{1012}\\) .</p> <p>\u5e76\u4e0d\u592a\u60f3\u8bc1\u660e\u3002</p> <pre><code>import math\nprint(pow(2,1012,1000000007))\n</code></pre>"},{"location":"XCPC/Lanqiao/2025/Provincial/CPP_B/#c","title":"C","text":"<p>\u76f4\u63a5\u8f93\u51fa\u4e0d\u7b49\u4e8e \\(1\\) \u7684\u6570\u5b57\u7684\u6570\u91cf\u3002</p> <pre><code>n = int(input())\na = list(map(int,input().split()))\nans = 0\nfor i in a:\n    if i!=1:\n        ans+=1\nprint(ans)\n</code></pre>"},{"location":"XCPC/Lanqiao/2025/Provincial/CPP_B/#d","title":"D","text":"<p>\u76f4\u63a5\u5faa\u73af\u5c31\u884c\uff0c\u4e0d\u8d85\u8fc7 \\(\\log\\) \u6b21\u5c31\u4f1a\u4f7f\u5f97\u4e09\u4e2a\u6570\u5b57\u76f8\u540c\u4e86\u3002</p> <p>\u76f4\u63a5\u5199\u5faa\u73af\u7136\u540e\u8f93\u5165\u4e00\u4e9b\u6570\u636e\u627e\u89c4\u5f8b\uff0c\u7136\u540e\u53d1\u73b0\u5f88\u5feb\u5c31\u4f1a\u4e09\u4e2a\u6570\u5b57\u76f8\u7b49\u3002\u5c31\u7b97\u4e0d\u53d1\u73b0\u8fd9\u4e2a\uff0c\u60f3\u5199\u66b4\u529b\uff0c\u52a0\u4e2a break \u603b\u4e0d\u4f1a\u66f4\u5dee\u5427\u3002</p> <pre><code>void ChatGptDeepSeek() // Date: 2025-04-12\n{                      // Time: 16:52:51 \n    int a,b,c,k;\n    cin&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;k;\n    for(int i=1;i&lt;=k;i++){\n        int A=(b+c)/2,B=(a+c)/2,C=(a+b)/2;\n        if(A==a&amp;&amp;B==b&amp;&amp;C==c) break;\n        a=A,b=B,c=C;\n    }\n    cout&lt;&lt;a&lt;&lt;\" \"&lt;&lt;b&lt;&lt;\" \"&lt;&lt;c&lt;&lt;'\\n';\n}\n</code></pre>"},{"location":"XCPC/Lanqiao/2025/Provincial/CPP_B/#e","title":"E","text":"<p>\u5f88\u7ecf\u5178\u7684\u7b7e\u5230\u9898\u5427\uff0c\u4e00\u5b9a\u53ea\u4f1a\u53d6\u4e00\u4e2a\u5927\u5c0f\u8fde\u7eed\u7684\u533a\u95f4\uff0c\u5426\u5219\u7b54\u6848\u80af\u5b9a\u4f1a\u66f4\u5927\u3002</p> <p>\u6240\u4ee5\u6392\u5e8f\u540e\u904d\u5386\u6bcf\u8fde\u7eed\u7684 \\(m\\) \u4e2a\u6570\u5b57\u5c31\u884c\u3002</p> <pre><code>void ChatGptDeepSeek() // Date: 2025-04-12\n{                      // Time: 16:54:38 \n    int n,m;\n    cin&gt;&gt;n&gt;&gt;m;\n    vector&lt;long long&gt;a(n+1);\n    for(int i=1;i&lt;=n;i++)\n        cin&gt;&gt;a[i],a[i]*=a[i];\n    sort(a.begin()+1,a.end());\n    long long res=0;\n    for(int i=1;i&lt;m;i++)\n        res+=a[i+1]-a[i];\n    long long ans=res;\n    for(int i=m+1;i&lt;=n;i++){\n        res-=a[i-m+1]-a[i-m];\n        res+=a[i]-a[i-1];\n        ans=min(ans,res);\n    }\n    cout&lt;&lt;ans&lt;&lt;'\\n';\n}\n</code></pre>"},{"location":"XCPC/Lanqiao/2025/Provincial/CPP_B/#f","title":"F","text":"<p>\u5199\u4e86\u4e00\u5c0f\u65f6\u3002\u3002\u3002\u4e5f\u662f\u8003\u8651\u8fc7\u5f88\u591a\u65b9\u5f0f\uff0c\u6bd4\u5982 dfs \u4e4b\u7c7b\u7684\u3002\u540e\u6765\u60f3\u5230\u4e4b\u524d\u505a\u8fc7\u7684\u4e00\u4e2a CF \u9898\u76ee\uff0c\u4e5f\u662f\u540c\u6837\u7ed9\u4e24\u4e2a\u5b57\u7b26\u4e32\uff0c\u662f\u7528 DP \u5199\u7684\u3002CF2022C \uff0c\u8fd9\u8fd8\u67091800\u5462\uff0c\u4e0d\u8fc7\u8fd9\u4e2aCF\u9898\u786e\u5b9e\u6bd4\u84dd\u6865\u676f\u8fd9\u4e2a\u9898\u96be\u5f88\u591a\u5427\u3002</p> <p>\u90a3\u4e48\u8fd9\u4e2a\u9898\u4e3a\u4ec0\u4e48\u53ef\u4ee5 DP \u5462\uff1f\u8003\u8651\u4e00\u4e0b\u6bcf\u4e00\u5217\u7684\u4e24\u4e2a\u5b57\u7b26\uff0c\u603b\u5171\u53ea\u4f1a\u6709\u56db\u79cd\u60c5\u51b5\uff0c<code>..</code>, <code>.#</code>, <code>#.</code>, <code>##</code> \u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u8ba1\u7b97\u6bcf\u4e00\u5217\u53d8\u6210\u6bcf\u4e00\u79cd\u72b6\u6001\u6240\u9700\u8981\u7684\u6700\u5c0f\u82b1\u8d39\u3002</p> <p>\u6211\u4eec\u8981\u4f7f\u5f97\u524d\u9762\u5168\u90fd\u5408\u6cd5\uff0c\u6240\u4ee5\u5982\u679c\u8fd9\u4e00\u5217\u6709 <code>#</code> \uff0c \u90a3\u4e48\u524d\u4e00\u5217\u4e5f\u5fc5\u987b\u8981\u6709\u80fd\u548c\u8fd9\u4e00\u5217\u8fde\u7740\u7684 <code>#</code> \u3002\u5c31\u4e24\u4e2a\u5b57\u7b26\uff0c\u597d\u50cf\u4e0d\u7b97\u5565\u72b6\u538bDP\u3002\u3002\u6d1b\u8c37\u8bc4\u9ec4\u8272\u597d\u50cf\u786e\u5b9e\u6ca1\u95ee\u9898\u3002</p> <pre><code>constexpr int N = 1000010;\nint dp[N][4], a[4];\n\nvoid ChatGptDeepSeek() // Date: 2025-04-12\n{                      // Time: 16:57:08\n    string s[2];\n    cin &gt;&gt; s[0] &gt;&gt; s[1];\n    int n = s[0].size();\n    s[0] = \" \" + s[0];\n    s[1] = \" \" + s[1];\n    auto work = [&amp;](int i)\n    {\n        for (int j = 0; j &lt; 4; j++)\n        {\n            a[j] = 0;\n            int x = j &gt;&gt; 1 &amp; 1, y = j &amp; 1;\n            if (x)\n            {\n                if (s[0][i] == '.')\n                    a[j]++;\n            }\n            else\n            {\n                if (s[0][i] == '#')\n                {\n                    a[j] = -1;\n                    continue;\n                }\n            }\n            if (y)\n            {\n                if (s[1][i] == '.')\n                    a[j]++;\n            }\n            else\n            {\n                if (s[1][i] == '#')\n                {\n                    a[j] = -1;\n                    continue;\n                }\n            }\n        }\n    };\n    for (int i = 0; i &lt; 4; i++)\n    {\n        work(1);\n        dp[1][i] = a[i];\n    }\n    for (int i = 2; i &lt;= n; i++)\n    {\n        work(i);\n        for (int x = 0; x &lt; 4; x++)\n        {\n            if (a[x] == -1)\n                dp[i][x] = -1;\n            else\n                dp[i][x] = 1000000000;\n        }\n        for (int x = 0; x &lt; 4; x++)\n        {\n            if (dp[i - 1][x] == -1)\n                continue;\n            for (int y = 0; y &lt; 4; y++)\n            {\n                if (dp[i][y] == -1)\n                    continue;\n                if (x == 3 &amp;&amp; y)\n                    dp[i][y] = min(dp[i][y], dp[i - 1][x] + a[y]);\n                if (y == 3 &amp;&amp; x)\n                    dp[i][y] = min(dp[i][y], dp[i - 1][x] + a[y]);\n                if (x == y)\n                    dp[i][y] = min(dp[i][y], dp[i - 1][x] + a[y]);\n                if (y == 0)\n                    dp[i][y] = min(dp[i][y], dp[i - 1][x]);\n            }\n        }\n    }\n    int ans = 1000000000;\n    for (int i = 0; i &lt; 4; i++)\n    {\n        if (dp[n][i] != -1)\n            ans = min(ans, dp[n][i]);\n    }\n    if (ans == 0)\n    {\n        cout &lt;&lt; ans &lt;&lt; '\\n';\n        return;\n    }\n    for (int i = 1; i &lt;= n; i++)\n    {\n        if (s[0][i] == '#' || s[1][i] == '#')\n            break;\n        ans--;\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"XCPC/Lanqiao/2025/Provincial/CPP_B/#g","title":"G","text":"<p>\u6d1b\u8c37\u8bc4\u7684\u7eff\uff0c\u611f\u89c9\u5dee\u4e0d\u591a\u3002\u662f\u4e00\u4e2a\u6bd4\u8f83\u7ecf\u5178\u7684\u6811\u5f62\u80cc\u5305DP\u3002\u3002</p> <p>\u6bd4\u8d5b\u524d\u4e00\u5929\u521a\u597d\u5199\u4e86\u4e00\u9053\u7c7b\u4f3c\u7684\u9898\u76ee\uff0c\u4e5f\u662f\u5199\u7684\u7b2c\u4e00\u9898\u8fd9\u79cd\u9898\u3002\u3002\u3002\u662fP1273 \u6709\u7ebf\u7535\u89c6\u7f51 \uff0c\u6bd4\u84dd\u6865\u676f\u8fd9\u9898\u96be\u4e00\u4e9b\u5427\u3002</p> <p>\u8fd9\u9898\u5176\u5b9e\u5c31\u662f\u8bf4\u6bcf\u4e00\u4e2a\u7ed3\u70b9\u90fd\u6709\u4e00\u4e2a\u6700\u5927\u6743\u503c\uff0c\u6bcf\u4e2a\u70b9\u7684\u6743\u503c\u7b49\u4e8e\u5b83\u7684\u82e5\u5e72\u4e2a\u5b50\u7ed3\u70b9\u7684\u6743\u503c\u4e4b\u548c\uff0c\u4e14\u8fd9\u4e2a\u503c\u5fc5\u987b\u5c0f\u4e8e\u7b49\u4e8e\u4ed6\u7684\u6700\u5927\u6743\u503c\u3002\u8ba9\u6211\u4eec\u6c42\u6839\u8282\u70b9 \\(1\\) \u7684\u6700\u5927\u53ef\u80fd\u7684\u6743\u503c\u3002</p> <p>\u5c31\u662f\u5178\u578b\u7684\u80cc\u5305\u95ee\u9898\u4e86\u5427\u3002</p> <pre><code>using ll = long long;\nusing vi = vector&lt;int&gt;;\n\nint n;\nvi w;\nvector&lt;vi&gt; adj;\nbool dp[1024][1024];\nbool pd[1024][1024];\n\nint siz[1024];\n\nvoid dfs(int u, int pre)\n{\n    // cerr&lt;&lt;u&lt;&lt;\" \"&lt;&lt;pre&lt;&lt;'\\n';\n    for (int i = 0; i &lt; adj[u].size(); i++)\n    {\n        int v = adj[u][i];\n        // cerr&lt;&lt;v&lt;&lt;'\\n';\n        if (v == pre)\n            continue;\n        dfs(v, u);\n        for (int x = 0; x &lt;= w[u]; x++)\n        {\n            // if (dp[u][x] == false)\n            //     continue;\n            for (int y = 0; x + y &lt;= w[u] &amp;&amp; y &lt;= w[v]; y++)\n            {\n                if (dp[u][x] &amp;&amp; dp[v][y])\n                {\n                    pd[u][x + y] = true;\n                }\n            }\n        }\n        for (int x = 0; x &lt;= w[u]; x++)\n            dp[u][x] = pd[u][x];\n    }\n}\nvoid dfs1(int u, int pre)\n{\n    for (int i = 0; i &lt; adj[u].size(); i++)\n    {\n        int v = adj[u][i];\n        if (v == pre)\n            continue;\n        siz[u]++;\n        dfs1(v, u);\n    }\n}\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    cout.tie(0);\n    cin &gt;&gt; n;\n    w = vector&lt;int&gt;(n + 1);\n    adj = vector&lt;vi&gt;(n + 1, vi());\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; w[i];\n    for (int i = 1; i &lt; n; i++)\n    {\n        int u, v;\n        cin &gt;&gt; u &gt;&gt; v;\n        adj[u].push_back(v);\n        adj[v].push_back(u);\n    }\n    dfs1(1, 0);\n    for (int i = 1; i &lt;= n; i++)\n    {\n        if (siz[i] == 0)\n        {\n            dp[i][w[i]] = true;\n            pd[i][w[i]] = true;\n        }\n        dp[i][0] = true;\n        pd[i][0] = true;\n    }\n    dfs(1, 0);\n    for (int i = w[1]; i &gt;= 0; i--)\n    {\n        if (dp[1][i])\n        {\n            cout &lt;&lt; i &lt;&lt; '\\n';\n            return 0;\n        }\n    }\n    return 0;\n}\n</code></pre>"},{"location":"XCPC/Lanqiao/2025/Provincial/CPP_B/#h","title":"H","text":"<p>\u4ec0\u4e48\u9b3c\uff0c\u8fd9\u9898\u5176\u5b9e\u6bd4\u4e0a\u4e24\u9898\u90fd\u7b80\u5355\u5427\uff0c\u8d5b\u65f6\u611f\u89c9\u4e0d\u592a\u60f3\u770b\u4e86\uff0c\u611f\u89c9\u4e0d\u592a\u597d\u505a\uff0c\u5c31\u53bb\u5403\u996d\u4e86\u3002\u3002\u3002\u4e00\u5b9a\u662f\u56e0\u4e3a\u65e9\u9910\u5c31\u5403\u4e86\u4e24\u4e2a\u5305\u5b50\u6ca1\u72b6\u6001\u5bfc\u81f4\u7684\u3002</p> <p>\u56e0\u4e3a\u52a0\u6cd5\u51cf\u6cd5\u662f\u4f1a\u62b5\u6d88\u7684\uff0c\u6240\u4ee5\u6700\u540e\u53ea\u4f1a\u7559\u4e0b\u82e5\u5e72\u4e2a\u5f02\u6216\u7684\u524d\u7f00\uff0c\u4f8b\u5982 \\(a_1+()\\) \u4f1a\u548c \\(a_1-()\\) \u62b5\u6d88\uff0c\u62ec\u53f7\u7684\u6570\u91cf\u662f \\(3^{\u5269\u4e0b\u7b26\u53f7\u6570\u91cf}\\) \uff0c\u6240\u4ee5\u5c31\u5199\u51fa\u6765\u4e86\u3002</p> <p>\u518d\u52a0\u4e0a\u4e00\u4e2a\u5168\u90e8\u7684\u5f02\u6216\u548c\u3002</p> <pre><code>constexpr int mod = int(1e9) + 7;\nll ksm(ll a, ll b)\n{\n    ll res = 1;\n    while (b)\n    {\n        if (b &amp; 1)\n            res = res * a % mod;\n        a = a * a % mod;\n        b &gt;&gt;= 1;\n    }\n    return res;\n}\nvoid ChatGptDeepSeek() // Date: 2025-04-15\n{                      // Time: 00:14:11\n    int n;\n    cin &gt;&gt; n;\n    ll ans = 0, s = 0;\n    vector&lt;int&gt; a(n + 1);\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; a[i];\n    s = 0;\n    for (int i = 1; i &lt; n; i++)\n        s ^= a[i], ans = (ans + 2 * ksm(3, n - i - 1) * s % mod) % mod;\n    s^=a[n];\n    ans = (ans + s) % mod;\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"XCPC/Others/Baozii_Cup2/","title":"\u7b2c\u4e8c\u5c4a\u5305\u5b50\u676f","text":"<p>2025-05-11</p> <p>gym: https://codeforces.com/gym/105883</p> <p>A \u548c K \u4e4b\u540e\u518d\u6765\u8865\u3002</p>"},{"location":"XCPC/Others/Baozii_Cup2/#e","title":"E","text":"<p>\u633a\u7b80\u5355\u7684\uff0c \u76f4\u63a5\u6a21\u62df\u5c31\u884c\uff0c \u4f46\u662f\u8981\u5206\u89e3\u8d28\u56e0\u5b50\uff0c \u53ea\u5206\u89e3\u56e0\u5b50\u662f\u4f1a\u8d85\u65f6\u7684\uff0c \u8d28\u56e0\u5b50\u6570\u91cf\u5f88\u5c11\uff0c \u5927\u6982 \\(\\log n\\)\uff0c \u4e0d\u80fd\u5acc\u9ebb\u70e6\uff0c \u4e00\u4e0b\u5c31\u5199\u5b8c\u4e86\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nusing pii = pair&lt;int, int&gt;;\nusing ll = long long;\n\nconstexpr int N = int(5e5) + 5;\nvector&lt;set&lt;pii&gt;&gt;st(N);\n\nint minp[N + 1];\n\nvoid solve()\n{\n    int n;\n    cin &gt;&gt; n;\n    auto Ins = [&amp;](int x, int y){\n        auto it = st[x].lower_bound({y, -1});\n        if(it == st[x].end() || (*it).first != y)\n            st[x].insert({y, 1});\n        else{\n            auto [u, v] = *it;\n            st[x].erase(it);\n            st[x].insert({y, v + 1});\n        }\n    };\n    auto Del = [&amp;](int x, int y){\n        auto it = st[x].lower_bound({y, -1});\n        auto [u, v] = *it;\n        st[x].erase(it);\n        if(v - 1)\n            st[x].insert({y, v - 1});\n    };\n    while(n--){\n        char op;\n        cin &gt;&gt; op;\n        if(op == '+'){\n            int x, y;\n            cin &gt;&gt; x &gt;&gt; y;\n            while(x != 1){\n                int p = minp[x];\n                while(x % p == 0)\n                    x /= p;\n                Ins(p, y);\n            }\n        }else if(op == '-'){\n            int x, y;\n            cin &gt;&gt; x &gt;&gt; y;\n            while(x != 1){\n                int p = minp[x];\n                while(x % p == 0)\n                    x /= p;\n                Del(p, y);\n            }\n        }else{\n            int k;\n            cin &gt;&gt; k;\n            int ans = 0;\n            while(k != 1){\n                int p = minp[k];\n                while(k % p == 0)\n                    k /= p;\n                if(st[p].size())\n                    ans = max(ans, (*st[p].rbegin()).first);\n            }\n            cout &lt;&lt; ans &lt;&lt; '\\n';\n        }\n    }\n}\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr), cout.tie(nullptr);\n    for(int i = 2; i &lt;= N; i++){\n        if(minp[i]) continue;\n        minp[i] = i;\n        if((ll)i * i &gt; N) continue;\n        for(int j = i * i; j &lt;= N; j += i)\n            minp[j] = i;\n    }\n    int T = 1;\n    // cin &gt;&gt; T;\n    while(T--)\n        solve();\n    return 0;\n}\n</code></pre>"},{"location":"XCPC/Others/Baozii_Cup2/#g","title":"G","text":"<p>\u611f\u89c9\u601d\u8def\u975e\u5e38\u7b80\u5355\uff0c \u4e5f\u786e\u5b9e\u975e\u5e38\u7b80\u5355\uff0c \u4f46\u662f\u6211\u4eec\u4e00\u76f4 WA\uff0c WA\u9ebb\u4e86\u3002\u3002\u3002\u7136\u540e\u6362 py \u7167\u7740\u91cd\u5199\u4f46\u662f\u8fc7\u4e86\u3002\u3002\u3002\u521a\u624d\u770b\u4e86\u4e0b\u624d\u53d1\u73b0\uff0c \u662f\u56e0\u4e3a\u6211\u6ca1\u6709\u8bb0\u6e05\u695a <code>long long</code> \u548c <code>unsigned long long</code> \u7684\u8303\u56f4\u3002\u3002\u3002</p> <p>\\(n\\) \u7684\u4e0a\u754c\u662f \\(2^{64} - 1\\)\uff0c \u6240\u4ee5\u6700\u591a\u4f1a\u6709 \\(64\\) \u4f4d\uff0c \u6211\u4eec\u53ef\u4ee5\u8fdb\u884c \\(63\\) \u6b21\u8be2\u95ee\uff0c \u90a3\u80af\u5b9a\u4e00\u4f4d\u4f4d\u987a\u7740\u95ee\u3002 \u6211\u4eec\u53ea\u95ee \\(2 ^ i\\) \u7684\u503c\uff0c \u5982\u679c \\(n\\) \u7684\u8fd9\u4e00\u4f4d\u4e3a \\(1\\)\uff0c \u90a3\u4e48\u7ed3\u679c\u80af\u5b9a\u4f1a\u662f\u5b9e\u9645\u7684 \\(1\\) \u7684\u6570\u91cf\u51cf\u4e00\uff0c \u5426\u5219\u5c31\u662f\u52a0\u4e00\u3002</p> <p>\u6240\u4ee5\u6211\u4eec\u628a\u9ad8\u7684 \\(63\\) \u4f4d\u90fd\u95ee\u5b8c\uff0c \u5982\u679c \\(n\\) \u8fd9 \\(63\\) \u4f4d\u91cc\u6709 \\(0\\) \u4e14\u6709 \\(1\\)\uff0c \u90a3\u4e48\u8fd9 \\(63\\) \u6b21\u8be2\u95ee\u7684\u7ed3\u679c\u4e00\u5b9a\u53ea\u6709\u4e24\u79cd\u503c\uff0c \u4e14\u5b83\u4eec\u76f8\u5dee \\(2\\)\u3002 \u5426\u5219\u8fd9\u4e9b\u4f4d\u80af\u5b9a\u5168 \\(0\\) \u6216\u8005\u5168 \\(1\\)\uff0c \u8fd9\u4e9b\u9700\u8981\u7279\u5224\u4e00\u4e0b\uff0c \u6ce8\u610f \\(64\\) \u4f4d\u5168 \\(1\\) \u662f <code>ULLONG_MAX</code>  \u6211\u4eec\u8fd9\u91cc\u4e4b\u524d\u672c\u6765\u6539\u8fc7\uff0c\uff0c\uff0c\u540e\u6765\u53c8\u6000\u7591\u81ea\u5df1\u4e86\u3002</p> <p>\u7136\u540e\u6211\u4eec\u95ee\u5b8c\u4e4b\u540e\u5c31\u53ef\u4ee5\u786e\u5b9a\u524d \\(63\\) \u4f4d\u7684\u60c5\u51b5\u4e86\uff0c \u6700\u540e\u4e00\u4f4d\u6211\u4eec\u53ea\u9700\u8981\u770b\u6211\u4eec\u5df2\u7ecf\u586b\u4e86\u7684 \\(1\\) \u7684\u6570\u91cf\u662f\u5426\u7b49\u4e8e \\(n\\) \u7684 \\(1\\) \u7684\u6570\u91cf\u3002</p> <p>py \u5176\u5b9e\u4e5f\u4e0d\u662f\u5f88\u719f\uff0c\uff0c\uff0c\u8fd9\u4e2astdout.flush() \u6211\u4e0d\u77e5\u9053\u5f97 import \u5565\uff0c \u7136\u540e\u641c\u4e86\u4e00\u4e0b\u624d\u77e5\u9053\u3002 \u8fd9\u56de\u77e5\u9053\u4e86\u3002</p> <pre><code>import sys\n\nfor _ in range(int(input())):\n    cnt = [0] * 64\n\n    for i in range(1, 64):\n        print(\"?\", pow(2,i))\n        sys.stdout.flush()\n        cnt[i] = int(input())\n\n    mx = 0\n    mn = 64\n\n    for i in range(1, 64):\n        mx = max(mx, cnt[i])\n        mn = min(mn, cnt[i])\n\n    ans = 0\n\n    if(mx == mn):\n        if mx == 1:\n            ans = 0\n        elif mx == 2:\n            ans = 1\n        else:\n            ans = pow(2, 64) - 1\n\n    else:\n        tnc = 0\n        for i in range(1, 64):\n            if cnt[i] == mn:\n                tnc += 1\n                ans += pow(2, i)\n\n        if tnc != mn + 1:\n            ans += 1\n\n    print(\"!\", ans)\n    sys.stdout.flush()\n</code></pre> <p>\u7136\u540e\u6bd4\u8d5b\u65f6\u6211\u90fd\u6000\u7591\u81ea\u5df1\u7f16\u8bd1\u5668\u6709\u95ee\u9898\u4e86\u3002\u3002\u3002 \u56e0\u4e3a\u6211\u5199 for \u5faa\u73af\uff0c \u5982\u679c\u53ea\u6709\u4e00\u884c\u6211\u5c31\u4e0d\u559c\u6b22\u6253\u62ec\u53f7\uff0c \u7136\u540e\u5f53\u65f6\u5199\u4e00\u4e2a for \u5faa\u73af\uff0c \u5fd8\u8bb0\u5220\u62ec\u53f7\u4e86\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nusing pii = pair&lt;int, int&gt;;\nusing ll = long long;\nusing ull = unsigned long long;\n\nint ask(ull x)\n{\n    cout &lt;&lt; \"? \" &lt;&lt; x &lt;&lt; endl;\n    cout.flush();\n    int res;\n    cin &gt;&gt; res;\n    return res;\n}\n\nvoid solve()\n{\n    ull ans = 0;\n    vector&lt;int&gt; cnt(64);\n    for(int i = 63; i &gt;= 1; i--){\n        cnt[i] = ask(1ull &lt;&lt; i);\n    }\n    int mx = *max_element(cnt.begin() + 1, cnt.end());\n    int mn = *min_element(cnt.begin() + 1, cnt.end());\n\n    if(mx == mn){\n        if(mx == 1) ans = 0;\n        else if(mx == 2) ans = 1; \n        else ans = ULLONG_MAX;\n    }else{\n        int tnc = 0;\n        for(int i = 63; i &gt;= 1; i--){\n            if(cnt[i] == mn){\n                tnc++;\n                ans |= 1ull &lt;&lt; i;\n            }\n        }\n        if(tnc != mn + 1) ans |= 1, tnc++;\n        assert(tnc == mx - 1);\n    }\n    cout &lt;&lt; \"! \" &lt;&lt; ans &lt;&lt; endl;\n    cout.flush();\n}\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr), cout.tie(nullptr);\n    int T = 1;\n    cin &gt;&gt; T;\n    while(T--){\n        solve();\n    }\n    return 0;\n}\n</code></pre>"},{"location":"XCPC/Others/Baozii_Cup2/#h","title":"H","text":"<p>\u7b2c\u4e00\u9053 AC \u7684\u9898\uff0c \u4f46\u662f\u56db\u5341\u591a\u5206\u949f\u624dAC \u4e14 WA\u4e24\u6b21\uff0c \u867d\u7136\u96be\u5ea6\u4e0d\u9ad8\u3002 \u961f\u53cb\u60f3\u51fa\u6765\u7684\uff0c \u592a\u5f3a\u3002</p> <p>\u611f\u89c9\u6211\u6784\u9020\u592a\u83dc\uff0c \u4e0d\u8fc7\u8fd9\u79cd\u53ea\u8981\u4e0d\u7740\u6025\u6162\u6162\u8bd5\uff0c \u57fa\u672c\u90fd\u80fd\u8bd5\u51fa\u6765\u7684\uff0c \u5f71\u54cd\u7684\u53ea\u662f\u65f6\u95f4\uff0c \u5982\u679c\u5199\u5f97\u592a\u6162\uff0c \u4f1a\u6ca1\u6709\u72b6\u6001\u548c\u65f6\u95f4\u5199\u540e\u9762\u7684\u9898\u76ee\u3002</p> <p>\u6784\u9020\u65b9\u6cd5\u6709\u5f88\u591a\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid solve()\n{\n    int n;\n    cin &gt;&gt; n;\n    if(n == 2){\n        cout &lt;&lt; \"-1\\n\";\n        return;\n    }\n    if(n == 4){\n        cout &lt;&lt; \"3 4 1 2\\n\";\n        return;\n    }\n    if(n &amp; 1){\n        for(int i = n; i &gt; n / 2 + 1; i--){\n            cout &lt;&lt; i &lt;&lt; \" \";\n        }\n        cout &lt;&lt; 1 &lt;&lt; ' ';\n        for(int i = 2; i &lt;= n / 2 + 1; i++)\n            cout &lt;&lt; i &lt;&lt;  \" \";\n        cout &lt;&lt; '\\n';\n    }else{\n        cout &lt;&lt; n &lt;&lt; \" \" &lt;&lt; n / 2 &lt;&lt; ' ';\n        for(int i = 1; i &lt; n / 2; i++)\n            cout &lt;&lt; i &lt;&lt; \" \";\n        for(int i = n - 1; i &gt; n / 2; i--)\n            cout &lt;&lt; i &lt;&lt; \" \";\n        cout &lt;&lt; \"\\n\";\n    }\n}\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr), cout.tie(nullptr);\n    int T;\n    cin &gt;&gt; T;\n    while(T--)\n        solve();\n    return 0;\n}\n</code></pre>"},{"location":"XCPC/Others/Baozii_Cup2/#i","title":"I","text":"<p>\u51fa\u9898\u4eba\u4ee5\u4e3a\u7684\u7b7e\u5230\u9898\uff0c \u4f46\u6700\u540e\u53ea\u6709\u51e0\u4e2a\u961f\u63d0\u4ea4\u4e86\u3002 \u7fa4\u53cb\u8fd8\u662f\u90fd\u592a\u5f3a\u4e86...</p> <p>\u867d\u7136\u521a\u624d\u770b\u4e86\u4e0b\uff0c \u611f\u89c9\u6700\u96be\u7684\u662f\u63a8\u51fa\u90a3\u4e2a\u516c\u5f0f\uff0c \u5c31\u662f\u77e5\u9053\u6b63\u65b9\u5f62\u7684\u4e24\u4e2a\u5bf9\u89d2\u7ebf\u7684\u9876\u70b9\u7684\u5750\u6807\uff0c \u600e\u4e48\u6c42\u5269\u4e0b\u7684\u4e24\u4e2a\u9876\u70b9\u7684\u5750\u6807\u3002\u3002\u3002\u6700\u667a\u6167\u7684\u4e00\u96c6\u3002</p> <p>\u4e00\u4e2a\u70b9\u7ed5\u4e00\u4e2a\u70b9\u65cb\u8f6c \\(90\\) \u5ea6\u7684\u8bdd\uff0c \u65b0\u7684\u5750\u6807\u5176\u5b9e\u662f\u53ef\u4ee5\u6c42\u51fa\u6765\u7684\u3002\u800c\u4e14\u8fd9\u4e2a\u9898\u8fd9\u91cc\uff0c \u4e5f\u53ef\u4ee5\u7528\u5411\u91cf\u6765\u6c42\u3002</p> <p>\u77e5\u9053\u6b63\u65b9\u5f62\u4e24\u4e2a\u5bf9\u89d2\u7684\u9876\u70b9 \\((x1, y1)\\)\uff0c \\((x2, y2)\\)\uff0c \u90a3\u4e48\u5269\u4e0b\u4e24\u4e2a\u70b9\u7684\u5750\u6807\u5c31\u662f \\((\\frac{x1+x2}{2}-\\frac{y1-y2}{2},\\frac{y1+y2}{2}+\\frac{x1-x2}{2})\\) \u548c \\((\\frac{x1+x2}{2}+\\frac{y1-y2}{2},\\frac{y1+y2}{2}-\\frac{x1-x2}{2})\\) \u3002</p> <p>\u6bd4\u8d5b\u5176\u5b9e\u6211\u4eec\u4e5f\u6ca1\u600e\u4e48\u8bfb\u8fd9\u9898\uff0c \u56e0\u4e3a\u786e\u5b9e\u6ca1\u5565\u4eba\u5f00\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nusing pii = pair&lt;int, int&gt;;\n#define fi first\n#define se second\n\nvoid solve()\n{\n    // \u53ea\u7528\u679a\u4e3e\u4e3b\u5bf9\u89d2\u7ebf\u7684\u4e24\u4e2a\u70b9\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;pii&gt; p(n);\n    for(int i = 0; i &lt; n; i++)\n        cin &gt;&gt; p[i].first &gt;&gt; p[i].second;\n    map&lt;pii, int&gt;mp;\n    for(int i = 0; i &lt; n; i++){\n        mp[p[i]] = i;\n    }\n    int ans = 0;\n    vector&lt;int&gt; cnt(n);\n    for(int i = 0; i &lt; n; i++){\n        auto [x1, y1] = p[i];\n        for(int j = i + 1; j &lt; n; j++){\n            auto [x2, y2] = p[j];\n            int x3 = (x1 + x2) - (y1 - y2);\n            int y3 = (y1 + y2) + (x1 - x2);\n            int x4 = (x1 + x2) + (y1 - y2);\n            int y4 = (y1 + y2) - (x1 - x2);\n            if((x3 &amp; 1) || (y3 &amp; 1) || (x4 &amp; 1) || (y4 &amp; 1)) continue;\n            x3 /= 2, y3 /= 2, x4 /= 2, y4 /= 2;\n            if(mp.contains({x3, y3}) &amp;&amp; mp.contains({x4, y4})){\n                // cerr &lt;&lt; format(\"{}, {}, {}, {}\", x1, y1, x2, y2) &lt;&lt; '\\n';\n                cnt[i]++, cnt[j]++;\n                cnt[mp[{x3, y3}]]++, cnt[mp[{x4, y4}]]++;\n                ans++;\n            }\n        }\n    }\n    // cerr &lt;&lt; ans &lt;&lt; '\\n';\n    // for(int i = 0; i &lt; n; i++)\n    //     cerr &lt;&lt; format(\"{}\", cnt[i]) &lt;&lt; \" \\n\"[i + 1 == n];\n    cout &lt;&lt; (ans - *min_element(cnt.begin(), cnt.end())) / 2 &lt;&lt; '\\n';\n}\nint main()\n{\n    // freopen(\"1.in\", \"r\", stdin);\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr), cout.tie(nullptr);\n    int T;\n    cin &gt;&gt; T;\n    while(T--)\n        solve();\n    return 0;\n}\n</code></pre>"},{"location":"XCPC/Others/Baozii_Cup2/#j","title":"J","text":"<p>\u633a\u7b80\u5355\uff0c \u5177\u6709\u5355\u8c03\u6027\uff0c \u53ef\u4ee5\u4e8c\u5206\uff0c \u67e5\u533a\u95f4\u6700\u5927\u503c\uff0c \u53ea\u80fd\u53bb\u6700\u5927\u503c\u7684\u5730\u65b9\u3002</p> <p>\u4e5f\u53ef\u4ee5\u5355\u8c03\u6808 \\(O(n)\\) \u5199\u3002 \u6211\u521a\u5f00\u59cb\u771f\u76f4\u63a5\u5199\u7ebf\u6bb5\u6811\u67e5\u533a\u95f4\u6700\u503c\u6765\u7740\u3002\u3002\u3002 \u4f46\u8fd9\u9898\u4e24\u4e2a log \u4f1a T\uff0c \u7136\u540e\u6539\u6210 ST \u8868\u8fc7\u4e86\u3002\u3002\u3002 \u4e0d\u5199 ST \u8868\u662f\u56e0\u4e3a\u5e73\u5e38\u6ca1\u548b\u7528\u8fc7\u4e0d\u719f\uff0c \u7ebf\u6bb5\u6811\u5199\u5f97\u6bd4\u8f83\u719f\u3002\u3002\u3002 \u50cf\u8fd9\u79cd\u4e5f\u662f\u5f97\u7ec3\u7ec3\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\n#define ls p &lt;&lt; 1\n#define rs p &lt;&lt; 1 | 1\n#define mi ((l + r) &gt;&gt; 1)\n\nconstexpr int N = int(1e6) + 10;\nint a[N], n, ST[N][25];\nvoid init()\n{\n    int p = log2(n);\n    for(int i = 1; i &lt;= n; i++)\n        ST[i][0] = a[i];\n    for(int k = 1; k &lt;= p; k++){\n        for(int s = 1; s + (1 &lt;&lt; k) &lt;= n + 1; s++){\n            ST[s][k] = max(ST[s][k - 1], ST[s + (1 &lt;&lt; (k - 1))][k - 1]);\n        }\n    } \n}\nint query(int L, int R)\n{\n    int k = __lg(R - L + 1);\n    return max(ST[L][k], ST[R - (1 &lt;&lt; k) + 1][k]);\n}\n// tr[N &lt;&lt; 2];\n// void build(int p, int l, int r)\n// {\n//     if(l == r){\n//         tr[p] = a[l];\n//         return;\n//     }\n//     build(ls, l, mi);\n//     build(rs, mi + 1, r);\n//     tr[p] = max(tr[ls], tr[rs]);\n// }\n// int query(int p, int l, int r, int lx, int rx)\n// {\n//     if(l &gt;= lx &amp;&amp; r &lt;= rx)\n//         return tr[p];\n//     int res = 0;\n//     if(lx &lt;= mi) res = max(res, query(ls, l, mi, lx, rx));\n//     if(rx &gt; mi) res = max(res, query(rs, mi + 1, r, lx, rx));\n//     return res;\n// }\n\n\nvoid solve()\n{\n    // int n;\n    cin &gt;&gt; n;\n    vector&lt;int&gt; idx(n + 1);\n    for(int i = 1; i &lt;= n; i++)\n        a[i] = i;\n    // shuffle(a + 1, a + 1 + n);\n    for(int i = 1; i &lt;= n; i++){\n        cin &gt;&gt; a[i];\n        idx[a[i]] = i;\n    }\n    // build(1, 1, n);\n    init();\n    if(n == 1){\n        cout &lt;&lt; \"0\\n\";\n        return;\n    }\n    int lo = 0, hi = n + 1;\n    auto check = [&amp;](int d){\n        vector&lt;bool&gt; ok(n + 1);\n        for(int i = idx[n]; i &gt;= idx[n] - d &amp;&amp; i &gt;= 1; i--)\n            ok[a[i]] = true;\n        for(int i = idx[n]; i &lt;= idx[n] + d &amp;&amp; i &lt;= n; i++)\n            ok[a[i]] = true;\n        for(int i = idx[n] - d - 1; i &gt;= 1; i--){\n            // int num = query(1, 1, n, max(i - d, 1), min(n, i + d));\n            int num = query(max(i - d, 1), min(n, i + d));\n            if(!ok[num]) return false;\n            ok[a[i]] = true;\n        }\n        for(int i = idx[n] + d + 1; i &lt;= n; i++){\n            // int num = query(1, 1, n, max(i - d, 1), min(n, i + d));\n            int num = query(max(i - d, 1), min(n, i + d));\n            if(!ok[num]) return false;\n            ok[a[i]] = true;\n        }\n        return true;\n    };\n    // check(1);\n    while(lo &lt; hi - 1){\n        int mid = (lo + hi) &gt;&gt; 1;\n        if(check(mid)) hi = mid;\n        else lo = mid;\n    }\n    cout &lt;&lt; hi &lt;&lt; '\\n';\n}\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr), cout.tie(nullptr);\n    int T;\n    cin &gt;&gt; T;\n    while(T--)\n        solve();\n    return 0;\n}\n</code></pre>"},{"location":"XCPC/Provincial/2023Henan/","title":"2023\u5e74\u7b2c\u4e94\u5c4a\u6cb3\u5357\u7701CCPC\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b","text":"<p>2025-04-05</p> <p>\u6bd4\u8d5b\u94fe\u63a5: https://codeforces.com/gym/104354</p> <p>\u603b\u7684\u6765\u8bf4\u8fd9\u4e00\u573a\u8fd8\u662f\u70c2\u5b8c\u4e86\u3002\u3002\u3002</p>"},{"location":"XCPC/Provincial/2023Henan/#a","title":"A","text":"<p>\u7b7e\u5230</p>"},{"location":"XCPC/Provincial/2023Henan/#f","title":"F","text":"<p>\u6700\u4f18\u7684\u80af\u5b9a\u662f\u9009\u62e9\u5927\u5c0f\u8fde\u7eed\u7684\u4e00\u6bb5\uff0c\u4e0d\u7136\u4f60\u603b\u662f\u53ef\u4ee5\u628a\u6700\u8fb9\u4e0a\u7684\u5f80\u4e2d\u95f4\u9009\uff0c\u53ef\u4ee5\u4f7f\u5f97\u7b54\u6848\u66f4\u5c0f\u3002</p> <pre><code>int main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.tie(nullptr);\n    int n, k;\n    cin &gt;&gt; n &gt;&gt; k;\n    vector&lt;ll&gt; a(n);\n    for (int i = 0; i &lt; n; i++)\n    {\n        cin &gt;&gt; a[i];\n    }\n    sort(a.begin(), a.end());\n    multiset&lt;int&gt; st;\n    for (int i = 1; i &lt; k; i++)\n    {\n        st.insert(a[i] - a[i - 1]);\n    }\n    ll ans = *st.begin() * (ll)(a[k - 1] - a[0]);\n    for (int i = k; i &lt; n; i++)\n    {\n        st.erase(st.find(a[i - k + 1] - a[i - k]));\n        st.insert(a[i] - a[i - 1]);\n        ans = min(ans, *st.begin() * (ll)(a[i] - a[i - k + 1]));\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n    return 0;\n}\n</code></pre>"},{"location":"XCPC/Provincial/2023Henan/#g","title":"G","text":"<p>\u989d\u3002\u3002\u3002\u51fa\u8fd9\u4e2a\u9898\u7684\u610f\u4e49\u662f\u4ec0\u4e48\u3002\u3002\u5199\u4e86\u4e00\u4e2a\u591a\u5c0f\u65f6\uff0c\u683c\u5f0f\u5316\u4e4b\u540e\u4e09\u767e\u591a\u884c\u3002\u3002\u3002</p> <p>\u540e\u9762\u53d1\u73b0\u5c0f\u7684 9 \u6253\u9519\u4e86\u3002</p> <pre><code>constexpr ll INF = 1e18;\n\nll ksm(__int128 x, __int128 y)\n{\n    __int128 res = 1;\n    while (y)\n    {\n        if (y &amp; 1)\n            res = res * x;\n        if (res &gt; INF || x &gt; INF)\n            return -1LL;\n        x = x * x;\n        y &gt;&gt;= 1;\n    }\n    return (ll)res;\n}\n\nvoid man()\n{\n    vector&lt;string&gt; ans(10, string(1, '.'));\n    auto Ins1 = [&amp;](int x)\n    {\n        for (int i = 0; i &lt; 10; i++)\n            ans[i] += string(8, '.');\n        int End = ans[0].size() - 2;\n        if (x == 0)\n        {\n            for (int i = 2; i &lt; 9; i++)\n            {\n                ans[i][End] = x + '0';\n                ans[i][End - 6] = x + '0';\n            }\n            for (int i = End; i &gt; End - 7; i--)\n            {\n                ans[2][i] = x + '0';\n                ans[8][i] = x + '0';\n            }\n        }\n        else if (x == 1)\n        {\n            for (int i = 2; i &lt; 9; i++)\n                ans[i][End] = x + '0';\n        }\n        else if (x == 2)\n        {\n            for (int i = End; i &gt; End - 7; i--)\n            {\n                ans[2][i] = x + '0';\n                ans[8][i] = x + '0';\n                ans[5][i] = x + '0';\n            }\n            ans[3][End] = ans[4][End] = x + '0';\n            ans[6][End - 6] = ans[7][End - 6] = x + '0';\n        }\n        else if (x == 3)\n        {\n            for (int i = End; i &gt; End - 7; i--)\n            {\n                ans[2][i] = x + '0';\n                ans[8][i] = x + '0';\n                ans[5][i] = x + '0';\n            }\n            ans[3][End] = ans[4][End] = x + '0';\n            ans[6][End] = ans[7][End] = x + '0';\n        }\n        else if (x == 4)\n        {\n            for (int i = 2; i &lt; 9; i++)\n                ans[i][End] = x + '0';\n            for (int i = 2; i &lt; 6; i++)\n                ans[i][End - 6] = x + '0';\n            for (int i = End; i &gt; End - 7; i--)\n                ans[5][i] = x + '0';\n        }\n        else if (x == 5)\n        {\n            for (int i = End; i &gt; End - 7; i--)\n            {\n                ans[2][i] = x + '0';\n                ans[8][i] = x + '0';\n                ans[5][i] = x + '0';\n            }\n            ans[3][End - 6] = ans[4][End - 6] = x + '0';\n            ans[6][End] = ans[7][End] = x + '0';\n        }\n        else if (x == 6)\n        {\n            for (int i = End; i &gt; End - 7; i--)\n            {\n                ans[2][i] = x + '0';\n                ans[8][i] = x + '0';\n                ans[5][i] = x + '0';\n            }\n            ans[3][End - 6] = ans[4][End - 6] = x + '0';\n            ans[6][End - 6] = ans[7][End - 6] = x + '0';\n            ans[6][End] = ans[7][End] = x + '0';\n        }\n        else if (x == 7)\n        {\n            for (int i = End; i &gt; End - 7; i--)\n                ans[2][i] = x + '0';\n            for (int i = 2; i &lt; 9; i++)\n                ans[i][End] = x + '0';\n        }\n        else if (x == 8)\n        {\n            for (int i = 2; i &lt; 9; i++)\n            {\n                ans[i][End] = x + '0';\n                ans[i][End - 6] = x + '0';\n            }\n            for (int i = End; i &gt; End - 7; i--)\n            {\n                ans[5][i] = x + '0';\n                ans[2][i] = x + '0';\n                ans[8][i] = x + '0';\n            }\n        }\n        else if (x == 9)\n        {\n            for (int i = End; i &gt; End - 7; i--)\n            {\n                ans[2][i] = x + '0';\n                ans[8][i] = x + '0';\n                ans[5][i] = x + '0';\n            }\n            ans[3][End] = ans[4][End] = x + '0';\n            ans[6][End] = ans[7][End] = x + '0';\n            ans[3][End - 6] = ans[4][End - 6] = x + '0';\n        }\n        else\n        {\n            for (int i = End; i &gt;= End - 6; i--)\n                ans[4][i] = ans[6][i] = '=';\n        }\n    };\n    auto Ins2 = [&amp;](int x)\n    {\n        for (int i = 0; i &lt; 10; i++)\n            ans[i] += string(6, '.');\n        int End = ans[0].size() - 2;\n        if (x == 0)\n        {\n            for (int i = End; i &gt;= End - 4; i--)\n            {\n                ans[1][i] = x + '0';\n                ans[5][i] = x + '0';\n            }\n            for (int i = 1; i &lt; 6; i++)\n            {\n                ans[i][End] = x + '0';\n                ans[i][End - 4] = x + '0';\n            }\n        }\n        else if (x == 1)\n        {\n            for (int i = 1; i &lt; 6; i++)\n            {\n                ans[i][End] = x + '0';\n            }\n        }\n        else if (x == 2)\n        {\n            for (int i = End; i &gt;= End - 4; i--)\n            {\n                ans[1][i] = x + '0';\n                ans[3][i] = x + '0';\n                ans[5][i] = x + '0';\n            }\n            ans[2][End] = x + '0';\n            ans[4][End - 4] = x + '0';\n        }\n        else if (x == 3)\n        {\n            for (int i = End; i &gt;= End - 4; i--)\n            {\n                ans[1][i] = x + '0';\n                ans[3][i] = x + '0';\n                ans[5][i] = x + '0';\n            }\n            ans[2][End] = x + '0';\n            ans[4][End] = x + '0';\n        }\n        else if (x == 4)\n        {\n            for (int i = 1; i &lt; 6; i++)\n            {\n                ans[i][End] = x + '0';\n            }\n            for (int i = End; i &gt;= End - 4; i--)\n            {\n                ans[3][i] = x + '0';\n            }\n            ans[1][End - 4] = x + '0';\n            ans[2][End - 4] = x + '0';\n        }\n        else if (x == 5)\n        {\n            for (int i = End; i &gt;= End - 4; i--)\n            {\n                ans[1][i] = x + '0';\n                ans[3][i] = x + '0';\n                ans[5][i] = x + '0';\n            }\n            ans[4][End] = x + '0';\n            ans[2][End - 4] = x + '0';\n            // ans[4][End - 4] = x + '0';\n        }\n        else if (x == 6)\n        {\n            for (int i = End; i &gt;= End - 4; i--)\n            {\n                ans[1][i] = x + '0';\n                ans[3][i] = x + '0';\n                ans[5][i] = x + '0';\n            }\n            ans[4][End - 4] = x + '0';\n            ans[4][End] = x + '0';\n            ans[2][End - 4] = x + '0';\n        }\n        else if (x == 7)\n        {\n            for (int i = End; i &gt;= End - 4; i--)\n            {\n                ans[1][i] = x + '0';\n            }\n            for (int i = 1; i &lt; 6; i++)\n            {\n                ans[i][End] = x + '0';\n            }\n        }\n        else if (x == 8)\n        {\n            for (int i = End; i &gt;= End - 4; i--)\n            {\n                ans[1][i] = x + '0';\n                ans[3][i] = x + '0';\n                ans[5][i] = x + '0';\n            }\n            for (int i = 1; i &lt; 6; i++)\n            {\n                ans[i][End] = x + '0';\n                ans[i][End - 4] = x + '0';\n            }\n        }\n        else if (x == 9)\n        {\n            ans[2][End] = x + '0';\n            ans[4][End] = x + '0';\n            ans[2][End - 4] = x + '0';\n            for (int i = End; i &gt;= End - 4; i--)\n            {\n                ans[1][i] = x + '0';\n                ans[3][i] = x + '0';\n                ans[5][i] = x + '0';\n            }\n        }\n        else\n        {\n        }\n    };\n\n    // for (int i = 1; i &lt;= 9; i++)\n    // {\n    //     Ins1(i);\n    //     Ins2(i);\n    // }\n    // for (auto x : ans)\n    //     cout &lt;&lt; x &lt;&lt; '\\n';\n    // cout &lt;&lt; '\\n';\n    // return;\n    string s;\n    cin &gt;&gt; s;\n    ll X = 0, Y = 0;\n    {\n        string tmp;\n        for (int i = 0; i &lt; s.size(); i++)\n        {\n            if (s[i] &lt; '0' || s[i] &gt; '9')\n                break;\n            tmp.push_back(s[i]);\n        }\n        auto get = [&amp;]()\n        {\n            ll res = 0;\n            for (auto x : tmp)\n            {\n                res = res * 10 + x - '0';\n            }\n            return res;\n        };\n        for (auto x : tmp)\n            Ins1(x - '0');\n        X = get();\n        tmp = \"\";\n\n        for (int i = s.size() - 2;; i--)\n        {\n            if (s[i] &lt; '0' || s[i] &gt; '9')\n                break;\n            tmp.push_back(s[i]);\n        }\n        reverse(tmp.begin(), tmp.end());\n        Y = get();\n        for (auto x : tmp)\n            Ins2(x - '0');\n    }\n    Ins1(-1);\n    ll res = ksm(X, Y);\n    if (res == -1)\n    {\n        ans[0] += \"........................\";\n        ans[1] += \"........................\";\n        ans[2] += \"IIIIIII.N.....N.FFFFFFF.\";\n        ans[3] += \"...I....NN....N.F.......\";\n        ans[4] += \"...I....N.N...N.F.......\";\n        ans[5] += \"...I....N..N..N.FFFFFFF.\";\n        ans[6] += \"...I....N...N.N.F.......\";\n        ans[7] += \"...I....N....NN.F.......\";\n        ans[8] += \"IIIIIII.N.....N.F.......\";\n        ans[9] += \"........................\";\n    }\n    else\n    {\n        string tmp = to_string(res);\n        for (auto x : tmp)\n            Ins1(x - '0');\n    }\n    for (auto x : ans)\n        cout &lt;&lt; x &lt;&lt; '\\n';\n    cout &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"XCPC/Provincial/2023Henan/#h","title":"H","text":"<p>\u8fd9\u4e2a\u8fd8\u597d\uff0c\u7b80\u5355\u5206\u7c7b\u8ba8\u8bba\u4e00\u4e0b\u3002</p> <pre><code>void man()\n{\n    int n, k;\n    cin &gt;&gt; n &gt;&gt; k;\n    // if (k == 1)\n    // {\n    //     cout &lt;&lt; n &lt;&lt; \" \" &lt;&lt; n &lt;&lt; '\\n';\n    //     return;\n    // }\n    if (k &amp; 1)\n    {\n        int cnt = k - 1;\n        if (cnt &gt;= n * 2)\n        {\n            // cerr &lt;&lt; n &lt;&lt; \" \" &lt;&lt; k &lt;&lt; '\\n';\n            cout &lt;&lt; 0 &lt;&lt; \" \" &lt;&lt; 2 * n &lt;&lt; '\\n';\n        }\n        else\n        {\n            cout &lt;&lt; n - (cnt / 2) &lt;&lt; \" \" &lt;&lt; n - (cnt / 2) + cnt &lt;&lt; '\\n';\n        }\n    }\n    else\n    {\n        // 0.5\n        int cnt = k - 1;\n        if (cnt &gt;= n * 2)\n        {\n            cout &lt;&lt; 0 &lt;&lt; \" \" &lt;&lt; 2 * n &lt;&lt; '\\n';\n        }\n        else\n        {\n            cout &lt;&lt; n - (cnt / 2) &lt;&lt; \" \" &lt;&lt; n - (cnt / 2) + cnt &lt;&lt; '\\n';\n        }\n    }\n}\n</code></pre>"},{"location":"XCPC/Provincial/2024Shaanxi/","title":"2024 \u5e74\u9655\u897f\u7701\u7b2c\u5341\u4e8c\u5c4a\u56fd\u9645\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u7701\u8d5b","text":"<p>\u6bd4\u8d5b\u94fe\u63a5: https://codeforces.com/gym/105257</p> <p>\u699c\u5355\u94fe\u63a5: https://board.xcpcio.com/provincial-contest%2F2024%2Fshaanxi?group=official</p> <p>\u8fd9\u573a\u611f\u89c9\u6253\u5f97\u5f88\u70c2\uff0c\u5dee\u4e00\u70b9\u5c31\u8fde\u94dc\u90fd\u6ca1\u6709\u4e86\u3002\u8d5b\u65f6\u901a\u8fc7 ACFGM\u3002</p> <p>L\u901a\u8fc7\u6bd4C\u591a\uff0c\u4f46\u662f\u6ca1\u5199\u51fa\u6765\uff0c\u961f\u53cb\u4e00\u76f4\u5728\u770bB\uff0c\u4ee5\u540e\u52a1\u5fc5\u4e09\u4e2a\u4eba\u53ea\u7528\u4e00\u53f0\u7535\u8111\uff0c\u611f\u89c9B\u4e5f\u662f\u6709\u673a\u4f1a\u7684\u3002</p> <p>\u611f\u89c9\u5c31C\u7a0d\u5fae\u6709\u70b9\u96be\u5ea6\uff0c\u5176\u4ed6\u5f88\u7b7e\u5230\uff0c\u4f46\u662fG\u5361\u4e86\u5f88\u4e45\u3002\u3002\u3002\u4e00\u76f4\u662f9\u7684\u90a3\u4e2a\u6837\u4f8b\u4e0d\u5bf9\uff0c\u5176\u4ed6\u7684\u5bf9\u7684\uff0c\u4f46\u662f\u6211\u53d1\u73b0\u6211\u548c\u522b\u4eba\u7684\u4ee3\u7801\u4e0d\u592a\u4e00\u6837\u3002</p> <p>L , E , B \u4e4b\u540e\u8865\u4e00\u4e0b\u3002\u3002</p>"},{"location":"XCPC/Provincial/2024Shaanxi/#a","title":"A","text":"<p>\u7b7e\u5230</p> <pre><code>void solve()\n{\n    int x;\n    cin&gt;&gt;x;\n    auto get=[](int x){\n        string s(3,'-');\n        if(x&gt;&gt;2&amp;1) s[0]='r';\n        if(x&gt;&gt;1&amp;1) s[1]='w';\n        if(x&amp;1) s[2]='x';\n        return s;\n    };\n    string res;\n    res+=get(x/100);\n    x%=100;\n    res+=get(x/10);\n    res+=get(x%10);\n    cout&lt;&lt;res&lt;&lt;'\\n';\n}\n</code></pre>"},{"location":"XCPC/Provincial/2024Shaanxi/#b","title":"B","text":"<p>\u4e5f\u662f\u5f88\u5999\u7684\u4e00\u9053\u9898\u54c8\uff0c\u6211\u4eec\u5148\u6309\u80fd\u653e <code>*</code> \u5c31\u653e <code>*</code> \u7684\u653e\u6cd5\u6784\u9020\u3002</p> <p>\u90a3\u4e48\u6709\u7684\u60c5\u51b5\u4e0b\uff0c\u6709\u7684\u884c\u6216\u8005\u5217\u4f1a\u6709\u4e24\u4e2a <code>11</code> \u51fa\u73b0\uff0c\u90a3\u4e48\u6211\u4eec\u628a\u4e00\u4e2a <code>11</code> \u8fde\u7740\u7684 <code>*</code> \u6539\u6210 <code>+</code> \u663e\u7136\u66f4\u4f18\u3002\u4f46\u662f\u53ef\u80fd\u4f1a\u6709\u7684\u884c\u653e\u4e86\uff0c\u5217\u5c31\u4e0d\u9700\u8981\u653e\u4e86\u3002</p> <p>\u82e5\u884c\u6570\u548c\u5217\u6570\u90fd\u4e3a\u5076\u6570\uff0c\u5219\u4e0d\u9700\u8981\u8c03\u6574\u4e86\u3002</p> <pre><code>8 8\n11111111         \n1*1*1*11\n11*1*1*1\n1*1*1*11\n11*1*1*1\n1*1*1*11\n11*1*1*1\n11111111\n</code></pre> <p>\u518d\u5148\u89c2\u5bdf\u884c\u4e3a\u5076\u6570\uff0c\u5217\u4e3a\u5947\u6570\u7684\u60c5\u51b5\uff0c\u53d1\u73b0\u53ea\u6709 3 5 7 \u8fd9\u4e9b\u5947\u6570\u884c\u90fd\u4f1a\u51fa\u73b0\u4e24\u4e2a 11 \u7684\u60c5\u51b5\uff0c\u9664\u4e86\u7b2c\u4e00\u884c\u548c\u6700\u540e\u4e00\u884c\u3002\u90a3\u4e48\u5217\u662f\u5947\u6570\u884c\u662f\u5076\u6570\u7684\u60c5\u51b5\u663e\u7136\u4e5f\u662f\u7c7b\u4f3c\u7684\uff0c\u80af\u5b9a\u5c31\u662f\u5947\u6570\u7684\u5217\u9700\u8981\u6539\u3002</p> <p>\u800c\u5168\u4e3a\u5947\u6570\u7684\u5c31\u662f\u5947\u6570\u884c\u548c\u5947\u6570\u5217\u90fd\u9700\u8981\u6539\u3002\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u659c\u7740\u53bb\u679a\u4e3e\u5c31\u597d\u3002\u5982\u679c\u9700\u8981\u6539\uff0c\u90a3\u5c31\u76f4\u63a5\u6539\uff0c\u8fd9\u6837\u80fd\u517c\u987e\u884c\u548c\u5217\uff0c\u4e00\u5b9a\u53ef\u4ee5\u4f7f\u5f97\u82b1\u8d39\u6700\u5c11\u7684 <code>+</code> \u3002</p> <pre><code>void ChatGptDeepSeek()\n{\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    vector&lt;string&gt; s(n, string(m, '1'));\n\n    for (int i = 1; i &lt; n - 1; i++)\n        for (int j = 1; j &lt; m - 1; j++) {\n            if (s[i - 1][j] == '1' &amp;&amp; s[i + 1][j] == '1' &amp;&amp; s[i][j - 1] == '1' &amp;&amp; s[i][j + 1] == '1')\n                s[i][j] = '*';\n        }\n    vector&lt;int&gt; r(n), c(m);\n    for (int i = 1; i &lt; n - 1; i++) {\n        for (int j = 1; j &lt; m; j++) {\n            if (s[i][j] == s[i][j - 1])\n                r[i]++;\n        }\n    }\n    for (int j = 1; j &lt; m - 1; j++) {\n        for (int i = 1; i &lt; n; i++) {\n            if (s[i][j] == s[i - 1][j])\n                c[j]++;\n        }\n    }\n    for (int i = 2, j = 2; i &lt; n; i += 2) {\n        if (s[i][j] == '*' &amp;&amp; (r[i] == 2 || c[j] == 2)) {\n            r[i] = 0, c[j] = 0;\n            // cerr&lt;&lt;i&lt;&lt;\" \"&lt;&lt;j&lt;&lt;'\\n';\n            s[i][j] = '+';\n            if (j + 2 &lt; m - 1) {\n                j += 2;\n            }\n\n            // dbg(r);\n            // dbg(c);\n        }\n    }\n    for (int j = 2, i = 2; j &lt; m; j += 2) {\n        // if(c[j]) cerr&lt;&lt;j&lt;&lt;'\\n';\n        // dbg(r);\n        // dbg(c);\n        if (s[i][j] == '*' &amp;&amp; (r[i] == 2 || c[j] == 2)) {\n            // cerr &lt;&lt; i &lt;&lt; \" \" &lt;&lt; j &lt;&lt; '\\n';\n            s[i][j] = '+';\n            if (i + 2 &lt; n - 1)\n                i += 2;\n            r[i] = 0, c[j] = 0;\n        }\n    }\n    for (int i = 0; i &lt; n; i++)\n        cout &lt;&lt; s[i] &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"XCPC/Provincial/2024Shaanxi/#c","title":"C","text":"<p>\u6bcf\u4e2a\u4eba\u7684\u60f3\u5750\u7684\u5ea7\u4f4d\u53ef\u4ee5\u5efa\u4e00\u4e2a\u56fe\uff0c\u4e3e\u4e2a\u4f8b\u5b50\u5427\uff0c\u6bd4\u59821\u60f3\u57502\uff0c2\u60f3\u57503\uff0c\u90a3\u4e483\u5982\u679c\u60f3\u57503\uff0c\u521912\u90fd\u53ea\u80fd\u5750\u539f\u672c\u7684\u4f4d\u7f6e\uff1b3\u5982\u679c\u60f3\u57502\uff0c\u90a3\u4e481\u53ea\u80fd\u5750\u539f\u672c\u7684\u4f4d\u7f6e\uff1b3\u5982\u679c\u5750\u57281\uff0c\u90a3\u4e483\u4e2a\u4eba\u90fd\u53ef\u4ee5\u5750\u60f3\u5750\u7684\u4f4d\u7f6e\u3002</p> <p>\u5176\u5b9e\u5c31\u662f\uff0c\u5728\u73af\u4e0a\u7684\u70b9\u4e00\u5b9a\u662f\u90fd\u53ef\u4ee5\u5750\u5728\u60f3\u5750\u7684\u5730\u65b9\uff0c\u90a3\u4e48\u4e0d\u5728\u73af\u4e0a\u7684\u70b9\u5462\uff1f\u5b83\u4eec\u90fd\u4f1a\u662f\u5728\u94fe\u4e0a\uff0c\u800c\u8fd9\u4e9b\u94fe\u8981\u4e48\u4f1a\u8fde\u5230\u73af\u4e0a\uff0c\u8981\u4e48\u4f1a\u8fde\u5230 \\([n+1,2n]\\) \u4e0a\u7684\u70b9\u3002\u8fde\u5728\u73af\u4e0a\u663e\u7136\u4e0d\u53ef\u80fd\u6709\u5408\u6cd5\u7684\u65b9\u6848\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u627e \\([n+1,2n]\\) \u6bcf\u4e2a\u70b9\u8fde\u7684\u6700\u957f\u7684\u94fe\u3002</p> <p>\u62ff\u62d3\u6251\u6392\u5e8f\u628a\u73af\u4e0a\u7684\u70b9\u627e\u51fa\u6765\u518d\u5199\u4e00\u4e2a\u7b80\u5355\u7684dfs\u5c31\u597d\u4e86\u3002</p> <pre><code>void solve()\n{\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;set&lt;int&gt;&gt; g(n * 2 + 1, set&lt;int&gt;());\n    vector&lt;int&gt; a(n + 1), s(n + 1), p(n + 1);\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; a[i];\n        g[a[i]].insert(i);\n    }\n    {\n        vector&lt;int&gt; du(n + 1);\n        queue&lt;int&gt; q;\n        for (int i = 1; i &lt;= n; i++) {\n            du[i] = g[i].size();\n            if (!du[i]) {\n                q.push(i);\n            }\n        }\n        // cerr&lt;&lt;q.size()&lt;&lt;'\\n';\n        while (!q.empty()) {\n            auto x = q.front();\n            q.pop();\n            if (a[x] &gt; n)\n                continue;\n            du[a[x]]--;\n            if (!du[a[x]]) {\n                q.push(a[x]);\n            }\n        }\n        int ans = 0;\n        for (int i = 1; i &lt;= n; i++)\n            if (du[i])\n                ans++;\n        for (int i = n + 1; i &lt;= n * 2; i++) {\n            int cnt = 0;\n            auto dfs = [&amp;](auto&amp;&amp; self, int u, int len) -&gt; void {\n                cnt = max(cnt, len);\n                for (auto v : g[u]) {\n                    self(self, v, len + 1);\n                }\n            };\n            dfs(dfs, i, 1);\n            // if (cnt &gt; 1)\n            ans += cnt - 1;\n        }\n        cout &lt;&lt; ans &lt;&lt; '\\n';\n    }\n\n    // {\n    //     set&lt;int&gt; st;\n    //     for (int i = 1; i &lt;= n; i++) {\n    //         cout &lt;&lt; s[i] &lt;&lt; \" \\n\"[i == n];\n    //         st.insert(s[i]);\n    //         assert(s[i] == i || s[i] == a[i]);\n    //     }\n    //     assert(st.size() == n);\n    // }\n}\n</code></pre>"},{"location":"XCPC/Provincial/2024Shaanxi/#f","title":"F","text":"<p>\u76f4\u63a5\u8f93\u51fa\u6700\u5927\u503c\u5373\u53ef\uff0c\u56e0\u4e3a \\(\\&amp;\\) \u64cd\u4f5c\u5e76\u4e0d\u80fd\u4f7f\u4e00\u4e2a\u6570\u5b57\u4e3a \\(0\\) \u7684\u4f4d\u53d8\u6210 \\(1\\) \u3002</p>"},{"location":"XCPC/Provincial/2024Shaanxi/#g","title":"G","text":"<p>\u6211\u662f\u5199\u4e86\u4e00\u4e2a\u9012\u5f52\u7684\uff0c\u6bd4\u8f83\u4e0d\u5bb9\u6613\u9519\u3002\u3002\u56e0\u4e3a\u6211\u7684\u601d\u8def\u662f\u4ece\u9ad8\u4f4d\u7684\u5f80\u4f4e\u4f4d\u5220\uff0c\u6bd4\u5982\u8bf499 7\u5427\uff0c\u6211\u4eec\u5148\u770b\u6700\u9ad8\u4f4d\uff0c\u53ea\u67091\u4e2a7\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5-10\uff0c\u90a3\u4e48\u6211\u4eec\u5176\u5b9e\u53ef\u4ee5\u76f4\u63a5\u628a\u5f53\u524d\u7684\u6570\u5b57\u770b\u621089\uff0c\u56e0\u4e3a\u6211\u4eec\u4e4b\u540e\u53ea\u4f1a\u770b\u540e\u9762\u7684\u4f4d\u4e86\u3002\u7136\u540e7\u662f\u67099\u4e2a\u7684\uff0c\\(n\\) \u53d8\u6210\u4e86 80\uff0c\u6700\u540e\u8f93\u51fa \\(n+1\\) \uff0c\u56e0\u4e3a\u8fd8\u6709\u4e00\u4e2a \\(0\\) \u3002</p> <pre><code>ll ksm(ll a, int b)\n{\n    ll res = 1;\n    while (b) {\n        if (b &amp; 1)\n            res = res * a;\n        a = a * a;\n        b &gt;&gt;= 1;\n    }\n    return res;\n}\nvoid solve()\n{\n    ll n;\n    int x;\n    cin &gt;&gt; n &gt;&gt; x;\n    // string s = to_string(n);\n    // // 99\n    // // 1\n    // ll now = n;\n    // auto get = [&amp;](int l) {\n    //     ll res = 0;\n    //     // assert(t.size() == l-1);\n    //     for (int i = 0; i &lt; l ; i++)\n    //         res = res * 10 + s[i] - '0';\n    //     return res;\n    // };\n    // for (int i = 0; i &lt; s.size(); i++) {\n    //     // s = to_string(now);\n    //     ll del = get(i);\n    //     if (s[i] - '0' &gt;= x)\n    //         del++;\n    //     now -= del * ksm(10, s.size() - i - 1);\n    //     s = to_string(now);\n    //     cerr &lt;&lt; del &lt;&lt; \" \" &lt;&lt; now &lt;&lt; '\\n';\n    // }\n    // cout &lt;&lt; now + 1 &lt;&lt; '\\n';\n    auto work = [&amp;](auto&amp;&amp; self, ll now, int i) {\n        // cerr &lt;&lt; now &lt;&lt; \" \" &lt;&lt; i &lt;&lt; '\\n';\n        // \u5220\u9664\u7b2ci\u4f4d\u7684 x\n        string s = to_string(now);\n        if (i==-1) {\n            // cout&lt;&lt;s&lt;&lt;\"\\n\";\n            cout &lt;&lt; now + 1 &lt;&lt; '\\n';\n            return;\n        }\n        while (s.size() &lt; i)\n            s = \"0\" + s;\n        ll del = 0;\n        for (int j = 0; j &lt; s.size() - i - 1; j++)\n            del = del * 10 + s[j] - '0';\n        // cerr &lt;&lt; del &lt;&lt; \" \" &lt;&lt; i &lt;&lt; '\\n';\n        if (s[s.size() - i - 1] - '0' &gt;= x)\n            del++;\n        self(self, now - del * ksm(10, i), i - 1);\n    };\n    work(work, n, to_string(n).size() - 1);\n}\n</code></pre> <p>\u6ce8\u91ca\u6389\u7684\u662f\u4e4b\u524d\u778e\u641e\u7684\uff0c\u4f46\u662f\u53ea\u67099\u90a3\u4e2a\u8f93\u51fa\u4e0d\u5bf9\uff0c\uff0c\u7136\u540e\u6211\u53d1\u73b0\u53ef\u80fd\u662f\u64cd\u4f5c\u4e4b\u540e\u6570\u5b57\u7684\u4f4d\u6570\u53ef\u80fd\u4f1a\u6539\u53d8\u3002\u6240\u4ee5\u6211\u4eec\u7528\u9012\u5f52\u53ef\u4ee5\u597d\u5199\u4e00\u70b9\uff0c\u8bb0\u4e00\u4e0b\u64cd\u4f5c\u7684\u662f\u7b2c\u591a\u5c11\u4f4d\u3002</p> <p>\u4e3e\u4e2a\u4f8b\u5b50\uff0c123456\uff0c\u6bd4\u5982\u6211\u4eec\u8981\u5220\u53bb\u6240\u6709\u7b2c\u4e09\u4f4d\u5e26\u67092\u7684\u6570\u5b57\uff0c\u90a3\u4e48\u6570\u91cf\u5c31\u662f \\((12+1)\\cdot 10^3\\) \uff0c +1 \u662f\u56e0\u4e3a\u5f53\u524d\u8fd9\u4e00\u4f4d\u4e5f\u662f\u5927\u4e8e2\u7684\u3002</p> <p>\u770b\u4e86\u9898\u89e3\u7684\u601d\u8def\uff0c\u5927\u6982\u6709\u4e24\u79cd\u601d\u8def\uff0c\u4e00\u79cd\u662f\u6c42\u51fa\u6240\u6709\u7684\u5c0f\u4e8e\u7b49\u4e8e \\(n\\) \u7684\u6570\u5b57\u4e2d\uff0c \\(x\\) \u51fa\u73b0\u7684\u6b21\u6570\uff0c\u8fd9\u4e2a\u6211\u8fd8\u771f\u4e0d\u4f1a\uff0c\u4ee5\u540e\u770b\u770b\u5427\uff1b\u53e6\u4e00\u79cd\u5c31\u662f\u7531\u4e8e\u5220\u53bb\u4e86\u4e00\u4f4d\u6570\u5b57\u6240\u4ee5\u76f8\u5f53\u4e8e\u628a \\(x\\) \u53d8\u4e3a\u4e86\u4e00\u4e2a 9 \u8fdb\u5236\u6570\u5b57\uff0c\u6240\u4ee5\u5982\u679c\u5f53\u524d\u8fd9\u4e00\u4f4d\u5927\u4e8e\u7b49\u4e8e \\(x\\) \u5219 -1\uff0c\u5426\u5219\u662f\u4e0d\u53d7\u5f71\u54cd\u7684\uff0c\u518d\u628a9\u8fdb\u5236\u8f6c\u4e3a\u5341\u8fdb\u5236\u5373\u53ef\u3002</p>"},{"location":"XCPC/Provincial/2024Shaanxi/#l","title":"L","text":"<p>\u8fd9\u4e48\u725b\u3002\u3002\u3002</p> <p>\u6211\u597d\u50cf\u4e00\u76f4\u90fd\u5728\u778e\u641e\u7684\u3002</p> <p>\u521a\u5f00\u59cb\u6211\u60f3\u7740\u4f1a\u4e0d\u4f1a\u53ea\u67091111\u548c10001\u8fd9\u79cd\u662f\u53ef\u4ee5\u7684\u3002\u3002\u3002\u5e94\u8be5\u591a\u4e3e\u51e0\u4e2a\u4f8b\u5b50\u7684\uff0c\u6bd4\u5982 \\(n\\) \u4e3a 4567... \u7b54\u6848\u662f\u591a\u5c11\u3002</p> <p>\u5176\u5b9e\u5148\u624b\u6570\u5b57\u672b\u5c3e\u4e0d\u4e3a0\u7684\u8bdd\uff0c\u662f\u5fc5\u8d62\u7684\u3002\u53ea\u9700\u8981\u4e00\u76f4\u62ff\u672b\u5c3e\u7684\u6570\u5b57\uff0c\u56e0\u4e3a\u8fd9\u6837\u7b2c\u4e8c\u4e2a\u4eba\u62ff\u5230\u7684\u59cb\u7ec8\u662f\u672b\u5c3e\u4e3a0\uff0c\u4ed6\u4e0d\u53ef\u80fd\u628a\u5168\u90e8\u62ff\u5b8c\u3002\u800c\u672b\u5c3e\u4e0d\u4e3a0\uff0c\u5219\u5fc5\u8f93\u3002\u6240\u4ee5\u53ea\u9700\u8981\u679a\u4e3e\u6700\u5c0f\u7684\u4e0d\u4e3a \\(x\\) \u56e0\u5b50\u7684\u6570\u5b57\u3002 \u597d\u725b</p> <pre><code>void ChatGptDeepSeek()\n{\n    long long x;\n    cin&gt;&gt;x;\n    for(int i=2;;i++){\n        if(x%i){\n            cout&lt;&lt;i&lt;&lt;'\\n';\n            return;\n        }\n    }\n}\n</code></pre>"},{"location":"XCPC/Provincial/2024Shaanxi/#m","title":"M","text":"<p>\u6bcf\u4e24\u4e2a\u76f8\u90bb\u7684\u6b63\u65b9\u5f62\u4f1a\u4f7f\u9762\u79ef -0.5 \uff0c\u6240\u4ee5\u76f4\u63a5\u628a\u9762\u79ef\u51cf\u53bb\u76f8\u4ea4\u7684\u9762\u79ef\u5c31\u884c\u3002</p> <pre><code>void solve()\n{\n    int n;\n    cin &gt;&gt; n;\n    set&lt;pair&lt;int, int&gt;&gt; st;\n    for (int i = 1; i &lt;= n; i++) {\n        int x, y;\n        cin &gt;&gt; x &gt;&gt; y;\n        st.insert({ x, y });\n    }\n    double ans = st.size() * 2;\n    while (!st.empty()) {\n        auto [x, y] = *st.begin();\n        st.erase(st.begin());\n        if (st.contains({ x - 1, y }))\n            ans -= 0.5;\n        if (st.contains({ x + 1, y }))\n            ans -= 0.5;\n        if (st.contains({ x, y - 1 }))\n            ans -= 0.5;\n        if (st.contains({ x, y + 1 }))\n            ans -= 0.5;\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"XCPC/Provincial/2024Sichuan/","title":"2024\u5e74\u56db\u5ddd\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b","text":"<p>2025-03-01 VP</p> <p>\u8fd9\u662f\u6211\u8fd9\u5b66\u671f\u7b2c\u4e00\u6b21\u6253\u5230\u56e2\u961f\u8d5b\uff0c\u4e5f\u662f\u4eca\u5e74\u7b2c\u4e00\u6b21\u3002\u53e6\u5916\u4e24\u4e2a\u5c0f\u4f19\u4f34\u5e94\u8be5\u662f\u4ee5\u524d\u4ece\u6765\u6ca1\u6253\u8fc7\u56e2\u961f\u8d5b\u3002\u6253\u4e86\u4e09\u5c0f\u65f6\u5de6\u53f3\uff0c\u4f461\u65f617\u5206\u4e4b\u540e\uff0c\u5c31\u6ca1\u6709AC\u8fc7\u4e86\u3002\u8fd8\u884c\u5566\uff0c\u6162\u6162\u6765\uff0c\u5148\u4e00\u5468\u4e00\u6b21\u56e2\u961f\u8d5b\u4fdd\u6301\u4e0b\u611f\u89c9\u597d\u4e86\u3002</p>"},{"location":"XCPC/Provincial/2024Sichuan/#2024","title":"2024\u56db\u5ddd\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b","text":"<p>\u6bd4\u8d5b\u94fe\u63a5: https://codeforces.com/gym/105222</p> <p>\u699c\u5355\u94fe\u63a5: https://board.xcpcio.com/provincial-contest%2F2024%2Fsichuan?group=official</p> <p>\u8d5b\u65f6\u53ea\u901a\u8fc7\u4e86\u4e09\u9898\uff1a E H L</p> <p>H \u53ef\u80fd\u7a0d\u5fae\u8981\u63a8\u4e00\u4f1a\uff0cE \u5355\u7eaf\u662f\u9898\u76ee\u63cf\u8ff0\u975e\u5e38\u8ff7\u60d1\u3002\u5982\u679c\u6ca1\u6709\u7406\u89e3\u95ee\u9898\uff0c\u611f\u89c9\u4e5f\u662f\u5341\u591a\u5206\u949f\u80fdAC\u7684\u3002L \u5c31\u6392\u4e2a\u5e8f\u5c31\u884c\u3002\u3002\u3002\u8fd9\u6b21\u771f\u5c31\u53ea\u7b7e\u4e86\u4e2a\u5230\u3002\u540e\u9762\u7684\u5199\u4e0d\u4e86\u4e86\u3002</p>"},{"location":"XCPC/Provincial/2024Sichuan/#b","title":"B","text":"<p>\u75af\u72c2\u5206\u7c7b\u8ba8\u8bba\u3002\u3002\u3002</p> <p>\u8981\u975e\u5e38\u4ed4\u7ec6\u624d\u884c\uff0c\u5343\u4e07\u4e0d\u80fd\u5199\u5f97\u70e6\u3002VP\u672c\u6765\u5c31\u5e94\u8be5\u5199\u51fa\u6765\u7684\uff0c\u65e9\u77e5\u9053\u7a0d\u5fae\u591a\u770b\u4e00\u4f1a\uff0c\u597d\u597d\u4ed4\u7ec6\u8ba8\u8bba\u4e00\u4e0b\uff0c\u60f3\u4e00\u4e0b\u5c31\u597d\u4e86\u3002</p> <p>\u73b0\u5728\u518d\u770b\u5168\u90e8\u91cd\u65b0\u5199\uff0c\u4e00\u5c0f\u65f6WA\u4e8611\u6b21\u7136\u540e\u8fc7\u4e86\u3002</p> <pre><code>void solve()\n{\n    int ans = 0;\n    array&lt;int, 6&gt; a;\n    for (int i = 1; i &lt;= 5; i++)\n        cin &gt;&gt; a[i];\n    // 0 0 3 0 3\n    ans += a[3] / 2, a[3] %= 2;\n    // \u5982\u679c4\u9700\u89813\uff0c\u90a3\u4e482\u80af\u5b9a\u6ca1\u4e86\u3002\n    {\n        int mn = min(a[2], a[4]);\n        ans += mn, a[2] -= mn, a[4] -= mn;\n    }\n    // 3 \u7ed9\u81ea\u5df1\u7528\u80af\u5b9a\u662f\u6700\u4f18\u7684\uff0c\u5269\u4e0b\u7684\u5148\u4e0d\u8981\u6025\u7740\u53d8\u62101\u5427\u3002\u8bf4\u4e0d\u5b9a\u80fd 1 2 3\u52a0\u4e00\u8d77\n    {\n        int mn = min(a[1], a[5]);\n        ans += mn, a[1] -= mn, a[5] -= mn;\n\n        mn = min(a[3], a[5]);\n        ans += mn, a[3] -= mn, a[5] -= mn;\n\n        mn = min(a[2], a[5]);\n        ans += mn, a[2] -= mn, a[5] -= mn;\n\n        mn = min(a[4], a[5]);\n        ans += mn, a[4] -= mn, a[5] -= mn;\n\n        // 5 \u80af\u5b9a\u4e00\u4e2a\u90fd\u6ca1\u6709\u4e86 \u6216\u8005\u5176\u4ed6\u7684\u4e00\u4e2a\u90fd\u6ca1\u6709\u4e86\n\n        // \u597d\u5427 \uff0c5\u53ef\u80fd\u8fd8\u6709\n        ans += a[5] / 2, a[1] += a[5] % 2, a[5] = 0;\n    }\n    // 3 2 1 \u4e00\u8d77 \uff0c\u8fd8\u662f\u7ed94\uff1f\n\n    // 1 2 3\u7ec4\u4e00\u8d77\u7684\u8bdd\u4e00\u5b9a\u662f\u9700\u89811\u7684\uff0c\u6700\u597d\u5148\u522b\u628a1\u7528\u5b8c\n\n    {\n        // \u5982\u679c\u8fd8\u67094\uff0c\u90a3\u4e48\u80af\u5b9a\u6ca1\u67092\u4e86\uff0c\u53ea\u5269\u4e0b1\n        int mn = min(a[1] / 2, a[4]);\n        ans += mn, a[1] -= 2 * mn, a[4] -= mn;\n        // \u5982\u679ca[4]\u8fd8\u6709\uff0c\u90a3\u4e48\u80af\u5b9a\u6700\u591a1\u4e2a1\n\n        ans += a[4] / 3, a[4] %= 3;\n        if (a[4] == 2) {\n            if (a[1]) {\n                a[1]--, a[4] = 0, ans++;\n            } else if (a[3]) {\n                a[3]--, a[4] = 0, ans++;\n            } else {\n                a[1] += a[4], a[4] = 0;\n            }\n        } else if (a[4] == 1) {\n            assert(a[1] &lt;= 1);\n            if (a[3] &amp;&amp; a[1]) {\n                a[3]--, a[1]--, a[4]--, ans++;\n            } else {\n                a[1] += a[4], a[4] = 0;\n            }\n        }\n    }\n\n    if (a[3]) {\n        // 2 \u73b0\u5728\u53ea\u80fd\u7ed9 3 \u7528\u4e86\n        if (a[2] &amp;&amp; a[1]) {\n            ans++, a[2]--, a[1]--, a[3] = 0;\n        } else if (a[1] &gt;= 3) {\n            a[1] -= 3, ans++, a[3] = 0;\n        } else if (a[2] &gt;= 2) {\n            a[2] -= 2, a[3] = 0, ans++;\n        } else {\n            a[1] += a[3], a[3] = 0;\n        }\n        // \u5982\u679c\u8fd9\u91cc\u4e0d\u80fd\u6d88\u80173\uff0c\u90a3\u4e48\u8f6c\u6362\u62101\n    }\n    {\n        // \u53ef\u80fd\u8fd8\u67092\n        ans += a[2] / 3, a[2] %= 3;\n    }\n    {\n        // \u53ef\u80fd\u8fd8\u4f1a\u52691\u548c2\n        if (a[2] == 1) {\n            if (a[1] &gt;= 4) {\n                ans++, a[2] = 0, a[1] -= 4;\n            }\n        } else if (a[2] == 2) {\n            if (a[1] &gt;= 2) {\n                ans++, a[2] = 0, a[1] -= 2;\n            }\n        }\n        // \u53ea\u52691\u4e86\u5e94\u8be5\n        ans += a[1] / 6, a[1] %= 6;\n    }\n    // for (int i = 1; i &lt;= 5; i++)\n    //     cerr &lt;&lt; a[i] &lt;&lt; \" \\n\"[i == 5];\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"XCPC/Provincial/2024Sichuan/#e","title":"E","text":"<p>\u8981\u7528 L \u5f62\u6765\u586b\u6ee1\u7f51\u683c\u3002\u4f46\u662f\u5e76\u975e\u586b\u6ee1\u3002\u5b83\u9898\u76ee\uff0c\u6211\u4eec\u660e\u660e\u770b\u7740\u662f\u5982\u679c\u8fd8\u5269\u4e00\u4e2a\u683c\u5b50\u6ca1\u6709\u88ab\u8986\u76d6\uff0c\u4e14\u6ca1\u6709\u8986\u76d6\u7684\u683c\u5b50\u5728\u7b2c\u4e00\u884c\u7b2c \\(m\\) \u5217\uff0c\u90a3\u4e48\u8fd9\u4e2a\u4e5f\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u65b9\u6848\u3002\u4f46\u662f\u5b9e\u9645\u4e0a\uff0c\u8bf4\u7684\u662f\u5fc5\u987b\u7a7a\u4e00\u4e2a\u683c\u5b50\u4e0d\u88ab\u8986\u76d6\uff0c\u4e14\u5fc5\u987b\u5728\u7b2c  \\(1\\) \u884c\u7b2c \\(m\\) \u5217\u7a7a\u7740\u3002</p> <p>\u90a3\u4e48\u5c31\u5f88\u597d\u5224\u65ad\u4e86\u3002\u76f4\u63a5\u5c31\u68c0\u67e5\u662f\u4e0d\u662f\u4e09\u4e2a\u4e00\u7ec4\uff0c\u662f\u4e0d\u662f\u6bcf\u4e2a\u683c\u5b50\u90fd\u88ab\u8986\u76d6\u3002</p> <p>\u5e78\u597d\u6709\u6837\u4f8b\u7b2c\u4e8c\u4e2a\uff0c\u4e0d\u7136\u771f\u770b\u4e0d\u51fa\u6765\u3002</p> <pre><code>constexpr int N = 500*500;\nint cnt[N+1];\n\nvoid solve()\n{\n    int n,m;\n    cin&gt;&gt;n&gt;&gt;m;\n    vector&lt;string&gt;s(n);\n    for(int i=0;i&lt;n;i++){\n        cin&gt;&gt;s[i];\n    }\n    vector&lt;vector&lt;int&gt;&gt;C(n+1,vector&lt;int&gt;(m+1));\n    int tot=0;\n    for(int i=0;i&lt;n;i++)\n        for(int j=0;j&lt;m;j++){\n            if(s[i][j]=='C'){\n                C[i][j]=++tot;\n                cnt[tot]=0;\n                if(i-1&gt;=0&amp;&amp;s[i-1][j]=='D'){\n                    C[i-1][j]=tot;\n                }\n                if(i+1&lt;n&amp;&amp;s[i+1][j]=='U'){\n                    C[i+1][j]=tot;\n                }\n                if(j-1&gt;=0&amp;&amp;s[i][j-1]=='R'){\n                    C[i][j-1]=tot;\n                }\n                if(j+1&lt;m&amp;&amp;s[i][j+1]=='L'){\n                    C[i][j+1]=tot;\n                }\n            }\n        }\n    // cout&lt;&lt;'\\n';\n    for(int i=0;i&lt;n;i++)\n        for(int j=0;j&lt;m;j++){\n            // cout&lt;&lt;C[i][j]&lt;&lt;\" \\n\"[j+1==m];\n            cnt[C[i][j]]++;\n        }\n    int all=0;\n    for(int i=1;i&lt;=tot;i++){\n        // cerr&lt;&lt;cnt[i]&lt;&lt; '\\n';\n        all+=cnt[i];\n        if(cnt[i]!=3){\n            cout&lt;&lt;\"No\\n\";\n            return;\n        }\n    }\n    // cerr&lt;&lt;all&lt;&lt;'\\n';\n    // if(all==n*m){\n    //     cout&lt;&lt;\"Yes\\n\";\n    // }else \n    if(all==n*m-1&amp;&amp;s[0][m-1]=='.')\n        cout&lt;&lt;\"Yes\\n\";\n    else\n        cout&lt;&lt;\"No\\n\";\n}\n</code></pre>"},{"location":"XCPC/Provincial/2024Sichuan/#f","title":"F","text":"<p>\u8fd8\u771f\u4e0d\u96be\uff0c\u4e5f\u662f\u7a0d\u5fae\u60f3\u4e00\u4e0b\u5c31\u884c\u3002</p> <p>\u4e0b\u6b21\u6bd4\u8d5b\u771f\u7684\u5f97\u597d\u597d\u601d\u8003\uff0c\u8fd9\u573a\u5176\u5b9e\u53ef\u5199\u9898\u8fd8\u633a\u591a\u7684\u6765\u7740\u3002BF\u5982\u679c\u591a\u60f3\u4f1a\u662f\u80fd\u51fa\u7684\u3002\u8865\u8fd92\u9898\u90fd\u6ca1\u770b\u9898\u89e3\uff0c\u611f\u89c9\u786e\u5b9e\u4e0d\u96be\u7684\u3002</p> <p>\u8fd9\u9898\u6211\u53ea\u641c\u4e86\u4e00\u4e0b\u600e\u4e48\u5224\u65ad\u76f4\u7ebf\u8fc7\u77e9\u5f62\u3002\u3002\u3002\u5176\u5b9e\u5411\u91cf\u600e\u4e48\u8868\u793a\u76f4\u7ebf\u65b9\u7a0b\u4e5f\u4e0d\u592a\u8bb0\u5f97\u3002</p> <p>\u5047\u5982\u65b9\u5411\u5411\u91cf\u662f \\((vx,vy)\\) \u90a3\u4e48\u76f4\u7ebf\u65b9\u7a0b\u662f \\(vx(y-y_0)=vy(x-x_0)\\) \uff0c \\((x_0,y_0)\\) \u4e3a\u8d77\u70b9\u4f4d\u7f6e\u3002\u5224\u65ad\u4e24\u70b9\u662f\u5426\u5728\u76f4\u7ebf\u540c\u4fa7\uff0c\u53ea\u9700\u8981\u770b\u5e26\u5165\u76f4\u7ebf\u65b9\u7a0b\u540e\u7ed3\u679c\u7684\u6b63\u8d1f\u3002\u540c\u53f7\u5219\u540c\u4fa7\uff0c\u7b49\u4e8e0\u5219\u5728\u76f4\u7ebf\u4e0a\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u7b97\u51fa\u5706\u5fc3\u5728\u77e9\u5f62\u4e2d\u7684\u5408\u6cd5\u8303\u56f4\uff0c\u4e5f\u5c31\u662f \\((lx+r,ly+r)\\) \u548c \\((rx-r,ry-r)\\) \u4e4b\u95f4\u7684\u77e9\u5f62\u533a\u57df\u3002\u6211\u4eec\u53ea\u9700\u8981\u770b\u5706\u5fc3\u662f\u5426\u4f1a\u7ecf\u8fc7\u8fd9\u4e2a\u533a\u57df\u5c31\u884c\u4e86\u3002</p> <p>\u53ef\u4ee5\u5224\u65ad\u662f\u5426\u548c\u77e9\u5f62\u7684\u6bcf\u6761\u8fb9\u76f8\u4ea4\u3002\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5c06\u56db\u4e2a\u70b9\u5e26\u5165\u76f4\u7ebf\u65b9\u7a0b\uff0c\u5224\u65ad\u662f\u5426\u56db\u4e2a\u70b9\u90fd\u4f4d\u4e8e\u76f4\u7ebf\u540c\u4fa7\u3002\u4f46\u662f\u8981\u6ce8\u610f\u7684\u8fd9\u4e2a\u76f4\u7ebf\u662f\u6709\u65b9\u5411\u7684\uff0c\u4e5f\u8bb8\u4f1a\u5f80\u53cd\u65b9\u5411\u8d70\uff0c\u4f46\u662f\u5224\u7684\u80fd\u76f8\u4ea4\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u7279\u5224\u4e00\u4e0b\u76f4\u63a5\u8f93\u51fa\u3002</p> <pre><code>void solve()\n{\n    int x, y, r, vx, vy;\n    cin &gt;&gt; x &gt;&gt; y &gt;&gt; r &gt;&gt; vx &gt;&gt; vy;\n    // \u53ef\u4ee5\u76f4\u63a5\u7b97\u51fa\u5706\u5fc3\u653e\u5728\u54ea\u4e2a\u77e9\u5f62\u53ef\u4ee5\u4f7f\u5f97\u6ee1\u8db3\u6761\u4ef6\u3002\n    // \u7136\u540e\u5224\u65ad\u5706\u5fc3\u7684\u8fd0\u52a8\u8f68\u8ff9\u662f\u5426\u4f1a\u7ecf\u8fc7\u8fd9\u4e2a\u533a\u57df\u3002\n    // \u53ef\u4ee5\u5c06\u9876\u70b9\u90fd\u5e26\u5165\u76f4\u7ebf\u65b9\u7a0b\uff0c\u770b\u662f\u5426\u90fd\u5728\u76f4\u7ebf\u540c\u4fa7\u3002\n    // \u8fd0\u52a8\u8def\u5f84\u53ef\u4ee5\u8868\u793a\u4e3a vx * (Y-y) = vy * (X-x)\n\n    // \u5706\u5fc3\u9700\u8981\u5728\n    int lx, ly, rx, ry;\n    cin &gt;&gt; lx &gt;&gt; ly &gt;&gt; rx &gt;&gt; ry;\n    // \u5706\u5fc3\u5fc5\u987b\u5728 (lx+r,ly+r) \u548c (rx-r,ry-r) \u4e4b\u95f4\n    if (rx - lx &lt; 2 * r || ry - ly &lt; 2 * r) {\n        cout &lt;&lt; \"No\\n\";\n        return;\n    }\n    // \u7531\u4e8e\u662f\u6709\u65b9\u5411\u7684 \u6211\u4eec\u76f4\u63a5\u6765\u7b80\u5355\u5224\u65ad\u4e00\u4e0b\u4f1a\u4e0d\u4f1a\u7ecf\u8fc7\n    if (x &gt; rx - r || y &gt; ry - r) {\n        if (vx &gt;= 0 &amp;&amp; vy &gt;= 0) {\n            cout &lt;&lt; \"No\\n\";\n            return;\n        }\n    }\n    if (y &gt; ry - r || x &lt; lx + r) {\n        if (vx &lt;= 0 &amp;&amp; vy &gt;= 0) {\n            cout &lt;&lt; \"No\\n\";\n            return;\n        }\n    }\n    if (y &lt; ly + r || x &lt; lx + r) {\n        if (vx &lt;= 0 &amp;&amp; vy &lt;= 0) {\n            cout &lt;&lt; \"No\\n\";\n            return;\n        }\n    }\n    if (y &lt; ly + r || x &gt; rx - r) {\n        if (vx &gt;= 0 &amp;&amp; vy &lt;= 0) {\n            cout &lt;&lt; \"No\\n\";\n            return;\n        }\n    }\n    auto calc = [&amp;](int X, int Y) {\n        return 1LL * vx * (Y - y) - 1LL * vy * (X - x);\n    };\n    set&lt;long long&gt; st;\n    st.insert(calc(lx + r, ly + r));\n    st.insert(calc(lx + r, ry - r));\n    st.insert(calc(rx - r, ry - r));\n    st.insert(calc(rx - r, ly + r));\n    if (((*st.begin() &lt; 0) &amp;&amp; (*st.rbegin() &gt; 0)) || st.contains(0))\n        cout &lt;&lt; \"Yes\\n\";\n    else\n        cout &lt;&lt; \"No\\n\";\n}\n</code></pre>"},{"location":"XCPC/Provincial/2024Sichuan/#h","title":"H","text":"<p>\u7a0d\u5fae\u63a8\u4e00\u4e0b\u524d\u9762\u51e0\u4e2a\u554a\uff0c\u7136\u540e\u5c31\u53ef\u4ee5 guess \u4e86\uff0c\u627e\u89c4\u5f8b\u3002</p> <pre><code>//1 G ,1\n//2 G ,2\n//3 Y ,1\n//4 G ,2\n//5 G ,3 , 3 Y , 1 G\n//6 Y ,2\n//7 G ,3\n//8 G ,4 \n//9 Y ,3 , 7 Y , 3\n//10 G\n//11 G\n</code></pre> <p>\u8fd9\u662f\u6211\u4eec\u63a8\u7684\uff0c\u5c31\u662f \\(n\\) \u4e3a\u591a\u5c11\uff0c\u7136\u540e\u8c01\u80fd\u8d62\uff0c\u80fd\u62ff\u5230\u591a\u5c11\u4e2a\u77f3\u5934\u3002</p> <p>\u5199\u8fd9\u4e48\u51e0\u4e2a\u5927\u6982\u5c31\u80fd\u770b\u51fa\u6765\uff0c\u4e00\u5b9a\u662f\u53ef\u4ee5\u76f4\u63a5\u786e\u5b9a\u8c01\u80fd\u8d62\u7684\u3002\u4e24\u4e2a\u4eba\u90fd\u5e0c\u671b\u80fd\u62ff\u8d70\u5c3d\u53ef\u80fd\u591a\u7684\u77f3\u5934\uff0c\u6240\u4ee5\u5982\u679c\u4f60\u600e\u4e48\u9009\u90fd\u662f\u8f93\uff0c\u90a3\u80af\u5b9a\u5c31\u662f\u62ff 2 \u4e2a\u3002</p> <p>\u524d\u9762\u63a8\u7684\u5c31\u662f\uff0c\u663e\u7136 1 \u548c 2 \u4e2a\u77f3\u5934\u65f6\uff0c\u5148\u624b\u5fc5\u8d62\u3002\u5982\u679c\u662f 3 \u4e2a\u77f3\u5934\uff0c\u90a3\u4e48\u5148\u624b\u7684\u4eba\u4e00\u5b9a\u4f1a\u628a\u4ed6\u8f6c\u6362\u6210 2 \u6216 1\uff0c\u4e14\u53e6\u4e00\u4e2a\u4eba\u5148\u624b\uff0c\u4e8e\u662f\u53d8\u6210\u53e6\u4e00\u4e2a\u4eba\u7684\u5fc5\u80dc\u72b6\u6001\u3002\u6240\u4ee5\u5c31\u591a\u63a8\u51e0\u4e2a\u5c31\u53ef\u4ee5\u731c\u5566\u3002</p> <pre><code>void solve()\n{\n    long long n;\n    cin&gt;&gt;n;\n    long long ans=(n-1)/3+1;\n    if(n%3==0){\n        cout&lt;&lt;\"1 \";\n        cout&lt;&lt;ans&lt;&lt;'\\n';\n    }else{\n        cout&lt;&lt;\"0 \";\n        if(n%3==2) cout&lt;&lt;ans+1&lt;&lt;'\\n';\n        else cout&lt;&lt;ans&lt;&lt;'\\n';\n    }\n}\n</code></pre>"},{"location":"XCPC/Provincial/2024Sichuan/#l","title":"L","text":"<p>\u8fd9\u4e2a\u5c31\u662f\u5f88\u7b7e\u5230\u5566\u3002</p> <p>\u5c31\u770b\u628a\u54ea\u4e2a\u653e\u5230\u7b2c\u4e00\u4e2a\u9505\uff0c\u54ea\u4e2a\u653e\u7b2c\u4e8c\u4e2a\u9505\u3002</p> <p>\u7136\u540e\u6309\u503c\u6392\u5e8f\u8f93\u51fa\u4e0b\u6807\u5373\u53ef\u3002</p> <pre><code>void solve()\n{\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;pair&lt;int, int&gt;&gt; v1, v2;\n    for (int i = 1; i &lt;= n; i++) {\n        int a, b, c, d;\n        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d;\n        if (c == d) {\n            if (a &lt; b) {\n                v1.push_back({ a, i });\n            } else {\n                v2.push_back({ b, i });\n            }\n        } else if (c)\n            v1.push_back({ a, i });\n        else\n            v2.push_back({ b, i });\n    }\n    sort(v1.begin(),v1.end(),[](pair&lt;int,int&gt;x,pair&lt;int,int&gt;y){\n        return x.first&lt;y.first;\n    });\n    sort(v2.begin(),v2.end(),[](pair&lt;int,int&gt;x,pair&lt;int,int&gt;y){\n        return x.first&lt;y.first;\n    });\n    cout&lt;&lt;v1.size()&lt;&lt;' ';\n    for(auto [_,i]:v1)\n        cout&lt;&lt;i&lt;&lt;\" \";\n    cout&lt;&lt;'\\n';\n    cout&lt;&lt;v2.size()&lt;&lt;' ';\n    for(auto [_,i]:v2)\n        cout&lt;&lt;i&lt;&lt;\" \";\n}\n</code></pre>"},{"location":"XCPC/Provincial/2025Chongqing/","title":"\u7b2c\u5341\u4e09\u5c4a\u91cd\u5e86\u5e02\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b","text":"<p>2025-05-12</p> <p>gym: https://codeforces.com/gym/105887</p> <p></p> <p>\u8fd9\u573a\u505a\u5f97\u633a\u987a\uff0c\u53ea\u5199\u4e86\u4e24\u5c0f\u65f6\uff0c\u4e94\u9898\u3002</p> <p>\u4f46\u8fd9\u5199\u4e86\u7684\u51e0\u9898\u96be\u5ea6\u90fd\u592a\u4f4e\uff0c\u96be\u70b9\u7684\u4e0d\u597d\u505a\u3002</p>"},{"location":"XCPC/Provincial/2025Chongqing/#a","title":"A","text":"<p>\u64cd\u4f5c\u6b21\u6570\u662f\u4e0d\u4f1a\u8d85\u8fc7 \\(log n\\) \u6b21\u7684\uff0c\u6240\u4ee5\u76f4\u63a5\u6539\u5c31\u884c\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\n// mt19937_64 rng(time(NULL));\n\n// int rand_interger(int l,int r)\n// {\n//     uniform_int_distribution&lt;int&gt;dis(l, r);\n//     return dis(rng);\n// }\nvoid solve()\n{\n    int n;\n    cin &gt;&gt; n;\n    // n = rand_interger(90000,100000);\n    // cout &lt;&lt; n &lt;&lt; '\\n';\n    vector&lt;int&gt; a(n);\n    for(int i = 0; i &lt; n; i++){\n        cin &gt;&gt; a[i];\n        // a[i] = rand_interger(1, int(1e9));\n    }\n    if(*max_element(a.begin(), a.end()) == *min_element(a.begin(), a.end())){\n        cout &lt;&lt; \"0\\n\";\n        return;\n    }\n    vector&lt;int&gt; b(a);\n    for(int t = 1;t &lt;= n; t++){\n        int mx = 0, mn = int(2e9);\n        for(int j = 0; j &lt; n; j++){\n            a[j] |= b[(j + t) % n];\n            mx = max(mx, a[j]);\n            mn = min(mn, a[j]);\n        }\n        if(mx == mn){\n            cout &lt;&lt; t &lt;&lt; '\\n';\n            return;\n        }\n        b = a;\n    }\n}\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr), cout.tie(nullptr);\n    int T;\n    cin &gt;&gt; T;\n    while(T--)\n        solve();\n    return 0;\n}\n</code></pre>"},{"location":"XCPC/Provincial/2025Chongqing/#c","title":"C","text":"<p>\u6211\u60f3\u5230\u7684\u662f\uff0c\u5bf9\u4e8e\u7b2c \\(i\\) \u884c\uff0c\u5982\u679c\u662f\u5947\u6570\uff0c\u90a3\u4e48\u5947\u6570\u4f4d\u5168\u586b \\(i\\)\uff0c \u5426\u5219\u5076\u6570\u4f4d\u5168\u586b \\(i\\)\uff0c\u7136\u540e\u5176\u4f59\u4f4d\u586b\u5217\u6570 \\(j\\)\u3002\u90a3\u4e48\u8fd9\u6837\u5728\u6bcf\u4e00\u884c \\(i\\)\uff0c\u5728\u8fd9\u4e00\u884c\u91cc\u5b83\u4f1a\u548c\u6240\u6709\u5947\u5076\u4e0d\u540c\u7684\u6570\u5b57\u76f8\u90bb\uff0c\u7136\u540e\u5b83\u7684\u4e0b\u4e00\u884c\u6216\u8005\u4e0a\u4e00\u884c\u90fd\u662f\u548c\u5b83\u5947\u5076\u76f8\u540c\u7684\u6570\u5b57\u5728\u539f\u4f4d\u7f6e\uff0c\u6240\u4ee5\u5b83\u80fd\u548c\u6240\u6709\u5947\u5076\u548c\u5b83\u76f8\u540c\u7684\u6570\u5b57\u76f8\u90bb\u3002</p> <p>\u8fd9\u6837\u6211\u4eec\u5c31\u80fd\u8fbe\u5230\u6700\u591a\u7684 \\(n\\) \u79cd\u989c\u8272\u4e86\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nusing ll = long long;\n\nvoid solve()\n{\n    int n;\n    cin &gt;&gt; n;\n    for(int i = 1; i &lt;= n; i++){\n        for(int j = 1; j &lt;= n; j++){\n            if((j &amp; 1) == (i &amp; 1)) cout &lt;&lt; i &lt;&lt; \" \";\n            else cout &lt;&lt; j &lt;&lt; \" \";\n        }\n        cout &lt;&lt; '\\n';\n    }\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr), cout.tie(nullptr);\n    int T = 1;\n    cin &gt;&gt; T;\n\n    while(T--)\n        solve();\n    return 0;\n}\n</code></pre>"},{"location":"XCPC/Provincial/2025Chongqing/#f","title":"F","text":"<p>\u8fd9\u662f\u771f\u7b7e\u5230\u9898\u4e86\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid solve()\n{\n    int a, b, c;\n    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;\n    if(a &gt; b) cout &lt;&lt; \"Win\\n\";\n    else if(c &gt; b) cout &lt;&lt; \"WIN\\n\";\n    else cout &lt;&lt; \"nowin\\n\";\n}\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr), cout.tie(nullptr);\n    int T;\n    cin &gt;&gt; T;\n    while(T--)\n        solve();\n    return 0;\n}\n</code></pre>"},{"location":"XCPC/Provincial/2025Chongqing/#h","title":"H","text":"<p>\u82e5\u4e0d\u5b58\u5728\u4e0a\u4e0b\u5168\u8d34\u7740\u4e14\u4ea4\u53c9\u7684\uff0c\u5219\u4e00\u5b9a\u53ef\u4ee5\uff0c\u7b80\u5355\u753b\u4e0b\u7136\u540e\u731c\u731c\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nusing ll = long long;\nusing pii = pair&lt;int, int&gt;;\n\nvoid solve()\n{\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;int&gt; a(n + 1), b(n + 1), c(n + 1), p(n + 1);\n    for(int i = 1; i &lt;= n; i++) cin &gt;&gt; a[i];\n    for(int i = 1; i &lt;= n; i++){\n        cin &gt;&gt; b[i];\n        p[b[i]] = i;\n    }\n    for(int i = 1; i &lt;= n; i++) cin &gt;&gt; c[i];\n    vector&lt;pii&gt; info;\n    for(int i = 1; i &lt;= n; i++)\n        if(c[i]) info.push_back({i, p[a[i]]});\n    int R = 0;\n    for(auto [l, r] : info){\n        if(r &lt; R){\n            cout &lt;&lt; \"No\\n\";\n            return;\n        }\n        R = max(R, r);\n    }\n    cout &lt;&lt; \"Yes\\n\";\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr), cout.tie(nullptr);\n    int T = 1;\n    cin &gt;&gt; T;\n\n    while(T--)\n        solve();\n    return 0;\n}\n</code></pre>"},{"location":"XCPC/Provincial/2025Chongqing/#l","title":"L","text":"<p>\u6ce8\u610f\u662f\u6808\uff0c\u6240\u4ee5\u4f60 repeat \u7684\u8bdd\uff0c\u4e00\u5b9a\u662f\u628a\u6808\u91cc\u9762\u7684\u4e1c\u897f\u590d\u5236\u4e86\u4e00\u4efd\u7684\u3002\u5c31\u4e5f\u633a\u7b80\u5355\u7684\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nusing ll = long long;\n\nconstexpr int N = int(2e5);\nconstexpr int mod = 998244353;\n\nvoid solve()\n{\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;int&gt; stk;\n    ll ans = 0;\n    for(int i = 1; i &lt;= n; i++){\n        // cout &lt;&lt; \"size: \" &lt;&lt; stk.size() &lt;&lt; '\\n';\n        string op;\n        cin &gt;&gt; op;\n        if(op == \"Push\"){\n            int x;\n            cin &gt;&gt; x;\n            ans = (ans + x) % mod;\n            stk.push_back(x);\n        }else if(op == \"Pop\"){\n            ans = (ans - stk.back()) % mod;\n            stk.pop_back();\n            ans = (ans + mod) % mod;\n        }else{\n            ans = ans * 2 % mod;\n            if(stk.size() &amp;&amp; stk.size() &lt; n){\n                int siz = stk.size();\n                for(int j = 0; j &lt; siz; j++)\n                    stk.push_back(stk[j]);\n            }\n        }\n        cout &lt;&lt; ans &lt;&lt; '\\n';\n    }\n}\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr), cout.tie(nullptr);\n    int T = 1;\n    // cin &gt;&gt; T;\n    while(T--)\n        solve();\n    return 0;\n}\n</code></pre>"},{"location":"XCPC/Provincial/2025Shaanxi/","title":"\u7b2c\u5341\u4e09\u5c4a\u9655\u897f\u7701\u56fd\u9645\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b - \u6b63\u5f0f\u8d5b","text":"<p>2025-05-13</p> <p>gym: https://codeforces.com/gym/105891</p> <p></p> <p>\u6253\u633a\u5dee\u7684\u4e00\u96c6\uff0cVP\u53eaAC\u4e86\u56db\u9898\u3002\u6709\u4e00\u9898\u5361\u5f88\u7b80\u5355\u7684\u5730\u65b9\u4e86\u3002\u867d\u7136\u53eaVP\u4e09\u5c0f\u65f6\u3002\u56de\u5bdd\u5ba4\u53c8\u770b\u4e86\u4e24\u5c0f\u65f6\u3002</p>"},{"location":"XCPC/Provincial/2025Shaanxi/#a","title":"A","text":"<p>\u663e\u7136\u6bcf\u4e2a\u989c\u8272\u5355\u72ec\u5904\u7406\uff0c\u7136\u540e\u5c31\u662f\u770b\u8fd9\u6b21\u64cd\u4f5c\u548c\u4e0a\u6b21\u64cd\u4f5c\u9694\u7740\u591a\u5c11\u4e2a\u8ddd\u79bb\uff0c\u8003\u8651\u662f\u628a\u4e2d\u95f4\u7684\u5168\u90e8\u6d82\u8272\u8fd8\u662f\u5f00\u4e00\u6b21\u65b0\u7684\u64cd\u4f5c\uff0c\u54ea\u4e2a\u5c11\u9009\u54ea\u4e2a\u5c31\u884c\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nusing ll = long long;\n\nvoid solve()\n{\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;int&gt; c(n + 1), w(n + 1);\n    vector&lt;vector&lt;int&gt;&gt; g(n + 1, vector&lt;int&gt;());\n    for(int i = 1; i &lt;= n; i++){\n        cin &gt;&gt; c[i];\n        g[c[i]].push_back(i);\n    }\n    for(int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; w[i];\n    for(int i = 1; i &lt;= n; i++){\n        // i = 2;\n        g[i].push_back(n + 1);\n        int res = 0, lst = -1, idx = 0;\n        for(int j = 0; j &lt; g[i].size(); j++){\n            if(idx != g[i][j] - 1){\n                if(lst == -1){\n                    res += w[i] + (g[i][j] - idx - 1);\n                }else{\n                    res += min(w[i] + g[i][j] - idx - 1, g[i][j] - lst - 1);\n                }\n                lst = g[i][j] - 1;\n            }\n            idx = g[i][j];\n            // cerr &lt;&lt; idx &lt;&lt;\" \" &lt;&lt; lst &lt;&lt; \" \" &lt;&lt; res &lt;&lt; '\\n';\n        }\n        cout &lt;&lt; res &lt;&lt; \" \\n\" [i == n];\n        // break;\n    }\n}\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr), cout.tie(nullptr);\n    int T = 1;\n    // cin &gt;&gt; T;\n    while(T--)\n        solve();\n    return 0;\n}\n</code></pre>"},{"location":"XCPC/Provincial/2025Shaanxi/#c","title":"C","text":"<p>\u4e00\u76f4\u628a \\(b\\) \u9664 \\(gcd(a, b)\\) \u76f4\u5230 \\(gcd(a, b) = 1\\)\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u4e1c\u897f\u4f60\u4e0d\u9664\u6389\u7684\u8bdd\uff0c\\(a\\) \u548c \\(b\\) \u4e00\u5b9a\u4e0d\u4e92\u8d28\uff0c\u800c\u4e14\u9664\u4e86\u4e4b\u540e\uff0c\u4e00\u5b9a\u662f \\(b\\) \u7684\u56e0\u5b50\u3002</p> <pre><code>/*\ngcd(a, b) = g\ngcd(a / g, b / g) = 1\n\n16 18\n\n32 48\n*/\n#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nusing ll = long long;\n\nvoid solve()\n{\n    ll a, b;\n    cin &gt;&gt; a &gt;&gt; b;\n    if(b == 1)\n        cout &lt;&lt; \"-1\\n\";\n    else if(a == 1)\n        cout &lt;&lt; b &lt;&lt; '\\n'; \n    else{\n        ll c = b;\n        for(;c != 1;){\n            ll g = gcd(a, c);\n            if(g == 1) break;\n            c /= g;\n        }\n        if(c == 1) c = -1;\n        cout &lt;&lt; c &lt;&lt; '\\n';\n    }\n\n}\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr), cout.tie(nullptr);\n    int T;\n    cin &gt;&gt; T;\n    while(T--)\n        solve();\n    return 0;\n}\n</code></pre>"},{"location":"XCPC/Provincial/2025Shaanxi/#g","title":"G","text":"<p>\u5f88\u7b80\u5355\uff0c\u8bc1\u660e\u7b80\u5355\uff0c\u5c31\u662f\u9996\u5148\uff0c\\(a_1\\) \u548c \\(a_n\\) \u4e00\u5b9a\u662f\u5220\u4e0d\u6389\u7684\uff0c\u4e2d\u95f4\u7684\u6570\u5b57\u6700\u591a\u53ea\u80fd\u7559\u4e0b\u4e24\u4e2a\uff0c\u6700\u5927\u503c\u6216\u8005\u6700\u5c0f\u503c\u3002\u4e14\u82e5 \\(a_1\\) \u6216 \\(a_n\\) \u662f\u6700\u5927\u503c\uff0c\u5219\u6700\u5927\u503c\u4e5f\u53ef\u4ee5\u88ab\u5220\uff0c\u82e5 \\(a_1\\) \u6216 \\(a_n\\) \u662f\u6700\u5c0f\u503c\uff0c\u5219\u6700\u5c0f\u503c\u4e5f\u53ef\u4ee5\u88ab\u5220\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nusing ll = long long;\n\nvoid solve()\n{\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;int&gt; a(n + 1);\n    for(int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; a[i];\n    if(n == 1){\n        cout &lt;&lt; \"1\\n\";\n        return;\n    }\n    int mx = *max_element(a.begin() + 1, a.end());\n    int mn = *min_element(a.begin() + 1, a.end());\n    if(a[1] &lt; a[n]) swap(a[1], a[n]);\n    if(a[1] == mx &amp;&amp; a[n] == mn) cout &lt;&lt; \"2\\n\";\n    else if(a[1] == mx || a[n] == mn) cout &lt;&lt; \"3\\n\";\n    else cout &lt;&lt; \"4\\n\";\n}\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr), cout.tie(nullptr);\n    int T = 1;\n    // cin &gt;&gt; T;\n    while(T--)\n        solve();\n    return 0;\n}\n</code></pre>"},{"location":"XCPC/Provincial/2025Shaanxi/#j","title":"J","text":"<p>\u7531\u4e8e\u56db\u4e2a\u5b57\u7b26\u90fd\u4e0d\u540c\uff0c\u53ea\u9700\u8981\u627e\u5230\u591a\u7684\u7136\u540e\u76f4\u63a5\u7b97\u5c31\u884c\u3002\u5148\u51d1\u957f\u5ea6\u957f\u7684\u3002\u90a3\u6211\u4eec\u5c31\u627e\u80fd\u51d1\u6210 lose \u7684\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u548c\u6570\u91cf\u5c31\u884c\uff0c\u4e14\u4e0d\u80fd\u91cd\u590d\uff0c\u5c31\u5148\u627e\u957f\u7684\u5c31\u884c\u3002</p> <p>\u7cd6\u4e38\u4e86\u7684\u5730\u65b9\u662f\uff0c\u957f\u5ea6\u4e3a \\(3\\) \u7684\u6709\u56db\u79cd\uff0c\u6211\u4eec\u5f53\u65f6\u53ea\u5199\u4e86\u4e09\u79cd\uff0c\u56db\u4e2a\u9009\u4e09\u4e2a\u663e\u7136\u662f\u56db\u79cd\u9009\u6cd5\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nusing ll = long long;\n\nvoid solve()\n{\n    int k;\n    cin &gt;&gt; k;\n\n    string s;\n    cin &gt;&gt; s;\n    int n = s.size();\n\n    vector&lt;bool&gt; vis(n);\n    int cnt[5] {0, 0, 0, 0, 0 };\n\n    for (int i = 0; i + 3 &lt; n; i++) {\n        if (vis[i] || vis[i + 1] || vis[i + 2] || vis[i + 3])\n            continue;\n\n        if (s.substr(i, 4) == \"lose\") {\n            cnt[4]++;\n\n            vis[i] =\n            vis[i + 1] = \n            vis[i + 2] = \n            vis[i + 3] = true;\n        }\n    }\n\n    // lose\n    for (int i = 0; i + 2 &lt; n; i++) {\n\n        if (vis[i] || vis[i + 1] || vis[i + 2])\n            continue;\n\n        string t = s.substr(i, 3);\n\n        if (t == \"los\" || t == \"ose\" || t == \"lse\" || t == \"loe\") {\n            cnt[3]++;\n\n            vis[i] = \n            vis[i + 1] = \n            vis[i + 2] = true;\n        }\n    }\n\n    // lose\n    for (int i = 0; i + 1 &lt; n; i++) {\n\n        if (vis[i] || vis[i + 1])\n            continue;\n\n        string t = s.substr(i, 2);\n\n        if (t == \"lo\" || t == \"ls\" || t == \"le\" || t == \"os\" || t == \"oe\" || t == \"se\") {\n            cnt[2]++;\n\n            vis[i] = \n            vis[i + 1] = true;\n        }\n    }\n\n    for (int i = 0; i &lt; n; i++) {\n\n        if (vis[i])\n            continue;\n\n        if (s[i] == 'l' || s[i] == 'o' || s[i] == 's' || s[i] == 'e') {\n            cnt[1]++;\n\n            vis[i] = true;\n        }\n    }\n\n    // cout &lt;&lt; cnt[4] &lt;&lt;\" \" &lt;&lt; cnt[3] &lt;&lt;\" \" &lt;&lt;cnt[2] &lt;&lt;\" \" &lt;&lt; cnt[1] &lt;&lt; '\\n';\n    int ans = cnt[4];\n\n    for (int i = 3; i &gt;= 1; i--) {\n        if (k &gt;= cnt[i] * (4 - i)) {\n            k -= cnt[i] * (4 - i);\n            ans += cnt[i];\n        } else {\n            ans += k / (4 - i);\n            k %= (4 - i);\n            // break;\n        }\n    }\n    ans += k / 4;\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr), cout.tie(nullptr);\n    int T = 1;\n    // cin &gt;&gt; T;\n    while (T--)\n        solve();\n    return 0;\n}\n</code></pre>"},{"location":"XCPC/Provincial/2025Shaanxi/#k","title":"K","text":"<p>\u633a\u7b80\u5355\uff0c\u7a0d\u5fae\u8ba8\u8bba\u4e0b\u5c31\u884c\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nusing ll = long long;\n\nvoid solve()\n{\n    ll n, m, x, y;\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; x &gt;&gt; y;\n    /*\n    tangwanle\n    \u73b0\u5728\u624d\u53d1\u73b0 \u65e0\u79c1\u7684\u725b\u5e0c\u671b\u6240\u6709\u725b\u7684\u8349\u7684\u603b\u548c\u6700\u591a\n    \u672c\u4ee5\u4e3a\u662f\u4ed6\u5e0c\u671b\u81ea\u5df1\u7684\u540c\u7c7b\u5f97\u5230\u7684\u603b\u548c\u66f4\u591a\n\n    \u5509\u5509\uff0c\u592a\u65e0\u79c1\u4e86\n    \u4f46\u662f\u8fd9\u6837\u662f\u4e0d\u662f\u7b80\u5355\u70b9\u6765\u7740\n\n    \u5982\u679c\u81ea\u79c1\u725b\u5168\u53bb B, \u90a3\u6700\u597d\n    \u65e0\u79c1\u7684\u725b\u6700\u591a\u6d3e\u4e00\u4e2a\u4eba\u53bb A\n\n    \u5426\u5219\u4ed6\u53ef\u80fd\u5f97\u903c\u7740\u5927\u5bb6\u53bb B\n    \u5f53\u7136\u8fd9\u4e9b\u4f1a\u548c\u4eba\u6570\u6709\u5173\n\n    \u65e0\u79c1\u7684\u725b\u80af\u5b9a\u5e0c\u671b\u53bb A \u7684\u725b\u4f1a\u5c3d\u91cf\u5c11\n    */\n    //\u9996\u5148\u5c31\u770b\u5982\u679c\u65e0\u79c1\u7684\u90fd\u4e0d\u53bb A, \u90a3\u4e48\u7b54\u6848\u5c31\u662f\n    ll ans = 0;\n    if(x &gt; y){\n        if(m)\n            ans = max(ans, x + y * n);\n        else if(n)\n            ans = max(ans , x + (n - 1) * y);\n        // \u81ea\u79c1\u7684\u5168\u53bb A, \u65e0\u79c1\u7684\u8bd5\u8bd5\u80fd\u4e0d\u80fd\u8ba9\u4ed6\u4eec\u90fd\u4e0d\u53bb A\n\n        // x / (1 + cnt) &lt;= y\n        // x &lt;= y * cnt\n        // cnt &gt;= (x + y -1) / y, \u5b83\u4eec\u624d\u4e0d\u4f1a\u53bb\n        if(y){\n            int cnt = (x + y - 1) / y - 1;\n            cnt = max(cnt, 1);\n            if(n &gt;= cnt)\n                ans = max(ans, x + (m + n - cnt) * y);\n        }\n    }\n    else{\n        if(n)\n            ans = max(ans, x + (m + n - 1) * y);\n        ans = max(ans, (m + n) * y);\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\nint main()\n{\n    // freopen(\"1.in\", \"r\", stdin);\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr), cout.tie(nullptr);\n    int T = 1;\n    cin &gt;&gt; T;\n    while (T--)\n        solve();\n    return 0;\n}\n</code></pre>"},{"location":"XCPC/Provincial/2025Shaanxi/#l","title":"L","text":"<p>\u7b7e\u5230\u9898\uff0c\u968f\u4fbf\u9009\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nusing ll = long long;\n\nvoid solve()\n{\n    int n;\n    cin &gt;&gt; n;\n    ll ans = 0;\n        for(int i = 1; i &lt; n; i++){\n            ans += 3 + (i - 1) * 2 * (n + 1);\n        }\n    ans += n * n + (n * n - n + 1);\n\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr), cout.tie(nullptr);\n    int T = 1;\n    // cin &gt;&gt; T;\n    while(T--)\n        solve();\n    return 0;\n}\n</code></pre>"},{"location":"XCPC/Regional/2024Hangzhou/","title":"\u7b2c 49 \u5c4a ICPC \u56fd\u9645\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u533a\u57df\u8d5b\u676d\u5dde\u7ad9","text":"<p>2025-03-29</p> <p>\u6bd4\u8d5b\u94fe\u63a5: https://codeforces.com/gym/105657</p> <p>\u699c\u5355\u94fe\u63a5: https://board.xcpcio.com/icpc%2F49th%2Fhangzhou?group=official</p> <p>\u8d5b\u65f6\u5f55\u5c4f\uff1ahttps://www.bilibili.com/video/BV14HZAYBE2D/?share_source=copy_web&amp;vd_source=9bd61884350b59581dea6fe19fc6f004</p> <p></p> <p>\u8fd9\u573a\u6253\u5f97\u4e0d\u7b97\u5f88\u597d\uff0c\u6211\u6709\u4e00\u4e9b\u95ee\u9898\u3002\u3002H \u8fdc\u6bd4 M \u597d\u5199\uff0c\u4f46\u6211\u524d\u9762\u770b\u4eba\u6570\u5dee\u5f97\u4e0d\u662f\u5f88\u591a\uff0c\u5e72\u8106\u53bb\u770b M \u4e86\uff0c\u6700\u540e\u53d1\u73b0\u4e00\u76f4 WA\uff0c\u6700\u540e\u4e00\u5c0f\u65f6\u6ca1\u529e\u6cd5\u53ea\u80fd\u53bb\u770b H \uff0c\u611f\u89c9\u5f88\u7b80\u5355\u3002\u4f46\u662f\u4e5f\u4e00\u76f4 WA\uff0c\u8d5b\u540e\u770b\u9898\u89e3\u53d1\u73b0\u4e5f\u786e\u5b9e\u662f\u7f3a\u7279\u5224\u6ca1\u60f3\u5230\u3002\u79bb\u94dc\u5dee20\u540d\u3002</p>"},{"location":"XCPC/Regional/2024Hangzhou/#a","title":"A","text":"<p>\u7b7e\u5230\uff0c\u4f46\u662f WA \u4e24\u6b21\u3002\u3002\u3002\u7136\u540e\u7a0d\u5fae\u770b\u4e86\u4e0b\u53d1\u73b0\u8981\u7528\u4e0b\u5e76\u67e5\u96c6\u3002</p> <pre><code>void ChatGptDeepSeek()\n{\n    string s1, s2, s3;\n    cin &gt;&gt; s1 &gt;&gt; s2 &gt;&gt; s3;\n    if (s1.size() != s2.size())\n    {\n        cout &lt;&lt; \"NO\\n\";\n        return;\n    }\n    if (s3.size() != s1.size())\n    {\n        cout &lt;&lt; \"YES\\n\";\n        return;\n    }\n    vector&lt;int&gt; f(27);\n    iota(f.begin(), f.end(), 0);\n    auto find = [&amp;](auto &amp;&amp;self, int x) -&gt; int\n    {\n        return f[x] == x ? x : f[x] = self(self, f[x]);\n    };\n    for (int i = 0; i &lt; s1.size(); i++)\n    {\n        int x = s1[i] - 'a' + 1;\n        int y = s2[i] - 'a' + 1;\n        f[find(find, x)] = find(find, y);\n    }\n    for (int i = 0; i &lt; s3.size(); i++)\n    {\n        int x = s1[i] - 'a' + 1;\n        int y = s3[i] - 'a' + 1;\n        if (find(find, x) != find(find, y))\n        {\n            cout &lt;&lt; \"YES\\n\";\n            return;\n        }\n    }\n    cout &lt;&lt; \"NO\\n\";\n}\n</code></pre>"},{"location":"XCPC/Regional/2024Hangzhou/#e","title":"E","text":"<p>\u5982\u679c\u6709\u6bd4 \\(f\\) \u4f4e\u7684\u697c\u5c42\uff0c\u6211\u4eec\u53ef\u4ee5\u514d\u8d39\u8fc7\u53bb\u3002\u4f46\u5982\u679c\u90a3\u4e2a\u697c\u5c42\u8981\u53bb\u7684\u6bd4 \\(f\\) \u4f4e\uff0c\u6211\u4eec\u8fc7\u53bb\u5c31\u4e0d\u5212\u7b97\u3002</p> <p>\u82e5\u6bd4 \\(f\\) \u4f4e\u7684\u697c\u5c42\u91cc\uff0c\u6709\u4eba\u9700\u8981\u53bb\u6bd4 \\(f\\) \u66f4\u9ad8\u7684\u697c\u5c42\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u76f8\u5f53\u4e8e\u53ef\u4ee5\u514d\u8d39\u8ba9 \\(f\\) \u53d8\u5f97\u66f4\u9ad8\uff0c\u8fd9\u663e\u7136\u66f4\u597d\u3002</p> <p>\u5982\u679c \\(f\\) \u4e0d\u80fd\u53d8\u5f97\u66f4\u9ad8\uff0c\u82e5\u6709\u4eba\u5728\u6bd4 \\(f\\) \u9ad8\u7684\u697c\u5c42\uff0c\u90a3 \\(f\\) \u80af\u5b9a\u53bb\u4e0b\u4e00\u4e2a\u6bd4 \\(f\\) \u5927\u7684 \\(l\\) \u7684 \\(r\\) \u90a3\u91cc\uff0c\u5426\u5219\u5c31\u987a\u7740 \\(l\\) \u4ece\u5927\u5230\u5c0f\u8d70\u5b8c\u3002</p> <p>\u4f18\u5148\u961f\u5217\u7ef4\u62a4\u4e0b\u5c31\u884c\u3002</p> <pre><code>using pii = pair&lt;int, int&gt;;\n#define fi first\n#define se second\nvoid ChatGptDeepSeek()\n{\n    int n, f;\n    cin &gt;&gt; n &gt;&gt; f;\n    priority_queue&lt;pii, vector&lt;pii&gt;, greater&lt;&gt;&gt; pq;\n    priority_queue&lt;pii&gt; low, low1;\n    vector&lt;int&gt; l(n + 1), r(n + 1);\n    for (int i = 1; i &lt;= n; i++)\n    {\n        cin &gt;&gt; l[i] &gt;&gt; r[i];\n        pq.push({l[i], i});\n        // \u6309 [l,r] \u6392\u5e8f\n    }\n    int lst = f;\n    vector&lt;int&gt; ans;\n    while (pq.size() || low.size())\n    {\n        while (!pq.empty() &amp;&amp; pq.top().fi &lt;= f)\n        {\n            auto [left, i] = pq.top();\n            pq.pop();\n            low.push({r[i], i});\n        }\n        if (!low.empty() &amp;&amp; low.top().first &gt; f)\n        {\n            auto [right, i] = low.top();\n            low.pop();\n            ans.push_back(i);\n            f = right;\n        }\n        else if (!pq.empty())\n        {\n            auto [left, i] = pq.top();\n            pq.pop();\n            f = r[i];\n            ans.push_back(i);\n        }\n        while (!low.empty())\n        {\n            auto [right, i] = low.top();\n            low.pop();\n            low1.push({l[i], i});\n        }\n    }\n    while (!low1.empty())\n    {\n        auto [left, i] = low1.top();\n        low1.pop();\n        ans.push_back(i);\n    }\n    long long sum = 0;\n    for (auto i : ans)\n    {\n        sum += r[i] - l[i] + max(0, l[i] - lst);\n        lst = r[i];\n    }\n    cout &lt;&lt; sum &lt;&lt; '\\n';\n    for (auto i : ans)\n        cout &lt;&lt; i &lt;&lt; ' ';\n    cout &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"XCPC/Regional/2024Hangzhou/#h","title":"H","text":"<p>\u6211\u5355\u5355\u60f3\u5230\u4e86\u6240\u6709\u94fe\u7684\u7236\u8282\u70b9\u90fd\u53ef\u4ee5\u662f \\(root\\) \uff0c \\(root\\) \u5fc5\u987b\u662f\u6700\u957f\u7684\u94fe\u3002\u4f46\u5374\u6ca1\u8003\u8651\u5230\u82e5\u6709\u591a\u6761\u6700\u957f\u94fe\uff0c\u5176\u5b9e\u4e5f\u662f\u4f1a\u6709\u5408\u6cd5\u60c5\u51b5\u7684\u3002\u56e0\u4e3a\u91cd\u7684\u70b9\uff0c\u8003\u8651\u7684\u662f\u5b50\u6811\u5927\u5c0f\uff0c\u800c\u4e0d\u662f\u94fe\u7684\u957f\u5ea6\u3002</p> <p>\u6240\u4ee5\u82e5\u6709\u591a\u6761\u6700\u957f\u7684\u94fe\uff0c\u4ee5\u4e00\u6761\u6700\u957f\u94fe\u7684\u8d77\u70b9\u4e3a\u6839\uff0c\u8bd5\u8bd5\u80fd\u4e0d\u80fd\u628a\u6700\u77ed\u94fe\u653e\u5230\u90a3\u6761\u6700\u957f\u94fe\u7684\u7b2c\u4e8c\u4e2a\u70b9\u4e0a\u3002</p> <pre><code>void ChatGptDeepSeek()\n{\n    int n, k;\n    cin &gt;&gt; n &gt;&gt; k;\n    vector&lt;pii&gt; p(k);\n\n    for (int i = 0; i &lt; k; i++)\n        cin &gt;&gt; p[i].first &gt;&gt; p[i].second;\n    if (n == 1)\n    {\n        cout &lt;&lt; \"0\\n\";\n        return;\n    }\n    vector&lt;int&gt; f(n + 1);\n    sort(p.begin(), p.end(), [](pii x, pii y)\n         { return x.second - x.first &gt; y.second - y.first; });\n    if (p[0].first == p[0].second)\n    {\n        cout &lt;&lt; \"IMPOSSIBLE\\n\";\n        return;\n    }\n    for (int l = p[0].first + 1; l &lt;= p[0].second; l++)\n        f[l] = l - 1;\n\n    int max_len = p[0].second - p[0].first + 1, root = p[0].first;\n    if (k &gt; 1 &amp;&amp; p[1].second - p[1].first+1 == max_len)\n    {\n        auto [l, r] = p.back();\n        if (r - l + 1 &gt;= max_len - 1)\n        // if (max_len - (r - l + 1) &lt;= 1)\n        {\n            cout &lt;&lt; \"IMPOSSIBLE\\n\";\n            return;\n        }\n        f[l] = root + 1;\n        for (int i = l + 1; i &lt;= r; i++)\n        {\n            if (f[i] || i == root)\n            {\n                cout &lt;&lt; \"IMPOSSIBLE\\n\";\n                return;\n            }\n            f[i] = i - 1;\n        }\n        k--;\n    }\n    long long sum = max_len;\n    for (int i = 1; i &lt; k; i++)\n    {\n        auto [l, r] = p[i];\n        sum += r - l + 1;\n\n        // if (r - l + 1 == max_len)\n        // {\n        //     cout &lt;&lt; \"IMPOSSIBLE\\n\";\n        //     return;\n        // }\n        if (f[l] || l == root)\n        {\n            cout &lt;&lt; \"IMPOSSIBLE\\n\";\n            return;\n        }\n        f[l] = root;\n\n        for (int j = l + 1; j &lt;= r; j++)\n        {\n            if (f[j] || j == root)\n            {\n                cout &lt;&lt; \"IMPOSSIBLE\\n\";\n                return;\n            }\n            f[j] = j - 1;\n        }\n    }\n\n    for (int i = 1; i &lt;= n; i++)\n    {\n        if (f[i] == 0 &amp;&amp; (i != root))\n        {\n            cout &lt;&lt; \"IMPOSSIBLE\\n\";\n            return;\n            // f[i] = root;\n        }\n    }\n    for (int i = 1; i &lt;= n; i++)\n        cout &lt;&lt; f[i] &lt;&lt; \" \\n\"[i == n];\n}\n</code></pre>"},{"location":"XCPC/Regional/2024Hangzhou/#k","title":"K","text":"<p>\u4e5f\u662f\u6ca1\u6ce8\u610f \\(k\\) \u53ef\u80fd\u4f1a\u5927\u4e8e\u524d\u9762\u7a7a\u51fa\u6765\u7684\u4f4d\u7f6e\u4e8e\u662f WA \u4e86\u4e00\u53d1\u3002</p> <pre><code>void ChatGptDeepSeek()\n{\n    int n, m, k;\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;\n    vector&lt;int&gt; p(n * m + 1);\n    for (int i = 1; i &lt;= n * m; i++)\n        cin &gt;&gt; p[i];\n    if (k &gt;= m)\n    {\n        cout &lt;&lt; m &lt;&lt; '\\n';\n        return;\n    }\n    vector&lt;vector&lt;int&gt;&gt; r(n + 1, vector&lt;int&gt;());\n    for (int i = 1; i &lt;= n * m; i++)\n    {\n        r[(p[i] + m - 1) / m].push_back(i);\n    }\n    int ans = n * m;\n    for (int i = 1; i &lt;= n; i++)\n    {\n        /* k m-k */\n        int idx = r[i][m - k - 1];\n        int rest = idx - (m - k);\n        int res = (k &gt; rest ? idx + (k - rest) : idx);\n        ans = min(ans, res);\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"XCPC/Regional/2024Hangzhou/#m","title":"M","text":"<p>\u6211\u4eec\u60f3\u7684\u662f\uff0c\u80fd\u4e0d\u80fd\u53ea\u8003\u8651\u957f\u5ea6\u4e3a2\u7684\u533a\u95f4\uff0c\uff0c\u56e0\u4e3a\u9664\u7684\u90a3\u4e2a\u6027\u8d28\u662f\u53ef\u4ee5\u4f20\u9012\u7684\u3002\u3002\u7136\u540e\u4e5f\u662f\u63a8\u51fa\u6765\u4e86\u4e24\u4e2a\u6570\u5b57\u7684\u8bdd\uff0c\u5c0f\u7684\u90a3\u4e2a\u52a0\u4e86\u4e4b\u540e\u5fc5\u987b\u662f\u5b83\u4eec\u5dee\u503c\u7684\u56e0\u5b50\u3002\u4f46\u662f\u6240\u6709\u533a\u95f4\u90fd\u8981\u8fd9\u6837\u8003\u8651\u3002\u8981\u7528\u7b1b\u5361\u5c14\u6811\uff0c\u8fd9\u4e2a\u6211\u8fd8\u6ca1\u5b66\u8fc7\uff0c\u4e4b\u540e\u5b66\u4e86\u518d\u56de\u6765\u770b\u770b\u8fd9\u9898\u3002</p> <p>\u8fd9\u4e2a\u9898\uff0c\u9996\u5148\u6bcf\u4e2a\u533a\u95f4\u7684\u6700\u5c0f\u503c \\(a_i+k\\) \u4e00\u5b9a\u8981\u662f\u533a\u95f4\u5185\u6240\u6709\u6570\u5b57\u6700\u5927\u516c\u56e0\u5b50\u7684\u4e00\u4e2a\u56e0\u5b50\u3002\u8bbe \\(g=gcd(a_2-a_1,a_3-a_2,...,a_i-a_{i-1})\\) , \u90a3\u4e48\u6bcf\u4e2a\u533a\u95f4\u7684\u6700\u5c0f\u503c \\((a_m+x)\\mid g\\) \u3002</p> <p>\u76f4\u63a5\u679a\u4e3e \\(g\\) \u7684\u56e0\u5b50\uff0c\u7136\u540e\u68c0\u67e5\u662f\u5426\u5408\u6cd5\u3002\u53ef\u4ee5\u5efa\u7b1b\u5361\u5c14\u6811\u6765\u68c0\u67e5\u662f\u5426\u5408\u6cd5\uff0c\u6bcf\u4e2a\u8282\u70b9\u5b83\u7684\u5de6\u53f3\u5b69\u5b50\u8282\u70b9\u4e00\u5b9a\u8981\u53ef\u4ee5\u88ab\u5b83\u6574\u9664\u3002\u4e8e\u662f\u6bcf\u6b21\u68c0\u67e5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5927\u7ea6\u662f \\(O(n)\\) \u3002\u56e0\u5b50\u7684\u4e2a\u6570\u662f\u4f1a\u8fdc\u5c0f\u4e8e \\(\\sqrt{V}\\) \u7684\u3002</p> <pre><code>void ChatGptDeepSeek()\n{\n    int n, k;\n    cin &gt;&gt; n &gt;&gt; k;\n    vector&lt;int&gt; a(n + 1);\n    int g = 0, mn = 1e9;\n    for (int i = 1; i &lt;= n; i++)\n    {\n        cin &gt;&gt; a[i];\n        mn = min(mn, a[i]);\n    }\n    for (int i = 2; i &lt;= n; i++)\n        g = __gcd(g, abs(a[i] - a[i - 1]));\n    // cerr &lt;&lt; g &lt;&lt; '\\n';\n    if (!g)\n    {\n        cout &lt;&lt; k &lt;&lt; \" \" &lt;&lt; 1LL * k * (k + 1) / 2 &lt;&lt; '\\n';\n        return;\n    }\n    vector&lt;int&gt; b(n + 1), l(n + 1), r(n + 1), d;\n    for (int i = 1; i * i &lt;= g; i++)\n    {\n        if (g % i == 0)\n        {\n            int dd = i - mn;\n            if (dd &gt;= 1 &amp;&amp; dd &lt;= k)\n                d.push_back(dd);\n            if (i * i != g)\n            {\n                dd = g / i - mn;\n                if (dd &gt;= 1 &amp;&amp; dd &lt;= k)\n                    d.push_back(dd);\n            }\n        }\n    }\n    int ans = 0;\n    long long sum = 0;\n\n    auto build = [&amp;]()\n    {\n        vector&lt;int&gt; stk;\n        for (int i = 1; i &lt;= n; i++)\n        {\n            while (!stk.empty() &amp;&amp; b[stk.back()] &gt; b[i])\n                l[i] = stk.back(), stk.pop_back();\n            if (!stk.empty())\n                r[stk.back()] = i;\n            stk.push_back(i);\n        }\n        mn = stk[0];\n    };\n    auto dfs = [&amp;](auto &amp;&amp;self, int i) -&gt; bool\n    {\n        if (l[i])\n        {\n            if (b[l[i]] % b[i])\n                return false;\n            if (!self(self, l[i]))\n                return false;\n        }\n        if (r[i])\n        {\n            if (b[r[i]] % b[i])\n                return false;\n            if (!self(self, r[i]))\n                return false;\n        }\n        return true;\n    };\n    auto check = [&amp;](int x)\n    {\n        for (int i = 1; i &lt;= n; i++)\n            b[i] = a[i] + x, l[i] = r[i] = 0;\n        build();\n        return dfs(dfs, mn);\n    };\n\n    for (auto x : d)\n    {\n        // cerr &lt;&lt; x &lt;&lt; \"\\n\";\n        if (check(x))\n            ans++, sum += x;\n    }\n    cout &lt;&lt; ans &lt;&lt; \" \" &lt;&lt; sum &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"XCPC/Regional/2024Shanghai/","title":"\u7b2c 49 \u5c4a ICPC \u56fd\u9645\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u533a\u57df\u8d5b\u4e0a\u6d77\u7ad9","text":"<p>2024-04-14</p> <p>\u672c\u6765\u4ee5\u4e3a\u8fd9\u573a\u4f1a\u76f8\u5bf9\u7b80\u5355\uff0cVP\u8d77\u7801\u80fd\u62ff\u4e2a\u724c\uff0c\u7136\u800c\u6253\u94c1\u4e14\u8ddd\u79bb\u724c\u5b50\u56db\u5341\u540d</p> <p>\u6bd4\u8d5b\u94fe\u63a5: https://qoj.ac/contest/1913</p> <p>\u699c\u5355\u94fe\u63a5: https://board.xcpcio.com/icpc%2F49th%2Fshanghai?group=official</p> <p>VP\u65f6\u53ea\u901a\u8fc7\u4e86B C I \uff0c\u6700\u540e\u7684\u65f6\u95f4\u90fd\u5728\u770b G \u4f46\u662f\u8fd8\u662f\u6ca1\u80fd\u6210\u529f\u3002\u6628\u665a\u53c8\u4ea4\u4e86\u4e24\u4e2a\u5c0f\u65f6\u3002\u770b\u4e86\u9898\u89e3\u52a0\u7f51\u4e0a\u641c\u4e86\u4e00\u4e0b\u8bf4\u8981\u6ce8\u610f\u8d1f\u6570\u6574\u9664\u7684\u3002\u3002\u3002\u52a0\u4e86\u4e00\u4e0b\u8fc7\u4e86\u3002</p> <p></p>"},{"location":"XCPC/Regional/2024Shanghai/#b","title":"B","text":""},{"location":"XCPC/Regional/2024Shanghai/#_1","title":"\u9898\u610f","text":"<p>\u7ed9\u4e86\u4e00\u4e32\u4ee3\u7801\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u56fe\u8fdb\u884c dfs \uff0c \u95ee\u6211\u4eec\u6700\u5c11\u52a0\u51e0\u6761\u8fb9\u624d\u80fd\u4f7f\u5f97 dfs \u65f6\u8f93\u51fa\u7684\u5e8f\u5217\u53ef\u80fd\u4e3a\u7ed9\u5b9a\u7684\u6392\u5217 \\(p\\) \u3002\u56e0\u4e3a\u5176\u5b9e\u662f\u4e0d\u786e\u5b9a\u6bcf\u6b21\u5148\u53bb\u8fde\u7740\u7684\u54ea\u4e2a\u70b9\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u8981\u4fdd\u8bc1\u6709\u53ef\u80fd\u8f93\u51fa \\(p\\) \u3002</p> <pre><code>function dfs(u)\n    mark u as visited\n    output u\n    for v in vertices adjacent to u\n        if v is not visited, then\n            dfs(v)\n        Endif\n    Endfor\nEndfunction\n\nfunction run_dfs()\n    for v in all vertices\n        if v is not visited, then\n            dfs(v)\n        Endif\n    Endfor\nEndfunction\n</code></pre>"},{"location":"XCPC/Regional/2024Shanghai/#_2","title":"\u601d\u8def","text":"<p>\u6211\u4eec\u8bb0\u5f55\u5f53\u524d\u56de\u6eaf\u5230\u4e86\u54ea\u4e2a\u70b9\uff0c\u5982\u679c\u8fd9\u4e2a\u70b9\u5468\u56f4\u6240\u6709\u7684\u70b9\u90fd\u56de\u6eaf\u5b8c\u4e86\uff0c\u90a3\u4e48\u5c31\u770b\u5b83\u7684\u7236\u8282\u70b9\u6709\u6ca1\u6709\u80fd\u8d70\u7684\uff0c\u5c31\u4e00\u76f4\u53d8\u6210\u5b83\u7684\u7956\u5148\u8282\u70b9\uff0c\u76f4\u5230\u6709\u53ef\u4ee5\u8d70\u7684\u70b9\u3002\u82e5\u5b83\u7684\u7956\u5148\u8282\u70b9\u90fd\u8d70\u5b8c\u4e86\uff0c\u90a3\u4e48\u540e\u9762\u7684\u70b9\uff0c\u5c31\u4e0d\u9700\u8981\u8fde\u8fb9\u4e86\u3002</p> <p>\u6211\u4eec\u8bbe \\(cur\\) \u4e3a\u6211\u4eec\u5f53\u524d\u5728\u7684\u70b9\uff0c\u521d\u59cb\u65f6\u4e3a \\(p_1\\) \uff0c\u82e5 \\(p_1\\) \u6ca1\u6709\u8fde\u4efb\u4f55\u70b9\uff0c\u90a3\u4e48\u5c31\u8ba9 \\(cur=0\\) \u3002</p> <p>\u6211\u4eec\u4ece \\(p_2\\) \u5f00\u59cb\u904d\u5386 \\(p\\) \uff0c\u82e5 \\(cur=0\\) \uff0c\u5219\u6709\u53ef\u80fd\u76f4\u63a5\u8d70 \\(p_i\\) \uff0c\u4e0d\u9700\u8981\u589e\u52a0\u8fb9\u3002\u82e5 \\(cur\\ne 0\\) \uff0c\u5219\u770b \\(p_i\\) \u6709\u6ca1\u6709\u548c\u5f53\u524d\u5728\u7684\u70b9 \\(cur\\) \u8fde\u8fb9\uff0c\u82e5\u6ca1\u6709\uff0c\u6211\u4eec\u5fc5\u987b\u52a0\u8fb9\u3002</p> <p>\u56e0\u4e3a\u4f60\u5f53\u524d\u7684\u90a3\u4e2a\u8282\u70b9\u8fd8\u6709\u5b50\u7ed3\u70b9\uff0c\u4e14\u662f\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u6240\u4ee5\u4e00\u5b9a\u4f1a\u5411\u5b50\u7ed3\u70b9\u8d70\uff0c\u6240\u4ee5\u4f60\u5fc5\u987b\u52a0\u4e00\u6761\u8fb9\u4f7f\u5f97\u4e0b\u4e00\u4e2a\u8d70\u7684\u70b9\u662f \\(p_i\\) \u3002\u6211\u4eec\u76f4\u63a5\u8fde \\(p_i\\) \u548c \\(p_{i-1}\\) \u5c31\u597d\u4e86\u3002\u56e0\u4e3a\u4e0a\u4e00\u4e2a\u8d70\u5230\u7684\u70b9\u80af\u5b9a\u662f \\(p_{i-1}\\) \uff0c\u8fde\u4e86\u4e4b\u540e\u80af\u5b9a\u4e0b\u4e00\u4e2a\u4f1a\u8d70 \\(p_{i}\\) \uff0c\u867d\u7136\u53ef\u80fd\u4f1a\u8fde \\(p_{i-1}\\) \u7684\u7956\u5148\u8282\u70b9\u4e5f\u662f\u53ef\u4ee5\u7684\uff0c\u4f46\u662f\u8fde \\(p_{i-1}\\)\u80af\u5b9a\u4e0d\u4f1a\u66f4\u5dee\u3002</p> <p>\u6bcf\u6b21\u64cd\u4f5c\u4e4b\u540e\u6211\u4eec\u5c31\u8bb0\u5f55\u6bcf\u4e2a\u70b9 \\(p_i\\) \u7684\u7236\u8282\u70b9\u662f\u8c01\uff0c\u4ee5\u53ca\u66f4\u65b0 \\(cur\\) \u4e3a\u5f53\u524d\u7684\u6709\u80fd\u8d70\u7684\u8fb9\u7684\u70b9\u3002</p> <pre><code>void ChatGptDeepSeek() // Date: 2025-04-13\n{                      // Time: 15:16:16\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    vector&lt;unordered_set&lt;int&gt;&gt; st(n + 1);\n    vector&lt;int&gt; cnt(n + 1), f(n + 1);\n    for (int i = 1; i &lt;= m; i++)\n    {\n        int u, v;\n        cin &gt;&gt; u &gt;&gt; v;\n        st[u].insert(v);\n        st[v].insert(u);\n    }\n\n    vector&lt;int&gt; p(n + 1);\n    for (int i = 1; i &lt;= n; i++)\n    {\n        cnt[i] = st[i].size();\n        cin &gt;&gt; p[i];\n    }\n    if (m == 0)\n    {\n        cout &lt;&lt; \"0\\n\";\n        return;\n    }\n    // for (int i = 1; i &lt;= n; i++)\n    //     cerr &lt;&lt; st[i].size() &lt;&lt; \" \\n\"[i == n];\n    vector&lt;pair&lt;int, int&gt;&gt; ans;\n    int cur = p[1];\n    vector&lt;bool&gt; vis(n + 1);\n    vis[p[1]] = true;\n    for (auto v : st[p[1]])\n    {\n        // st[v].erase(p[1]);\n        cnt[v]--;\n    }\n    if (st[p[1]].empty())\n        cur = 0;\n    // for (int i = 1; i &lt;= n; i++)\n    //     cerr &lt;&lt; st[i].size() &lt;&lt; \" \\n\"[i == n];\n    for (int i = 2; i &lt;= n; i++)\n    {\n        vis[p[i]] = true;\n        // cerr &lt;&lt; p[i] &lt;&lt; \" \" &lt;&lt; cur &lt;&lt; '\\n';\n        if (cur == 0)\n        {\n        }\n        else if (st[cur].contains(p[i]))\n        {\n            f[p[i]] = cur;\n        }\n        else\n        {\n            f[p[i]] = p[i - 1];\n            ans.push_back({p[i - 1], p[i]});\n        }\n        // for (auto v : st[p[i]])\n        // {\n        //     // st[v].erase(p[i]);\n        //     cnt[v]--;\n        // }\n        // for (auto v : st[p[i]])\n        //     if (vis[v])\n        //         st[v].erase(p[i]);\n        for (auto it = st[p[i]].begin(); it != st[p[i]].end();)\n        {\n            if (vis[*it])\n            {\n                st[*it].erase(p[i]);\n                it = st[p[i]].erase(it);\n            }\n            else\n                it++;\n        }\n        cur = p[i];\n        // for (int i = 1; i &lt;= n; i++)\n        // {\n        //     // cerr &lt;&lt; st[i].size() &lt;&lt; \" \\n\"[i == n];\n        //     cerr &lt;&lt; cnt[i] &lt;&lt; \" \\n\"[i == n];\n        // }\n        while (cur &amp;&amp; st[cur].empty())\n        {\n            // cerr&lt;&lt;cur&lt;&lt;\" \"&lt;&lt;cnt[cur]&lt;&lt;\" \"&lt;&lt;f[cur]&lt;&lt;'\\n';\n            cur = f[cur];\n        }\n        if (cur != p[i])\n            f[p[i]] = cur;\n        // cerr &lt;&lt; \"st[p[2]]: \";\n        // for (auto x : st[p[2]])\n        //     cerr &lt;&lt; x &lt;&lt; \" \";\n        // cerr &lt;&lt; '\\n';\n    }\n    cout &lt;&lt; ans.size() &lt;&lt; '\\n';\n    for (auto [u, v] : ans)\n        cout &lt;&lt; u &lt;&lt; \" \" &lt;&lt; v &lt;&lt; '\\n';\n}\n</code></pre> <p>\u6ce8\u610f\u66f4\u65b0 \\(cur\\) \u4e4b\u540e\uff0c\u53ef\u4ee5\u76f4\u63a5\u628a \\(p_i\\) \u7684\u7236\u8282\u70b9\u6539\u6210 \\(cur\\) , \u5426\u5219\u540e\u9762\u5c42\u6570\u53ef\u80fd\u4f1a\u5f88\u591a\uff0c\u5bfc\u81f4\u8d85\u65f6\u3002\u60f3\u60f3\u5f53\u8fde\u6210\u7684\u56fe\u4e3a\u4e00\u6761\u94fe\u65f6\u3002\u81f3\u4e8e\u5220\u70b9\uff0c\u5176\u5b9e\u6ca1\u5fc5\u8981\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u8fb9\u6700\u591a\u5c31\u904d\u5386\u4e24\u6b21\u3002</p>"},{"location":"XCPC/Regional/2024Shanghai/#c","title":"C","text":"<p>\u770b\u8d77\u6765\u662f\u535a\u5f08\uff0c\u4f46\u5176\u5b9e\u5f88\u7b80\u5355\uff0c\u5e76\u975e\u535a\u5f08\u5427\u3002</p>"},{"location":"XCPC/Regional/2024Shanghai/#_3","title":"\u9898\u610f","text":"<p>Alice \u548c Bob \u6b63\u5728\u73a9\u4e00\u4e2a\u6e38\u620f\u3002\u5728\u9ed1\u677f\u4e0a\u5199\u4e0b \\([l,r]\\) \u4e4b\u95f4\u7684\u6240\u6709\u6570\u5b57\uff0c\u6709\u4e00\u4e2a\u7279\u6b8a\u7684\u6570\u5b57 \\(x\\) \uff0c\u5f00\u59cb\u65f6\u7b49\u4e8e \\(l\\) \u3002</p> <p>Alice \u548c Bob \u8f6e\u6d41\u4ece\u9ed1\u677f\u4e0a\u64e6\u9664\u4e00\u4e2a \\(x\\) \u7684\u500d\u6570\uff0c\u5728\u8fd9\u4e4b\u540e \\(x\\) \u7684\u503c\u4f1a\u589e\u52a0 \\(1\\) \u3002Alice \u5148\u8fdb\u884c\u64cd\u4f5c\uff0c\u65e0\u6cd5\u64e6\u9664\u6570\u5b57\u7684\u4eba\u4f1a\u8f93\u3002\u95ee\u90fd\u4ee5\u6700\u4f73\u7b56\u7565\u64cd\u4f5c\u7684\u60c5\u51b5\u4e0b\uff0c\u8c01\u4f1a\u8d62\u3002</p>"},{"location":"XCPC/Regional/2024Shanghai/#_4","title":"\u601d\u8def","text":"<p>\u8003\u8651\u5230\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u4eba\u6765\u8bf4\uff0c\u4ed6\u4eec\u64cd\u4f5c\u7684 \\(x\\) \u7684\u5947\u5076\u6027\u662f\u56fa\u5b9a\u7684\uff0c\u4e14\u4e0e\u53e6\u4e00\u4e2a\u4eba\u76f8\u53cd\u3002\u4e00\u4e2a\u5076\u6570\u7684\u500d\u6570\u53ea\u80fd\u662f\u5076\u6570\uff0c\u4f46\u662f\u5947\u6570\u7684\u500d\u6570\u53ea\u80fd\u662f\u5947\u6570\u3002</p> <p>\u6240\u4ee5\u5bf9\u5076\u6570\u64cd\u4f5c\u7684\u90a3\u4e2a\u4eba\uff0c\u5979\u662f\u4e0d\u80fd\u4f7f\u5f97\u53e6\u4e00\u4e2a\u4eba\u53ef\u64cd\u4f5c\u7684\u6570\u5b57\u53d8\u5c11\u7684\uff1b\u5bf9\u5947\u6570\u64cd\u4f5c\u7684\u90a3\u4e2a\u4eba\uff0c\u53ef\u80fd\u53ef\u4ee5\u4f7f\u5f97\u4e00\u4e9b\u5076\u6570\u88ab\u5220\u6389\uff0c\u90a3\u4e48\u5c31\u4f1a\u8ba9\u5076\u6570\u53d8\u5c11\uff0c\u81ea\u5df1\u53ef\u80fd\u5c31\u80fd\u8d62\u4e86\u3002</p> <p>\u6240\u4ee5\u5c31\u770b\u5947\u6570\u5076\u6570\u7684\u6570\u91cf\u4ee5\u53ca\u662f\u5426\u6709\u5947\u6570\u7684\u5076\u6570\u500d\u6570\u5c31\u884c\u3002</p> <pre><code>void ChatGptDeepSeek() // Date: 2025-04-13\n{                      // Time: 15:04:24\n    // 2 3 4 5 6\n    //\n    int l, r;\n    cin &gt;&gt; l &gt;&gt; r;\n    if (l &amp; 1)\n    {\n        if (r &amp; 1)\n            cout &lt;&lt; \"Alice\\n\";\n        else\n        {\n            if (2 * l &lt;= r)\n                cout &lt;&lt; \"Alice\\n\";\n            else\n                cout &lt;&lt; \"Bob\\n\";\n        }\n    }\n    else\n    {\n        if (r &amp; 1)\n        {\n            cout &lt;&lt; \"Bob\\n\";\n        }\n        else\n        {\n            if ((l + 1) * 2 &lt;= r)\n                cout &lt;&lt; \"Bob\\n\";\n            else\n                cout &lt;&lt; \"Alice\\n\";\n        }\n    }\n}\n</code></pre>"},{"location":"XCPC/Regional/2024Shanghai/#d","title":"D","text":"<p>\u8fd9\u9898\u4e3b\u8981\u8fd8\u662f\u627e\u89c4\u5f8b\u3002\u6216\u8005\u8bf4\u8981\u624b\u63a8\u4e00\u4e0b\uff0c\u8010\u5fc3\u4e00\u70b9\u3002\u524d\u9762\u7684 \\(1\\) \u653e\u5230\u540e\u9762\u53bb\u603b\u662f\u4e0d\u4f1a\u66f4\u5dee\u7684\uff0c\u5f53\u7136\u5f97\u662f \\(n-2\\) \u524d\u9762\uff0c\u56e0\u4e3a\u6211\u4eec\u6700\u7ec8\u7684\u76ee\u6807\u5c31\u662f\u628a\u6700\u540e\u4e24\u4e2a\u5b57\u7b26\u53d8\u6210 \\(0\\) \u3002</p> <p>\u524d\u9762\u7684\u628a \\(1\\) \u5f04\u5230\u540e\u9762\u7684\u6b65\u9aa4\uff0c\u6211\u778e\u641e\u4e86\u4e00\u4e0b\u3002\u3002\u3002\u6570\u636e\u6c34\u8fc7\u4e86\u3002\u3002\u5148\u8fd9\u6837\u5427\uff0c\u5148\u4e0d\u7ea0\u7ed3\u8fd9\u4e2a\u4e86\u3002</p> <pre><code>void ChatGptDeepSeek() // Date: 2025-04-15\n{                      // Time: 15:05:45\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;char&gt; s(n + 1);\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; s[i];\n    if (s[n] == '0' &amp;&amp; s[n - 1] == '0')\n    {\n        cout &lt;&lt; \"Yes\\n\";\n        return;\n    }\n    if (n == 3)\n    {\n        cout &lt;&lt; \"No\\n\";\n        return;\n    }\n    for (int _ = 0; _ &lt; 50; _++)\n        for (int i = 1; i + 4 &lt;= n; i++)\n            if (s[i] == '1' &amp;&amp; s[i + 1] == '1' &amp;&amp; s[i + 2] == '0')\n                swap(s[i + 1], s[i + 2]);\n\n    /*\n    11101111\n    11011111\n\n     */\n    // if(s[n-3]=='0'&amp;&amp;s[n-2]=='1'&amp;&amp;n&gt;4&amp;&amp;s[n-4]=='1')\n    //     swap(s[n-3],s[n-2]);\n    if (s[n - 2] == '1' &amp;&amp; s[n - 3] == '1')\n        cout &lt;&lt; \"Yes\\n\";\n    else if (s[n - 3] == '1' &amp;&amp; s[n - 2] == '0')\n    {\n        if (s[n - 1] == '0' &amp;&amp; s[n] == '1')\n            cout &lt;&lt; \"No\\n\";\n        else\n            cout &lt;&lt; \"Yes\\n\";\n    }\n    else if (s[n - 3] == '0' &amp;&amp; s[n - 2] == '0')\n        cout &lt;&lt; \"No\\n\";\n    else if (n &gt; 4 &amp;&amp; s[n - 4] == '1')\n        cout &lt;&lt; \"Yes\\n\";\n    else\n        cout &lt;&lt; \"No\\n\";\n    // 1110 -&gt;1010-&gt;1100\n    // 1101 -&gt;1110-&gt;1110-&gt;1010-&gt;1100\n    // 1111 -&gt;1011-&gt;1101-&gt;1110-&gt;1110-&gt;1010-&gt;1100\n    // 1010 -&gt;1100\n    // 1011 -&gt;1101-&gt;1110-&gt;1110-&gt;1010-&gt;1100\n    // 1001 x\n    // 10101\n    // 10110\n    // 10101\n    // 10110\n    // 11010\n    //\n}\n</code></pre>"},{"location":"XCPC/Regional/2024Shanghai/#g","title":"G","text":""},{"location":"XCPC/Regional/2024Shanghai/#_5","title":"\u9898\u610f","text":"<p>\u7ed9 \\(n\\) \u6761\u7ea2\u8272\u7684\u7ebf \uff0c \u6bcf\u6761\u7ebf\u7684\u65b9\u7a0b\u4e3a \\(y=a_ix+b_i\\) \u548c \\(n\\) \u6761\u84dd\u8272\u7684\u7ebf\uff0c\u6bcf\u6761\u7ebf\u7684\u65b9\u7a0b\u4e3a \\(x=c_i\\) \u3002\u73b0\u5728\u6211\u4eec\u8981\u628a\u7ea2\u7ebf\u548c\u84dd\u7ebf\u4e00\u4e00\u914d\u5bf9\uff0c\u4f7f\u5f97\u6bcf\u4e00\u5bf9\u7ebf\u7684\u4ea4\u70b9\u7684\u7eb5\u5750\u6807\u7684\u4e2d\u4f4d\u6570\u6700\u5927\u3002\u6c42\u6700\u5927\u7684\u503c\u662f\u591a\u5c11\u3002</p>"},{"location":"XCPC/Regional/2024Shanghai/#_6","title":"\u601d\u8def","text":"<p>\u8003\u8651\u4f7f\u7528\u4e8c\u5206\uff0c\u659c\u7ebf\u53ea\u6709\u4e09\u79cd\uff0c\\(a_i&gt;0\\) , \u5219 \\(x\\) \u8d8a\u5927\uff0c\\(y\\) \u4f1a\u8d8a\u5927; \\(a_i&lt;0\\) \uff0c\\(x\\) \u8d8a\u5c0f\uff0c\\(y\\) \u4f1a\u8d8a\u5927\u3002</p> <p>\u6240\u4ee5\u6211\u4eec\u8981\u5224\u65ad\u4e00\u4e2a\u9ad8\u5ea6 \\(H\\) \u662f\u5426\u53ef\u884c\uff0c\u53ef\u4ee5\u5148\u7b97\u51fa\u81f3\u5c11\u9700\u8981 \\(x\\) \u4e3a\u591a\u5c11\uff0c\u6216\u8005 \\(x\\) \u81f3\u591a\u4e3a\u591a\u5c11\u3002\u90a3\u4e48\u6392\u5e8f\u540e\uff0c\u6bcf\u4e2a\u659c\u7ebf\u9700\u8981\u7684\u76f4\u7ebf\u90fd\u4f1a\u662f\u5728\u4e00\u4e2a\u524d\u7f00\u91cc\uff0c\u6216\u8005\u662f\u5728\u4e00\u4e2a\u540e\u7f00\u91cc\u3002</p> <p>\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8d1f\u6570\u6574\u9664\u633a\u70e6\u7684\u3002\u3002</p> <pre><code>void ChatGptDeepSeek() // Date: 2025-04-14\n{                      // Time: 16:54:03 \n    int n;\n    cin&gt;&gt;n;\n    vector&lt;int&gt;a(n+1),c(n+1);\n    vector&lt;ll&gt;b(n+1);\n    for(int i=1;i&lt;=n;i++) cin&gt;&gt;a[i];\n    for(int i=1;i&lt;=n;i++) cin&gt;&gt;b[i];\n    for(int i=1;i&lt;=n;i++) cin&gt;&gt;c[i];\n    sort(c.begin()+1,c.end());\n    auto check=[&amp;](ll H){\n        vector&lt;int&gt;pre(n+1),suf(n+1);\n        //pre\u8868\u793ax\u7684\u4e0b\u6807\u5c0f\u4e8e\u7b49\u4e8ei\u624d\u6ee1\u8db3 suf\u8868\u793a\u4e0b\u6807\u5927\u4e8e\u7b49\u4e8ei\u624d\u6ee1\u8db3\n        for(int i=1;i&lt;=n;i++){\n            if(a[i]&gt;0){\n                ll need=(H-b[i])/a[i]; //\u627e\u5927\u4e8e\u7b49\u4e8e\u8fd9\u4e2a\u7684\n                if(H-b[i]&gt;0&amp;&amp;(H-b[i])%a[i]) need++;\n                int idx=lower_bound(c.begin()+1,c.end(),need)-c.begin();\n                if(idx&lt;=n) suf[idx]++;\n            }else if(a[i]&lt;0){\n                ll need=(H-b[i])/a[i];\n                if(H-b[i]&gt;0&amp;&amp;(H-b[i])%a[i]) need--;\n                int idx=upper_bound(c.begin()+1,c.end(),need)-c.begin()-1;\n                if(idx&gt;=1) pre[idx]++;\n            }else if(b[i]&gt;=H) pre[n]++;\n        }//1 0 1 0\n        // for(int i=1;i&lt;=n;i++) cerr&lt;&lt;pre[i]&lt;&lt;\" \\n\"[i==n]; for(int i=1;i&lt;=n;i++) cerr&lt;&lt;suf[i]&lt;&lt;\" \\n\"[i==n];\n        ll sum=0,xum=0;\n        for(int i=1;i&lt;=n;i++) sum+=pre[i];\n        for(int i=1;i&lt;=n;i++){\n            xum=min(xum+pre[i],ll(i));\n            sum-=pre[i];//\u8981\u524d\u9762\u7684\u8d21\u732e\u52a0\u4e0a\u540e\u9762\u7684\u8d21\u732e\n            pre[i]=min(xum+sum,ll(i));\n            pre[i]=max(pre[i],pre[i-1]);\n        }\n        for(int i=1;i&lt;=n;i++) sum+=suf[i];\n        xum=0;\n        for(int i=n;i&gt;=1;i--){\n            xum=min(xum+suf[i],ll(n-i+1));\n            sum-=suf[i];\n            suf[i]=min(xum+sum,ll(n-i+1));\n            if(i&lt;n) suf[i]=max(suf[i],suf[i+1]);\n        }\n        // for(int i=1;i&lt;=n;i++) cerr&lt;&lt;pre[i]&lt;&lt;\" \\n\"[i==n]; for(int i=1;i&lt;=n;i++) cerr&lt;&lt;suf[i]&lt;&lt;\" \\n\"[i==n];\n        if(suf[1]&gt;=(n+1)/2||pre[n]&gt;=(n+1)/2) return true;\n        for(int i=1;i+1&lt;=n;i++)\n            if(pre[i]+suf[i+1]&gt;=(n+1)/2) return true;\n        return false;\n    };\n    ll l=-2e18,r=2e18,ans=0;\n    while(l&lt;=r){\n        ll mid=(l+r)&gt;&gt;1;\n        if(check(mid))\n            l=mid+1,ans=mid;\n        else\n            r=mid-1;\n    }\n    cout&lt;&lt;ans&lt;&lt;'\\n';\n}\n</code></pre> <p>\u53ef\u4ee5\u7684\uff0c\u90fdAC\u4e00\u6b21\u4e86\uff0c\u518d\u5199\u4e00\u6b21\u8fd8\u662f\u82b1\u4e8640\u5206\u949f\u3002\u7b97\u8fd9\u4e2a\u8d21\u732e\u53ef\u80fd\u4e5f\u82b1\u65f6\u95f4\uff0c\u8fd8\u6709\u4e00\u5b9a\u8981\u6ce8\u610f\u7684\u5c31\u662f\u8d1f\u6570\u6574\u9664\u65f6\u7684\u5411\u4e0b\u53d6\u6574\u6216\u5411\u4e0a\u53d6\u6574\u3002\u3002\u53ef\u4ee5\u591a\u5199\u70b9 if \u7684\u3002</p>"},{"location":"XCPC/Regional/2024Shanghai/#i","title":"I","text":""},{"location":"XCPC/Regional/2024Shanghai/#_7","title":"\u9898\u610f","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6570\u7ec4 \\(a\\) \uff0c\u6bcf\u6b21\u4f60\u53ef\u4ee5\u9009\u62e9\u6070\u597d \\(k\\) \u4e2a\u6570\u5b57\uff0c\u5e76\u5c06\u8fd9\u4e2a \\(k\\) \u4e2a\u6570\u5b57\u66ff\u6362\u6210\u5b83\u4eec\u7684\u4e58\u79ef\u3002\u53ef\u4ee5\u8fdb\u884c\u4efb\u610f\u6b21\u64cd\u4f5c\uff0c\u8f93\u51fa\u64cd\u4f5c\u540e\u6570\u7ec4\u7684\u6700\u5927\u503c\u3002</p>"},{"location":"XCPC/Regional/2024Shanghai/#_8","title":"\u601d\u8def","text":"<p>\u76f4\u63a5\u628a\u5927\u7684\u6570\u5b57\u4e58\u5230\u4e00\u8d77\u5c31\u597d\u4e86\uff0c\u521a\u5f00\u59cb\u628a\u524d \\(k\\) \u5927\u7684\u6570\u5b57\u4e58\u5230\u4e00\u8d77\uff0c\u540e\u9762\u5728\u628a\u4e4b\u540e\u7684\u6570\u5b57\uff0c\u6bcf\u6b21\u4e58 \\(k-1\\) \u4e2a\u8fc7\u6765\uff0c\u53ea\u7528\u6ce8\u610f\u4e00\u4e0b\u6709\u6ca1\u6709 \\(0\\) \u3002</p> <p>\u540c\u65f6\uff0c\\(x\\mod mod = 0\\) \u4e0d\u4e00\u5b9a\u4ee3\u8868 \\(x=0\\) \u3002\u6ce8\u610f\u4e00\u4e0b\uff0cWA\u4e86\u4e09\u6b21\u3002</p> <pre><code>using ll = long long;\n\nvoid ChatGptDeepSeek() // Date: 2025-04-13\n{                      // Time: 14:47:32\n    int n, k;\n    cin &gt;&gt; n &gt;&gt; k;\n    vector&lt;int&gt; a(n + 1);\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; a[i];\n    ll res = 1;\n    sort(a.begin() + 1, a.end(), greater&lt;int&gt;());\n    for (int i = 1; i &lt;= k; i++)\n    {\n        res = res * a[i] % 998244353;\n    }\n    if (a[k] == 0)\n    {\n        cout &lt;&lt; a[1] % 998244353 &lt;&lt; '\\n';\n        return;\n    }\n    for (int i = k + 1; i + k - 2 &lt;= n; i += k - 1)\n    {\n        ll now = 1;\n        for (int j = i; j &lt;= i + k - 2; j++)\n        {\n            now *= a[j];\n            now %= 998244353;\n        }\n        if (a[i + k - 2] == 0)\n            break;\n        res = res * now % 998244353;\n    }\n    cout &lt;&lt; res &lt;&lt; '\\n';\n} // 2 2 2 2\n// 4 4 ,\n//\n</code></pre>"},{"location":"XCPC/Regional/2024Zhengzhou/","title":"\u7b2c 10 \u5c4a CCPC \u4e2d\u56fd\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u90d1\u5dde\u7ad9","text":"<p>2025-05-11</p> <p>gym: https://codeforces.com/gym/105632</p> <p>qoj: https://qoj.ac/contest/1873</p> <p>\u6700\u5750\u7262\u7684\u4e00\u96c6\uff0cVP\u53ea\u5199\u51fa\u4e86 B \u9898\uff0c\u5176\u5b9e\u901a\u8fc7\u4eba\u6570\u6700\u591a\u7684\u662f L \u9898\u6765\u7740\u3002\u4f46\u5c31\u662f\u6ca1\u60f3\u51fa\u6765\uff0c\u7136\u540e\u521a\u624d\u770b\u4e86\u4e00\u4e0b\uff0c\u53d1\u73b0\u786e\u5b9e\u5f88\u7b80\u5355\u3002</p> <p>\u5176\u5b9e\u73b0\u5728\u60f3\u60f3\uff0c\u597d\u50cf\u6ca1\u6709\u90a3\u4e48\u96be\uff0cBL\u5e94\u8be5\u90fd\u4e0d\u548b\u96be\uff0c\u53ea\u8981\u7ec6\u5fc3\u4e00\u70b9\u3002\u6211\u4eec\u505a\u9898\u65f6\u8fd8\u662f\u4ea4\u6d41\u592a\u5c11\u4e86\u611f\u89c9\uff0c\u867d\u7136\u8fd9\u573a\u786e\u5b9e\u592a\u96be\u4e86\u3002\u539f\u672c\u51c6\u5907\u6253\u6d59\u6c5f\u7701\u8d5b\u7684\uff0c\u4f46QOJ\u4e0a\u4e00\u76f4\u5728\u7b49\u5f85\u6d4b\u8bc4\uff0c\u4e0d\u80fdVP\u3002</p> <p></p> <p>\u5176\u4ed6\u9898\u76ee\u8fc7\u6bb5\u65f6\u95f4\u518d\u56de\u6765\u8865\uff0c\u6700\u8fd1\u6ca1\u5565\u65f6\u95f4\u3002</p>"},{"location":"XCPC/Regional/2024Zhengzhou/#b","title":"B","text":"<p>\u5176\u5b9e\u5c31\u662f\u679a\u4e3e\u6bcf\u4e2a\u70b9\u7684\u72b6\u6001\uff0c\u7136\u540e\u5f04\u4e00\u4e2abfs\u6c42\u6700\u77ed\u8ddd\u79bb\u3002\u786e\u5b9ebfs\u5c31\u884c\uff0c\u56e0\u4e3a\u72b6\u6001\u5f88\u5c11\uff0c\u6211\u7528\u7684dijkstra\uff0c\u7a0d\u5fae\u5199\u590d\u6742\u4e86\u4e00\u70b9\u53ef\u80fd\u3002\u4f46\u8fd8\u662f\u5dee\u4e0d\u591a\u3002</p> <p>\u50cf\u8fd9\u79cd\u591a\u4e2a\u53c2\u6570\uff0c\u6700\u597d\u5199\u4e2a\u81ea\u5b9a\u4e49\u6392\u5e8f\uff0c\u8fd9\u6837\u7701\u5f88\u591a\u65f6\u95f4\u3002<code>decltype</code>\u8fd9\u4e2a\u8bcd\u8001\u662f\u5fd8\u8bb0\u3002\u8fd9\u56de\u5e94\u8be5\u8bb0\u4f4f\u4e86\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconstexpr int INF = 1061109567;\n\nint dis[110][210][5][5][5];\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr), cout.tie(nullptr);\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;vector&lt;int&gt;&gt; a(n + 1, vector&lt;int&gt;(2 * n + 1));\n    // vector&lt;vector&lt;int&gt;&gt; dis(n + 1, vector&lt;int&gt;(2 * n + 1, int(1e9)));\n\n    for(int i = 1; i &lt;= n; i++){\n        for(int j = 1; j &lt;= 2 * i - 1; j++){\n            cin &gt;&gt; a[i][j];\n        }\n    }\n    auto cmp = [&amp;](array&lt;int, 6&gt; x, array&lt;int, 6&gt; y){\n        return x[0] &gt; y[0];\n    };\n    priority_queue&lt;array&lt;int, 6&gt;,vector&lt;array&lt;int, 6&gt;&gt;, decltype(cmp)&gt;pq(cmp);\n    memset(dis, 0x3f, sizeof dis);\n    // cout &lt;&lt; dis[0][0][0][0][0] &lt;&lt; '\\n';\n    dis[1][1][1][3][2] = 0;\n    pq.push({0, 1, 1, 1, 3, 2});\n    int sx, sy;\n    cin &gt;&gt; sx &gt;&gt; sy;\n    int ans = INF;\n    while(!pq.empty()){\n        auto [dist, i, j, left, right, mid] = pq.top();\n        // cerr &lt;&lt; i &lt;&lt; \" \" &lt;&lt; j &lt;&lt; \" \" &lt;&lt; dist &lt;&lt;\" \" &lt;&lt;mid&lt;&lt; '\\n';\n        pq.pop();\n        if(i == sx &amp;&amp; j == sy){\n            ans = min(ans, dist);\n        }\n        if((j % 2 == 0) &amp;&amp; (i - 1) &gt; 0){\n            if(mid == a[i - 1][j - 1] &amp;&amp; dist + 1 &lt; dis[i - 1][j - 1][left][right][a[i][j]]){\n                dis[i - 1][j][left][right][a[i][j]] = dist + 1;\n                pq.push({dist + 1, i - 1, j - 1, left, \n                    right, a[i][j]});\n            }\n        }\n        if((j &amp; 1) &amp;&amp; (i + 1 &lt;= n)){\n            if(mid == a[i + 1][j + 1] &amp;&amp; dist + 1 &lt; dis[i + 1][j + 1][left][right][a[i][j]]){\n                dis[i + 1][j + 1][left][right][a[i][j]] = dist + 1;\n                pq.push({dist + 1, i + 1, j + 1, left, \n                    right, a[i][j]});\n            }         \n        }\n        if(j - 1 &gt; 0){\n            // \u5411\u5de6\u8d70\n            if(a[i][j - 1] == left){\n\n                if(j &amp; 1){ // \u5947\u6570\u5217\u7684\n                    if(dis[i][j - 1][mid][a[i][j]][right] &gt; dist + 1){\n                        dis[i][j - 1][mid][a[i][j]][right] = dist + 1;\n                        pq.push({dist + 1, i, j - 1, mid, a[i][j], right});\n                    }\n                }else{\n                    if(dis[i][j - 1][mid][a[i][j]][right] &gt; dist + 1){\n                        dis[i][j - 1][mid][a[i][j]][right] = dist + 1;\n                        pq.push({dist + 1, i, j - 1, mid, a[i][j], right});\n                    }\n                }\n            }\n        }\n        if(j + 1 &lt;= 2 * i - 1){\n            if(a[i][j + 1] == right){\n                if(j &amp; 1){\n                    if(dis[i][j + 1][a[i][j]][mid][left] &gt; dist + 1){\n                        dis[i][j + 1][a[i][j]][mid][left] = dist + 1;\n                        pq.push({dist + 1, i, j + 1, a[i][j], mid, left});\n                    }\n                }else{\n                    if(dis[i][j + 1][a[i][j]][mid][left] &gt; dist + 1){\n                        dis[i][j + 1][a[i][j]][mid][left] = dist + 1;\n                        pq.push({dist + 1, i, j + 1, a[i][j], mid, left});\n                    }\n                }\n            }\n        }\n    }\n    // cout &lt;&lt; \"-1\\n\";\n    cout &lt;&lt; (ans == INF ? -1 : ans) &lt;&lt; '\\n';\n    return 0;\n}\n</code></pre>"},{"location":"XCPC/Regional/2024Zhengzhou/#l","title":"L","text":"<p>\u5176\u5b9e\u771f\u633a\u7b7e\u5230\u7684\u3002\u3002\u3002\u6bd4\u8d5b\u7684\u65f6\u5019\u60f3\u534a\u5929\u731c\u534a\u5929\u3002\u3002\u3002</p> <p>\u5c31\u662f\u4e00\u4e2a\u5927\u7684\u6b63\u65b9\u5f62\u4f1a\u7531\u56db\u4e2a\u5c0f\u7684\u6b63\u65b9\u5f62\u7ec4\u6210\uff0c\u6211\u4eec\u7684\u7b54\u6848\u5fc5\u7136\u662f\u4f7f\u5f97 \\(L, R\\) \u5728\u540c\u4e00\u4e2a\u6b63\u65b9\u5f62\u91cc\uff0c\u5e76\u4e14\u8fd9\u4e2a\u6b63\u65b9\u5f62\u662f\u6700\u5c0f\u7684\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nusing ll = long long;\n\nvoid solve()\n{\n    ll l, r;\n    cin &gt;&gt; l &gt;&gt; r;\n    ll siz = 1;\n    while(l / siz != r / siz)\n        siz *= 2;\n    cout &lt;&lt; l % siz &lt;&lt; '\\n';\n}\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr), cout.tie(nullptr);\n    int T = 1;\n    cin &gt;&gt; T;\n    while(T--)\n        solve();\n    return 0;\n}\n</code></pre>"},{"location":"XCPC/School/2024BUAA/","title":"2024\u5317\u4eac\u822a\u7a7a\u822a\u5929\u5927\u5b66\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b \u51b3\u8d5b","text":"<p>2025-05-08</p> <p>link: https://codeforces.com/gym/105629</p> <p>\u524d\u51e0\u5929\u6253\u7684\uff0c\u8fd8\u6ca1\u8865\u9898\uff0c\u5148\u628a\u5199\u4e86\u7684\u9898\u7ed9\u8bb0\u4e00\u4e0b\u5427\u3002</p> <p>\u7531\u4e8e\u662f\u665a\u4e0a\u6253\u7684\uff0c\u6240\u4ee5\u6ca1\u6709\u529e\u6cd5\u6253\u6ee1\u56db\u5c0f\u65f6\uff0c\u4f46\u662f\u4e5f\u5dee\u4e0d\u591a\u4e86\u611f\u89c9\u3002</p> <p></p>"},{"location":"XCPC/School/2024BUAA/#a","title":"A","text":"<pre><code>n = int(input())\nprint(n)\n</code></pre>"},{"location":"XCPC/School/2024BUAA/#b","title":"B","text":"<p>\u627e\u5230\u6700\u5c0f\u7684\u53ef\u4ee5\u6ee1\u8db3\u7684\u6570\u5b57\uff0c\u7136\u540e\u6bd4\u5b83\u5927\u7684\u90fd\u53ef\u4ee5\uff0c\u6bd4\u5b83\u5c0f\u7684\u90fd\u4e0d\u884c\u3002\u6c42\u4e2a\u533a\u95f4\u548c\u5c31\u884c\u4e86\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nusing ll = long long;\n\nconstexpr int mod = 998244353;\n\nll ksm(ll a, ll b)\n{\n    ll res = 1;\n    while(b){\n        if(b &amp; 1) res = res * a % mod;\n        a = a * a % mod;\n        b &gt;&gt;= 1;\n    }\n    return res;\n}\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr), cout.tie(nullptr);\n    int x, y;\n    cin &gt;&gt; x &gt;&gt; y;\n    ll L = 0;\n    for(int i = 1; i &lt;= min(x - 1, y - 1); i++)\n        L = (L * 10 + 4) % mod;\n    L = (L * 10 + 5) % mod;\n    for(int i = 1; i &lt;= x - y; i++)\n        L = L * 10 % mod;\n    // cout &lt;&lt; L &lt;&lt; '\\n';\n    ll R = (ksm(10, x) - 1 + mod) % mod;\n    ll ans = (L + R) * (R - L + 1) % mod * ksm(2, mod - 2) % mod;\n    ans = (ans + mod) % mod;\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n    return 0;\n}\n</code></pre>"},{"location":"XCPC/School/2024BUAA/#c","title":"C","text":"<p>\u8fc7\u7684\u4eba\u975e\u5e38\u591a\u7684\u4e00\u9053\u9898\uff0c\u4f46\u662f\u6211\u4eec\u540e\u9762\u624d\u60f3\u5230\u3002</p> <p>\\(n\\) \u4e3a\u5076\u6570\u7684\u8bdd\uff0c\u663e\u7136\u5168\u8d1f\u6570\u5c31\u884c\u3002\u7136\u540e \\(n\\) \u4e3a\u5947\u6570\uff0c\u672c\u4ee5\u4e3a\u4e0d\u884c\u7684\uff0c\u5728 WA \u9ebb\u4e86\u4e4b\u540e\u7a81\u7136\u53d1\u73b0\uff0c\u53ea\u9700\u8981\u6574\u4e00\u4e2a \\(2\\) \u5c31\u884c\uff0c\u5176\u4ed6\u5168 \\(-1\\)\u3002</p> <pre><code>for _ in range(int(input())):\n    n = int(input())\n    print(\"YES\")\n    if n &amp; 1:\n        for i in range(2 * n):\n            print(-1, end = \" \")\n        print(2)\n    else:\n        for i in range(2 * n + 1):\n            print(-1, end = \" \")\n        print()\n</code></pre>"},{"location":"XCPC/School/2024BUAA/#d","title":"D","text":"<p>\u4e5f\u662f\u7b7e\u5230\u9898\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nusing ll = long long;\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr), cout.tie(nullptr);\n    int n, k;\n    cin &gt;&gt; n &gt;&gt; k;\n    vector&lt;ll&gt; a(k + 1), t(n + 1), c(n + 1);\n    for(int i = 1; i &lt;= k; i++) cin &gt;&gt; a[i];\n    for(int i = 1; i &lt;= n; i++) cin &gt;&gt; t[i] &gt;&gt; c[i];\n    // for(int i = 1; i &lt;= n; i++) cin &gt;&gt; c[i];\n\n    auto check = [&amp;](int T){\n        vector&lt;ll&gt; need(a);\n        for(int i = 1; i &lt;= T; i++){\n            need[t[i]] -= c[i];\n        }\n        vector&lt;ll&gt; stk1, stk2;\n        for(int i = 1; i &lt;= k; i++){\n            if(need[i] &lt; 0) stk1.push_back(-need[i]);\n            else if(need[i] &gt; 0) stk2.push_back(need[i]);\n        }\n        while(stk1.size() &amp;&amp; stk2.size()){\n            auto x = stk1.back(), y = stk2.back();\n            // cerr &lt;&lt; x &lt;&lt; \" \" &lt;&lt; y &lt;&lt; '\\n';\n            stk1.pop_back(), stk2.pop_back();\n            if(3 * x &gt; y){\n                stk1.push_back(x - y / 3);\n            }else{\n                y -= 3 * x;\n                if(y &gt;= 3) stk2.push_back(y);\n            }\n        }\n        return stk1.empty();\n    };\n    int lo = 0, hi = n + 1;\n    while(lo &lt; hi - 1){\n        int mid = (lo + hi) &gt;&gt; 1;\n        if(check(mid)) lo = mid;\n        else hi = mid;\n    }\n    // cerr &lt;&lt; check(5) &lt;&lt; '\\n';\n    cout &lt;&lt; lo &lt;&lt; '\\n';\n    return 0;\n}\n</code></pre>"},{"location":"XCPC/School/2024BUAA/#e","title":"E","text":"<p>\u611f\u89c9\u662f\u8fd9\u4e00\u573a\u6211\u4eec\u5199\u51fa\u6765\u7684\u552f\u4e00\u7a0d\u5fae\u590d\u6742\u70b9\u7684\u9898\u76ee\u3002</p> <p>\u9898\u610f\u662f\u7ed9\u4e00\u4e2a\u6709\u5411\u56fe\uff0c\u6bcf\u4e2a\u8282\u70b9\u6709\u4e00\u79cd\u5c5e\u6027\uff0c\u6211\u4eec\u9700\u8981\u5bf9\u8fd9\u4e2a\u56fe\uff0c\u6bcf\u6b21\u53ea\u80fd\u5220\u9664\u5165\u5ea6\u4e3a \\(0\\) \u7684\u70b9\uff0c\u5982\u679c\u5220\u9664\u4e86\u4e00\u79cd\u7c7b\u578b\u7684\u70b9\uff0c\u5c31\u5fc5\u987b\u8fde\u7740\u628a\u8fd9\u79cd\u7c7b\u578b\u7684\u70b9\u5220\u5b8c\u3002\u9700\u8981\u8f93\u51fa\u4e00\u79cd\u53ef\u884c\u7684\u987a\u5e8f\uff0c\u82e5\u4e0d\u884c\u5219\u8f93\u51fa \\(-1\\)\u3002</p> <p>\u90a3\u4e48\u8fd9\u4e2a\u8fc7\u7a0b\u5f88\u663e\u7136\u5c31\u662f\u5728\u8fdb\u884c\u62d3\u6251\u6392\u5e8f\uff0c\u53ea\u662f\u591a\u4e86\u4e00\u70b9\u9650\u5236\u6761\u4ef6\uff0c\u9700\u8981\u8bb0\u5f55\u4e00\u4e0b\u5c31\u884c\uff0c\u8bb0\u5f55\u4e00\u4e0b\u6bcf\u79cd\u7c7b\u578b\u7684\u70b9\u6709\u6ca1\u6709\u5176\u4ed6\u7c7b\u578b\u7684\u70b9\u8fde\u8fc7\u6765\u3002\u611f\u89c9\u8fd8\u662f\u7a0d\u5fae\u6709\u4e00\u70b9\u7ec6\u8282\u7684\uff0c\u4f46\u96be\u5ea6\u4e0d\u9ad8\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nusing ll = long long;\n\nvoid solve()\n{\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    vector&lt;int&gt; a(n + 1), cnt(n + 1), ru(n + 1);\n    for(int i = 1; i &lt;= n; i++) cin &gt;&gt; a[i];\n    vector&lt;vector&lt;int&gt;&gt; g(n + 1, vector&lt;int&gt;());\n    vector&lt;vector&lt;int&gt;&gt; g1(n + 1, vector&lt;int&gt;());\n    // for(int i = 1; i &lt;= n; i++)\n    //     g1[a[i]].push_back(i);\n    for(int i = 1; i &lt;= m; i++){\n        int x, y;\n        cin &gt;&gt; x &gt;&gt; y;\n        g[x].push_back(y);\n        ru[y]++;\n        if(a[x] != a[y]){\n            cnt[a[y]]++;\n        }\n    }\n    // queue&lt;int&gt; q;\n    // vector&lt;bool&gt; vis(n + 1);\n    // set&lt;int&gt; st;\n    // auto cmp = [&amp;](int x, int y){\n    //     return a[x] &lt; a[y];\n    // };\n    // priority_queue&lt;int, vector&lt;int&gt;, decltype(cmp)&gt;pq(cmp);\n    set&lt;int&gt; color;\n    vector&lt;queue&lt;int&gt;&gt;q(n + 1);\n    {\n        vector&lt;int&gt; tmp;\n        for(int i = 1; i &lt;= n; i++){\n            // cerr &lt;&lt; ru[i] &lt;&lt; \" \" &lt;&lt; cnt[a[i]] &lt;&lt; '\\n';\n\n            if(ru[i] == 0 &amp;&amp; cnt[a[i]] == 0){\n                // q.push(i);\n                // tmp.push_back(i);\n                // pq.push(i);\n                color.insert(a[i]);\n            }\n            if(ru[i] == 0)\n                q[a[i]].push(i);\n        }\n        // sort(tmp.begin(), tmp.end(), [&amp;](int x, int y){\n        //     return a[x] &lt; a[y];\n        // });\n        // for(auto x : tmp)\n        //     q.push(x);\n    }\n    vector&lt;int&gt; ans;\n    while(color.size()){\n        int x = *color.begin();\n        color.erase(color.begin());\n        while(!q[x].empty()){\n            int u = q[x].front();\n            q[x].pop();\n            ans.push_back(u);\n            for(auto v : g[u]){\n                ru[v]--;\n                if(a[v] == x){\n                    if(ru[v] == 0)\n                        q[x].push(v);\n                }else{\n                    cnt[a[v]]--;\n                    if(ru[v] == 0)\n                        q[a[v]].push(v);\n                    if(cnt[a[v]] == 0)\n                        color.insert(a[v]);\n\n                }\n            }\n        }\n    }\n    // while(pq.size()){\n    //     // queue&lt;int&gt; q1;\n    //     {\n    //         int u = pq.top();\n    //         // q.pop();\n    //         pq.pop();\n    //         // if(vis[u]) continue;\n    //         // q1.push(u);\n\n    //         // vis[a[u]] = true;\n    //         // cerr &lt;&lt; u &lt;&lt; '\\n';\n    //         // vis[u] = true;\n    //         ans.push_back(u);\n    //         for(auto v : g[u]){\n    //             if(v == 5){\n    //                 cerr &lt;&lt; cnt[a[5]] &lt;&lt; '\\n';\n    //             }\n    //             ru[v]--;\n    //             if(a[v] == a[u]){\n    //                 if(ru[v] == 0)\n    //                     pq.push(v);\n    //             }else{\n    //                 cnt[a[v]]--;\n    //                 if(ru[v] == 0)\n    //                     g1[a[v]].push_back(v);\n    //                 if(cnt[a[v]] == 0){\n    //                     for(auto x : g1[a[v]])\n    //                         pq.push(x);\n    //                 }\n    //             }\n    //         }\n    //     }\n    //     // while(!q1.empty()){\n    //         // auto u = q1.front();\n    //         // cerr &lt;&lt; u &lt;&lt; '\\n';\n    //     //     q1.pop();\n    //     //     vis[u] = true;\n    //     //     ans.push_back(u);\n    //     //     for(auto v : g[u]){\n    //     //         ru[v]--;\n    //     //         if(a[v] == a[u]){\n    //     //             if(ru[v] == 0)\n    //     //                 q1.push(v);\n    //     //         }else{\n    //     //             cnt[a[v]]--;\n    //     //             if(ru[v] == 0)\n    //     //                 g1[a[v]].push_back(v);\n    //     //             if(cnt[a[v]] == 0){\n    //     //                 for(auto x : g1[a[v]])\n    //     //                     q.push(x);\n    //     //             }\n    //     //         }\n    //     //     }\n    //     // }\n    // }\n    if(ans.size() != n){\n        cout &lt;&lt; \"-1\\n\";\n        return;\n    }\n    for(auto x : ans)\n        cout &lt;&lt; x &lt;&lt; ' ';\n    cout &lt;&lt; '\\n';\n}\nint main()\n{\n    // freopen(\"1.in\", \"r\", stdin);\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr), cout.tie(nullptr);\n    int T;\n    cin &gt;&gt; T;\n    while(T--)\n        solve();\n    return 0;\n}\n</code></pre>"},{"location":"XCPC/School/2024BUAA/#summary","title":"summary","text":"<p>\u8fd9\u573a\u6211\u4eec\u5199\u51fa\u6765\u7684\u9898\u611f\u89c9\u96be\u5ea6\u8fd8\u662f\u6bd4\u8f83\u4f4e\u7684\uff0c\u8fd8\u6709\u70b9\u9898\u80fd\u8865\u7684\uff0c\u4f46\u6700\u8fd1\u6ca1\u7a7a\uff0c\u4ee5\u540e\u770b\u5230\u518d\u6765\u5427\u3002</p>"},{"location":"XCPC/School/2025HZAU/","title":"2025\u534e\u4e2d\u519c\u4e1a\u5927\u5b66\u7b2c\u5341\u56db\u5c4a\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b","text":"<p>2025-05-07</p> <p>gym: https://codeforces.com/gym/105838</p> <p>\u4e4b\u524d\u968f\u4fbf\u6253\u4e86\u4e00\u4e0b\uff0c\u6709\u7684\u9898\u6ca1\u6709\u8865\uff0c\u4e4b\u540e\u770b\u5230\u518d\u6765\u3002</p> <p></p>"},{"location":"XCPC/School/2025HZAU/#a","title":"A","text":"<p>\u633a\u7b80\u5355\uff0c\u5c31\u662f\u6a21\u62df\u5c31\u884c\u3002\u672c\u6765py\u5199\uff0c\u4f46\u662f\u4e00\u76f4\u8fd0\u884c\u8fc7\u4e0d\u4e86\uff0c\u6539C++\u5199\u4e5f\u662f\u8c03\u4e86\u4e00\u4f1a\u624d\u8fc7\u3002\u4e3b\u8981\u5176\u5b9e\u5c31\u662f\u4e1c\u897f\u7a0d\u5fae\u6709\u70b9\u591a\u3002</p> <p>\u540e\u6765\u770b\u4e86\uff0c\u6211\u5199\u6570\u7ec4\u6ca1\u5199\u4e0b\u6807\u3002\u3002\u3002\u5b83\u6ca1\u544a\u8bc9\u6211\u662f\u8fd9\u4e2a\u95ee\u9898\uff0c\uff0c\uff0c\u597d\u50cf\u662f\u6211\u6ca1\u5b89py\u63d2\u4ef6\uff0c\u5b89\u4e86\u662f\u4e0d\u662f\u4e0d\u4f1a\u8fd9\u6837\uff0c\u8fd8\u6709\u6709\u65f6\u5019\u53ef\u4ee5\u628apy\u7528\u719f\u7ec3\u70b9\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid solve()\n{\n    int n, m, k;\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;\n    vector&lt;int&gt; b(m + 1), r(m + 1), x(n + 1), y(n + 1);\n    for(int i = 1; i &lt;= m; i++)\n        cin &gt;&gt; b[i];\n    for(int i = 1; i &lt;= m; i++)\n        cin &gt;&gt; r[i];\n    vector&lt;vector&lt;int&gt;&gt; p(m + 1, vector&lt;int&gt;(n + 1));\n    for(int i = 1; i &lt;= m; i++)\n        for(int j = 1; j &lt;= n; j++)\n            cin &gt;&gt; p[i][j];\n    for(int i = 1; i &lt;= n; i++) cin &gt;&gt; x[i];\n    for(int i = 1; i &lt;= n; i++) cin &gt;&gt; y[i];\n    vector&lt;int&gt;mx(m + 1);\n    for(int i = 1; i &lt;= m; i++)\n        mx[i] = *max_element(p[i].begin() + 1, p[i].end());\n    int ans = 0;\n    for(int i = 1; i &lt;= n; i++){\n        int get = min(100, x[i] / 60 + y[i]);\n        vector&lt;int&gt; tmp;\n        for(int j = 1; j &lt;= m; j++){\n            if(p[j][i] == -1)\n                tmp.push_back(0);\n            else if(p[j][i] == 0)\n                tmp.push_back(b[j]);\n            else\n                tmp.push_back(b[j] + r[j] * p[j][i] / mx[j]);\n        }\n        sort(tmp.begin(), tmp.end(), greater&lt;int&gt;());\n        int practice = 0;\n        for(int j = 0; j &lt; k; j++)\n            practice += tmp[j];\n        if(practice &gt;= 50 * k &amp;&amp; get &gt;= 50 &amp;&amp; (get &gt;= 60 || practice &gt;= k * 60))\n            ans++;\n        // cerr &lt;&lt; practice &lt;&lt; \" \" &lt;&lt; get &lt;&lt; '\\n';\n    }   \n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr), cout.tie(nullptr);\n    int T;\n    cin &gt;&gt; T;\n    while(T--)\n        solve();\n    return 0;\n}\n</code></pre> <p>\u54e6\u5bf9\u4e86\uff0cpy\u5b9a\u4e49\u4e8c\u7ef4\u6570\u7ec4\u4e0d\u80fd\u76f4\u63a5 <code>[[0] * m] * n</code> \u8fd9\u6837\u5bf9\u5355\u4e2a\u4fee\u6539\uff0c\u6240\u6709\u7684\u90fd\u4f1a\u6539\u3002\u9700\u8981\u50cf <code>[[0] * m for _ in range(n)]</code></p> <pre><code>for _ in range(int(input())):\n    n, m, k = map(int, input().split())\n    b = list(map(int, input().split()))\n    r = list(map(int, input().split()))\n    score = [0] * n\n    # p = [[]] * m\n    p = [[] for i in range(m)]\n    for i in range(m):\n        p[i] = list(map(int, input().split()))\n    x = list(map(int, input().split()))\n    y = list(map(int, input().split()))\n    # print(x,y);\n    # print(p)\n    pmax = [0] * m # \u6bcf\u573a\u6bd4\u8d5b\u7684\u6700\u9ad8\u5206\n    # get = [[]] * n\n    get = [[] for i in range(n)]\n    for i in range(m):\n        for j in range(n):\n            pmax[i] = max(pmax[i], p[i][j])\n\n    for i in range(n):\n\n        for j in range(m):\n            if p[j][i] == -1:\n                get[i].append(0)\n            elif p[j][i] == 0:\n                get[i].append(b[j])\n            else:\n                # print(type(pmax[j]))\n                # num = r * (int)(p[j][i]) + pmax[j] - 1\n                # print(num)\n                # print((b[j] + (r[j] * p[j][i]) // pmax[j]))\n                get[i].append(b[j] + (r[j] * p[j][i]) // pmax[j])\n        # print(i,get[i])\n    # print(get)\n    ans = 0\n    for i in range(n):\n        # print(get[i])\n        get[i].sort(reverse = True)\n        # print(x[i], y[i], \"xy\")\n        A = x[i] // 60 + y[i]\n        B = 0\n        for j in range(k):\n            B += get[i][j]\n        # print(A, B, \"AB\")\n        if A &gt;= 50 and B &gt;= 50 * k and (A &gt;= 60 or B &gt;= 60 * k):\n            ans += 1\n    print(ans)\n</code></pre>"},{"location":"XCPC/School/2025HZAU/#b","title":"B","text":"<p>\u7b7e\u5230</p> <pre><code>a = list(map(int, input().split()))\na.sort()\nif a[1] &gt; a[0] and a[2] &gt; a[0]:\n    # a[1] &gt; a[0] , a[0] &lt; a[2]\n    print(a[1],a[0],a[2])\nelse:\n    print(-1)\n</code></pre>"},{"location":"XCPC/School/2025HZAU/#c","title":"C","text":"<p>\u633a\u7b80\u5355\uff0c\u8981\u4f7f\u5f97 \\(\\frac{1}{x} + \\frac{1}{y}\\) \u6700\u5c0f\uff0c\u4e14 \\(x + y\\) \u7684\u503c\u56fa\u5b9a\uff0c\u90a3\u4e48\u663e\u7136 \\(xy\\) \u8d8a\u5927\u8d8a\u597d\uff0c\u5c31\u662f \\(x\\) \u548c \\(y\\) \u7684\u503c\u8d8a\u63a5\u8fd1\u8d8a\u597d\uff0c\u90a3\u4e48\u4e8c\u5206\u627e\u4e00\u4e0b\u5c31\u884c\u3002</p> <p>\u90a3\u6211\u4e3a\u4ec0\u4e48 WA \u5f88\u591a\u6b21\u5462\uff1f\u5feb\u901f\u5e42\u4f20\u53c2\u6570\uff0c\u5fd8\u8bb0\u7ed9 \\(a\\) \u53d6\u6a21\u4e86\uff0c\u8fd9\u4e2a\u5f88\u91cd\u8981\uff0c\u4ee5\u540e\u6ce8\u610f\u3002</p> <pre><code>/*\n1/x + 1/y\n(x+y)/xy\n*/\n#include&lt;bits/stdc++.h&gt;\n#define int long long\nusing namespace std;\nusing ll = long long;\n\nconstexpr int mod = ll(1e9) + 7;\n\nll ksm(ll a, ll b)\n{\n    ll res = 1;\n    a %= mod;\n    while(b){\n        if(b &amp; 1) res = res * a % mod;\n        a = a * a % mod;\n        b &gt;&gt;= 1; \n    }\n    return res;\n}\nll inv(ll a){return ksm(a, mod - 2);}\nvoid solve()\n{\n    // for(int x = 1; x &lt;= 99; x++)\n    //     cout &lt;&lt; 1.0/x + 1.0/(100-x) &lt;&lt; '\\n';\n    int n, q;\n    cin &gt;&gt; n &gt;&gt; q;\n    vector&lt;int&gt;a(n + 1), pre(n + 1);\n    for(int i = 1; i &lt;= n; i++){\n        cin &gt;&gt; a[i];\n        pre[i] = pre[i - 1] + a[i];\n    }\n    while(q--){\n        int L, R;\n        cin &gt;&gt; L &gt;&gt; R;\n        int mid = (pre[R] - pre[L - 1] + 1)/2 + pre[L - 1];\n        auto it = lower_bound(pre.begin() + L, pre.begin() + R, mid);\n        // cerr &lt;&lt; it - pre.begin() &lt;&lt; '\\n';\n        // if(it == pre.begin() + R){\n        //     cout &lt;&lt; (inv(a[R]) + inv(pre[R - 1] - pre[L - 1])) % mod &lt;&lt; ' ';\n        //     continue; \n        // }\n        // if(it == pre.begin() + L){\n        //     cout &lt;&lt; (inv(a[L]) + inv(pre[R] - pre[L])) % mod &lt;&lt; ' ';\n        //     continue;\n        // }\n        int idx = it - pre.begin();\n        ll X = 0;\n        for(int j = max(L, idx - 1); j &lt;= min(idx + 1, R - 1); j++){\n            X = max(X, 1LL * (pre[j] - pre[L - 1]) * (pre[R] - pre[j]));\n        }\n        cout &lt;&lt; 1LL * (pre[R] - pre[L - 1]) * inv(X) % mod &lt;&lt; ' ';\n    }\n    cout &lt;&lt; '\\n';\n}\n\nsigned main()\n{\n    // freopen(\"1.err\", \"w\", stderr);\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr), cout.tie(nullptr);\n    int T = 1;\n    cin &gt;&gt; T;\n    while(T--)\n        solve();\n    return 0;\n}\n</code></pre>"},{"location":"XCPC/School/2025HZAU/#d","title":"D","text":"<p>\u7b7e\u5230</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid solve()\n{\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;bool&gt;vis(n + 1);\n    for(int i = 1; i &lt;= n; i++){\n        int x;\n        cin &gt;&gt; x;\n        vis[x] = true;\n    }\n    for(int i = 1; i &lt;= n; i++){\n        if(!vis[i]){\n            cout &lt;&lt; i &lt;&lt; '\\n';\n            return;\n        }\n    }\n    cout &lt;&lt; \"-1\\n\";\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr), cout.tie(nullptr);\n    int T;\n    cin &gt;&gt; T;\n    while(T--)\n        solve();\n    return 0;\n}\n</code></pre>"},{"location":"XCPC/School/2025HZAU/#h","title":"H","text":"<p>\u7b7e\u5230</p> <pre><code>r = [0] * 100001\nc = [0] * 100001\nfor _ in range(int(input())):\n    n = int(input())\n    x = list(map(int,input().split()))\n    y = list(map(int,input().split()))\n    # print(x)\n    # print(y)\n\n    ans = 0\n    for i in range(n):\n        ans += r[x[i]] + c[y[i]]\n        r[x[i]] += 1\n        c[y[i]] += 1\n    print(ans)\n    for i in range(n):\n        r[x[i]] -= 1\n        c[y[i]] -= 1\n</code></pre>"},{"location":"XCPC/School/2025HZAU/#k","title":"K","text":"<p>\u7b7e\u5230</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid solve()\n{\n    string s;\n    cin &gt;&gt; s;\n    for(int i = 0; i + 1 &lt; s.size(); i++){\n        if(s[i] &lt; s[i + 1]){\n            swap(s[i], s[i + 1]);\n            break;\n        }\n    }\n    cout &lt;&lt; s &lt;&lt; '\\n';\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr), cout.tie(nullptr);\n    int T;\n    cin &gt;&gt; T;\n    while(T--)\n        solve();\n    return 0;\n}\n</code></pre>"},{"location":"XCPC_100days/day001/","title":"\u7b2c\u4e00\u5929 2025-07-22","text":"<p>\u5927\u6982\u7b97\u4e86\u4e00\u4e0b\uff0c\u4ece\u4eca\u5929\u5f00\u59cb\u7b97\u4e00\u767e\u5929\u4e4b\u540e\uff0c\u5927\u6982\u5341\u4e00\u6708\uff0c\u6211\u7684 XCPC \u751f\u6daf\u5e94\u8be5\u5c31\u8981\u7ed3\u675f\u4e86\u3002\u56e0\u6b64\u4e0d\u5982\u8d81\u7740\u6700\u540e\u7684\u65f6\u95f4\u597d\u597d\u5199\u70b9\u9898\u5427\uff5e\u7136\u540e\u8bb0\u5f55\u4e00\u4e0b\u8fd9\u4e00\u767e\u5929\u3002</p> <p>\u8fd9\u4e00\u767e\u5929\u7684\u76ee\u6807\u662f\u4ec0\u4e48\u5462\uff1f\u4fdd\u6301\u6bcf\u5929\u8bb0\u5f55\u4e00\u7bc7\u535a\u5ba2\uff0ccf\u5230\u90a3\u4e00\u5929\u65f6\u8fde\u7eed\u6253\u5361\u4e00\u767e\u5929\uff0c\u5c3d\u91cf\u5199\u591a\u7684\u96be\u70b9\u7684\u9898\u76ee\uff0cCF\u8fbe\u5230\u7d2b\u540d\u3002\u73b0\u5728\u90fd\u6389\u52301600\u4e86\u55b5\u3002</p> <p>\u4eca\u65e5\u6253\u4e86\u725b\u5ba2\u591a\u6821\u7684\u7b2c\u4e09\u573a\u548c\u4e00\u573aEDU\uff0c\u6253\u5f97\u90fd\u4e00\u822c\u3002</p> <p></p> <p>\u8fd9\u573a\u591a\u6821\u6211\u5199\u51fa\u6765\u7684\u9898\u90fd\u633a\u7b80\u5355\u7684\uff0c\u611f\u89c9\u5982\u679c\u5199\u4e0d\u51fa\u6765\u4e0b\u4e00\u4e2a\u5c42\u6b21\u7684\u9898\u76ee\u7684\u8bdd\uff0c\u6709\u70b9\u767d\u62a5\u540d\u4e86\u3002\u5fc5\u987b\u5f97\u597d\u597d\u8865\u9898\u4e86\u3002</p> <p>\u8fd9\u628aCF\u6253\u5f97\u4e5f\u6389\u5206\uff0c\u524d\u4e09\u9898\u5f88\u7b80\u5355\u7684\uff0c\u4f46\u662fD\u9898\u60f3\u4e86\u4e00\u4e2a\u591a\u5c0f\u65f6\uff0c\u8fde\u6837\u4f8b\u600e\u4e48\u8fc7\u90fd\u6ca1\u60f3\u51fa\u6765\u3002\u8d5b\u65f6\u8fc7\u7684\u4eba\u4e5f\u4e0d\u5c11\uff0c\u90fd\u4e09\u5343\u591a\u4e86\u5427\u3002\u56e0\u6b64\u6392\u540d\u4e09\u56db\u5343\uff0c\u5f88\u680f\u4e86\u6253\u5f97\u3002\u8fd8\u6709\u4e00\u4e2a\u6708\u591a\u5c31\u5f00\u5b66\u4e86\uff0c\u8fd8\u662f\u975e\u5e38\u5e0c\u671b\u80fd\u6da8\u4e00\u4e9brating\u7684\u3002</p>"},{"location":"XCPC_100days/day002/","title":"\u7b2c\u4e8c\u5929 2025-07-23","text":"<p>\u4eca\u5929\u5199\u4e86\u51e0\u4e2aCF\u7684\u9898\uff0c\u8865\u4e86\u4e0a\u4e00\u573a\u725b\u5ba2\u591a\u6821\u7684H\u9898\u3002</p>"},{"location":"XCPC_100days/day002/#20253-h","title":"2025\u725b\u5ba2\u591a\u68213 H","text":"<p>\u7531\u4e8e \\(r_i \\le l_{i + 1}\\)\uff0c \u6211\u4eec\u53ea\u7528\u5728\u4e00\u4e2a\u76ee\u6807\u51fa\u73b0\u540e\uff0c\u66f4\u65b0\u53ef\u8fbe\u7684\u70b9\u7684\u8303\u56f4\u3002\u53ef\u8fbe\u7684\u70b9\u4e00\u5b9a\u662f\u4e00\u4e2a\u8fde\u901a\u5757\uff0c\u5bf9\u4e8e\u662f\u5426\u53ef\u4ee5\u5230\u8fbe \\(u_i\\)\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u8003\u8651\u4e0d\u4e3a \\(u_i\\) \u7956\u5148\u7684\u8282\u70b9\u3002</p> <p>\u7ed9\u4e86 \\([l_i, r_i]\\)\uff0c\u76f8\u5f53\u4e8e\u90a3\u4e9b\u53ef\u8fbe\u7684\u70b9\u53ef\u4ee5\u591a\u8d70 \\(r_i - l_i + 1\\) \u6b65\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u627e\u8ddd\u79bb\u6700\u8fd1\u7684\u4e0d\u53ef\u8fbe\u7684 \\(u_i\\) \u7684\u7956\u5148\u8282\u70b9\uff0c\u770b\u662f\u5426\u53ef\u4ee5\u5230 \\(u_i\\)\uff0c\u7136\u540e\u66b4\u529b\u6269\u5c55\u53ef\u4ee5\u5230\u8fbe\u7684\u70b9\uff0c\u6700\u591a\u53ea\u6709 \\(n\\) \u4e2a\u70b9\u6240\u4ee5\u5e76\u4e0d\u4f1a\u8d85\u65f6\u3002</p> <pre><code>void ChatGptDeepSeek() // Date: 2025-07-23\n{                      // Time: 21:14:24 \n    int n, k;\n    cin &gt;&gt; n &gt;&gt; k;\n    vector&lt;vi&gt; f(n + 1, vi(22));\n    for(int i = 2; i &lt;= n; i++){\n        cin &gt;&gt; f[i][0];\n    }\n    for(int j = 1; j &lt;= 21; j++){\n        for(int i = 1; i &lt;= n; i++){\n            f[i][j] = f[f[i][j - 1]][j - 1];\n        }\n    }\n    vector&lt;bool&gt; vis(n + 1);\n    vis[1] = true;\n    int ans = -1;\n    while(k--){\n        int u, l, r;\n        cin &gt;&gt; u &gt;&gt; l &gt;&gt; r;\n        if(ans &gt; -1) continue;\n        for(int j = l; j &lt;= r; j++){\n            int x = u;\n            for(int t = 20; t &gt;= 0; t--){\n                if(!f[x][t] || vis[f[x][t]]) continue;\n                x = f[x][t];\n            }\n            if(x == u){\n                ans = j;\n                break;\n            }\n            vis[x] = true;\n        }\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"XCPC_100days/day002/#cf1379c","title":"CF1379C","text":"<p>\u5199\u5b8c\u4e00\u770b\u5c45\u7136\u662f2000\u7684\u9898\uff0c\u4f46\u662f\u8fd9\u9898\u611f\u89c9\u8fd8\u633a\u7b80\u5355\u3002</p> <p>\u7a0d\u5fae\u60f3\u60f3\uff0c\u6211\u4eec\u80af\u5b9a\u53ea\u4f1a\u4e70\u4e00\u79cd \\(b_i\\)\uff0c\u7136\u540e\u6bd4 \\(b_i\\) \u5927\u7684 \\(a_j\\) \u662f\u4e00\u5b9a\u8981\u4e70\u7684\u3002\u90a3\u4e48\u5982\u679c\u6211\u4eec\u6309 \\(b_i\\) \u6392\u5e8f\uff0c\u7136\u540e\u4f18\u5148\u961f\u5217\u7ef4\u62a4 \\(a_i\\)\uff0c\u6bd4 \\(b_i\\) \u5c0f\u7684\u5f39\u51fa\uff0c\u8fd9\u6837\u5c31\u5f88\u5bb9\u6613\u4e86\u3002</p> <pre><code>void ChatGptDeepSeek() // Date: 2025-07-23\n{                      // Time: 21:53:09 \n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    /*\n    bi \u80af\u5b9a\u53ea\u4f1a\u9009\u4e00\u4e2a\u4eba\u7684\n    \u6211\u4eec\u5047\u8bbe\u8981\u9009\u8fd9\u4e2a bi \u90a3\u4e48\u8981\u628a\u6240\u6709\u6bd4\u8fd9\u4e2a bi \u5927\u7684 ai \u7ed9\u52a0\u4e0a\n    \u76f4\u63a5\u6309bi \u6392\u5e8f\u5982\u4f55\uff1f\n    \u5c0f\u7684 bi \u5728\u524d\u9762\uff0c\n    \u8fd9\u6837\u5355\u8c03\u961f\u5217\u5c31\u884c\n    */\n    vector&lt;array&lt;int, 2&gt;&gt; vec(m);\n    for(int i = 0; i &lt; m; i++)\n        cin &gt;&gt; vec[i][0] &gt;&gt; vec[i][1];\n    ranges::sort(vec, [](array&lt;int, 2&gt; x, array&lt;int, 2&gt; y){\n        return x[1] &lt; y[1];\n    });\n    ll sum = 0, ans = 0;\n    priority_queue&lt;int, vi, greater&lt;&gt;&gt; pq; \n    for(auto [a, b] : vec){\n        while(pq.size() &amp;&amp; pq.top() &lt;= b){\n            sum -= pq.top();\n            pq.pop();\n        }\n        while(pq.size() &gt;= n){\n            sum -= pq.top();\n            pq.pop();\n        }\n        cmax(ans, sum + a + 1LL * (n - 1 - sz(pq)) * b);\n        sum += a;\n        pq.push(a);\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"XCPC_100days/day002/#cf1349b","title":"CF1349B","text":"<p>\u8fd9\u9898\u6211\u662f\u6ca1\u600e\u4e48\u60f3\u5230\u7684\uff0c\u6bd4\u8f83\u5bb9\u6613\u60f3\u5230\u7684\u662f\uff0c\u5982\u679c \\(k\\) \u65c1\u8fb9\u6709\u6bd4 \\(k\\) \u5927\u7684\u6570\u5b57\uff0c\u90a3\u4e48\u4e00\u5b9a\u53ef\u4ee5\u3002</p> <p>\u4f46\u662f\u8fd9\u4f3c\u4e4e\u6ca1\u5565\u7528\uff0c\u56e0\u4e3a\u8fd9\u53ea\u5360\u4e00\u90e8\u5206\u60c5\u51b5\u3002\u5b9e\u9645\u4e0a\u7b54\u6848\u5f88\u7b80\u5355\uff0c\u53ea\u8981\u6709\u4e24\u4e2a\u76f8\u90bb\u7684\u6570\u5b57\u5927\u4e8e\u7b49\u4e8e \\(k\\)\uff0c\u6216\u8005\u662f\u4e09\u4e2a\u6570\u5b57\u91cc\u6709\u4e24\u4e2a\u6570\u5b57\u5927\u4e8e\u7b49\u4e8e \\(k\\)\uff0c\u5c31\u4e00\u5b9a\u53ef\u4ee5\u3002\u53cd\u4e4b\u5219\u4e00\u5b9a\u4e0d\u884c\uff0c\u4ed4\u7ec6\u4e00\u60f3\u5c45\u7136\u8fd8\u771f\u662f\u8fd9\u6837\u3002\u3002\u3002</p> <pre><code>void ChatGptDeepSeek() // Date: 2025-07-23\n{                      // Time: 22:15:14 \n    int n, k;\n    cin &gt;&gt; n &gt;&gt; k;\n    vi a(n + 1);\n    for(int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; a[i];\n    if(find(ALL(a), k) == a.end())\n    {\n        cout &lt;&lt; \"NO\\n\";\n        return;\n    }\n    if(n == 1){\n        cout &lt;&lt; \"YES\\n\";\n        return;\n    }\n    for(int i = 1; i &lt; n; i++){\n        if(a[i] &gt;= k &amp;&amp; a[i + 1] &gt;= k){\n            cout &lt;&lt; \"YES\\n\"; return;\n        }\n        if(i &gt; 1 &amp;&amp; a[i - 1] &gt;= k &amp;&amp; a[i + 1] &gt;= k){\n            cout &lt;&lt; \"YES\\n\"; return;\n        }\n    }\n    cout &lt;&lt; \"NO\\n\";\n}\n</code></pre>"},{"location":"XCPC_100days/day002/#cf2122c","title":"CF2122C","text":"<p>\u4e4b\u524d\u6ca1\u60f3\u5230\u770b\u4e86\u9898\u89e3\uff0c\u611f\u89c9\u975e\u5e38\u7684\u53cd\u76f4\u89c9\u3002\u7b54\u6848\u4e00\u5b9a\u53ef\u4ee5\u53d6\u5230\u628a X \u548c Y \u5206\u5f00\u770b\u7684\u6700\u5927\u503c\u3002\u3002\u3002</p> <p>\u770b\u770b\u9898\u89e3\u7684\u601d\u8def\u5427\uff0c\u6211\u4eec\u628a \\(X\\) \u5206\u6210\u4e24\u4e2a\u96c6\u5408 \\(X_l\\) \u548c \\(X_r\\) \u4f7f\u5f97 \\(X_l\\) \u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u5c0f\u4e8e\u7b49\u4e8e \\(X_r\\) \u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\uff0c\u540c\u7406\u628a \\(Y\\) \u5206\u6210 \\(Y_l\\) \u548c \\(Y_r\\)\u3002</p> <p>\u90a3\u4e48\u4e3a\u4e86\u4f7f\u5f97\u7b54\u6848\u66f4\u5927\uff0c\u6211\u4eec\u5e0c\u671b \\(X_l\\) \u5c3d\u91cf\u53bb\u548c \\(X_r\\) \u5339\u914d\uff0c\\(Y_l\\) \u5c3d\u91cf\u53bb\u548c \\(Y_r\\) \u5339\u914d\u3002</p> <p>\u90a3\u4e48\u6211\u4eec\u5148\u5c06  \\((X_l, Y_l)\\) \u4e0e \\((X_r, Y_r)\\) \u914d\u5bf9\uff0c\\((X_l, Y_r) \u4e0e (X_r, Y_l)\\) \u914d\u5bf9\u3002</p> <p>\u7136\u540e\u975e\u5e38\u795e\u5947\u7684\u4e8b\u60c5\u5c31\u53d1\u751f\u4e86\uff0c\u8fd9\u4e24\u7ec4\u914d\u5bf9\u5b8c\u4e4b\u540e\uff0c\u4e0d\u4f1a\u6709\u5269\u4f59\u7684\u70b9\u4e86\u3002</p> <p>\u5047\u8bbe4\u7ec4\u70b9\u7684\u6570\u91cf\u5206\u522b\u4e3a \\(a, b, c, d\\)\uff0c\u90a3\u4e48\u7531\u4e8e \\(|X_l| = |X_r|\\)\uff0c\u4e8e\u662f \\(a + c = b + d\\)\uff0c\u7531\u4e8e \\(|Y_l| = |Y_r|\\)\uff0c\u4e8e\u662f \\(a + d = b + c\\), \u7531\u4e8e \\(|X_l| = |Y_l|\\)\uff0c \\(c = d, a = b\\)\uff0c\u4e8e\u662f\u53ef\u4ee5\u5168\u90e8\u914d\u5bf9\u6210\u529f\u3002</p> <p>\u4f46\u662f\u6211\u4ee3\u7801\u6709\u70b9\u70c2\u3002\u6709\u4e24\u79cd\u65b9\u6cd5\uff0c\u53ef\u4ee5\u5148\u6309 \\(x\\) \u6392\u5e8f\uff0c\u7136\u540e\u524d\u4e00\u534a\u540e\u4e00\u534a\u5206\u522b\u6309 \\(y\\) \u6392\u5e8f\uff0c\u7136\u540e\u524d\u4e00\u534a\u548c\u540e\u4e00\u534a\u914d\u5bf9\u5c31\u884c\u3002</p> <p>\u8fd8\u6709\u4e00\u79cd\u5f88\u5999\u7684\u65b9\u6cd5\u5c31\u662f\uff0c\u5148\u6309 \\(X\\) \u6392\u5e8f\uff0c\u7136\u540e\u6211\u4eec\u6807\u8bb0\u4e00\u4e0b\u54ea\u4e9b\u4e0b\u6807\u5728\u524d\u4e00\u534a\uff0c\u518d\u6309 \\(Y\\) \u6392\u5e8f\uff0c\u540c\u6837\u6807\u8bb0\u4e00\u4e0b\u54ea\u4e9b\u4e0b\u6807\u5728\u524d\u4e00\u534a\u3002\u53ef\u4ee5\u7528\u4f4d\u8fd0\u7b97\uff0c\u6bd4\u8f83\u7b80\u6d01\u3002</p> <p>\u6211\u5199\u7684\u5c31\u662f\u6bd4\u8f83\u70c2\u7684\uff0c\u54c8\u54c8\u54c8\uff0c\u6ca1\u60f3\u5230\u667a\u6167\u7684\u5199\u6cd5\u3002</p> <pre><code>// Date: 2025-07-20\n// Time: 14:36:18\nvoid ChatGptDeepSeek()\n{\n    int n;\n    cin &gt;&gt; n;\n    vc&lt;array&lt;int, 2&gt;&gt; vec(n);\n    for (int i = 0; i &lt; n; i++)\n    {\n        cin &gt;&gt; vec[i][0] &gt;&gt; vec[i][1];\n    }\n    /*\n    Xl Yl + Xr Yr\n    Xl Yr + Xr Yl\n    */\n    vi tmp(n);\n    for (int i = 0; i &lt; n; i++)\n        tmp[i] = vec[i][0];\n    ranges::sort(tmp);\n    int X = tmp[n / 2 - 1];\n    for (int i = 0; i &lt; n; i++)\n        tmp[i] = vec[i][1];\n    ranges::sort(tmp);\n    int Y = tmp[n / 2 - 1];\n\n    vi v1, v2, v3, v4;\n\n    auto work = [&amp;](){\n        int cnt = count_if(all(vec), [&amp;](array&lt;int, 2&gt; x){\n            return x[0] &lt; X;\n        });\n        for(auto &amp;[x, _] : vec){\n            if(x == X) cnt++;\n            if(cnt &gt; n / 2) x++;\n        }\n        cnt = count_if(all(vec), [&amp;](array&lt;int, 2&gt; x){\n            return x[1] &lt; Y;\n        });\n        for(auto &amp;[_, y] : vec){\n            if(y == Y) cnt++;\n            if(cnt &gt; n / 2) y++;\n        }\n    };\n    work();\n    for (int i = 0; i &lt; n; i++)\n    {\n        auto [x, y] = vec[i];\n        if (x &lt;= X &amp;&amp; y &lt;= Y)\n            v1.push_back(i);\n        else if (x &gt; X &amp;&amp; y &gt; Y)\n            v2.push_back(i);\n        else if (x &lt;= X &amp;&amp; y &gt; Y)\n            v3.push_back(i);\n        else\n            v4.push_back(i);\n    }\n\n    assert(sz(v1) == sz(v2) &amp;&amp; sz(v3) == sz(v4));\n    for (int i = 0; i &lt; sz(v1); i++)\n    {\n        cout &lt;&lt; v1[i] + 1 &lt;&lt; \" \" &lt;&lt; v2[i] + 1 &lt;&lt; '\\n';\n    }\n    for (int i = 0; i &lt; sz(v3); i++)\n    {\n        cout &lt;&lt; v3[i] + 1 &lt;&lt; \" \" &lt;&lt; v4[i] + 1 &lt;&lt; '\\n';\n    }\n}\n</code></pre>"},{"location":"XCPC_100days/day003/","title":"\u7b2c\u4e09\u5929 2025-07-24","text":"<p>\u4eca\u5929\u662f\u7b2c\u56db\u573a\u725b\u5ba2\u591a\u6821\uff0c\u4f46\u662f\u6700\u96be\u53d7\u7684\u4e00\u96c6\uff0c\u53ea\u5199\u4e86\u4e00\u9898\u5c31\u53bb\u7761\u89c9\u4e86\u3002\u7136\u540e\u7ed3\u675f\u4e86\u53d1\u73b0\u5e94\u8be5\u8fd8\u6709\u4e00\u4e2a\u53ef\u4ee5\u5199\u7684\u9898\u7684\u3002\u3002\u3002</p> <p>\u7136\u540e\u4e5f\u6ca1\u5199\u5565\u522b\u7684\u9898\u76ee\u4e86\u3002</p> <p></p> <p>\u800c\u4e14\u7f5a\u65f6\u8fd8\u5403\u723d\u4e86\uff0c\u6389\u4e86158rating\u3002\u3002\u3002\u867d\u7136\u725b\u5ba2\u7684rating\u5bf9\u6211\u65e0\u6240\u8c13\uff0c\u4f46\u8fd9\u6253\u5f97\u4e5f\u592a\u70c2\u4e86\u3002</p>"},{"location":"XCPC_100days/day004/","title":"\u7b2c\u56db\u5929 2025-07-25","text":"<p>\u4eca\u5929\u8fd8\u884c\u5427\uff0c\u7b49\u4f1a\u518dVP\u4e00\u628adiv2\u3002</p>"},{"location":"XCPC_100days/day004/#cf2125d","title":"CF2125D","text":"<p>\u524d\u51e0\u5929\u7684\u6bd4\u8d5b\uff0c\u5f53\u65f6\u548b\u60f3\u4e0d\u660e\u767d\u7684\u3002\u5176\u5b9e\u4e5f\u6ca1\u6709\u5f88\u96be\u3002</p> <p>\u6211\u6bd4\u8d5b\u65f6\u4ee5\u4e3a\u5982\u679c\u8981\u9009 \\([l, r]\\)\uff0c\u90a3\u4e48\u6240\u6709\u4e0e\u8fd9\u4e2a\u6bb5\u76f8\u4ea4\u7684\u6bb5\u90fd\u4e0d\u80fd\u9009\uff0c\u8981\u76f4\u63a5\u4e58\u4e0d\u9009\u7684\u6982\u7387\u3002</p> <p>\u4f46\u662f\u8fd9\u4e2a\u4e1c\u897f\u6211\u4e0d\u4f1a\u7b97\uff0c\u800c\u4e14\u73b0\u5728\u518d\u60f3\u60f3\u5462\uff0c\u4e00\u4e2a\u6bb5\u53ef\u80fd\u4f1a\u548c\u591a\u4e2a\u6bb5\u90fd\u91cd\u5408\uff0c\u6240\u4ee5\u4e0d\u80fd\u8fd9\u6837\u4e58\u7684\u3002\u53ef\u4ee5\u53ea\u8003\u8651\u5de6\u7aef\u70b9\u6216\u53f3\u7aef\u70b9\u5728\u8fd9\u4e2a\u533a\u95f4\u91cc\u7684\u7ebf\u6bb5\u3002\u8fd9\u6837\u5c31\u4e0d\u4f1a\u4e58\u5c11\u4e86\u6216\u4e58\u591a\u4e86\u3002</p> <pre><code>constexpr int mod = 998244353;\nll ksm(ll a, ll b) {\n    ll res = 1;\n    while (b) {\n        if (b &amp; 1)\n            res = res * a % mod;\n        a = a * a % mod;\n        b &gt;&gt;= 1;\n    }\n    return res;\n}\nvoid ChatGptDeepSeek() // Date: 2025-07-25\n{                      // Time: 18:03:59 \n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    // vector&lt;array&lt;int, 4&gt;&gt; vec(n);\n    vector&lt;vector&lt;pii&gt;&gt; vec(m + 1);\n    for(int i = 0; i &lt; n; i++){\n        int l, r, p, q;\n        cin &gt;&gt; l &gt;&gt; r &gt;&gt; p &gt;&gt; q;\n        vec[r].push_back({l, p * ksm(q, mod - 2) % mod});\n    }\n    vector&lt;long long&gt; pre(m + 1), dp(m + 1);\n    pre[0] = 1, dp[0] = 1;\n    for(int i = 1; i &lt;= m; i++){\n        pre[i] = pre[i - 1];\n        for(auto [l, p] : vec[i]){\n            pre[i] = pre[i] * (1 - p) % mod;\n        }\n        pre[i] = (pre[i] + mod) % mod;\n    }\n    auto get = [&amp;](int l, int r){\n        return pre[r] * ksm(pre[l - 1], mod - 2) % mod;\n    };\n    for(int i = 1; i &lt;= m; i++){\n        for(auto [l, p] : vec[i]){\n            dp[i] = dp[i] + dp[l - 1] * p % mod * get(l, i) % mod * ksm(1 - p, mod - 2) % mod;\n            dp[i] = dp[i] % mod;\n        }\n    }\n    dp[m] = (dp[m] + mod) % mod;\n    cout &lt;&lt; dp[m] &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"XCPC_100days/day004/#abc414e","title":"ABC414E","text":"<p>\u8fd9\u79cd\u9898\u5176\u5b9e\u4e5f\u633a\u591a\u7684\uff0c\u524d\u4e24\u5468\u7684\u9898\uff0c\u4f46\u662f\u4e0d\u4f1a\u5199\u3002\u5176\u5b9e\u4e5f\u5e76\u6ca1\u6709\u90a3\u4e48\u96be\u3002</p> <p>\\(a \\mod b \\ne a\\)\uff0c\u56e0\u6b64 \\(a &gt; b &gt; c\\) \\(c &gt; 0\\)\uff0c\u6240\u4ee5 \\(a \\nmid b\\)</p> <p>\u4e8e\u662f\u6211\u4eec\u53ea\u9700\u8981\u7edf\u8ba1 \\(a &gt; b\\) \u4e14 \\(a \\nmid b\\) \u7684\u5bf9\u7684\u6570\u91cf\u3002</p> <p>\u8fd9\u4e2a\u770b\u8d77\u6765\u5c31\u5f88\u4e0d\u597d\u60f3\uff0c\u6211\u4eec\u53ef\u4ee5\u53cd\u8fc7\u6765\u60f3\uff0c\u7528\u603b\u7684\u5bf9\u7684\u6570\u91cf\u51cf\u53bb\u6574\u9664\u7684\u5bf9\u7684\u6570\u91cf\u3002</p> <p>\u5f53 \\(a = b\\) \u65f6\uff0c\\(a \\mid b\\)\uff0c\u56e0\u6b64\u53ef\u4ee5\u770b\u6210 \\(a \\ge b\\) \u4e14 \\(a \\nmid b\\)\uff0c\u8fd9\u6837\u4f1a\u65b9\u4fbf\u4e00\u4e9b\u3002</p> <p>\u90a3\u4e48\u7b54\u6848\u5c31\u662f \\(\\frac{n(n+1)}{2}-\\sum_{b = 1}^n\\frac{n}{b}\\)\uff0c\u4f46\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u7b97\uff0c\u56e0\u4e3a\u590d\u6742\u5ea6\u5f88\u9ad8\u3002</p> <p>\u4f46\u662f\u5982\u679c\u8003\u8651\u503c\uff0c\\(\\frac{b}{i}\\) \u6700\u591a\u53ea\u4f1a\u6709 \\(2\\sqrt{n}\\) \u4e2a\u503c\u3002</p> <p>\u5f53 \\(b \\le \\sqrt{n}\\) \u65f6\uff0c\u6700\u591a\u4f1a\u4ea7\u751f \\(\\sqrt{n}\\) \u4e2a\u503c\uff1b\u5f53 \\(b &gt; \\sqrt{n}\\) \u65f6\uff0c\\(\\frac{n}{b} \\le \\sqrt{n}\\)\uff0c\u56e0\u6b64\u6700\u591a\u4e5f\u53ea\u4f1a\u6709 \\(\\sqrt{n}\\) \u4e2a\u503c\u3002</p> <p>\u90a3\u4e48\u6211\u4eec\u521d\u59cb\u65f6\u8ba9 \\(L = 1\\)\uff0c \u6211\u4eec\u627e\u5230\u6700\u5927\u7684 \\(R\\) \u4f7f\u5f97 \\(\\lfloor \\frac{N}{R} \\rfloor = \\lfloor \\frac{N}{L} \\rfloor\\)\uff0c\u5206\u5757\u5904\u7406\u3002</p> <p>\\(\\lfloor \\frac{N}{R} \\rfloor \\ge \\lfloor \\frac{N}{L} \\rfloor\\)\uff0c \u56e0\u6b64 \\(R \\le \\lfloor \\frac{N}{\\lfloor \\frac{N}{L} \\rfloor} \\rfloor\\)\u3002</p> <p>\u6240\u4ee5\u5bf9\u4e8e \\(L\\)\uff0c\u6700\u5927\u7684\u6ee1\u8db3\u6761\u4ef6\u7684 \\(R\\) \u5c31\u662f \\(\\lfloor \\frac{N}{\\lfloor \\frac{N}{L} \\rfloor} \\rfloor\\)\u3002\u5bf9\u4e8e \\(i \\in [L, R]\\), \\(\\lfloor \\frac{N}{i} \\rfloor = \\lfloor \\frac{N}{L} \\rfloor\\)\u3002</p> <pre><code>/*\na % b != a a &gt; b\na % b &lt; b\na &gt; b &gt; c\na &gt; b &amp;&amp; a % b != 0\nn * (n - 1) / 2 - \u6574\u9664\u7684\u5bf9\u7684\u6570\u91cf\n\nn / 1 + n / 2 + n / 3 ... \n\u503c\u7684\u6570\u91cf\u662f\u6709\u9650\u7684 sqrt(n) \u8303\u56f4\n\nn / l &lt;= n / r\nr &lt;= n / (n / l)\n*/\n#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconstexpr int mod = 998244353;\nlong long ksm(long long a, long long b)\n{\n    long long res = 1;\n    while(b){\n        if(b &amp; 1) res = res * a % mod;\n        a = a * a % mod;\n        b &gt;&gt;= 1;\n    }\n    return res;\n}\nlong long inv(long long x) {return ksm(x, mod - 2);}\nint main()\n{\n    ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);\n    long long N;\n    cin &gt;&gt; N;\n    long long ans = N % mod;\n    ans = ans * (ans + 1) % mod * inv(2) % mod;\n    for(long long L = 1, R; L &lt;= N; L = R + 1){\n        R = N / (N / L);\n        int len = (R - L + 1) % mod;\n        int val = (N / L) % mod;\n        ans -= 1LL * len * val % mod;\n        ans %= mod;\n    }\n    cout &lt;&lt; (ans + mod) % mod &lt;&lt; '\\n';\n    return 0;\n}\n</code></pre>"},{"location":"XCPC_100days/day004/#abc415e","title":"ABC415E","text":"<p>\u4e0a\u5468\u7684ABC\uff0c\u4e0a\u5468\u6211\u4e3a\u5565\u6ca1\u6253\u6765\u7740\u2026\u2026\u5fd8\u8bb0\u4e86\uff0c\u4f46\u662f\u8fd9\u4e2a\u9898\u5f88\u7b80\u5355\uff0c\u9898\u89e3\u90fd\u4e0d\u7528\u770b\u4e86\u55b5\u3002</p> <p>\u521a\u5f00\u59cb\u6211\u4ee5\u4e3a\u53ea\u662f\u95ee\u80fd\u4e0d\u80fd\u5230 \\((H, W)\\)\uff0c\u770b\u4e86\u6837\u4f8b\u624d\u53d1\u73b0\u662f\u95ee\u521d\u59cb\u65f6\u6700\u5c11\u5e26\u591a\u5c11\u94b1\u3002</p> <p>\u5176\u5b9e\u9053\u7406\u90fd\u662f\u4e00\u6837\u7684\uff0c\u95ee\u5e26\u591a\u5c11\u94b1\u53ea\u9700\u8981\u4e8c\u5206\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\u3002</p> <p>\u56e0\u4e3a\u53ea\u80fd\u5411\u4e0b\u6216\u8005\u5411\u53f3\u8d70\uff0c\u6240\u4ee5\u8d70\u5b8c \\(H + W - 1\\) \u6b65\u4e4b\u540e\uff0c\u4f60\u4e00\u5b9a\u4f1a\u5230\u8fbe\u53f3\u4e0b\u89d2\uff0c\u5e76\u4e14\u5230\u8fbe\u6bcf\u4e2a\u70b9\u7684\u6b65\u6570\u4e00\u5b9a\u662f\u56fa\u5b9a\u7684\u3002\u4f60\u4e00\u5b9a\u662f\u5728\u7b2c \\(i + j - 1\\) \u6b65\u8d70\u5230 \\((i, j)\\)\uff0c\u7136\u540e\u5c31\u4e8c\u5206\u5c31\u884c\u4e86\uff0c\\(dp_{i,j}\\) \u4ee3\u8868\u8d70\u5230 \\((i, j)\\) \u7684\u6700\u5927\u786c\u5e01\u6570\uff0c\u5e76\u4e14\u4f60\u53ea\u80fd\u4ece\u4e0a\u4e00\u4e2a\u683c\u5b50\u6216\u8005\u5de6\u8fb9\u4e00\u4e2a\u683c\u5b50\u8d70\u8fc7\u6765\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint main()\n{\n    ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);\n    int H, W;\n    cin &gt;&gt; H &gt;&gt; W;\n    vector&lt;vector&lt;int&gt;&gt; A(H + 1, vector&lt;int&gt; (W + 1));\n    for(int i = 1; i &lt;= H; i++){\n        for(int j = 1; j &lt;= W; j++){\n            cin &gt;&gt; A[i][j];\n        }\n    }\n    vector&lt;int&gt; P(H + W);\n    for(int i = 1; i &lt;= H + W - 1; i++)\n        cin &gt;&gt; P[i];\n    auto check = [&amp;](long long x){\n        vector&lt;vector&lt;long long&gt;&gt; dp(H + 1, vector&lt;long long&gt; (W + 1, -1));\n        dp[1][1] = x;\n        for(int i = 1; i &lt;= H; i++){\n            for(int j = 1; j &lt;= W; j++){\n                if(i &gt; 1) dp[i][j] = max(dp[i][j], dp[i - 1][j]);\n                if(j &gt; 1) dp[i][j] = max(dp[i][j], dp[i][j - 1]);\n                if(dp[i][j] == -1) continue;\n                dp[i][j] += A[i][j] - P[i + j - 1];\n            }\n        }\n        return dp[H][W] &gt;= 0;\n    };\n    long long lo = -1, hi = 200000000000001LL;\n    while(lo &lt; hi - 1){\n        long long mid = (lo + hi) &gt;&gt; 1;\n        if(check(mid)) hi = mid;\n        else lo = mid;\n    }\n    cout &lt;&lt; hi &lt;&lt; '\\n';\n    return 0;\n}\n</code></pre>"},{"location":"about/me/","title":"\u5173\u4e8e\u6211","text":"<p>2025-03-31</p>"},{"location":"about/me/#about-me","title":"About Me","text":"<p>\u6c49\u6c5f\u5e08\u8303\u5b66\u9662\u8f6f\u4ef6\u5de5\u7a0b\u5b66\u751f\uff0c\u76ee\u524d\u5927\u4e8c\u3002</p> <p>\u53ef\u80fd\u6709\u70b9\u559c\u6b22\u7b97\u6cd5\u7ade\u8d5b\uff1f\u524d\u7aef\u540e\u7aef\u6570\u636e\u5e93\u4e13\u4e1a\u8bfe\u57fa\u672c\u4e00\u70b9\u90fd\u4e0d\u4f1a\u3002\u3002\u3002\u5176\u5b9e\u6211\u611f\u89c9\u4e5f\u90fd\u633a\u6709\u610f\u601d\u7684\uff0c\u597d\u60f3\u6210\u4e3a\u524d\u7aef\u9ad8\u624b\u3002\u3002\u3002\u4f46\u662f\u76ee\u524d\u8fd8\u662f\u597d\u597d\u5b66xcpc\u5427\u3002\u60f3\u62bd\u7a7a\u5b66\u70b9 js ?\uff08</p> <p>\u5927\u4e00\u53bb ICPC \u7701\u8d5b\u548c\u9080\u8bf7\u8d5b\u62ff\u4e86\u94dc\uff0c\u7f51\u7edc\u8d5b\u7a00\u70c2\uff0c\u533a\u57df\u8d5b\u53bb\u4e86\u4e00\u573a\u4f46\u6253\u94c1\u4e14\u57ab\u5e95\u3002\u975e\u5e38\u5e0c\u671b\u80fd\u8fbe\u5230 Codeforces \u7684 Candidate Master\uff0c\u6211\u76f8\u4fe1\u8fd9\u5e76\u4e0d\u4f1a\u975e\u5e38\u9065\u8fdc\u3002</p> <p>\u6700\u8fd1\u6709\u70b9\u5e0c\u671b\u80fd\u7a7f\u8d8a\u56de\u521d\u4e2d\u9ad8\u4e2d\uff0c\u505a\u4e00\u6b21 OIer \uff0c\u4f46\u6211\u77e5\u9053\u90a3\u4e0d\u592a\u53ef\u80fd\u3002\u4f46\u6211\u73b0\u5728\u4e5f\u53ef\u4ee5\u5f88\u723d\u7684\u5199\u4ee3\u7801\u5427\uff0c\u8ddf OIer \u5176\u5b9e\u5dee\u4e0d\u591a\uff0c\u9664\u4e86\u83dc\u5f88\u591a\u5f88\u591a\u3002</p>"},{"location":"about/me/#contact","title":"Contact","text":"<p>\u5982\u679c\u4f60\u60f3\u8054\u7cfb\u6211\uff0c</p> <p>Email: wu_yi_@outlook.com 2895264580@qq.com</p> <p>QQ\u4e5f\u662f\u540c\u4e00\u4e2a\u3002</p>"},{"location":"algorithm/datastructure/Cartesian-tree/","title":"\u7b1b\u5361\u5c14\u6811","text":"<p>2025-04-01</p> <p>\u6211\u6682\u65f6\u4e5f\u4e0d\u592a\u77e5\u9053\u8fd9\u73a9\u610f\u80fd\u5e72\u5565\u3002\u3002\u3002\u56e0\u4e3a\u597d\u50cf\u96be\u70b9\u7684\u9898\u6709\u70b9\u96be\u4e86\uff0c\u800c\u4e14\u4e5f\u6ca1\u600e\u4e48\u9047\u5230\u8fc7\u9700\u8981\u7528\u8fd9\u4e2a\u7684\u9898\u76ee\u3002</p> <p>\u662f\u56e0\u4e3a\u676d\u5ddeM\u8981\u7528\u8fd9\u4e2a\u624d\u6765\u770b\u770b\u3002</p> <p>\u7b80\u5355\u8bf4\u4e0b\u5427\uff0c\u5c31\u662f\u5355\u8c03\u6808\u6765\u5efa\u6811\u3002\u5de6\u53f3\u5b69\u5b50\u90fd\u662f\u6bd4\u5b83\u5c0f\u6216\u5927\u7684\u6570\u5b57\u3002\u4e14\u987a\u5e8f\u662f\u6309\u539f\u5e8f\u5217\u7684\u987a\u5e8f\u3002\u597d\u50cf\u975e\u5e38\u7b80\u5355\u3002\u5efa\u6811\u4e4b\u7c7b\u7684\uff0c\u4ee3\u7801\u4e5f\u662f\u975e\u5e38\u597d\u7406\u89e3\u3002</p>"},{"location":"algorithm/datastructure/Cartesian-tree/#p5854","title":"P5854 \u3010\u6a21\u677f\u3011\u7b1b\u5361\u5c14\u6811","text":"<p>\u6a21\u677f\u9898\u5199\u4e86\u5c31\u662f\u5b8c\u5168\u4e0d\u77e5\u9053\u5b83\u4f1a\u6709\u4ec0\u4e48\u7528\u3002</p> <pre><code>void ChatGptDeepSeek()\n{\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;int&gt; p(n + 1), l(n + 1), r(n + 1);\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; p[i];\n    auto build = [&amp;]()\n    {\n        vector&lt;int&gt; stk;\n        for (int i = 1; i &lt;= n; i++)\n        {\n            while (!stk.empty() &amp;&amp; p[stk.back()] &gt; p[i])\n                l[i] = stk.back(), stk.pop_back();\n            if (!stk.empty())\n                r[stk.back()] = i;\n            stk.push_back(i);\n        }\n    };\n    build();\n\n    long long L = 0, R = 0;\n    for (int i = 1; i &lt;= n; i++)\n    {\n        // cerr &lt;&lt; l[i] &lt;&lt; \" \" &lt;&lt; r[i] &lt;&lt; \" \\n\";\n        L ^= 1LL * i * (l[i] + 1);\n        R ^= 1LL * i * (r[i] + 1);\n    }\n    cout &lt;&lt; L &lt;&lt; \" \" &lt;&lt; R &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"algorithm/datastructure/Cartesian-tree/#2024icpcm","title":"2024ICPC\u676d\u5dde\u533a\u57df\u8d5bM","text":"<p>\u8fd9\u4e2a\u611f\u89c9\u8fd8\u7a0d\u5fae\u80fd\u4f53\u73b0\u4e00\u70b9\u7528\u9014\u3002</p> <p>\u8fd9\u91cc\u662f\u7528\u4e8e\u68c0\u67e5\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5b50\u533a\u95f4\uff0c\u90fd\u6ee1\u8db3\u5b50\u533a\u95f4\u7684\u6700\u5c0f\u503c\u53ef\u4ee5\u6574\u9664\u5b50\u533a\u95f4\u91cc\u7684\u6240\u6709\u6570\u5b57\u3002\u5b9e\u9645\u4e0a\u53ea\u9700\u8981\u5efa\u7b1b\u5361\u5c14\u6811\uff0c\u7136\u540e\u6574\u9664\u662f\u5177\u6709\u4f20\u9012\u6027\u7684\uff0c\u4e14\u7b1b\u5361\u5c14\u6811\u662f\u6ee1\u8db3\u539f\u5e8f\u5217\u7684\u987a\u5e8f\uff0c\u5c31\u662f\u5de6\u5b69\u5b50\u4e00\u5b9a\u662f\u5728\u539f\u5e8f\u5217\u4e2d\u8fd9\u4e2a\u6570\u5b57\u7684\u5de6\u8fb9\u3002</p> <p>\u53ea\u9700\u8981\u5224\u65ad\u6bcf\u4e00\u4e2a\u8282\u70b9\uff0c\u53ef\u4ee5\u6574\u9664\u5b83\u7684\u4e24\u4e2a\u5b50\u8282\u70b9\uff0c\u5373\u6ee1\u8db3\u6761\u4ef6\u3002\u68c0\u67e5\u4e86\u6240\u6709\u5b50\u533a\u95f4\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5374\u53ea\u6709 \\(O(n)\\) \u3002</p>"},{"location":"algorithm/datastructure/Fenwick/","title":"\u6811\u72b6\u6570\u7ec4","text":"<p>2025-03-31</p> <p>\u6811\u72b6\u6570\u7ec4\u5176\u5b9e\u5df2\u7ecf\u662f\u6bd4\u8f83\u9ad8\u7ea7\u7684\u4e1c\u897f\u4e86\u5427\uff0c\u800c\u4e14\u4ee3\u7801\u4e5f\u6bd4\u8f83\u77ed\u3002\u5176\u5b9e\u6211\u5e76\u4e0d\u5f88\u61c2\u91cc\u9762\u7684\u539f\u7406\uff0c\u53ea\u4f1a\u80cc\u4e2a\u6a21\u677f\u3002\u3002</p> <p>\u4e3a\u4ec0\u4e48ST\u8868\u6a21\u677f\u662f\u9ec4\uff0c\u6811\u72b6\u6570\u7ec4\u4e24\u4e2a\u90fd\u662f\u7eff\u3002\u3002\u3002</p> <p>\u5176\u5b9e\u8bb0\u5f97\u4ee3\u7801\u5c31\u884c\u5427\u3002\u5982\u679c\u6ca1\u6709\u65f6\u95f4\u3002</p> <p>\u5e38\u7528\u64cd\u4f5c\u4e3b\u8981\u662f \u5355\u70b9\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2 \u6216 \u533a\u95f4\u4fee\u6539\uff0c\u5355\u70b9\u67e5\u8be2\u3002\u5355\u6b21\u4fee\u6539\u67e5\u8be2\u590d\u6742\u5ea6\u4e3a \\(O(\\log n)\\) \u3002</p>"},{"location":"algorithm/datastructure/Fenwick/#_2","title":"\u5355\u70b9\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2","text":""},{"location":"algorithm/datastructure/Fenwick/#p3374-1","title":"P3374 \u3010\u6a21\u677f\u3011\u6811\u72b6\u6570\u7ec4 1","text":"<p>\u6ce8\u610f add \u65f6\uff0c\u53ef\u4ee5\u5224\u4e00\u4e0b \\(i\\) \u4e0d\u4e3a \\(0\\) \uff0c\u5426\u5219\u54ea\u5929\u6ca1\u51c6\u6b7b\u5faa\u73af\u3002\u3002\u3002ask \u4e5f\u53ef\u4ee5\u5c3d\u91cf\u5199\u6210 \\(i &gt; 0\\) \uff0c\u8fd9\u6837\u78b0\u5230\u4e0d\u5c0f\u5fc3\u6709\u8d1f\u6570\u8fc7\u6765\u4e5f\u6ca1\u4e8b\u3002</p> <pre><code>using ll = long long;\nstruct Fenwick\n{\n    vector&lt;ll&gt; b;\n    Fenwick(int n)\n    {\n        b = vector&lt;ll&gt;(n + 1);\n    }\n    int lowbit(int x) { return (x) &amp; (-x); }\n    void add(int i, int x)\n    {\n        while (i &amp;&amp; i &lt; b.size())\n        {\n            b[i] += x;\n            i += lowbit(i);\n        }\n    }\n    ll ask(int i)\n    {\n        ll res = 0;\n        while (i &gt; 0)\n        {\n            res += b[i];\n            i -= lowbit(i);\n        }\n        return res;\n    }\n};\nvoid ChatGptDeepSeek()\n{\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    vector&lt;int&gt; a(n + 1);\n    Fenwick C(n + 1);\n    for (int i = 1; i &lt;= n; i++)\n    {\n        cin &gt;&gt; a[i];\n        C.add(i, a[i]);\n    }\n    while (m--)\n    {\n        int op, x, y;\n        cin &gt;&gt; op &gt;&gt; x &gt;&gt; y;\n        if (op == 1)\n            C.add(x, y);\n        else\n            cout &lt;&lt; C.ask(y) - C.ask(x - 1) &lt;&lt; '\\n';\n    }\n}\n</code></pre>"},{"location":"algorithm/datastructure/Fenwick/#_3","title":"\u533a\u95f4\u4fee\u6539\uff0c\u5355\u70b9\u67e5\u8be2","text":""},{"location":"algorithm/datastructure/Fenwick/#p3368-2","title":"P3368 \u3010\u6a21\u677f\u3011\u6811\u72b6\u6570\u7ec4 2","text":"<p>\u5176\u5b9e\u662f\u4e0d\u662f\u5e76\u4e0d\u4e00\u5b9a\u80fd\u533a\u95f4\u4fee\u6539\u3002\u3002\u533a\u95f4\u52a0\u53ef\u4ee5\u3002\u5982\u679c\u80fd\u60f3\u5230\u7528\u5dee\u5206\uff0c\u90a3\u5c31\u662f\u666e\u901a\u7684\u6a21\u677f\u4e86\u3002</p> <p>\u524d\u9762\u5185\u5bb9\u76f8\u540c\uff0c\u8fd9\u91cc\u5c31\u7701\u7565\u4e86\u3002</p> <pre><code>void ChatGptDeepSeek()\n{\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    vector&lt;int&gt; a(n + 1);\n    Fenwick C(n + 1);\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; a[i];\n    while (m--)\n    {\n        int op;\n        cin &gt;&gt; op;\n        if (op == 1)\n        {\n            int x, y, k;\n            cin &gt;&gt; x &gt;&gt; y &gt;&gt; k;\n            C.add(x, k);\n            C.add(y + 1, -k);\n        }\n        else\n        {\n            int x;\n            cin &gt;&gt; x;\n            cout &lt;&lt; C.ask(x) + a[x] &lt;&lt; '\\n';\n        }\n    }\n}\n</code></pre>"},{"location":"algorithm/datastructure/Fenwick/#p5057-cqoi2006","title":"P5057 [CQOI2006] \u7b80\u5355\u9898","text":"<p>\u8ddf\u4e0a\u9762\u90a3\u9898\u5dee\u4e0d\u591a\u3002\u3002\u4f46\u6211\u6ca1\u770b\u51fa\u6765\uff0c\u4e8e\u662f\u62ff\u7ebf\u6bb5\u6811\u505a\u4e86\uff0c\u53d1\u73b0\u539f\u6765\u6811\u72b6\u6570\u7ec4\u505a\u8fd9\u4e48\u7b80\u5355\u3002\u3002\u867d\u7136\u4e5f\u6ca1\u6709\u5199\u591a\u4e45\u3002\u3002</p>"},{"location":"algorithm/datastructure/mo-algo/","title":"\u83ab\u961f\u7b97\u6cd5","text":"<p>2025-04-28</p> <p>\u83ab\u961f\u7b97\u6cd5\u662f\u4e00\u79cd\u5904\u7406\u533a\u95f4\u8be2\u95ee\u7684\u79bb\u7ebf\u7b97\u6cd5\uff0c \u901a\u8fc7\u5206\u5757\u53ef\u4ee5\u8fbe\u5230 $n \\sqrt{n} $ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002</p> <p>\u6700\u57fa\u7840\u7684\u83ab\u961f\u7b97\u6cd5\u662f\uff0c \u628a\u957f\u5ea6\u4e3a \\(n\\) \u7684\u533a\u95f4\uff0c \u5206\u6210\u5927\u5c0f\u4e3a \\(\\sqrt{n}\\) \u7684\u5757\uff0c \u7136\u540e\u628a\u8be2\u95ee\u7684 \\([l,r]\\) \u5148\u6309\u7167 \\(l\\) \u6240\u5728\u7684\u5757\u7684\u4f4d\u7f6e\u6392\u5e8f\uff0c \u518d\u6309 \\(r\\) \u7684\u5927\u5c0f\u6392\u5e8f\u3002</p> <p>\u6211\u4eec\u5b9a\u4e49 \\(L, R\\) \u7528\u6765\u8bb0\u5f55\u5f53\u524d\u7ef4\u62a4\u7684\u7b54\u6848\u7684\u533a\u95f4\uff0c \u53ea\u9700\u8981\u6839\u636e\u5f53\u524d\u9700\u8981\u67e5\u8be2\u7684\u533a\u95f4\u52a8\u6001\u5730\u53bb\u79fb\u52a8 \\(L\\) \u548c \\(R\\) \u3002 \u6240\u4ee5\u8981\u4f7f\u7528\u83ab\u961f\uff0c\u9700\u8981\u4fdd\u8bc1\u80fd\u4ece \\([l, r]\\) \u7684\u8d21\u732e\u63a8\u51fa \\([l, r+1]\\) \u7684\u8d21\u732e\u3002</p> <p>\u83ab\u961f\u4e5f\u7b97\u662f\u4e00\u79cd\u66b4\u529b\u7684\u7b97\u6cd5\uff0c \u4f46\u662f\u65f6\u95f4\u590d\u6742\u5ea6\u5374\u53ef\u4ee5\u505a\u5230 $n \\sqrt{n} $ \u3002\u5728\u4e00\u4e2a\u5757\u5185\uff0c \\(L\\) \u6700\u591a\u53ea\u4f1a\u79fb\u52a8 \\(\\sqrt {n} \\sqrt{n}\\) \u6b21\uff0c \\(R\\) \u6700\u591a\u53ea\u4f1a\u79fb\u52a8 \\(\\sqrt{n}\\) \u6b21\uff0c\u800c\u603b\u5171\u53ea\u6709 \\(\\sqrt{n}\\) \u5757\uff0c\u6240\u4ee5\u603b\u4f53\u64cd\u4f5c\u7684\u6b21\u6570\u6700\u591a\u4f1a\u662f \\(n\\sqrt{n} + n\\) \u6b21\u3002</p>"},{"location":"algorithm/datastructure/mo-algo/#_2","title":"\u666e\u901a\u7684","text":"<p>\u57fa\u672c\u4f1a\u662f\u6bd4\u8f83\u677f\u7684\uff0c\u76f4\u63a5\u5199\u5c31\u884c\u3002</p>"},{"location":"algorithm/datastructure/mo-algo/#p2709-b","title":"P2709 \u5c0fB\u7684\u8be2\u95ee","text":"<p>\u6bd4\u8f83\u6a21\u677f\u7684\u9898\uff0c\u4e0d\u9700\u8981\u505a\u4ec0\u4e48\u6539\u53d8\u3002</p> <pre><code>struct node {\n    int l, r, idx;\n};\nvoid ChatGptDeepSeek() // Date: 2025-04-25\n{ // Time: 15:33:26\n    int n, m, k;\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;\n    vi a(n + 1), c(k + 1), ans(m), pos(n + 1);\n    int siz = sqrt(n);\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; a[i], pos[i] = i / siz;\n    vector&lt;node&gt; Q(m);\n    for (int i = 0; i &lt; m; i++)\n        cin &gt;&gt; Q[i].l &gt;&gt; Q[i].r, Q[i].idx = i;\n    sort(all(Q), [&amp;](node x, node y) {\n        return (pos[x.l] == pos[y.l]) ? (x.r &lt; y.r) : (pos[x.l] &lt; pos[y.l]);\n    });\n    int L = 1, R = 0;\n    ll res = 0;\n    auto add = [&amp;](int i) {\n        assert(i &gt; 0 &amp;&amp; i &lt;= n);\n        res -= (ll)c[a[i]] * c[a[i]];\n        c[a[i]]++;\n        res += (ll)c[a[i]] * c[a[i]];\n    };\n    auto sub = [&amp;](int i) {\n        assert(i &gt; 0 &amp;&amp; i &lt;= n);\n        res -= (ll)c[a[i]] * c[a[i]];\n        c[a[i]]--;\n        res += (ll)c[a[i]] * c[a[i]];\n    };\n\n    for (int i = 0; i &lt; m; i++) {\n        auto [l, r, idx] = Q[i];\n        while(L &gt; l) add(--L);\n        while(R &lt; r) add(++R);\n        while(L &lt; l) sub(L++);\n        while(R &gt; r) sub(R--);\n        // cerr &lt;&lt; L &lt;&lt; \" \" &lt;&lt; R &lt;&lt; '\\n';\n        ans[idx] = res;\n    }\n    for(int i = 0; i &lt; m; i++)\n        cout &lt;&lt; ans[i] &lt;&lt; \"\\n\";\n}\n</code></pre>"},{"location":"algorithm/datastructure/mo-algo/#cf86d","title":"CF86D","text":"<p>\u505a CF \u6309 AC \u6570\u6392\u5e8f\u7684\u7b2c\u4e00\u9898\uff0c \u7136\u540e\u611f\u89c9\u4e0d\u4f1a\uff0c \u4e00\u770b\u9898\u89e3\u8bf4\u8981\u7528\u83ab\u961f\u3002 \u5c31\u662f\u4ece\u8fd9\u5f00\u59cb\u60f3\u7740\u8981\u5b66\u4e00\u4e0b\u83ab\u961f\u7684\u3002</p> <p>\u4e5f\u662f\u53ea\u6d89\u53ca\u57fa\u672c\u7684\u64cd\u4f5c\u7684\u4e00\u9898\u3002</p> <p>\u4f46\u662f\u8fd9\u9898\u4e5f\u6709\u4e9b\u5e2e\u52a9\uff0c \u7528 vector \u88c5\u7ed3\u6784\u4f53\u7684\u63d0\u4ea4\u662f <code>2062ms</code> \uff0c \u4ec5\u4ec5\u628a vector \u6362\u6210\u6570\u7ec4\uff0c \u65f6\u95f4\u5c31\u53d8\u6210\u4e86 <code>1280ms</code> \uff0c \u5728\u6570\u636e\u91cf\u8f83\u5927\u7684\u60c5\u51b5\u4e0b\uff0c \u5dee\u5f02\u8fd8\u662f\u633a\u5927\u7684\u3002</p> <pre><code>constexpr int N = int(1e6)+5;\nint cnt[N];\nstruct node{\n    int l, r, idx;\n};\nnode Q[N];\nvoid ChatGptDeepSeek() // Date: 2025-04-25\n{                      // Time: 21:27:09 \n    int n, q;\n    cin &gt;&gt; n &gt;&gt; q;\n    vi a(n + 1), pos(n + 1);\n    vl ans(q + 1);\n    int siz = sqrt(n);\n    for(int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; a[i], pos[i] = i / siz;\n    // vector&lt;node&gt;Q(q);\n    for(int i = 0; i &lt; q; i++){\n        cin &gt;&gt; Q[i].l &gt;&gt; Q[i].r;\n        Q[i].idx = i;\n    }\n    sort(Q, Q + q, [&amp;](node x, node y){\n        return (pos[x.l] == pos[y.l]) ? (x.r &lt; y.r) : (pos[x.l] &lt; pos[y.l]);\n    });\n    // sort(all(Q), [&amp;](node x, node y){\n    //     return (pos[x.l] == pos[y.l]) ? (x.r &lt; y.r) : (pos[x.l] &lt; pos[y.l]);\n    // });\n    ll res = 0;\n    auto add = [&amp;](int i){\n        res -= (ll)cnt[a[i]] * cnt[a[i]] * a[i];\n        cnt[a[i]]++;\n        res += (ll)cnt[a[i]] * cnt[a[i]] * a[i];\n    };\n    auto sub = [&amp;](int i){\n        res -= (ll)cnt[a[i]] * cnt[a[i]] * a[i];\n        cnt[a[i]]--;\n        res += (ll)cnt[a[i]] * cnt[a[i]] * a[i];\n    };\n    int L = 1, R = 0;\n    for(int i = 0; i &lt; q; i++){\n        auto [l, r, idx] = Q[i];\n        while(L &gt; l) add(--L);\n        while(R &lt; r) add(++R);\n        while(L &lt; l) sub(L++);\n        while(R &gt; r) sub(R--);\n        ans[idx] = res;\n    }\n    for(int i = 0; i &lt; q; i++)\n        cout &lt;&lt; ans[i] &lt;&lt; \"\\n\";\n}\n</code></pre>"},{"location":"algorithm/datastructure/mo-algo/#p1494-z","title":"P1494 [\u56fd\u5bb6\u96c6\u8bad\u961f] \u5c0f Z \u7684\u889c\u5b50","text":"<p>\u6bd4\u8f83\u677f\u7684\u9898\u3002 <code>std::format</code> \u771f\u597d\u7528hhh\uff0c \u4e0d\u8fc7\u5f97 C++ 20 \u624d\u80fd\u7528\u3002 \u6c42\u4e00\u4e0b\u533a\u95f4\u7684\u53d6\u5230\u4e24\u4e2a\u76f8\u540c\u6570\u5b57\u7684\u65b9\u5f0f\u7684\u6570\u91cf\uff0c\u548c\u603b\u6570\u91cf\u53d6\u4e00\u4e0b gcd \u5c31\u884c\u3002</p> <pre><code>constexpr int N = int(5e4)+5;\nstruct node{\n    int l, r, idx;\n};\nnode Q[N];\nvoid ChatGptDeepSeek() // Date: 2025-04-26\n{                      // Time: 00:48:12 \n    /*\n    \u6d1b\u8c37P1494\n    \u8be2\u95ee\u533a\u95f4\u7684\u62bd\u5230\u4e24\u4e2a\u76f8\u540c\u6570\u5b57\u7684\u6982\u7387\n    */\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    int siz = sqrt(n);\n    vi c(n + 1), pos(n + 1), cnt(n + 1);\n    for(int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; c[i], pos[i] = i / siz;\n    for(int i = 0; i &lt; m; i++){\n        cin &gt;&gt; Q[i].l &gt;&gt; Q[i].r;\n        Q[i].idx = i;\n    }\n    sort(Q, Q + m, [&amp;](node x, node y){\n        return (pos[x.l] == pos[y.l]) ? (x.r &lt; y.r) : (pos[x.l] &lt; pos[y.l]);\n    });\n    ll res = 0;\n    auto add = [&amp;](int i){\n        res -= (ll)cnt[c[i]] * (cnt[c[i]] - 1) / 2;\n        cnt[c[i]]++;\n        res += (ll)cnt[c[i]] * (cnt[c[i]] - 1) / 2;\n    };\n    auto sub = [&amp;](int i){\n        res -= (ll)cnt[c[i]] * (cnt[c[i]] - 1) / 2;\n        cnt[c[i]]--;\n        res += (ll)cnt[c[i]] * (cnt[c[i]] - 1) / 2;\n    };\n    int L = 1, R = 0;\n    vector&lt;string&gt; ans(m);\n    for(int i = 0; i &lt; m; i++){\n        auto [l, r, idx] = Q[i];\n        while(L &gt; l) add(--L);\n        while(R &lt; r) add(++R);\n        while(L &lt; l) sub(L++);\n        while(R &gt; r) sub(R--);\n        ll X = (ll)(R - L + 1) * (R - L) / 2;\n        ll g = __gcd(X, res);\n        // cout &lt;&lt; res / g &lt;&lt; \"/\" &lt;&lt; X / g &lt;&lt; '\\n';\n        if(g == 0) ans[idx] = \"0/1\";\n        else\n            ans[idx] = format(\"{}/{}\",res/g,X/g);\n    }\n    for(int i = 0; i &lt; m; i++)\n        cout &lt;&lt; ans[i] &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"algorithm/datastructure/mo-algo/#p4462-cqoi2018","title":"P4462 [CQOI2018] \u5f02\u6216\u5e8f\u5217","text":"<p>\u8fd9\u9898\u6ca1\u60f3\u51fa\u6765\uff0c \u8fd8\u662f\u633a\u6709\u7ec6\u8282\u7684\u3002</p> <p>\u67e5\u8be2\u7684\u533a\u95f4 \\([l, r]\\) \u76f4\u63a5\u7ed9\u5904\u7406\u6210 $[l - 1, r] $\uff0c \u67e5\u8be2\u533a\u95f4 \\([l, r]\\) \u7684\u503c\u5176\u5b9e\u662f\u95ee\u662f\u5426\u5b58\u5728 \\([l-1, r]\\) \u4e4b\u95f4\u7684\u4e24\u4e2a\u524d\u7f00\u4f7f\u5f97 \\(s_x \\oplus s_y = k\\) \u3002</p> <p>\u52a0\u51cf\u4e5f\u662f\u9700\u8981\u6ce8\u610f\u4e00\u4e9b\u4e1c\u897f\u3002</p> <pre><code>struct node{\n    int l, r, idx;\n};\nnode Q[100001];\nint cnt[200002];\nvoid ChatGptDeepSeek() // Date: 2025-04-26\n{                      // Time: 20:37:22 \n    int n, m, k;\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;\n    int siz = sqrt(n);\n    vector&lt;int&gt; a(n + 1), pos(n + 1), pre(n + 1);\n    vl ans(m);\n    for(int i = 1; i &lt;= n; i++){\n        cin &gt;&gt; a[i];\n        pre[i] = pre[i - 1] ^ a[i];\n        pos[i] = i / siz;\n    }\n    for(int i = 0; i &lt; m; i++){\n        cin &gt;&gt; Q[i].l &gt;&gt; Q[i].r;\n        Q[i].idx = i;\n    }\n    sort(Q, Q + m, [&amp;](node x, node y){\n        return (pos[x.l] == pos[y.l]) ? (x.r &lt; y.r) : (pos[x.l] &lt; pos[y.l]);\n    });\n    ll res = 0;\n    auto add = [&amp;](int i){\n        res += cnt[pre[i] ^ k];\n        cnt[pre[i]]++;\n    };\n    auto sub = [&amp;](int i){\n        cnt[pre[i]]--;\n        res -= cnt[pre[i] ^ k];\n    };\n    cnt[0] = 1;\n    int L = 0, R = 0;\n    for(int i = 0; i &lt; m; i++){\n        auto [l, r, idx] = Q[i];\n        --l;\n        while(L &gt; l) add(--L);\n        while(R &lt; r) add(++R);\n        while(L &lt; l) sub(L++);\n        while(R &gt; r) sub(R--);\n        ans[idx] = res;\n    }\n    for(int i = 0; i &lt; m; i++)\n        cout &lt;&lt; ans[i] &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"algorithm/datastructure/mo-algo/#_3","title":"\u5e26\u4fee\u83ab\u961f","text":"<p>\u5e26\u4fee\u83ab\u961f\u76ee\u524d\u53ea\u5199\u4e86\u4e00\u9898\uff0c \u540e\u9762\u4f1a\u66f4\u65b0\u3002</p> <p>\u5982\u679c\u662f\u5e26\u4fee\u7684\u83ab\u961f\uff0c \u4e00\u822c\u4f1a\u5148\u6309 \\(l\\) \u7684\u5757\u7684\u987a\u5e8f\u6392\uff0c \u518d\u6309 \\(r\\) \u7684\u987a\u5e8f\u6392\uff0c \u518d\u6309 \\(t\\) \u7684\u5927\u5c0f\u6765\u6392\uff0c \\(t\\) \u8868\u793a\u7684\u662f\u524d\u9762\u7684\u4fee\u6539\u7684\u6b21\u6570\uff0c \u5757\u7684\u5927\u5c0f\u4e00\u822c\u9009\u62e9 \\(\\sqrt[3]{n^2}\\) , \u4e5f\u5c31\u662f \\(n^{\\frac{2}{3}}\\) , \u5373 pow(n, 0.67) \u3002 </p>"},{"location":"algorithm/datastructure/mo-algo/#p1903","title":"P1903 [\u56fd\u5bb6\u96c6\u8bad\u961f] \u6570\u989c\u8272 / \u7ef4\u62a4\u961f\u5217","text":"<p>\u56e0\u4e3a \\(t\\) \u7684\u5927\u5c0f\u4f1a\u4e0d\u540c\uff0c \u6211\u4eec\u8fd8\u9700\u8981\u53d6\u6d88\u64cd\u4f5c\uff0c \u5176\u5b9e\u5c31\u662f\u8bb0\u4e00\u4e0b\u8fdb\u884c\u6bcf\u6b21\u4fee\u6539\u65f6\uff0c \u90a3\u4e2a\u683c\u5b50\u662f\u4ec0\u4e48\u989c\u8272\uff0c \u53d6\u6d88\u4fee\u6539\u5c31\u662f\u7ed9\u5b83\u989c\u8272\u8fd8\u539f\u56de\u53bb\u561b\u3002</p> <p>\u5f53\u65f6 color \u90a3\u4e2a\u6570\u7ec4\u5927\u5c0f\u6211\u5f00\u9519\u4e86\uff0c \u627e\u4e86\u534a\u5929\uff0c \u8fd8\u662f\u8ba9 deepseek \u5e2e\u6211\u770b\u7684\u3002 \u6211\u5f53\u65f6\u662f\u628a\u90a3\u4e2a\u6570\u7ec4\u7684\u5927\u5c0f\u5f00\u6210\u4e86\u67e5\u8be2\u6b21\u6570\u7684\u3002</p> <pre><code>struct node{\n    int l, r, t, idx;\n};\nnode Q[133333];\nint cnt[int(1e6)+1];\n\nvoid ChatGptDeepSeek() // Date: 2025-04-26\n{                      // Time: 01:16:57 \n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    vi c(n + 1), pos(n + 1);\n    int siz = pow(n, 0.67) + 1;\n    for(int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; c[i], pos[i] = i / siz;\n    vector&lt;pii&gt; upd;\n    int tot = 0;\n    for(int i = 0, cnt = 0; i &lt; m; i++){\n        char op;\n        int x, y;\n        cin &gt;&gt; op &gt;&gt; x &gt;&gt; y;\n        if(op == 'R') upd.push_back({x, y}), cnt++;\n        else Q[tot++] = {x, y, cnt, tot-1};\n    }\n    if(!tot) return;\n    sort(Q, Q + tot, [&amp;](node x, node y){\n        if(pos[x.l] == pos[y.l]){\n            if(pos[x.r] == pos[y.r]) return x.t &lt; y.t;\n            return pos[x.r] &lt; pos[y.r];\n        }\n        return pos[x.l] &lt; pos[y.l];\n    });\n    vi ans(tot), color(sz(upd));\n    int L = 1, R = 0, T = 0, res = 0;\n    auto add = [&amp;](int i){\n        cnt[c[i]]++;\n        if(cnt[c[i]] == 1) res++;\n    };\n    auto sub = [&amp;](int i){\n        cnt[c[i]]--;\n        if(cnt[c[i]] == 0) res--;\n    };\n    auto change = [&amp;](int t){\n        auto [P, C] = upd[t];\n        color[t] = c[P];\n        if(P &gt;= L &amp;&amp; P &lt;= R){\n            cnt[c[P]]--;\n            if(cnt[c[P]] == 0) res--;\n            cnt[C]++;\n            if(cnt[C] == 1) res++;\n        }\n        c[P] = C;\n    };\n    auto recover = [&amp;](int t){\n        auto [P, C] = upd[t];\n        c[P] = color[t];\n        if(P &gt;= L &amp;&amp; P &lt;= R){\n            cnt[C]--;\n            if(cnt[C] == 0) res--;\n            cnt[c[P]]++;\n            if(cnt[c[P]] == 1) res++;\n        }\n    };\n    for(int i = 0; i &lt; tot; i++){\n        auto [l, r, t, idx] = Q[i];\n        while(L &gt; l) add(--L);\n        while(R &lt; r) add(++R);\n        while(L &lt; l) sub(L++);\n        while(R &gt; r) sub(R--);\n        while(T &lt; t) change(T++);\n        while(T &gt; t) recover(--T);\n        ans[idx] = res;\n    }\n    for(int i = 0; i &lt; tot; i++)\n        cout &lt;&lt; ans[i] &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"algorithm/datastructure/sparse-table/","title":"ST\u8868","text":"<p>2025-05-30</p> <p>ST\u8868(Sparse Table\uff0c \u7a00\u758f\u8868) \u53ef\u4ee5\u5b9e\u73b0 O(1) \u67e5\u8be2\u533a\u95f4 RMQ\uff0c\u7ebf\u6bb5\u6811\u548c\u6811\u72b6\u6570\u7ec4\u67e5\u8be2 RMQ \u662f O(\\(\\log n\\)) \u7684\uff0c\u4f46 ST \u8868\u662f\u4e0d\u652f\u6301\u4fee\u6539\u7684\u3002</p> <p>ST\u8868\u662f\u57fa\u4e8e\u500d\u589e\u601d\u60f3\uff0c\u500d\u589e\u4e5f\u53ef\u4ee5\u89e3\u51b3\u5176\u4ed6\u7684\u95ee\u9898\uff0c\u4ee3\u7801\u90fd\u8ddf ST \u8868\u5dee\u4e0d\u591a\uff0c\u611f\u89c9\u975e\u5e38\u795e\u5947\u3002</p> <p>\u4e4b\u524d\u8001\u662f\u4e0d\u592a\u8bb0\u5f97ST\u8868\u600e\u4e48\u5199\uff0c\u4e00\u822c\u8981\u7528\u65f6\u4f1a\u7ffb\u4e66\u770b\uff0c\u7528\u7684\u6b21\u6570\u4e5f\u4e0d\u662f\u5f88\u591a\uff0c\u4f46\u5176\u5b9e\u7a0d\u5fae\u7406\u89e3\u4e0b\uff0c\u5c31\u5f88\u5bb9\u6613\u8bb0\u4f4f\u4e86\u3002</p>"},{"location":"algorithm/datastructure/sparse-table/#p3865-st-rmq","title":"P3865 \u3010\u6a21\u677f\u3011ST \u8868 &amp;&amp; RMQ \u95ee\u9898","text":"<p>\u624d\u9ec4\u8272\u96be\u5ea6\u3002\u3002\u3002\u867d\u7136\u786e\u5b9e\u4e00\u4e0b\u5c31\u80fd\u5b66\u4f1a\u3002</p> <p>\u6570\u7ec4\u4f1a\u6bd4 vector \u5feb\u4e00\u4e9b\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nstruct ST{\n    vector&lt;int&gt; LOG2;\n    vector&lt;vector&lt;int&gt;&gt; info;\n\n    int op(int x, int y){\n        return max(x, y);\n    }\n    ST(vector&lt;int&gt; &amp;vec){\n        // 1-index \n        int n = vec.size() - 1;\n        LOG2.assign(n + 1, 0);\n        // LOG2[1] = 0;\n        for(int i = 2; i &lt;= n; i++)\n            LOG2[i] = LOG2[i &gt;&gt; 1] + 1;\n        info.assign(n + 1, vector&lt;int&gt; (LOG2[n] + 1, 0));\n        for(int i = 1; i &lt;= n; i++){\n            info[i][0] = vec[i];\n        }\n        for(int k = 1; k &lt;= LOG2[n]; k++){\n            for(int i = 1; i + (1 &lt;&lt; k) &lt;= n + 1; i++){\n                info[i][k] = op(info[i][k - 1], info[i + (1 &lt;&lt; (k - 1))][k - 1]);\n            }\n        }\n    }\n    int query(int l, int r){\n        int k = LOG2[r - l + 1];\n        return op(info[l][k], info[r - (1 &lt;&lt; k) + 1][k]);\n    }\n};\n\nint main()\n{\n    ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);\n    int n, q;\n    cin &gt;&gt; n &gt;&gt; q;\n    vector&lt;int&gt; a(n + 1);\n    for(int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; a[i];\n    ST st(a);\n    while(q--){\n        int l, r;\n        cin &gt;&gt; l &gt;&gt; r;\n        cout &lt;&lt; st.query(l, r) &lt;&lt; \"\\n\";\n    }\n    return 0;\n}\n</code></pre>"},{"location":"algorithm/datastructure/SegmentTree/SegmentTree/","title":"\u7ebf\u6bb5\u6811","text":""},{"location":"algorithm/datastructure/SegmentTree/SegmentTree/#_2","title":"\u6700\u5927\u5b50\u6bb5\u548c + \u5355\u70b9\u4fee\u6539","text":""},{"location":"algorithm/datastructure/SegmentTree/SegmentTree/#p4513","title":"P4513 \u5c0f\u767d\u901b\u516c\u56ed","text":"<p>Codeforces \u7684 EDU \u7684\u539f\u9898\uff0c\u5f53\u65f6\u5b66\u5f97\u5f88\u96be\u53d7\u554a\uff0c\u5c31\u662f\u83ab\u540d\u5176\u5999\u770b\u4e0d\u61c2\u7684\uff0c\u5f88\u5750\u7262\uff0c\u4f30\u8ba1\u4e5f\u662f\u82b1\u4e86\u5f88\u4e45\u624d AC \u90a3\u4e2a\u9898\u3002\u4f46\u662f\u524d\u4e24\u5929\u5c31\u5728\u6d1b\u8c37\u770b\u5230\u4e00\u4e2a\u8ddf\u8fd9\u4e00\u6837\u7684\u9898\uff0c\u662f\u4e2a\u84dd\u9898\uff0c\u7136\u540e\u5c31\u6ca1\u6709\u96be\u53d7\u4e86\u3002</p> <p>\u5176\u5b9e\u53ea\u9700\u8981\u77e5\u9053\u600e\u4e48\u5408\u5e76\u5c31\u597d\u5199\u4e86\u3002\u6211\u4eec\u9700\u8981\u77e5\u9053\u6700\u5927\u5b50\u6bb5\u548c\uff0c\u90a3\u4e48\u6709\u54ea\u4e9b\u60c5\u51b5\u5462\uff1f</p> <ol> <li>\u6700\u5927\u5b50\u6bb5\u548c\u5168\u5728\u5de6\u5b69\u5b50\u8282\u70b9</li> <li>\u6700\u5927\u5b50\u6bb5\u548c\u5168\u5728\u53f3\u5b69\u5b50\u8282\u70b9</li> <li>\u6700\u5927\u5b50\u6bb5\u548c\u7a7f\u8fc7\u4e86\u4e24\u8fb9</li> </ol> <p>\u90a3\u4e48\u5bf9\u4e8e\u7b2c 1 \u548c \u7b2c 2 \u79cd\u60c5\u51b5\uff0c\u6700\u5927\u5b50\u6bb5\u548c\u4e00\u5b9a\u662f\u7b49\u4e8e\u5de6\u5b69\u5b50\u548c\u53f3\u5b69\u5b50\u8282\u70b9\u7684\u6700\u5927\u503c\u3002</p> <p>\u5bf9\u4e8e\u7b2c 3 \u79cd\u60c5\u51b5\uff0c\u5b83\u7684\u6700\u5927\u5b50\u6bb5\u548c \u4e00\u5b9a\u662f \u5de6\u5b69\u5b50\u7684\u6700\u5927\u7684\u540e\u7f00\u52a0\u4e0a\u53f3\u5b69\u5b50\u7684\u6700\u5927\u7684\u524d\u7f00\u3002</p> <p>\u7531\u4e8e\u53ea\u4f1a\u6709\u4e09\u79cd\u60c5\u51b5\uff0c\u6b64\u65f6\u6211\u4eec\u5c31\u77e5\u9053\u4e86\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u7684\u4fe1\u606f\u6709: \u6700\u5927\u524d\u7f00 \u6700\u5927\u540e\u7f00 \u6700\u5927\u5b50\u6bb5\u548c\u3002</p> <p>\u8fd8\u6709\u4ec0\u4e48\u5462\uff1f\u5982\u4f55\u66f4\u65b0\u6700\u5927\u524d\u7f00\u548c\u6700\u5927\u540e\u7f00\uff1f\u8fd8\u9700\u8981\u8bb0\u5f55\u7684\u4fe1\u606f\u8fd8\u6709\u533a\u95f4\u548c\uff0c</p> <p>\u6700\u5927\u524d\u7f00\u7b49\u4e8e\u5de6\u5b69\u5b50\u6700\u5927\u524d\u7f00 \u548c \u5de6\u5b69\u5b50\u7684\u548c+\u53f3\u5b69\u5b50\u6700\u5927\u524d\u7f00\u3002</p> <p>\u6240\u4ee5\u73b0\u5728\u5c31\u53ef\u4ee5\u76f4\u63a5\u5199\u4e86\u3002</p> <pre><code>using ll = long long;\n\nconst ll LNF = 1e18;\n\nstruct SegTree {\n// \u9700\u8981\u77e5\u9053\u6bcf\u4e00\u6bb5\u7684\u6700\u5927\u7684\u524d\u7f00 \u6700\u5927\u7684\u540e\u7f00\n// \u4ee5\u53ca\u8fd9\u4e00\u6bb5\u7684\u548c \u53ef\u80fd\u8fd8\u9700\u8981\u5176\u4ed6\u7684\u4fe1\u606f\n// \u8fd8\u6709\u8fd9\u4e00\u6bb5\u7684\u6700\u5927\u5b50\u6bb5\u548c\n#define ls p &lt;&lt; 1\n#define rs p &lt;&lt; 1 | 1\n#define mid ((l + r) &gt;&gt; 1)\n    struct info {\n        ll sum, pre, suf, res;\n    };\n    vector&lt;info&gt; tr;\n    info merge(info x, info y)\n    {\n        info res = { 0, 0, 0, 0 };\n        res.pre = max(x.pre, x.sum + y.pre);\n        res.suf = max(y.suf, y.sum + x.suf);\n        res.sum = x.sum + y.sum;\n        res.res = max({ res.pre, res.suf, x.suf + y.pre, x.res, y.res });\n        return res;\n    }\n    info query(int p, int l, int r, int lx, int rx)\n    {\n        if (l &gt;= lx &amp;&amp; r &lt;= rx)\n            return tr[p];\n        if (lx &lt;= mid &amp;&amp; rx &gt; mid)\n            return merge(query(ls, l, mid, lx, rx), query(rs, mid + 1, r, lx, rx));\n        if (lx &lt;= mid)\n            return query(ls, l, mid, lx, rx);\n        if (rx &gt; mid)\n            return query(rs, mid + 1, r, lx, rx);\n    }\n    void upd(int p, int l, int r, int x, int val)\n    {\n        if (l == r) {\n            tr[p] = { val, val, val, val };\n            return;\n        }\n        if (x &lt;= mid)\n            upd(ls, l, mid, x, val);\n        else\n            upd(rs, mid + 1, r, x, val);\n        tr[p] = merge(tr[ls], tr[rs]);\n    }\n    SegTree(vector&lt;int&gt;&amp; a)\n    {\n        tr = vector&lt;info&gt;(a.size() &lt;&lt; 2);\n        auto build = [&amp;](auto&amp;&amp; self, int p, int l, int r) -&gt; void {\n            if (l == r) {\n                tr[p] = { a[l], a[l], a[l], a[l] };\n                return;\n            }\n            self(self, ls, l, mid);\n            self(self, rs, mid + 1, r);\n            tr[p] = merge(tr[ls], tr[rs]);\n        };\n        build(build, 1, 1, a.size() - 1);\n    }\n};\n\nvoid ChatGptDeepSeek()\n{\n    // \u5b9e\u9645\u4e0a\u5c31\u662f\u8981\u67e5\u8be2\u533a\u95f4\u7684\u6700\u5927\u5b50\u6bb5\u548c\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    vector&lt;int&gt; a(n + 1);\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; a[i];\n    SegTree C(a);\n    while (m--) {\n        int k;\n        cin &gt;&gt; k;\n        if (k == 1) {\n            int l, r;\n            cin &gt;&gt; l &gt;&gt; r;\n            if (l &gt; r)\n                swap(l, r);\n            cout &lt;&lt; C.query(1, 1, n, l, r).res &lt;&lt; '\\n';\n        } else {\n            int x, val;\n            cin &gt;&gt; x &gt;&gt; val;\n            C.upd(1, 1, n, x, val);\n        }\n    }\n}\n</code></pre> <p>\u4f46\u662f query \u4f1a\u62a5\u65e0\u8fd4\u56de\u503c\u7684\u8b66\u544a\u3002\u3002\u4e0d\u8fc7\u5927\u5bb6\u5f88\u591a\u90fd\u662f\u8fd9\u6837\u5199\u7684\uff0c\u800c\u4e14\u8fd9\u91cc\u5176\u4ed6\u60c5\u51b5\u8fd4\u56de\u503c\u4e5f\u6ca1\u6709\u5565\u610f\u4e49\u7684\u3002</p>"},{"location":"algorithm/datastructure/SegmentTree/SegmentTree/#_3","title":"\u76f4\u63a5\u4fee\u6539","text":"<p>\u6709\u7684\u9898\u53ef\u80fd\u6211\u4eec\u4e0d\u5f97\u4e0d\u53ea\u80fd\u4fee\u6539\u6bcf\u4e2a\u53f6\u5b50\u8282\u70b9\uff0c\u65e0\u6cd5\u4f7f\u7528\u61d2\u6807\u8bb0\uff0c\u4f46\u662f\u6709\u7684\u9898\u7ed9\u53f6\u5b50\u8282\u70b9\u4fee\u6539\u7684\u6b21\u6570\u662f\u6709\u9650\u7684\u3002</p>"},{"location":"algorithm/datastructure/SegmentTree/SegmentTree/#p4145-2","title":"P4145 \u4e0a\u5e1d\u9020\u9898\u7684\u4e03\u5206\u949f 2 / \u82b1\u795e\u6e38\u5386\u5404\u56fd","text":"<p>\u5f00\u65b9\u64cd\u4f5c\u6700\u591a \\(6\\) \u6b21\uff0c\u4e00\u4e2a\u6570\u5b57\u5c31\u4f1a\u53d8\u6210 \\(1\\) \u3002\u6240\u4ee5\u6bcf\u4e2a\u53f6\u5b50\u8282\u70b9\u6700\u591a\u6539 \\(6\\) \u6b21\uff0c\u5982\u679c\u533a\u95f4\u6700\u5927\u503c\u662f \\(1\\) \u5c31\u4e0d\u7528\u7ba1\u8fd9\u4e2a\u533a\u95f4\u3002</p> <pre><code>constexpr int N = 100005;\n\n#define ls p&lt;&lt;1\n#define rs p&lt;&lt;1|1\n#define mi ((l+r)&gt;&gt;1)\nstruct node{\n    ll max,sum;\n};\nnode tr[N&lt;&lt;2];\nvoid push_up(int p)\n{\n    tr[p].sum = tr[ls].sum + tr[rs].sum;\n    tr[p].max = max(tr[ls].max,tr[rs].max);\n}\nvoid upd(int p,int l,int r,int lx,int rx)\n{\n    if(tr[p].max == 1) return;\n    if(l == r){\n        tr[p].sum = tr[p].max = (int)sqrt(tr[p].max);\n        return;\n    }\n    if(lx &lt;= mi) upd(ls,l,mi,lx,rx);\n    if(rx &gt; mi) upd(rs,mi+1,r,lx,rx);\n    push_up(p);\n}\nll query(int p,int l,int r,int lx,int rx)\n{\n    if(l &gt;= lx &amp;&amp; r &lt;= rx) return tr[p].sum;\n    ll res=0;\n    if(lx &lt;= mi) res += query(ls,l,mi,lx,rx);\n    if(rx &gt; mi) res += query(rs,mi+1,r,lx,rx);\n    return res;\n}\nvoid ChatGptDeepSeek() // Date: 2025-04-22\n{                      // Time: 14:50:52 \n    int n;\n    cin &gt;&gt; n;\n    vl a(n+1);\n    for(int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; a[i];\n    auto build=[&amp;](auto &amp;&amp;self,int p,int l,int r)-&gt;void{\n        if(l==r){\n            tr[p]={a[l],a[l]};\n            return;\n        }\n        self(self,ls,l,mi),self(self,rs,mi+1,r);\n        push_up(p);\n    };\n    build(build,1,1,n);\n    int q;\n    cin &gt;&gt; q;\n    while(q--){\n        int op,l,r;\n        cin &gt;&gt; op &gt;&gt; l &gt;&gt; r;\n        if(l &gt; r) swap(l,r);\n        if(op == 0)\n            upd(1,1,n,l,r);\n        else\n            cout&lt;&lt;query(1,1,n,l,r)&lt;&lt;'\\n';\n    }\n}\n</code></pre>"},{"location":"algorithm/datastructure/SegmentTree/seg-merge/","title":"\u7ebf\u6bb5\u6811\u5408\u5e76","text":"<p>2025-04-30</p> <p>\u5f88\u795e\u5947\uff0c \u76ee\u524d\u53ea\u80fd\u8bf4\u662f\u534a\u61c2\uff0c \u5927\u6982\u8bb0\u5f97\u600e\u4e48\u5199\uff0c \u7406\u89e3\u4e00\u90e8\u5206\u5427\u3002</p>"},{"location":"algorithm/datastructure/SegmentTree/seg-merge/#cf600e","title":"CF600E","text":"<p>\u4ece\u8fd9\u9898\u51b3\u5b9a\u770b\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\uff0c \u73b0\u5728\u61c2\u5f97\u5dee\u4e0d\u591a\u4e86\u3002</p> <p>\u8fd9\u9898\u662f\u7ed9\u4e00\u68f5\u6811\uff0c \u6bcf\u4e2a\u8282\u70b9\u4f1a\u6709\u4e00\u4e2a\u989c\u8272 \\(c\\) \uff0c \u6211\u4eec\u9700\u8981\u8ba1\u7b97\u6bcf\u4e2a\u5b50\u6811\u4e2d\u7684\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u989c\u8272\u7684\u548c\u3002</p> <p>\u8fd9\u4e2a\u9898\u6211\u4eec\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u53bb\u7ef4\u62a4\u6bcf\u79cd\u989c\u8272\u51fa\u73b0\u7684\u6b21\u6570\u3002</p> <p>\u6211\u4eec\u5bf9\u6811\u8fdb\u884c dfs\uff0c \u90a3\u4e48\u6bcf\u4e2a\u8282\u70b9\u53ea\u9700\u8981\u5408\u5e76\u5b83\u7684\u6bcf\u4e2a\u5b50\u7ed3\u70b9\u7684\u7ebf\u6bb5\u6811\uff0c \u5c31\u53ef\u4ee5\u77e5\u9053\u8fd9\u9897\u5b50\u6811\u7684\u4fe1\u606f\u3002 </p>"},{"location":"algorithm/datastructure/SegmentTree/seg-merge/#push-up","title":"push up","text":"<p>\u8fd9\u91cc\u662f\u770b\u5de6\u8fb9\u548c\u53f3\u8fb9\uff0c \u54ea\u8fb9\u51fa\u73b0\u7684\u6b21\u6570\u66f4\u591a\uff0c \u6765\u51b3\u5b9a\u5982\u4f55\u5408\u5e76\u3002 \u8fd9\u4e2a\u8fd8\u662f\u6bd4\u8f83\u663e\u7136\u7684\uff0c \u8fd9\u91cc\u8981\u7406\u89e3\u5de6\u53f3\u5b69\u5b50\u5b9e\u9645\u4e0a\u662f\u5de6\u53f3\u7684\u533a\u95f4\uff0c \u662f\u989c\u8272\u7684\u4fe1\u606f\u3002 \u6bd4\u5982 \\([l, r]\\) \u4e4b\u95f4\u7684\u989c\u8272\u51fa\u73b0\u7684\u6b21\u6570\u4ee5\u53ca\u7b54\u6848\u3002</p>"},{"location":"algorithm/datastructure/SegmentTree/seg-merge/#update","title":"update","text":"<p>\u5b9e\u9645\u4e0a\u8fd9\u9898\u8fd9\u6d89\u53ca\u5230\u5355\u70b9\u4fee\u6539\uff0c \u5982\u679c\u8fd9\u4e2a\u70b9\u662f\u7a7a\u7684\uff0c \u80af\u5b9a\u7ed9\u5b83\u5206\u914d\u4e00\u4e2a\uff0c \u7136\u540e\u9012\u5f52\u53bb\u6539\uff0c \u8fd9\u91cc\u6539\u7684\u5c31\u662f\u8bf4\u7ed9\u8fd9\u4e2a\u503c\u7684\u6570\u91cf\u53bb\u589e\u52a0\u3002 \u6539\u5b8c\u8bb0\u5f97 <code>push up</code> \uff0c \u8ddf\u666e\u901a\u7ebf\u6bb5\u6811\u4e00\u6837\u7684\u3002</p>"},{"location":"algorithm/datastructure/SegmentTree/seg-merge/#merge","title":"merge","text":"<p><code>merge</code> \u51fd\u6570\u662f\u7528\u4e8e\u5408\u5e76\u7ebf\u6bb5\u6811\u7684\uff0c \u4e00\u822c\u662f\u628a \\(b\\) \u7ed9\u5408\u5e76\u5230 \\(a\\) \u4e0a\uff0c \u9012\u5f52\u5408\u5e76\uff0c \u82e5\u679c\u6709\u4e00\u4e2a\u662f\u7a7a\u7684\uff0c \u80af\u5b9a\u5206\u914d\u975e\u7a7a\u7684\u90a3\u4e2a\uff0c \u5230\u53f6\u5b50\u8282\u70b9\u65f6\uff0c \u5c31\u662f\u8fdb\u884c\u4e00\u4e2a\u5355\u70b9\u7684\u5408\u5e76\u3002</p> <pre><code>constexpr int N = int(1e5) + 5;\nstruct tree{\n    int l, r, cnt;\n    ll ans;\n    tree(int v = 0){\n        l = r = cnt = ans = v;\n    }\n};\ntree tr[N * 50];\n#define mi ((l + r) &gt;&gt; 1)\n#define lson tr[p].l\n#define rson tr[p].r\nint cnt = 0, rt[N];\n\nvoid push_up(int p)\n{\n    tr[p].cnt = max(tr[lson].cnt, tr[rson].cnt);\n    if(tr[lson].cnt &gt; tr[rson].cnt)\n        tr[p].ans = tr[lson].ans;\n    else if(tr[lson].cnt &lt; tr[rson].cnt)\n        tr[p].ans = tr[rson].ans;\n    else\n        tr[p].ans = tr[lson].ans + tr[rson].ans;\n}\nvoid update(int &amp;now, int l, int r, int pos, int v)\n{\n    if(!now) now = ++cnt;\n    if(l == r){\n        // \u5230\u53f6\u5b50\u8282\u70b9\u4e86\n        tr[now].cnt += v;\n        tr[now].ans = l;\n        return;\n    }\n    // \u9012\u5f52\u5904\u7406\n    if(pos &lt;= mi) update(tr[now].l, l, mi, pos, v);\n    else update(tr[now].r, mi + 1, r, pos, v);\n    push_up(now);\n}\nint merge(int a, int b, int l, int r)\n{\n    if(!a) return b;\n    if(!b) return a;\n    if(l == r){\n        tr[a].cnt += tr[b].cnt;\n        tr[a].ans = l;\n        return a;\n    }\n    tr[a].l = merge(tr[a].l, tr[b].l, l, mi);\n    tr[a].r = merge(tr[a].r, tr[b].r, mi + 1, r);\n    push_up(a);\n    return a;\n}\nvoid ChatGptDeepSeek() // Date: 2025-04-29\n{                      // Time: 23:52:50 \n    int n;\n    cin &gt;&gt; n;\n    cnt = n;\n    vi c(n + 1);\n    vl ans(n + 1);\n    for(int i = 1; i &lt;= n; i++){\n        cin &gt;&gt; c[i];\n        rt[i] = i;\n    }\n    vector&lt;vi&gt; g(n + 1, vi());\n    for(int i = 1; i &lt; n; i++){\n        int u, v;\n        cin &gt;&gt; u &gt;&gt; v;\n        g[u].push_back(v);\n        g[v].push_back(u);\n    }\n    auto dfs = [&amp;](auto &amp;&amp;self, int u, int pre) -&gt; void{\n        for(auto v : g[u]){\n            if(v == pre) continue;\n            self(self, v, u);\n            rt[u] = merge(rt[u], rt[v], 1, 100000);\n        }\n        update(rt[u], 1, 100000, c[u], 1);\n        ans[u] = tr[rt[u]].ans;\n    };\n    dfs(dfs, 1, 0);\n    for(int i = 1; i &lt;= n; i++)\n        cout &lt;&lt; ans[i] &lt;&lt; \" \\n\"[i == n];\n}\n</code></pre>"},{"location":"algorithm/datastructure/SegmentTree/seg-merge/#p4556-vani","title":"P4556 [Vani\u6709\u7ea6\u4f1a] \u96e8\u5929\u7684\u5c3e\u5df4 /\u3010\u6a21\u677f\u3011\u7ebf\u6bb5\u6811\u5408\u5e76","text":"<p>\u6d1b\u8c37\u7684\u6a21\u677f\u9898\uff0c \u5e94\u8be5\u4e5f\u662f\u8fd9\u4e00\u5757\u6700\u77e5\u540d\u7684\u4e00\u4e2a\u9898\uff08\uff09\u3002\u611f\u89c9\u4e0a\u9762\u90a3\u9898\u66f4\u6a21\u677f\uff0c \u4e0d\u8fc7\u8fd9\u9898\u4e5f\u53ea\u662f\u591a\u4e86\u4e00\u4e2a LCA \u548c\u6811\u4e0a\u5dee\u5206\u3002</p> <p>\u8fd8\u662f\u5728\u6811\u4e0a\u7684\uff0c \u6bcf\u6b21\u64cd\u4f5c\u53ef\u4ee5\u7ed9 \\(x\\) \u5230 \\(y\\) \u7684\u8def\u5f84\u589e\u52a0\u4e00\u4e2a \\(z\\) \u7269\u54c1\uff0c \u9700\u8981\u67e5\u8be2\u6bcf\u4e2a\u70b9\u7684\u6700\u591a\u7684\u7269\u54c1\uff0c \u8f93\u51fa\u7f16\u53f7\u6700\u5c0f\u7684\u90a3\u4e2a\u3002</p> <p>\u67e5\u7684\u662f\u5355\u70b9\uff0c \u6ca1\u60f3\u5230\u8fd9\u4e5f\u80fd\u8f6c\u5316\u6210\u67e5\u8be2\u5b50\u6811\u3002 \u5b83\u662f\u628a\u4fee\u6539\u7528\u6811\u4e0a\u5dee\u5206\u6765\u6539\uff0c \u6539 \\(x\\) \u5230 \\(y\\) \u7684\u8def\u5f84\uff0c \u53ea\u9700\u8981\u628a \\(x\\) \u548c \\(y\\) \u7684\u70b9\u52a0\u4e0a \\(1\\) \uff0c LCA\\((x,y)\\) \u548c\u5b83\u7684\u7236\u8282\u70b9\u7684\u503c\u52a0\u4e0a \\(-1\\) \u3002</p> <pre><code>constexpr int N = int(1e5);\nint siz[N + 1], fa[N + 1], dep[N + 1], son[N + 1], top[N + 1], dfn[N + 1];\n\nstruct tree{\n    int l, r, cnt, ans;\n    tree(int v = 0){\n        l = r = ans = v;\n    }\n};\ntree tr[N * 50];\nint cnt;\n#define lson tr[p].l\n#define rson tr[p].r\n#define mi ((l + r) &gt;&gt; 1)\nvoid push_up(int p)\n{\n    tr[p].cnt = max(tr[lson].cnt, tr[rson].cnt);\n    if(tr[lson].cnt &gt;= tr[rson].cnt)\n        tr[p].ans = tr[lson].ans;\n    else\n        tr[p].ans = tr[rson].ans;\n}\nvoid update(int &amp;p, int l, int r, int pos, int v)\n{\n    if(!p) p = ++cnt;\n    if(l == r){\n        tr[p].cnt += v;\n        tr[p].ans = l;\n        return;\n    }\n    if(pos &lt;= mi) update(lson, l, mi, pos, v);\n    else update(rson, mi + 1, r, pos, v);\n    push_up(p);\n}\nint merge(int a, int b, int l, int r)\n{\n    if(!a) return b;\n    if(!b) return a;\n    if(l == r){\n        tr[a].cnt += tr[b].cnt;\n        tr[a].ans = tr[b].ans;\n        return a;\n    }\n    tr[a].l = merge(tr[a].l, tr[b].l, l, mi);\n    tr[a].r = merge(tr[a].r, tr[b].r, mi + 1, r);\n    push_up(a);\n    return a;\n}\nvoid ChatGptDeepSeek() // Date: 2025-04-30\n{                      // Time: 08:38:13 \n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    cnt = n;\n    vector&lt;vi&gt; g(n + 1, vi());\n    vi rt(n + 1), ans(n + 1);\n    for(int i = 1; i &lt; n; i++){\n        int u, v;\n        cin &gt;&gt; u &gt;&gt; v;\n        g[u].push_back(v);\n        g[v].push_back(u);\n    }\n    auto dfs1 = [&amp;](auto &amp;&amp;self, int u, int pre) -&gt; void{\n        dep[u] = dep[pre] + 1, siz[u] = 1, fa[u] = pre;\n        for(auto v : g[u]){\n            if(v == pre) continue;\n            self(self, v, u);\n            siz[u] += siz[v];\n            if(son[u] == 0 || siz[v] &gt; siz[son[u]])\n                son[u] = v;\n        }\n    };\n    dfs1(dfs1, 1, 0);\n    int cntd = 0;\n    auto dfs2 = [&amp;](auto &amp;&amp;self, int u, int pre) -&gt; void{\n        dfn[u] = ++cntd;\n        top[u] = (son[pre] == u) ? top[pre] : u;\n        if(son[u]) self(self, son[u], u);\n        for(auto v : g[u]){\n            if(v == pre || v == son[u]) continue;\n            self(self, v, u);\n        }\n    };\n    dfs2(dfs2, 1, 0);\n    auto LCA = [&amp;](int x, int y){\n        while(top[x] != top[y]){\n            if(dep[top[x]] &lt; dep[top[y]]) swap(x, y);\n            x = fa[top[x]];\n        }\n        return (dep[x] &lt; dep[y]) ? x : y;\n    };\n    while(m--){\n        int x, y, z;\n        cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;\n        int lca = LCA(x, y);\n        update(rt[x], 1, N, z, 1);\n        update(rt[y], 1, N, z, 1);\n        update(rt[lca], 1, N, z, -1);\n        update(rt[fa[lca]], 1, N, z, -1);\n    }\n    auto dfs = [&amp;](auto &amp;&amp;self, int u, int pre) -&gt; void{\n        for(auto v : g[u]){\n            if(v == pre) continue;\n            self(self, v, u);\n            rt[u] = merge(rt[u], rt[v], 1, N);\n        }\n        ans[u] = tr[rt[u]].cnt ? tr[rt[u]].ans : 0;\n    };\n    dfs(dfs, 1, 0);\n    for(int i = 1; i &lt;= n; i++)\n        cout &lt;&lt; ans[i] &lt;&lt; \"\\n\";\n}\n</code></pre>"},{"location":"algorithm/graph/BipartiteGraph/","title":"\u4e8c\u5206\u56fe","text":""},{"location":"algorithm/graph/BipartiteGraph/#2025220","title":"2025\u5e742\u670820\u65e5","text":""},{"location":"algorithm/graph/BipartiteGraph/#_1","title":"\u4e8c\u5206\u56fe","text":"<p>\u4e8c\u5206\u56fe(Bipartite graph) \u662f\u4e00\u79cd\u7279\u6b8a\u7684\u56fe\uff0c\u53ef\u4ee5\u5c06\u56fe\u91cc\u7684\u6240\u6709\u70b9\u5206\u4e3a\u4e24\u4e2a\u96c6\u5408 \\(V1\\) \uff0c \\(V2\\) \uff0c\u8fd9\u5f20\u56fe\u4e0a\u7684\u6240\u6709\u8fb9\u90fd\u662f\u4e00\u4e2a\u70b9\u5728 \\(V1\\) \u4e2d \uff0c\u4e00\u4e2a\u70b9\u5728 \\(V2\\) \u4e2d\u3002</p>"},{"location":"algorithm/graph/BipartiteGraph/#_2","title":"\u6027\u8d28","text":"<p>\u5982\u679c\u4e24\u4e2a\u96c6\u5408\u79cd\u7684\u70b9\u5206\u522b\u67d3\u6210\u9ed1\u8272\u548c\u767d\u8272\uff0c\u4e8c\u5206\u56fe\u79cd\u7684\u6bcf\u4e00\u6761\u8fb9\u4e00\u5b9a\u90fd\u662f\u8fde\u63a5\u4e00\u4e2a\u9ed1\u8272\u70b9\u548c\u4e00\u4e2a\u767d\u8272\u70b9\u3002\u5373\u4e8c\u5206\u56fe\u4e2d\uff0c\u6bcf\u4e2a\u70b9\u7684\u76f8\u90bb\u70b9\u4e00\u5b9a\u90fd\u662f\u989c\u8272\u76f8\u53cd\u7684\u3002</p> <p>\u4e8c\u5206\u56fe\u4e0d\u5b58\u5728\u957f\u5ea6\u4e3a\u5947\u6570\u7684\u73af\u3002</p> <p>\u53ef\u4ee5\u901a\u8fc7 DFS \u6216 BFS \u6765\u5224\u5b9a\u4e8c\u5206\u56fe\u3002</p>"},{"location":"algorithm/graph/BipartiteGraph/#_3","title":"\u5e94\u7528","text":"<p>\u4e8c\u5206\u56fe\u6027\u8d28</p> <p>CF1949I</p> <p>\u8fd9\u4e2a\u5c31\u662f\u53bb\u5224\u5b9a\u6bcf\u4e2a\u8fde\u901a\u5757\u662f\u5426\u662f\u4e8c\u5206\u56fe\u3002</p> <pre><code>void solve()\n{\n    int n;\n    cin&gt;&gt;n;\n    vi x(n+1),y(n+1),r(n+1);\n    for(int i=1;i&lt;=n;i++)\n        cin&gt;&gt;x[i]&gt;&gt;y[i]&gt;&gt;r[i];\n    vector&lt;vi&gt;adj(n+1,vi());\n    auto calc=[&amp;](int x){\n        return 1ll*x*x;\n    };\n    for(int i=1;i&lt;=n;i++)\n        for(int j=i+1;j&lt;=n;j++){\n            if(calc(x[i]-x[j])+calc(y[i]-y[j])==calc(r[i]+r[j])){\n                adj[i].push_back(j);\n                adj[j].push_back(i);\n            }\n        }\n    vi s(n+1,-1);\n    for(int i=1;i&lt;=n;i++){\n        if(s[i]!=-1) continue;\n        bool ok=true;\n        int x=0,y=0;\n        auto dfs=[&amp;](auto &amp;&amp;self,int u)-&gt;void{\n            if(s[u]) x++;\n            else y++;\n            // cerr&lt;&lt;u&lt;&lt;'\\n';\n            for(auto v:adj[u]){\n                if(s[v]!=-1){\n                    if(s[v]==s[u]) ok=false;\n                    continue;\n                }\n                s[v]=s[u]^1;\n                self(self,v);\n            }\n        };\n        s[i]=0;\n        dfs(dfs,i);\n        if(ok&amp;&amp;x!=y){\n            cout&lt;&lt;\"YES\\n\";\n            return;\n        }\n    }\n    cout&lt;&lt;\"NO\\n\";\n}\n</code></pre>"},{"location":"algorithm/graph/BipartiteGraph/#_4","title":"\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d","text":"<p>\u4ece\u4e8c\u5206\u56fe\u91cc\u9009\u51fa\u82e5\u5e72\u6761\u8fb9\uff0c\u6bcf\u6761\u8fb9\u90fd\u4e0d\u76f8\u4ea4\uff0c\u4e14\u8fb9\u7684\u6570\u91cf\u6700\u591a\uff0c\u5c31\u662f\u4e8c\u5206\u56fe\u7684\u6700\u5927\u5339\u914d\u3002</p>"},{"location":"algorithm/graph/BipartiteGraph/#p3386-","title":"P3386 \u3010\u6a21\u677f\u3011\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d - \u6d1b\u8c37","text":"<pre><code>void solve()\n{\n    int n,m,e;\n    cin&gt;&gt;n&gt;&gt;m&gt;&gt;e;\n    vector&lt;vi&gt;adj(n+1,vi());\n    for(int i=1;i&lt;=e;i++){\n        int u,v;\n        cin&gt;&gt;u&gt;&gt;v;\n        adj[u].push_back(v);\n    }\n    vector&lt;int&gt;match(m+1);\n    int ans=0;\n    for(int i=1;i&lt;=n;i++){\n        vector&lt;bool&gt;sel(m+1);//\u8bb0\u6709\u6ca1\u6709\u88ab\u9009\u8fc7\n        auto dfs=[&amp;](auto &amp;&amp;self,int u)-&gt;bool{\n            for(auto v:adj[u]){\n                if(!sel[v]){\n                    sel[v]=true;\n                    if(!match[v]||self(self,match[v])){\n                        match[v]=u;\n                        return true;\n                    }\n                }\n            }\n            return false;\n        };\n        if(dfs(dfs,i))\n            ans++;\n    }\n    cout&lt;&lt;ans&lt;&lt;'\\n';\n}\n</code></pre> <p>\u9009\u53d6\u5de6\u8fb9\u4e00\u4e2a\u70b9\uff0c\u770b\u80fd\u4e0d\u80fd\u627e\u5230\u4e00\u4e2a\u53f3\u4fa7\u7684\u70b9\u548c\u5b83\u5339\u914d\u3002\u5982\u679c\u5df2\u7ecf\u5339\u914d\uff0c\u5219\u770b\u80fd\u4e0d\u80fd\u8ba9\u5b83\u5df2\u5339\u914d\u7684\u70b9\u53bb\u5c1d\u8bd5\u5339\u914d\u522b\u7684\u70b9\uff0c\u5982\u679c\u53ef\u4ee5\u5339\u914d\uff0c\u90a3\u4e48\u76f4\u63a5\u7b54\u6848+1\u3002</p>"},{"location":"algorithm/graph/BipartiteGraph/#p1129-zjoi2007","title":"P1129 [ZJOI2007] \u77e9\u9635\u6e38\u620f","text":"<p>\u540c\u6837\u662f\u4e00\u9053\u6a21\u677f\u9898\uff0c\u4f46\u662f\u9700\u8981\u4e00\u4e9b\u989d\u5916\u7684\u601d\u8003\uff0c\u662f\u4e00\u4e2a\u84dd\u9898\u3002</p> <p>\u8fd9\u662f\u6211\u4eec\u7b97\u6cd5\u8bfe\u8001\u5e08\u627e\u7684\u4e00\u9053\u9898\u3002\u3002\u3002\u4f46\u90a3\u4e2a\u65f6\u5019\u5176\u5b9e\u6ca1\u770b\u51fa\u6765\u4e5f\u662f\u8ddf\u4e8c\u5206\u56fe\u6709\u5173\uff0c\u770b\u4e86\u4e0b\u9898\u89e3\u624d\u77e5\u9053\u3002\u3002</p> <p>\u56e0\u4e3a\u540c\u4e00\u5217\u7684 \\(1\\) , \u6211\u4eec\u5e76\u4e0d\u80fd\u4f7f\u4ed6\u4eec\u5206\u5f00\uff0c\u5b83\u4eec\u59cb\u7ec8\u53ea\u80fd\u5728\u4e00\u5217\u4e0a\uff0c\u540c\u7406\uff0c\u4e00\u884c\u4e0a\u7684 \\(1\\) \uff0c\u5b83\u4eec\u59cb\u7ec8\u53ea\u80fd\u5728\u540c\u4e00\u884c\u3002</p> <p>\u6240\u4ee5\u6211\u4eec\u6700\u540e\u8981\u6c42\u5bf9\u89d2\u7ebf\u4e0a\u5168\u662f \\(1\\) \uff0c \u6211\u4eec\u53ea\u9700\u8981\u53bb\u8c03\u6574\u884c\u6216\u8005\u5217\uff0c\u5e76\u4e14\u662f\u4e00\u6837\u7684\u3002</p> <p>\u90a3\u4e48\u8fd9\u4e2a\u95ee\u9898\u5c31\u8f6c\u6362\u6210\u4e86\uff0c\u6211\u4eec\u8981\u628a\u8fd9 \\(n\\) \u884c\uff0c\u6bcf\u4e00\u884c\u53bb\u5339\u914d\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u7531\u4e8e\u6211\u4eec\u9700\u8981\u5bf9\u89d2\u7ebf\u4e0a\u5168\u662f \\(1\\) \uff0c \u6240\u4ee5\u6211\u4eec\u6bcf\u4e00\u884c\u5fc5\u987b\u4fdd\u8bc1\u5b83\u79fb\u52a8\u4e4b\u540e\uff0c\u5bf9\u89d2\u7ebf\u4e0a\u6709 \\(1\\) \uff0c \u5373\u81f3\u5c11\u6709\u4e00\u4e2a \\(1\\) \u7684\u5217\u6570\u7b49\u4e8e\u5b83\u6240\u5728\u7684\u884c\u6570\u3002\u6240\u4ee5\u5c31\u8f6c\u6362\u6210\u4e86\u4e00\u4e2a\u4e8c\u5206\u56fe\u5339\u914d\u95ee\u9898\u3002</p> <pre><code>void ChatGptDeepSeek()\n{\n    // \u5982\u679c\u6709\u591a\u4e2a1\u5728\u540c\u4e00\u884c\n    // \u6211\u4eec\u662f\u6ca1\u6709\u529e\u6cd5\u8ba9\u4ed6\u4eec\u4e0d\u5728\u540c\u4e00\u884c\u7684\n    // \u56e0\u4e3a\u6211\u4eec\u6bcf\u6b21\u53ea\u80fd\u79fb\u52a8\u4e00\u6574\u884c \u6216\u8005\u53bb\u8c03\u6574\u5217\n    // \u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u53bb\u8c03\u6574\u884c\u6216\u8005\u5217 \u56e0\u4e3a\u4e00\u5217\u4e0a\u7684\u591a\u4e2a\u76841 \u6211\u4eec\u4e5f\u6ca1\u529e\u6cd5\u5206\u5f00\u4ed6\u4eec\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;vector&lt;int&gt;&gt; a(n + 1, vector&lt;int&gt;(n + 1));\n    vector&lt;vector&lt;int&gt;&gt; adj(n + 1, vector&lt;int&gt;());\n    for (int i = 1; i &lt;= n; i++)\n        for (int j = 1; j &lt;= n; j++) {\n            cin &gt;&gt; a[i][j];\n            if (a[i][j]) {\n                adj[i].push_back(j);\n            }\n        }\n    vector&lt;int&gt; matched(n + 1);\n    vector&lt;bool&gt; sel(n + 1);\n    auto dfs = [&amp;](auto&amp;&amp; self, int u) -&gt; bool {\n        for (auto v : adj[u]) {\n            if (matched[v] &amp;&amp; !sel[v]) {\n                sel[v] = true;\n                if (self(self, matched[v])) {\n                    matched[v] = u;\n                    return true;\n                }\n            } else if (!sel[v]) {\n                sel[v] = true;\n                matched[v] = u;\n                return true;\n            }\n        }\n        return false;\n    };\n    for (int i = 1; i &lt;= n; i++) {\n        sel = vector&lt;bool&gt;(n + 1);\n        if (!dfs(dfs, i)) {\n            cout &lt;&lt; \"No\\n\";\n            return;\n        }\n    }\n    cout &lt;&lt; \"Yes\\n\";\n}\n</code></pre> <p>\u524d\u4e24\u5929\u624d\u8865\u7684\uff0c\u5199\u5f97\u6709\u70b9\u70c2hhh\u3002</p>"},{"location":"algorithm/graph/BipartiteGraph/#_5","title":"...","text":""},{"location":"algorithm/graph/HLD/","title":"\u6811\u94fe\u5256\u5206","text":"<p>2025-04-17</p> <p>\u6628\u665a\u770b\u4e86\u4e00\u5c0f\u65f6\u89c6\u9891\uff0c\u5de6\u7a0b\u4e91\u7684\uff0c\u611f\u89c9\u8bb2\u5f97\u633a\u597d\u7684\u3002\u7b49\u4f1a\u518d\u53bb\u770b\u770b\u3002</p> <p>\u9700\u8981\u4f1a\u57fa\u7840\u7684 dfs \u4ee5\u53ca \u7ebf\u6bb5\u6811\uff0c\u7ebf\u6bb5\u6811\u53ea\u8981\u4f1a\u6a21\u677f\u5c31\u884c\u3002</p> <p>\u6811\u94fe\u5256\u5206\u901a\u8fc7\u628a\u6811\u62c6\u5206\u6210\u94fe\uff0c\u4f7f\u5f97\u6211\u4eec\u53ef\u4ee5\u628a\u8def\u5f84\u4ee5\u53ca\u70b9\u6743\uff0c\u8fd9\u6837\u53ef\u4ee5\u628a\u8def\u5f84\u548c\u5b50\u6811\u7684\u4fee\u6539\u67e5\u8be2\u8f6c\u5316\u4e3a\u6570\u7ec4\u4e0a\u7684\u533a\u95f4\u67e5\u8be2\u533a\u95f4\u4fee\u6539\u3002\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u89e3\u51b3\u3002</p> <p>\u8fb9\u6743\u7684\u95ee\u9898\u4e5f\u53ef\u4ee5\u8f6c\u6362\u6210\u70b9\u6743\u3002\u6811\u5256\u8fd8\u53ef\u4ee5\u7528\u6765\u6c42 LCA \uff0c\u540c\u6837\u662f \\(n\\log n\\) \u590d\u6742\u5ea6\u3002</p>"},{"location":"algorithm/graph/HLD/#_2","title":"\u8def\u5f84/\u5b50\u6811 \u4fee\u6539\u67e5\u8be2","text":""},{"location":"algorithm/graph/HLD/#p3384","title":"P3384 \u3010\u6a21\u677f\u3011\u91cd\u94fe\u5256\u5206/\u6811\u94fe\u5256\u5206","text":"<p>\u6a21\u677f\u9898\u3002\\(dfn\\) \u6570\u7ec4\u7528\u6765\u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u7684\u65b0\u7684\u7f16\u53f7\uff0c\\(siz\\) \u8868\u793a\u6bcf\u4e2a\u8282\u70b9\u7684\u5b50\u6811\u5927\u5c0f\uff0c\\(fa\\) \u8868\u793a\u7236\u8282\u70b9\u7f16\u53f7\uff0c\\(top\\) \u8868\u793a\u6bcf\u4e2a\u8282\u70b9\u7684\u91cd\u94fe\u7684\u5934\u8282\u70b9\uff0c\\(son\\) \u8868\u793a\u6bcf\u4e2a\u8282\u70b9\u7684\u91cd\u513f\u5b50\u7684\u7f16\u53f7\uff0c\\(dep\\) \u8868\u793a\u6bcf\u4e2a\u8282\u70b9\u7684\u6df1\u5ea6\u3002</p> <p>\u6211\u662f\u8ddf\u5de6\u7a0b\u4e91\u5b66\u7684\u53d8\u91cf\u540d\uff0c\u53ef\u4ee5\u5b66\u4e60 oi-wiki \u6216\u8005\u7b97\u6cd5\u4e66\uff0c\u4e5f\u53ef\u4ee5\u5b66\u4e60\u522b\u4eba\u7684\u4ee3\u7801\u3002</p> <pre><code>constexpr int N = int(1e5) + 5;\nint a[N], siz[N], fa[N], dfn[N], top[N], seg[N], son[N], dep[N], tr[N &lt;&lt; 2], tag[N &lt;&lt; 2];\nint mod, cntd = 0;\n#define ls p&lt;&lt;1\n#define rs p&lt;&lt;1|1\n#define mi ((l+r)&gt;&gt;1)\n\nvoid build(int p, int l, int r)\n{\n    if (l == r)\n    {\n        tr[p]=a[seg[l]]%mod;\n        return;\n    }\n    build(ls,l,mi),build(rs,mi+1,r);\n    tr[p]=(tr[ls]+tr[rs])%mod;\n}\nvoid push_down(int p,int l,int r)\n{\n    if(tag[p]){\n        tr[ls]=(tr[ls]+1LL*(mi-l+1)*tag[p]%mod)%mod;\n        tag[ls]=(tag[ls]+tag[p])%mod;\n        tr[rs]=(tr[rs]+1LL*(r-mi)*tag[p]%mod)%mod;\n        tag[rs]=(tag[rs]+tag[p])%mod;\n        tag[p]=0;\n    }\n}\nvoid upd(int p,int l,int r,int lx,int rx,int val)\n{\n    if(l&gt;=lx&amp;&amp;r&lt;=rx){\n        tr[p]=(tr[p]+1LL*(r-l+1)*val%mod)%mod;\n        tag[p]=(tag[p]+val)%mod;\n        return;\n    }\n    push_down(p,l,r);\n    if(lx&lt;=mi) upd(ls,l,mi,lx,rx,val);\n    if(rx&gt;mi) upd(rs,mi+1,r,lx,rx,val);\n    tr[p]=(tr[ls]+tr[rs])%mod;\n}\nint query(int p,int l,int r,int lx,int rx)\n{\n    if(l&gt;=lx&amp;&amp;r&lt;=rx) return tr[p];\n    push_down(p,l,r);\n    int res=0;\n    if(lx&lt;=mi) res+=query(ls,l,mi,lx,rx);\n    if(rx&gt;mi) res+=query(rs,mi+1,r,lx,rx);\n    return res%mod;\n}\nvoid ChatGptDeepSeek() // Date: 2025-04-17\n{                      // Time: 13:21:44\n    int n, m, r;\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; r &gt;&gt; mod;\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; a[i];\n    vector&lt;vi&gt; adj(n + 1, vi());\n    for (int i = 1; i &lt; n; i++)\n    {\n        int u, v;\n        cin &gt;&gt; u &gt;&gt; v;\n        adj[u].push_back(v), adj[v].push_back(u);\n    }\n    auto dfs1 = [&amp;](auto &amp;&amp;self, int u, int pre) -&gt; void\n    {\n        siz[u] = 1;\n        dep[u] = dep[pre] + 1;\n        for (auto v : adj[u])\n        {\n            if (v == pre)\n                continue;\n            self(self, v, u);\n            fa[v] = u;\n            siz[u] += siz[v];\n            if (son[u] == 0 || siz[v] &gt; siz[son[u]])\n                son[u] = v;\n        }\n    };\n    dfs1(dfs1, r, 0);\n    auto dfs2 = [&amp;](auto &amp;&amp;self, int u, int pre) -&gt; void\n    {\n        dfn[u] = ++cntd;\n        seg[cntd] = u;\n        if(son[pre]==u) top[u]=top[pre];\n        else top[u]=u;\n        if(son[u])\n            self(self, son[u], u);\n        for (auto v : adj[u])\n        {\n            if (v == pre || v == son[u])\n                continue;\n            self(self, v, u);\n        }\n    };\n    dfs2(dfs2, r, 0);\n    build(1,1,n);\n    auto op1=[&amp;](int x,int y,int z){\n        while(top[x]!=top[y]){\n            if(dep[top[x]]&gt;=dep[top[y]]){\n                upd(1,1,n,dfn[top[x]],dfn[x],z);\n                x=fa[top[x]];\n            }else{\n                upd(1,1,n,dfn[top[y]],dfn[y],z);\n                y=fa[top[y]];\n            }\n        }\n        if(dep[x]&gt;dep[y]) swap(x,y);\n        upd(1,1,n,dfn[x],dfn[y],z);\n    };\n    auto op2=[&amp;](int x,int y){\n        int res=0;\n        while(top[x]!=top[y]){\n            if(dep[top[x]]&gt;=dep[top[y]]){\n                res=(res+query(1,1,n,dfn[top[x]],dfn[x]))%mod;\n                x=fa[top[x]];\n            }else{\n                res=(res+query(1,1,n,dfn[top[y]],dfn[y]))%mod;\n                y=fa[top[y]];\n            }\n        }\n        if(dep[x]&gt;dep[y]) swap(x,y);\n        res=(res+query(1,1,n,dfn[x],dfn[y]))%mod;\n        cout&lt;&lt;res&lt;&lt;'\\n';\n    };\n    while(m--){\n        int op;\n        cin&gt;&gt;op;\n        if(op==1){\n            int x,y,z;\n            cin&gt;&gt;x&gt;&gt;y&gt;&gt;z;\n            op1(x,y,z);\n        }else if(op==2){\n            int x,y;\n            cin&gt;&gt;x&gt;&gt;y;\n            op2(x,y);\n        }else if(op==3){\n            int x,z;\n            cin&gt;&gt;x&gt;&gt;z;\n            upd(1,1,n,dfn[x],dfn[x]+siz[x]-1,z);\n        }else{\n            int x;\n            cin&gt;&gt;x;\n            cout&lt;&lt;query(1,1,n,dfn[x],dfn[x]+siz[x]-1)&lt;&lt;'\\n';\n        }\n    }\n}\n</code></pre>"},{"location":"algorithm/graph/HLD/#p2146-noi2015","title":"P2146 [NOI2015] \u8f6f\u4ef6\u5305\u7ba1\u7406\u5668","text":"<p>\u540c\u6837\u662f\u6a21\u677f\u9898\uff0c\u64cd\u4f5c\u662f\u6570\u533a\u95f4\u7684 \\(1\\) \u7684\u6570\u91cf\uff0c\u628a\u533a\u95f4\u7f6e \\(0/1\\) \uff0c\u4e5f\u662f\u57fa\u7840\u7684\u7ebf\u6bb5\u6811\u64cd\u4f5c\u3002</p> <p>WA\u9ebb\u4e86\uff0c\u539f\u56e0\u662f query \u7684 \\(lx\\le mi\\) \u5199\u6210\u4e86 \\(\\ge\\) \u3002</p> <pre><code>constexpr int N = (int)1e5+5;\nint siz[N],top[N],son[N],fa[N],dep[N],dfn[N],tr[N&lt;&lt;2],tag[N&lt;&lt;2];\n\n#define ls p&lt;&lt;1\n#define rs p&lt;&lt;1|1\n#define mi ((l+r)&gt;&gt;1)\n\nvoid push_down(int p,int l,int r)\n{\n    if(tag[p]){\n        tag[ls]=tag[rs]=tag[p];\n        if(tag[p]==-1) tag[p]=0;\n        tr[ls]=(mi-l+1)*tag[p];\n        tr[rs]=(r-mi)*tag[p];\n        tag[p]=0;\n    }\n}\nvoid upd1(int p,int l,int r,int lx,int rx)\n{\n    assert(lx&lt;=rx&amp;&amp;l&lt;=r);\n    if(l&gt;=lx&amp;&amp;r&lt;=rx){\n        tag[p]=1;\n        tr[p]=r-l+1;\n        return;\n    }\n    push_down(p,l,r);\n    if(lx&lt;=mi) upd1(ls,l,mi,lx,rx);\n    if(rx&gt;mi) upd1(rs,mi+1,r,lx,rx);\n    tr[p]=tr[ls]+tr[rs];\n}\nvoid upd2(int p,int l,int r,int lx,int rx)\n{\n    assert(lx&lt;=rx&amp;&amp;l&lt;=r);\n    if(l&gt;=lx&amp;&amp;r&lt;=rx){\n        tag[p]=-1;\n        tr[p]=0;\n        return;\n    }\n    push_down(p,l,r);\n    if(lx&lt;=mi) upd2(ls,l,mi,lx,rx);\n    if(rx&gt;mi) upd2(rs,mi+1,r,lx,rx);\n    tr[p]=tr[ls]+tr[rs];\n}\nint query(int p,int l,int r,int lx,int rx)\n{\n    assert(lx&lt;=rx&amp;&amp;l&lt;=r);\n    if(l&gt;=lx&amp;&amp;r&lt;=rx) return tr[p];\n    push_down(p,l,r);\n    int res=0;\n    if(lx&lt;=mi) res+=query(ls,l,mi,lx,rx);\n    if(rx&gt;mi) res+=query(rs,mi+1,r,lx,rx);\n    return res;\n}\nvoid ChatGptDeepSeek() // Date: 2025-04-17\n{                      // Time: 15:10:38 \n    int n;\n    cin&gt;&gt;n;\n    vector&lt;vi&gt;g(n,vi());\n    for(int i=1;i&lt;n;i++){\n        int x; cin &gt;&gt; x;\n        g[x].push_back(i);\n    }\n    auto dfs1=[&amp;](auto &amp;&amp;self,int u,int pre)-&gt;void{\n        assert(u&lt;n&amp;&amp;pre&lt;n);\n        siz[u]=1;\n        dep[u]=dep[pre]+1;\n        fa[u]=pre;\n        for(auto v:g[u]){\n            if(v==pre) continue;\n            self(self,v,u);\n            if(son[u]==0||siz[son[u]]&lt;siz[v])\n                son[u]=v;\n            // fa[v]=u;\n            siz[u]+=siz[v];\n        }\n    };\n    dfs1(dfs1,0,0);\n    int cntd=0,q;\n    auto dfs2=[&amp;](auto &amp;&amp;self,int u,int pre)-&gt;void{\n        // cerr&lt;&lt;u&lt;&lt;'\\n';\n        assert(u&lt;n&amp;&amp;pre&lt;n);\n        dfn[u]=++cntd;\n        if(son[pre]==u) top[u]=top[pre];\n        else top[u]=u;\n        if(son[u]) self(self,son[u],u);\n        for(auto v:g[u]){\n            if(v==pre||v==son[u]) continue;\n            self(self,v,u);\n        }\n    };\n    dfs2(dfs2,0,0);\n    cin&gt;&gt;q;\n    // for(int i=0;i&lt;n;i++){\n    //     cerr&lt;&lt;fa[i]&lt;&lt;\" \\n\"[i+1==n];\n    // }\n    // for(int i=0;i&lt;n;i++){\n    //     cerr&lt;&lt;top[i]&lt;&lt;\" \\n\"[i+1==n];\n    // }\n    /* \n    \u5b89\u88c5\u7684\u8bdd \u9700\u8981\u628a 1-&gt; x \u90fd\u53d8\u62101 \u8fd8\u9700\u8981\u7edf\u8ba1 1 \u7684\u6570\u91cf \u533a\u95f4\u548c \u7136\u540e\u628a\u533a\u95f4\u53d8\u62101\n    \u5378\u8f7d\u7684\u8bdd \u7edf\u8ba1\u5b50\u6811\u76841\u7684\u6570\u91cf \u7136\u540e\u628a\u533a\u95f4\u53d8\u6210\u51680\n    */\n    while(q--){\n        string s;\n        int x;\n        cin&gt;&gt;s&gt;&gt;x;\n        // cerr&lt;&lt;s&lt;&lt;\" \"&lt;&lt;x&lt;&lt;'\\n';\n        assert(s!=\"\\n\");\n        assert(s.size());\n        if(s[0]=='i'){\n            int res=0;\n            while(top[x]!=0&amp;&amp;x){\n                // assert(x&lt;n&amp;&amp;dfn[top[x]]&lt;n&amp;&amp;dfn[x]&lt;n);\n                // cerr&lt;&lt;x&lt;&lt;'\\n';\n                res+=dfn[x]-dfn[top[x]]+1-query(1,1,n,dfn[top[x]],dfn[x]);\n                upd1(1,1,n,dfn[top[x]],dfn[x]);\n                x=fa[top[x]];\n            }\n            res+=dfn[x]-query(1,1,n,1,dfn[x]);\n            upd1(1,1,n,1,dfn[x]);\n            // cerr&lt;&lt;x&lt;&lt;'\\n';\n            cout&lt;&lt;res&lt;&lt;'\\n';\n        }\n        else{\n            cout&lt;&lt;query(1,1,n,dfn[x],dfn[x]+siz[x]-1)&lt;&lt;'\\n';\n            upd2(1,1,n,dfn[x],dfn[x]+siz[x]-1);\n        }\n    }\n}\n</code></pre>"},{"location":"algorithm/graph/HLD/#p3258-jloi2014","title":"P3258 [JLOI2014] \u677e\u9f20\u7684\u65b0\u5bb6","text":"<p>\u540c\u6837\u6a21\u677f\u9898\uff0c\u4f46\u8fd9\u91cc\u662f\u5355\u70b9\u67e5\u8be2\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u6811\u72b6\u6570\u7ec4\u3002\u8fd9\u91cc\u662f\u6309\u7f16\u53f7\u8f93\u51fa\u3002\u3002\u3002\u5bb3\u6211\u5f53\u65f6\u627e\u597d\u4e45\u3002</p> <pre><code>constexpr int N = int(3e5)+5;\nint siz[N],fa[N],top[N],dfn[N],son[N],dep[N];\n\nstruct Fenwick{\n    vector&lt;int&gt;b;\n    Fenwick(int n){\n        b=vector&lt;int&gt;(n+1);\n    };\n    int lowbit(int x){return (x)&amp;(-x);}\n    void add(int i,int x){\n        while(i&amp;&amp;i&lt;b.size()){\n            b[i]+=x;\n            i+=lowbit(i);\n        }\n    }\n    int query(int i){\n        int res=0;\n        while(i){\n            res+=b[i];\n            i-=lowbit(i);\n        }\n        return res;\n    }\n};\nvoid ChatGptDeepSeek() // Date: 2025-04-18\n{                      // Time: 15:07:04 \n    int n;\n    cin&gt;&gt;n;\n    vi a(n+1);\n    for(int i=1;i&lt;=n;i++) cin&gt;&gt;a[i];\n    vector&lt;vi&gt;g(n+1,vi());\n    for(int i=1;i&lt;n;i++){\n        int u,v; cin&gt;&gt;u&gt;&gt;v;\n        g[u].push_back(v),g[v].push_back(u);\n    }\n    auto dfs1=[&amp;](auto&amp;&amp; self,int u,int pre)-&gt;void{\n        siz[u]=1;\n        fa[u]=pre;\n        dep[u]=dep[pre]+1;\n        for(auto v:g[u]){\n            if(v==pre) continue;\n            self(self,v,u);\n            if(son[u]==0||siz[v]&gt;siz[son[u]])\n                son[u]=v;\n            siz[u]+=siz[v];\n        }\n    };\n    dfs1(dfs1,a[1],0);\n    int cntd=0;\n    auto dfs2=[&amp;](auto &amp;&amp;self,int u,int pre)-&gt;void{\n        dfn[u]=++cntd;\n        if(son[pre]==u) top[u]=top[pre];\n        else top[u]=u;\n        if(son[u]) self(self,son[u],u);\n        for(auto v:g[u]){\n            if(v==pre||v==son[u]) continue;\n            self(self,v,u);\n        }\n    };\n    dfs2(dfs2,a[1],0);\n    Fenwick Tr(n);\n    for(int i=2;i&lt;=n;i++){\n        int x=a[i-1],y=a[i];\n        while(top[x]!=top[y]){\n            // cerr&lt;&lt;x&lt;&lt;\" \"&lt;&lt;y&lt;&lt;'\\n';\n            if(dep[top[x]]&lt;dep[top[y]]) swap(x,y);\n            //[dfn[top[x]],x] \u533a\u95f4\u52a0\n            Tr.add(dfn[top[x]],1);\n            Tr.add(dfn[x]+1,-1);\n            x=fa[top[x]];\n        }\n        // cerr&lt;&lt;'\\n';\n        if(dep[x]&gt;dep[y]) swap(x,y);\n        // cerr&lt;&lt;x&lt;&lt;\" \"&lt;&lt;y&lt;&lt;'\\n';\n        Tr.add(dfn[x],1);\n        Tr.add(dfn[y]+1,-1);\n        Tr.add(dfn[a[i]],-1);\n        Tr.add(dfn[a[i]]+1,1);\n    }\n    vi ans(n+1);\n    for(int i=1;i&lt;=n;i++){\n        ans[a[i]]=Tr.query(dfn[a[i]]);\n        // cout&lt;&lt;ans[a[i]]&lt;&lt;\"\\n\";\n    }\n    for(int i=1;i&lt;=n;i++)\n        cout&lt;&lt;ans[i]&lt;&lt;\"\\n\";\n}\n</code></pre>"},{"location":"algorithm/graph/HLD/#p4116-qtree3","title":"P4116 Qtree3","text":"<p>\u5e38\u89c4\u64cd\u4f5c\uff0c\u5355\u70b9\u4fee\u6539\u548c\u533a\u95f4 find first \\(0/1\\) \u3002\u53ef\u4ee5\u4e0d\u7528\u7ebf\u6bb5\u6811\uff0c\u53ef\u4ee5\u7528 set \uff0c\u4e00\u6761\u91cd\u94fe\u6574\u4e00\u4e2a\u3002\u6211\u5199\u7684\u7ebf\u6bb5\u6811\uff0c\u6211\u8bf4\u548b\u4e00\u76f4 TLE \uff0c \u5355\u70b9\u4fee\u6539\u80af\u5b9a\u662f \\(\\log n\\) \u590d\u6742\u5ea6\uff0c\u533a\u95f4\u67e5\u8be2\u4e5f\u662f\uff0c\u548b\u4f1a\u8d85\u65f6\u5462\uff1f</p> <p>\u5176\u5b9e\u662f dfs2 \u91cc\u5fd8\u8bb0 siz[u]+=siz[v] \u4e86\u3002\u3002\u3002\u4e0d\u8fc7\u597d\u6b79\u662f\u81ea\u5df1\u627e\u5230\u4e86\u3002\u8fd9\u79cd\u4f4e\u7ea7\u7684\u9519\u8bef\u771f\u522b\u72af\u4e86\u3002\u5982\u679c\u4ee5\u540e\u9047\u5230 TLE \u6216 WA \uff0c\u53ef\u4ee5\u8f93\u51fa\u770b\u770b\u5256\u5206\u5f97\u5bf9\u4e0d\u5bf9\uff0c\u68c0\u67e5\u4e0b\u7ebf\u6bb5\u6811\u6709\u6ca1\u6709\u5927\u4e8e\u5c0f\u4e8e\u5199\u9519\uff0c\u53d8\u91cf\u4f4d\u7f6e\u6709\u6ca1\u6709\u9519\u3002</p> <pre><code>constexpr int N = 100000+5;\nint siz[N],fa[N],dep[N],son[N],dfn[N],top[N],seg[N];\n\n#define ls p&lt;&lt;1\n#define rs p&lt;&lt;1|1\n#define mi ((l+r)&gt;&gt;1)\npii tr[N&lt;&lt;2];\n\npii merge(pii x,pii y)\n{\n    pii z;\n    z.fi=min(x.fi,y.fi),z.se=min(x.se,y.se);\n    return z;\n}\nvoid build(int p,int l,int r)\n{\n    if(l==r){\n        tr[p]={l,INF};\n        return;\n    }\n    build(ls,l,mi),build(rs,mi+1,r);\n    tr[p]=merge(tr[ls],tr[rs]);\n}\nvoid change(int p,int l,int r,int i)\n{\n    if(l==r){\n        swap(tr[p].fi,tr[p].se);\n        return;\n    }\n    if(i&lt;=mi) change(ls,l,mi,i);\n    else change(rs,mi+1,r,i);\n    tr[p]=merge(tr[ls],tr[rs]);\n}\nint query(int p,int l,int r,int lx,int rx)\n{\n    if(lx&gt;rx) return INF;\n    if(l&gt;=lx&amp;&amp;r&lt;=rx) return tr[p].se;\n    int res=INF;\n    if(lx&lt;=mi) cmin(res,query(ls,l,mi,lx,rx));\n    if(rx&gt;mi) cmin(res,query(rs,mi+1,r,lx,rx));\n    return res;\n}\nvoid ChatGptDeepSeek() // Date: 2025-04-20\n{                      // Time: 11:07:35 \n    int n,q;\n    cin&gt;&gt;n&gt;&gt;q;\n    vector&lt;vi&gt;g(n+1,vi());\n    for(int i=1;i&lt;n;i++){\n        int u,v;\n        cin&gt;&gt;u&gt;&gt;v;\n        g[u].push_back(v);\n        g[v].push_back(u);\n    }\n    auto dfs1=[&amp;](auto &amp;&amp;self,int u,int pre)-&gt;void{\n        siz[u]=1,dep[u]=dep[pre]+1,fa[u]=pre;\n        for(auto v:g[u]){\n            if(v==pre) continue;\n            self(self,v,u);\n            siz[u]+=siz[v];\n            if(son[u]==0||siz[v]&gt;siz[son[u]])\n                son[u]=v;\n        }\n    };\n    dfs1(dfs1,1,0);\n    int cntd=0;\n    auto dfs2=[&amp;](auto &amp;&amp;self,int u,int pre)-&gt;void{\n        dfn[u]=++cntd;\n        seg[cntd]=u;\n        if(son[pre]==u) top[u]=top[pre];\n        else top[u]=u;\n        if(son[u]) self(self,son[u],u);\n        for(auto v:g[u]){\n            if(v==pre||v==son[u]) continue;\n            self(self,v,u);\n        }\n    };\n    dfs2(dfs2,1,0);\n    build(1,1,n);\n    while(q--){\n        int op,x;\n        cin&gt;&gt;op&gt;&gt;x;\n        if(op==0) change(1,1,n,dfn[x]);\n        else{\n            int res=INF;\n            while(top[x]!=1){\n                cmin(res,query(1,1,n,dfn[top[x]],dfn[x]));\n                x=fa[top[x]];\n            }\n            cmin(res,query(1,1,n,1,dfn[x]));\n            cout&lt;&lt;(res==INF?-1:seg[res])&lt;&lt;'\\n';\n        }\n    }\n}\n</code></pre>"},{"location":"algorithm/graph/HLD/#p6098-usaco19feb-cow-land-g","title":"P6098 [USACO19FEB] Cow Land G","text":"<p>\u57fa\u7840\u9898\uff0c\u5355\u70b9\u4fee\u6539\u548c\u67e5\u8be2\u533a\u95f4\u5f02\u6216\u548c\u3002</p> <pre><code>constexpr int N = int(1e5)+5;\nint siz[N],fa[N],dep[N],son[N],dfn[N],top[N];\n#define ls p&lt;&lt;1\n#define rs p&lt;&lt;1|1\n#define mi ((l+r)&gt;&gt;1)\nint tr[N&lt;&lt;2];\n\nvoid change(int p,int l,int r,int i,int val)\n{\n    if(l==r){\n        tr[p]=val;\n        return;\n    }\n    if(i&lt;=mi) change(ls,l,mi,i,val);\n    else change(rs,mi+1,r,i,val);\n    tr[p]=tr[ls]^tr[rs];\n}\nint query(int p,int l,int r,int lx,int rx)\n{\n    if(l&gt;=lx&amp;&amp;r&lt;=rx) return tr[p];\n    int res=0;\n    if(lx&lt;=mi) res^=query(ls,l,mi,lx,rx);\n    if(rx&gt;mi) res^=query(rs,mi+1,r,lx,rx);\n    return res;\n}\n\nvoid ChatGptDeepSeek() // Date: 2025-04-21\n{                      // Time: 10:38:03 \n    int n,q;\n    cin&gt;&gt;n&gt;&gt;q;\n    vi e(n+1);\n    for(int i=1;i&lt;=n;i++) cin&gt;&gt;e[i];\n    vector&lt;vi&gt;g(n+1,vi());\n    for(int i=1;i&lt;n;i++){\n        int u,v;\n        cin&gt;&gt;u&gt;&gt;v;\n        g[u].push_back(v),g[v].push_back(u);\n    }\n    auto dfs1=[&amp;](auto &amp;&amp;self,int u,int pre)-&gt;void{\n        siz[u]=1,dep[u]=dep[pre]+1,fa[u]=pre;\n        for(auto v:g[u]){\n            if(v==pre) continue;\n            self(self,v,u);\n            siz[u]+=siz[v];\n            if(son[u]==0||siz[v]&gt;siz[son[u]])\n                son[u]=v;\n        }\n    };\n    dfs1(dfs1,1,0);\n    int cntd=0;\n    auto dfs2=[&amp;](auto &amp;&amp;self,int u,int pre)-&gt;void{\n        dfn[u]=++cntd;\n        if(son[pre]==u) top[u]=top[pre];\n        else top[u]=u;\n        if(son[u]) self(self,son[u],u);\n        for(auto v:g[u]){\n            if(v==pre||v==son[u]) continue;\n            self(self,v,u);\n        }\n    };\n    dfs2(dfs2,1,0);\n    for(int i=1;i&lt;=n;i++)\n        change(1,1,n,dfn[i],e[i]);\n    while(q--){\n        int op,x,y;\n        cin&gt;&gt;op&gt;&gt;x&gt;&gt;y;\n        if(op==1) change(1,1,n,dfn[x],y);\n        else{\n            int res=0;\n            while(top[x]!=top[y]){\n                if(dep[top[x]]&lt;dep[top[y]]) swap(x,y);\n                res^=query(1,1,n,dfn[top[x]],dfn[x]);\n                x=fa[top[x]];\n            }\n            if(dep[x]&gt;dep[y]) swap(x,y);\n            res^=query(1,1,n,dfn[x],dfn[y]);\n            cout&lt;&lt;res&lt;&lt;'\\n';\n        }\n    }\n}\n</code></pre>"},{"location":"algorithm/graph/HLD/#p4092-heoi2016tjoi2016","title":"P4092 [HEOI2016/TJOI2016] \u6811","text":"<p>\u7b80\u5355\u9898\uff0c\u4f46\u662f WA TLE \u51e0\u6b21\u3002\u3002\u3002\u5199\u4ee3\u7801\u6700\u597d\u4e13\u6ce8\u4e00\u70b9\uff0c\u6700\u597d\u786e\u4fdd\u6bcf\u4e00\u884c\u90fd\u4e0d\u8981\u9519\uff0c\u4e0d\u7136\u4ee3\u7801\u957f\u4e86\u5f88\u96be\u627e\u554a\uff0c\u800c\u4e14\u5403\u7f5a\u65f6\u3002</p> <pre><code>constexpr int N = int(1e5)+5;\nint siz[N],fa[N],dep[N],son[N],dfn[N],top[N],seg[N];\n#define ls p&lt;&lt;1\n#define rs p&lt;&lt;1|1\n#define mi ((l+r)&gt;&gt;1)\nint tr[N&lt;&lt;2];\n\nvoid add(int p,int l,int r,int i)\n{\n    if(l==r){\n        tr[p]=l;\n        return;\n    }\n    if(i&lt;=mi) add(ls,l,mi,i);\n    else add(rs,mi+1,r,i);\n    tr[p]=max(tr[ls],tr[rs]);\n}\nint query(int p,int l,int r,int lx,int rx)\n{\n    if(l&gt;=lx&amp;&amp;r&lt;=rx) return tr[p];\n    int res=0;\n    if(lx&lt;=mi) cmax(res,query(ls,l,mi,lx,rx));\n    if(rx&gt;mi) cmax(res,query(rs,mi+1,r,lx,rx));\n    return res;\n}\nvoid ChatGptDeepSeek() // Date: 2025-04-21\n{                      // Time: 11:08:20 \n    int n,q;\n    cin&gt;&gt;n&gt;&gt;q;\n    vector&lt;vi&gt;g(n+1,vi());\n    for(int i=1;i&lt;n;i++){\n        int u,v;\n        cin&gt;&gt;u&gt;&gt;v;\n        g[u].push_back(v),g[v].push_back(u);\n    }\n    auto dfs1=[&amp;](auto &amp;&amp;self,int u,int pre)-&gt;void{\n        siz[u]=1,dep[u]=dep[pre]+1,fa[u]=pre;\n        for(auto v:g[u]){\n            if(v==pre) continue;\n            self(self,v,u);\n            siz[u]+=siz[v];\n            if(son[u]==0||siz[v]&gt;siz[son[u]])\n                son[u]=v;\n        }\n    };\n    dfs1(dfs1,1,0);\n    int cntd=0;\n    auto dfs2=[&amp;](auto &amp;&amp;self,int u,int pre)-&gt;void{\n        dfn[u]=++cntd;\n        seg[cntd]=u;\n        if(son[pre]==u) top[u]=top[pre];\n        else top[u]=u;\n        if(son[u]) self(self,son[u],u);\n        for(auto v:g[u]){\n            if(v==pre||v==son[u]) continue;\n            self(self,v,u);\n        }\n    };\n    dfs2(dfs2,1,0);\n    add(1,1,n,1);\n    while(q--){\n        char op;\n        int x;\n        cin&gt;&gt;op&gt;&gt;x;\n        if(op=='C') add(1,1,n,dfn[x]);\n        else{\n            int res=0;\n            while(top[x]!=1){\n                cmax(res,query(1,1,n,dfn[top[x]],dfn[x]));\n                x=fa[top[x]];\n            }\n            cmax(res,query(1,1,n,1,dfn[x]));\n            cout&lt;&lt;seg[res]&lt;&lt;'\\n';\n        }\n    }\n}\n</code></pre>"},{"location":"algorithm/graph/HLD/#_3","title":"\u70b9\u6743\u8f6c\u8fb9\u6743","text":"<p>\u5176\u5b9e\u6ca1\u5565\u4e0d\u4e00\u6837\uff0c\u5c31\u662f\u8fb9\u6743\u8f6c\u6210\u6df1\u5ea6\u66f4\u6df1\u7684\u90a3\u4e2a\u70b9\u7684\u70b9\u6743\u3002\u66f4\u65b0\u7684\u65f6\u5019\uff0c\u53ea\u6709\u4e24\u70b9\u5728\u540c\u4e00\u91cd\u94fe\u65f6\uff0c\u9700\u8981\u628a\u533a\u95f4\u6539\u6210 \\(dfn_x+1,dfn_y\\) \uff0c \u5176\u4ed6\u5730\u65b9\u662f\u4e0d\u9700\u8981\u6539\u7684\u3002\u8bb0\u5f97\u7ebf\u6bb5\u6811\u4e5f\u8981\u5224\u4e00\u4e0b\u8303\u56f4\u3002</p>"},{"location":"algorithm/graph/HLD/#p3038-usaco11dec-grass-planting-g","title":"P3038 [USACO11DEC] Grass Planting G","text":"<p>\u57fa\u7840\u64cd\u4f5c\uff0c\u8def\u5f84\u8fb9\u6743 \\(+1\\)\uff0c\u67e5\u8be2\u67d0\u6761\u8fb9\u7684\u957f\u5ea6\uff0c\u6240\u4ee5\u6811\u72b6\u6570\u7ec4\u5176\u5b9e\u4e5f\u80fd\u505a\u3002</p> <pre><code>constexpr int N = 1e5+5;\nint siz[N],fa[N],dep[N],top[N],son[N],dfn[N];\nll tr[N&lt;&lt;2],tag[N&lt;&lt;2];\n\n#define ls p&lt;&lt;1\n#define rs p&lt;&lt;1|1\n#define mi ((l+r)&gt;&gt;1)\n\nvoid push_down(int p,int l,int r)\n{\n    if(tag[p]){\n        tr[ls]+=(mi-l+1)*tag[p];\n        tr[rs]+=(r-mi)*tag[p];\n        tag[ls]+=tag[p],tag[rs]+=tag[p];\n        tag[p]=0;\n    }\n}\nvoid upd(int p,int l,int r,int lx,int rx)\n{\n    if(lx&gt;rx) return;\n    if(l&gt;=lx&amp;&amp;r&lt;=rx){\n        tr[p]+=(r-l+1);\n        tag[p]+=1;\n        return;\n    }\n    push_down(p,l,r);\n    if(lx&lt;=mi) upd(ls,l,mi,lx,rx);\n    if(rx&gt;mi) upd(rs,mi+1,r,lx,rx);\n    tr[p]=tr[ls]+tr[rs];\n}\nint query(int p,int l,int r,int i)\n{\n    if(l==r) return tr[p];\n    push_down(p,l,r);\n    if(i&lt;=mi) return query(ls,l,mi,i);\n    return query(rs,mi+1,r,i);\n}\n\nvoid ChatGptDeepSeek() // Date: 2025-04-19\n{                      // Time: 18:06:21 \n    int n,m;\n    cin&gt;&gt;n&gt;&gt;m;\n    vector&lt;vi&gt;g(n+1,vi());\n    for(int i=1;i&lt;n;i++){\n        int u,v;\n        cin&gt;&gt;u&gt;&gt;v;\n        g[u].push_back(v);\n        g[v].push_back(u);\n    }\n    auto dfs1=[&amp;](auto &amp;&amp;self,int u,int pre)-&gt;void{\n        siz[u]=1;\n        dep[u]=dep[pre]+1;\n        fa[u]=pre;\n        for(auto v:g[u]){\n            if(v==pre) continue;\n            self(self,v,u);\n            if(son[u]==0||siz[v]&gt;siz[son[u]])\n                son[u]=v;\n            siz[u]+=siz[pre];\n        }\n    };\n    dfs1(dfs1,1,0);\n    int cntd=0;\n    auto dfs2=[&amp;](auto &amp;&amp;self,int u,int pre)-&gt;void{\n        dfn[u]=++cntd;\n        if(son[pre]==u) top[u]=top[pre];\n        else top[u]=u;\n        if(son[u]) self(self,son[u],u);\n        for(auto v:g[u]){\n            if(v==pre||v==son[u]) continue;\n            self(self,v,u);\n        }\n    };\n    dfs2(dfs2,1,0);\n    while(m--){\n        char ch;\n        int u,v;\n        cin&gt;&gt;ch&gt;&gt;u&gt;&gt;v;\n        if(ch=='P'){\n            while(top[u]!=top[v]){\n                if(dep[top[u]]&lt;dep[top[v]]) swap(u,v);\n                // cerr&lt;&lt;dfn[top[u]]+1&lt;&lt;\" \"&lt;&lt;dfn[u]&lt;&lt;\"\\n\";\n                upd(1,1,n,dfn[top[u]],dfn[u]);\n                u=fa[top[u]];\n            }\n            if(dep[u]&gt;dep[v]) swap(u,v);\n            // cerr&lt;&lt;dfn[u]+1&lt;&lt;\" \"&lt;&lt;dfn[v]&lt;&lt;\" \\n\";\n            upd(1,1,n,dfn[u]+1,dfn[v]);\n        }else{\n            if(dep[u]&lt;dep[v]) swap(u,v);\n            // cerr&lt;&lt;\"u: \"&lt;&lt;u&lt;&lt;\" \"&lt;&lt;dfn[u]&lt;&lt;'\\n';\n            cout&lt;&lt;query(1,1,n,dfn[u])&lt;&lt;'\\n';\n        }\n    }\n}\n</code></pre>"},{"location":"algorithm/graph/HLD/#p4315","title":"P4315 \u6708\u4e0b\u201c\u6bdb\u666f\u6811\u201d","text":"<p>\u4e5f\u662f\u57fa\u7840\u7684\u8fb9\u6743\u8f6c\u70b9\u6743\uff0c\u7ebf\u6bb5\u6811\u64cd\u4f5c\u662f\u533a\u95f4\u7f6e\u4e3a\u5b9a\u503c\u548c\u533a\u95f4\u52a0\u3002\u611f\u89c9\u6811\u5256\u7684\u9898\u84dd\u8272\u7684\u90fd\u5f88\u677f\u554a\uff0c\u867d\u7136\u53ea\u5199\u4e86\u4e09\u4e2a\u84dd\u9898\u3002\u5148\u518d\u81ea\u5df1\u8ddf\u9898\u5355\u5199\u70b9\u3002\u7136\u540e\u518d\u53bb\u770b\u770b\u5269\u4e0b\u7684\u89c6\u9891\u7684\u5185\u5bb9\uff08\uff09\u3002\u4ed6\u6709\u4e24\u96c6\uff0c\u6bcf\u96c6\u4e24\u5c0f\u65f6\uff0c\u4f46\u662f\u6211\u53ea\u628a\u7b2c\u4e00\u96c6\u770b\u4e86\u56db\u5341\u5206\u949f\u3002</p> <p>\u4e0d\u5f97\u4e0d\u96be\u53d7\u7684\u662f\uff0c<code>tr[p]+=w</code> \u5199\u6210\u4e86 <code>tr[p]=w</code> \uff0c\u4e00\u76f4\u6ca1\u770b\u51fa\u6765\uff0c\u8fd8\u662f\u8ba9 gpt \u5e2e\u5fd9\u770b\u4e86\u4e00\u4e0b\u7684\uff0c\u5c31\u8fd9\u4e00\u4e2a\u9519\u3002</p> <pre><code>constexpr int N = int(1e5)+5;\nint siz[N],fa[N],top[N],son[N],dep[N],dfn[N];\n\n#define ls p&lt;&lt;1\n#define rs p&lt;&lt;1|1\n#define mi ((l+r)&gt;&gt;1)\n\nll tr[N&lt;&lt;2],t1[N&lt;&lt;2],t2[N&lt;&lt;2];\n\nvoid pushdown(int p,int l,int r)\n{\n    if(t1[p]){\n        assert(t2[p]==0);\n        tr[ls]=tr[rs]=t1[p];\n        t1[ls]=t1[rs]=t1[p];\n        t2[ls]=t2[rs]=0;\n        t1[p]=0;\n    }else if(t2[p]){\n        tr[ls]+=t2[p],tr[rs]+=t2[p];\n\n        if(t1[ls]) t1[ls]+=t2[p];\n        else t2[ls]+=t2[p];\n\n        if(t1[rs]) t1[rs]+=t2[p];\n        else t2[rs]+=t2[p];\n\n        t2[p]=0;\n    }\n}\nvoid change(int p,int l,int r,int i,int x)\n{\n    if(l==r){\n        tr[p]=x;\n        return;\n    }\n    pushdown(p,l,r);\n    if(i&lt;=mi) change(ls,l,mi,i,x);\n    else change(rs,mi+1,r,i,x);\n    tr[p]=max(tr[ls],tr[rs]);\n}\nvoid cover(int p,int l,int r,int lx,int rx,int w)\n{\n    if(lx&gt;rx) return;\n    if(l&gt;=lx&amp;&amp;r&lt;=rx){\n        tr[p]=w;\n        t1[p]=w,t2[p]=0;\n        return;\n    }\n    pushdown(p,l,r);\n    if(lx&lt;=mi) cover(ls,l,mi,lx,rx,w);\n    if(rx&gt;mi) cover(rs,mi+1,r,lx,rx,w);\n    tr[p]=max(tr[ls],tr[rs]);\n}\nvoid add(int p,int l,int r,int lx,int rx,int w)\n{\n    if(lx&gt;rx) return;\n    if(l&gt;=lx&amp;&amp;r&lt;=rx){\n        tr[p]+=w;\n        if(t1[p]) t1[p]+=w;\n        else t2[p]+=w;\n        return;\n    }\n    pushdown(p,l,r);\n    if(lx&lt;=mi) add(ls,l,mi,lx,rx,w);\n    if(rx&gt;mi) add(rs,mi+1,r,lx,rx,w);\n    tr[p]=max(tr[ls],tr[rs]);\n}\nint query(int p,int l,int r,int lx,int rx)\n{\n    if(lx&gt;rx) return 0;\n    if(l&gt;=lx&amp;&amp;r&lt;=rx) return tr[p];\n    pushdown(p,l,r);\n    int res=0;\n    if(lx&lt;=mi) cmax(res,query(ls,l,mi,lx,rx));\n    if(rx&gt;mi) cmax(res,query(rs,mi+1,r,lx,rx));\n    return res;\n}\n\n\nvoid ChatGptDeepSeek() // Date: 2025-04-19\n{                      // Time: 18:36:52 \n    int n;\n    cin&gt;&gt;n;\n    vector&lt;vector&lt;pii&gt;&gt;g(n+1,vector&lt;pii&gt;());\n    vector&lt;array&lt;int,3&gt;&gt;edge(n);\n    for(int i=1;i&lt;n;i++){\n        int u,v,w;\n        cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;\n        edge[i]={u,v,w};\n        g[u].push_back({v,w}),g[v].push_back({u,w});\n    }\n    int cntd=0;\n    vi a(n+1);\n    auto dfs1=[&amp;](auto&amp;&amp; self,int u,int pre)-&gt;void{\n        siz[u]=1;\n        dep[u]=dep[pre]+1;\n        fa[u]=pre;\n        for(auto [v,w]:g[u]){\n            if(v==pre) continue;\n            self(self,v,u);\n            siz[u]+=siz[v];\n            if(son[u]==0||siz[son[u]]&lt;siz[v])\n                son[u]=v;\n        }\n    };\n    dfs1(dfs1,1,0);\n    auto dfs2=[&amp;](auto &amp;&amp;self,int u,int pre)-&gt;void{\n        dfn[u]=++cntd;\n        if(son[pre]==u) top[u]=top[pre];\n        else top[u]=u;\n        if(son[u]) self(self,son[u],u);\n        for(auto [v,w]:g[u]){\n            if(v==pre||v==son[u]) continue;\n            self(self,v,u);\n        }\n    };\n    dfs2(dfs2,1,0);\n    for(int i=1;i&lt;n;i++){\n        auto [u,v,w]=edge[i];\n        if(dep[u]&gt;dep[v]) swap(u,v);\n        change(1,1,n,dfn[v],w);\n    }\n    string op;\n    while(cin&gt;&gt;op&amp;&amp;op!=\"Stop\"){\n        if(op==\"Change\"){\n            int k,x;\n            cin&gt;&gt;k&gt;&gt;x;\n            auto [u,v,w]=edge[k];\n            if(dep[u]&gt;dep[v]) swap(u,v);\n            change(1,1,n,dfn[v],x);\n        }else if(op==\"Cover\"){\n            int u,v,x;\n            cin&gt;&gt;u&gt;&gt;v&gt;&gt;x;\n            while(top[u]!=top[v]){\n                if(dep[top[u]]&lt;dep[top[v]]) swap(u,v);\n                cover(1,1,n,dfn[top[u]],dfn[u],x);\n                u=fa[top[u]];\n            }\n            if(dep[u]&gt;dep[v]) swap(u,v);\n            cover(1,1,n,dfn[u]+1,dfn[v],x);\n        }else if(op==\"Add\"){\n            int u,v,x;\n            cin&gt;&gt;u&gt;&gt;v&gt;&gt;x;\n            while(top[u]!=top[v]){\n                if(dep[top[u]]&lt;dep[top[v]]) swap(u,v);\n                add(1,1,n,dfn[top[u]],dfn[u],x);\n                u=fa[top[u]];\n            }\n            if(dep[u]&gt;dep[v]) swap(u,v);\n            add(1,1,n,dfn[u]+1,dfn[v],x);\n        }else{\n            int u,v;\n            cin&gt;&gt;u&gt;&gt;v;\n            int res=0;\n            while(top[u]!=top[v]){\n                if(dep[top[u]]&lt;dep[top[v]]) swap(u,v);\n                cmax(res,query(1,1,n,dfn[top[u]],dfn[u]));\n                u=fa[top[u]];\n            }\n            if(dep[u]&gt;dep[v]) swap(u,v);\n            cmax(res,query(1,1,n,dfn[u]+1,dfn[v]));\n            cout&lt;&lt;res&lt;&lt;'\\n';\n        }\n    }\n}\n</code></pre>"},{"location":"algorithm/graph/HLD/#p3950","title":"P3950 \u90e8\u843d\u51b2\u7a81","text":"<p>\u4e5f\u662f\u8f6c\u6362\u6210\u8fb9\u6743\u7684\u60c5\u51b5\uff0c\u800c\u4e14\u4ec5\u6709\u5355\u70b9\u4fee\u6539\uff0c\u6240\u4ee5\u6811\u72b6\u6570\u7ec4\u5e94\u8be5\u4e5f\u662f\u53ef\u505a\u7684\u3002</p> <pre><code>constexpr int N = int(3e5)+5;\nint siz[N],fa[N],dep[N],son[N],top[N],dfn[N];\n\n#define ls p&lt;&lt;1\n#define rs p&lt;&lt;1|1\n#define mi ((l+r)&gt;&gt;1)\n\nint tr[N&lt;&lt;2];\n\nvoid add(int p,int l,int r,int i,int x)\n{\n    if(l==r){\n        tr[p]+=x;\n        return;\n    }\n    if(i&lt;=mi) add(ls,l,mi,i,x);\n    else add(rs,mi+1,r,i,x);\n    tr[p]=tr[ls]+tr[rs];\n}\nint query(int p,int l,int r,int lx,int rx)\n{\n    if(lx&gt;rx) return 0;\n    if(l&gt;=lx&amp;&amp;r&lt;=rx) return tr[p];\n    ll res=0;\n    if(lx&lt;=mi) res+=query(ls,l,mi,lx,rx);\n    if(rx&gt;mi) res+=query(rs,mi+1,r,lx,rx);\n    return res;\n}\n\nvoid ChatGptDeepSeek() // Date: 2025-04-20\n{                      // Time: 10:18:40 \n    int n,m; cin&gt;&gt;n&gt;&gt;m;\n    vector&lt;pii&gt;edge(n);\n    vector&lt;vi&gt;g(n+1,vi());\n    for(int i=1;i&lt;n;i++){\n        int u,v; cin&gt;&gt;u&gt;&gt;v;\n        edge[i]={u,v};\n        g[v].push_back(u),g[u].push_back(v);\n    }\n    auto dfs1=[&amp;](auto &amp;&amp;self,int u,int pre)-&gt;void{\n        siz[u]=1,fa[u]=pre,dep[u]=dep[pre]+1;\n        for(auto v:g[u]){\n            if(v==pre) continue;\n            self(self,v,u);\n            if(son[u]==0||siz[son[u]]&lt;siz[v])\n                son[u]=v;\n        }\n    };\n    dfs1(dfs1,1,0);\n    int cntd=0;\n    auto dfs2=[&amp;](auto &amp;&amp;self,int u,int pre)-&gt;void{\n        dfn[u]=++cntd;\n        if(son[pre]==u) top[u]=top[pre];\n        else top[u]=u;\n        if(son[u]) self(self,son[u],u);\n        for(auto v:g[u]){\n            if(v==pre||v==son[u]) continue;\n            self(self,v,u);\n        }\n    };\n    dfs2(dfs2,1,0);\n    vector&lt;pii&gt;war;\n    for(int i=1;i&lt;=m;i++){\n        char op;\n        cin&gt;&gt;op;\n        if(op=='Q'){\n            int x,y;\n            cin&gt;&gt;x&gt;&gt;y;\n            bool ok=false;\n            while(top[x]!=top[y]){\n                if(dep[top[x]]&lt;dep[top[y]]) swap(x,y);\n                if(query(1,1,n,dfn[top[x]],dfn[x])) ok=true;\n                x=fa[top[x]];\n            }\n            if(dep[x]&gt;dep[y]) swap(x,y);\n            if(query(1,1,n,dfn[x]+1,dfn[y])) ok=true;\n            cout&lt;&lt;(ok?\"No\":\"Yes\")&lt;&lt;'\\n';\n        }else if(op=='C'){\n            int p,q;\n            cin&gt;&gt;p&gt;&gt;q;\n            war.push_back({p,q});\n            if(dep[p]&gt;dep[q]) swap(p,q);\n            add(1,1,n,dfn[q],1);\n        }else{\n            int k; cin&gt;&gt;k;\n            auto [p,q]=war[k-1];\n            if(dep[p]&gt;dep[q]) swap(p,q);\n            add(1,1,n,dfn[q],-1);\n        }\n    }\n}\n</code></pre>"},{"location":"algorithm/graph/HLD/#p4114-qtree1","title":"P4114 Qtree1","text":"<p>\u5355\u70b9\u4fee\u6539\u548c\u533a\u95f4 max \u67e5\u8be2\u3002</p> <pre><code>constexpr int N = int(1e5)+5;\nint siz[N],dep[N],fa[N],son[N],dfn[N],top[N];\n\n#define ls p&lt;&lt;1\n#define rs p&lt;&lt;1|1\n#define mi ((l+r)&gt;&gt;1)\nint tr[N&lt;&lt;2];\n\nvoid change(int p,int l,int r,int i,int x){\n    if(l==r){\n        tr[p]=x;\n        return;\n    }\n    if(i&lt;=mi) change(ls,l,mi,i,x);\n    else change(rs,mi+1,r,i,x);\n    tr[p]=max(tr[ls],tr[rs]);\n}\nint query(int p,int l,int r,int lx,int rx)\n{\n    if(lx&gt;rx) return 0;\n    if(l&gt;=lx&amp;&amp;r&lt;=rx) return tr[p];\n    int res=0;\n    if(lx&lt;=mi) cmax(res,query(ls,l,mi,lx,rx));\n    if(rx&gt;mi) cmax(res,query(rs,mi+1,r,lx,rx));\n    return res;\n}\nvoid ChatGptDeepSeek() // Date: 2025-04-20\n{                      // Time: 10:50:44 \n    int n;\n    cin&gt;&gt;n;\n    vector&lt;array&lt;int,3&gt;&gt;edge(n);\n    vector&lt;vector&lt;pii&gt;&gt;g(n+1,vector&lt;pii&gt;());\n    for(int i=1;i&lt;n;i++){\n        int u,v,w;\n        cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;\n        edge[i]={u,v,w};\n        g[u].push_back({v,w});\n        g[v].push_back({u,w});\n    }\n    auto dfs1=[&amp;](auto &amp;&amp;self,int u,int pre)-&gt;void{\n        siz[u]=1,dep[u]=dep[pre]+1,fa[u]=pre;\n        for(auto [v,w]:g[u]){\n            if(v==pre) continue;\n            self(self,v,u);\n            siz[u]+=siz[v];\n            if(son[u]==0||siz[v]&gt;siz[son[u]])\n                son[u]=v;\n        }\n    };\n    dfs1(dfs1,1,0);\n    int cntd=0;\n    auto dfs2=[&amp;](auto &amp;&amp;self,int u,int pre)-&gt;void{\n        dfn[u]=++cntd;\n        if(son[pre]==u) top[u]=top[pre];\n        else top[u]=u;\n        if(son[u]) self(self,son[u],u);\n        for(auto [v,w]:g[u]){\n            if(v==pre||v==son[u]) continue;\n            self(self,v,u);\n        }\n    };\n    dfs2(dfs2,1,0);\n    for(int i=1;i&lt;n;i++){\n        auto &amp;[u,v,w]=edge[i];\n        if(dep[u]&gt;dep[v]) swap(u,v);\n        change(1,1,n,dfn[v],w);\n    }\n    string op;\n    while(cin&gt;&gt;op&amp;&amp;op!=\"DONE\"){\n        if(op==\"CHANGE\"){\n            int i,t;\n            cin&gt;&gt;i&gt;&gt;t;\n            auto [u,v,w]=edge[i];\n            change(1,1,n,dfn[v],t);\n        }else{\n            int x,y;\n            cin&gt;&gt;x&gt;&gt;y;\n            int res=0;\n            while(top[x]!=top[y]){\n                if(dep[top[x]]&lt;dep[top[y]]) swap(x,y);\n                cmax(res,query(1,1,n,dfn[top[x]],dfn[x]));\n                x=fa[top[x]];\n            }\n            if(dep[x]&gt;dep[y]) swap(x,y);\n            cmax(res,query(1,1,n,dfn[x]+1,dfn[y]));\n            cout&lt;&lt;res&lt;&lt;'\\n';\n        }\n    }\n}\n</code></pre>"},{"location":"algorithm/graph/scc/","title":"\u5f3a\u8fde\u901a\u5206\u91cf","text":"<p>\u5f3a\u8fde\u901a\u662f\u6307\u6709\u5411\u56fe\u4e2d\uff0c\u4efb\u610f\u4e24\u4e2a\u70b9\u90fd\u4e92\u76f8\u53ef\u8fbe\u3002</p> <p>\u5f3a\u8054\u901a\u5206\u91cf\u662f\u6781\u5927\u7684\u5f3a\u8fde\u901a\u5b50\u56fe\u3002</p> <p>\u7528 tarjan \u6c42\u5f3a\u8fde\u901a\u5206\u91cf\u633a\u65b9\u4fbf\u7684\uff0c\u6709\u4e9b\u9898\u53ef\u4ee5\u7528\u6765\u7f29\u70b9\uff0c\u7f29\u70b9\u540e\u7684\u56fe\u4f1a\u662f DAG\uff0c\u53ef\u4ee5\u66f4\u65b9\u4fbf\u89e3\u51b3\u67d0\u4e9b\u95ee\u9898\u3002</p>"},{"location":"algorithm/graph/scc/#tarjan","title":"Tarjan","text":"<p>\\(dfn_u\\) \u8868\u793a \\(u\\) \u7684 \\(dfs\\) \u5e8f\u3002</p> <p>\\(low_u\\) \u8868\u793a \\(u\\) \u53ef\u4ee5\u5230\u8fbe\u7684\uff0c\u4e0d\u5c5e\u4e8e\u5176\u4ed6 scc \u91cc\u7684\u70b9\u91cc\u7684\u6700\u5c0f\u7684 \\(dfs\\) \u5e8f\u3002</p> <p>\u5c06\u6240\u6709\u904d\u5386\u5230\u7684\u4e0d\u5c5e\u4e8e\u5176\u4ed6 scc \u7684\u70b9\u5165\u6808\u3002</p> <p>\u5f53 \\(low_u = dfn_u\\) \u65f6\uff0c\u5f53\u524d\u6808\u5185\u7684\u70b9\uff0c\u5fc5\u7136\u90fd\u5c5e\u4e8e\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u3002</p> <p>\u4ee3\u7801\u5176\u5b9e\u4e5f\u6bd4\u8f83\u7b80\u5355\u3002\u3002\u3002\u8fd9\u91cc\u4e5f\u4e0d\u77e5\u9053\u8981\u8bb0\u70b9\u4ec0\u4e48\uff0c\u5176\u5b9e\u53ea\u662f\u4e3a\u4e86\u4ee5\u540e\u5fd8\u4e86\u6765\u7a0d\u5fae\u770b\u4e00\u773c\u3002</p>"},{"location":"algorithm/graph/scc/#p3387","title":"P3387 \u3010\u6a21\u677f\u3011\u7f29\u70b9","text":"<p>\u5728\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u7684\u70b9\u80af\u5b9a\u90fd\u80fd\u5230\uff0c\u6240\u4ee5\u76f4\u63a5\u7528 tarjan \u7f29\u70b9\uff0c\u7136\u540e\u5c31\u53d8\u6210 DAG\u4e86\uff0c\u6c42\u4e00\u6761\u8fb9\u6743\u6700\u5927\u7684\u94fe\u5c31\u53ef\u4ee5\u4e86\u3002</p> <p>\u672c\u6765\u5bf9\u4e8e DAG\uff0c\u6211\u4eec\u662f\u8981\u641e\u4e00\u4e2a\u62d3\u6251\u6392\u5e8f\u7684\uff0c\u4f46\u662f tarjan \u4e4b\u540e\u7684\u987a\u5e8f\u76f4\u63a5\u5c31\u662f\u62d3\u6251\u6392\u5e8f\u7684\u9006\u5e8f\uff0c\u5c31\u6bd4\u8f83\u65b9\u4fbf\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nusing LL = long long;\n\nvector&lt;vector&lt;int&gt;&gt; g;\nvector&lt;pair&lt;int, int&gt;&gt; edges;\nconstexpr int N = 10010;\nint dfn[N], low[N], instk[N], tot;\nint scc[N], A[N], sc, a[N];\nvector&lt;int&gt; stk;\nvoid tarjan(int u)\n{\n    dfn[u] = low[u] = ++tot;\n    instk[u] = 1, stk.push_back(u);\n    for(auto v : g[u]){\n        if(!dfn[v]){\n            tarjan(v);\n            low[u] = min(low[u], low[v]);\n        }else if(instk[v])\n            low[u] = min(low[u], dfn[v]);\n    }\n    if(low[u] == dfn[u]){\n        ++sc;\n        for(int k = -1; k != u; ){\n            k = stk.back(); stk.pop_back();\n            scc[k] = sc, A[sc] += a[k];\n            instk[k] = false;\n        }\n    }\n}\nvoid solve()\n{\n    int n, m; cin &gt;&gt; n &gt;&gt; m;\n    g.assign(n + 1, vector&lt;int&gt;()), edges.assign(m, {0, 0});\n    for(int i = 1; i &lt;= n; i++) cin &gt;&gt; a[i];\n    for(int i = 0; i &lt; m; i++){\n        int u, v; cin &gt;&gt; u &gt;&gt; v;\n        g[u].push_back(v);\n        edges[i] = {u, v};\n    }\n    for(int i = 1; i &lt;= n; i++)\n        if(!dfn[i]) tarjan(i);\n    g.assign(sc + 1, vector&lt;int&gt;());\n    for(auto [u, v] : edges){\n        u = scc[u], v = scc[v];\n        if(u != v){\n            g[u].push_back(v);\n        }\n    }\n    vector&lt;int&gt; dp(sc + 1);\n    for(int i = 1; i &lt;= sc; i++){\n        dp[i] = A[i];\n        sort(g[i].begin(), g[i].end());\n        g[i].erase(unique(g[i].begin(), g[i].end()), g[i].end());\n    }\n    for(int i = sc; i &gt;= 1; i--){\n        for(auto v : g[i]){\n            dp[v] = max(dp[v], A[v] + dp[i]);\n        }\n    }\n    cout &lt;&lt; ranges::max(dp) &lt;&lt; '\\n';\n}\n\nint main()\n{\n    ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);\n    // int t; cin &gt;&gt; t; while(t--)\n    {solve();} return 0;\n}\n</code></pre>"},{"location":"algorithm/graph/scc/#_2","title":"\u7ec3\u4e60\u9898","text":"<p>P2986 [USACO10MAR] Great Cow Gathering G</p> <p>P2272 [ZJOI2007] \u6700\u5927\u534a\u8fde\u901a\u5b50\u56fe</p> <p>P2515 [HAOI2010] \u8f6f\u4ef6\u5b89\u88c5</p>"},{"location":"algorithm/math/combinatorics/combination/","title":"\u7ec4\u5408\u6570\u5b66","text":""},{"location":"algorithm/math/combinatorics/combination/#_2","title":"\u6392\u5217\u4e0e\u7ec4\u5408\u57fa\u7840","text":""},{"location":"algorithm/math/combinatorics/combination/#_3","title":"\u6392\u5217\u6570","text":"<p>\\(A_n^m = n(n-1)(n-2)...(n-m+1)=\\frac{n!}{(n-m)!}\\)</p>"},{"location":"algorithm/math/combinatorics/combination/#_4","title":"\u7ec4\u5408\u6570","text":"<p>\u4ece \\(n\\) \u4e2a\u4e0d\u540c\u5143\u7d20\u4e2d\u9009\u51fa \\(m\\) \u4e2a\u5143\u7d20\u7684\u7ec4\u5408\u6570\uff0c \u7528 \\(\\binom{n}{m}\\) \u8868\u793a\u3002</p> <p>\\(\\binom{n}{m} = \\frac{A_n^m}{m!} = \\frac{n!}{m!(n-m)!}\\)</p>"},{"location":"algorithm/math/game/impartial-game/","title":"\u516c\u5e73\u7ec4\u5408\u6e38\u620f","text":""},{"location":"algorithm/math/game/impartial-game/#nim","title":"Nim \u6e38\u620f","text":""},{"location":"algorithm/math/game/impartial-game/#_2","title":"\u89c4\u5219","text":"<p>\u6709 \\(n\\) \u5806\u7269\u54c1\uff0c\u6bcf\u5806\u6709 \\(a_i\\) \u4e2a\u7269\u54c1\uff0c\u4e24\u4e2a\u73a9\u5bb6\u8f6e\u6d41\u4ece\u4efb\u610f\u4e00\u5806\u91cc\u53d6\u4efb\u610f\u4e2a\u7269\u54c1\uff0c\u4f46\u4e0d\u80fd\u4e0d\u53d6\u3002</p> <p>\u53d6\u8d70\u6700\u540e\u4e00\u4e2a\u7269\u54c1\u7684\u4eba\u83b7\u80dc\u3002</p>"},{"location":"algorithm/math/game/impartial-game/#solution","title":"solution","text":"<p>\u5982\u679c \\(n\\) \u4e2a\u6570\u7684\u5f02\u6216\u548c\u4e3a 0,\u90a3\u4e48\u5148\u624b\u5fc5\u8d25\uff0c\u5426\u5219\u5148\u624b\u5fc5\u80dc\u3002</p> <p>\u5176\u5b9e\u8fd9\u4e2a\u975e\u5e38\u597d\u7406\u89e3\u3002\u521d\u59cb\u65f6\uff0c\u5982\u679c\u5f02\u6216\u548c\u4e3a\u975e 0, \u90a3\u4e48\u5148\u624b\u7684\u4eba\u53ea\u8981\u62ff\u90a3\u4e2a\u6570\u91cf\u7684\u7269\u54c1\uff0c\u5f02\u6216\u548c\u5c31\u4f1a\u53d8\u4e3a 0\u3002</p> <p>\u53e6\u4e00\u4e2a\u4eba\u4e0d\u7ba1\u548b\u62ff\uff0c\u5230\u7b2c\u4e00\u4e2a\u4eba\u7684\u65f6\u5019\uff0c\u5f02\u6216\u548c\u90fd\u4f1a\u662f\u975e 0\u3002\u7b2c\u4e00\u4e2a\u4eba\u53ef\u4ee5\u4fdd\u8bc1\u8f6e\u5230\u81ea\u5df1\u65f6\uff0c\u6bcf\u5806\u7269\u54c1\u6570\u91cf\u7684\u5f02\u6216\u548c\u4e00\u76f4\u4e3a\u975e 0, \u4e14\u53e6\u4e00\u4e2a\u4eba\u53d6\u65f6\u6c38\u8fdc\u5f02\u6216\u548c\u4e3a 0\u3002\u6240\u4ee5\u53ea\u6709\u540e\u624b\u7684\u4eba\u4f1a\u5148\u78b0\u5230\u6ca1\u6709\u7269\u54c1\u9009\u7684\u60c5\u51b5\u3002</p> <p>P2197 \u3010\u6a21\u677f\u3011Nim \u6e38\u620f</p>"},{"location":"algorithm/math/linear-algebra/matrix/","title":"\u77e9\u9635","text":""},{"location":"algorithm/math/linear-algebra/matrix/#_2","title":"\u77e9\u9635\u4e58\u6cd5","text":"<p>\u4e24\u4e2a\u77e9\u9635 \u4e24\u4e2a\u5927\u5c0f\u5206\u522b\u4e3a \\(m \\times n\\) \u548c \\(n \\times p\\) \u7684\u77e9\u9635 \\(A,B\\) \u76f8\u4e58\u7684\u7ed3\u679c\u4e3a\u4e00\u4e2a\u5927\u5c0f\u4e3a \\(m \\times p\\) \u7684\u77e9\u9635\u3002\u5c06\u7ed3\u679c\u77e9\u9635\u8bb0\u4f5c \\(C\\) , \u5219 \\(C\\) \u7b2c \\(i\\) \u884c\uff0c \u7b2c \\(j\\) \u5217\u7684\u5143\u7d20\u53ef\u4ee5\u8868\u793a\u4e3a</p> \\[ C_{i,j} = \\sum_{k=1}^{n} A_{i,k} B_{k,j} \\] <p>\u77e9\u9635\u4e58\u6cd5\u6ee1\u8db3\u5206\u914d\u5f8b\u548c\u7ed3\u5408\u5f8b\uff0c \u4f46\u662f\u4e0d\u6ee1\u8db3\u4ea4\u6362\u5f8b\u3002</p> <p>\\(A^{k}\\) \u76f8\u5f53\u4e8e\u662f \\(k\\) \u4e2a \\(A\\) \u77e9\u9635\u76f8\u4e58\uff0c \\(A^0\\) \u7684\u7ed3\u679c\u662f\u5355\u4f4d\u77e9\u9635\u3002 \u5355\u4f4d\u77e9\u9635\u5c31\u662f\u4e3b\u5bf9\u89d2\u7ebf\u4e0a\u5168\u4e3a \\(1\\) , \u5176\u4ed6\u5143\u7d20\u5168\u4e3a \\(0\\) \u7684\u77e9\u9635\u3002</p> <p>\u7531\u4e8e\u77e9\u9635\u4e58\u6cd5\u6ee1\u8db3\u5206\u914d\u5f8b\u7ed3\u5408\u5f8b\uff0c \u6240\u4ee5 \\(A^k\\) \u4e5f\u53ef\u4ee5\u901a\u8fc7\u5feb\u901f\u5e42\u6765\u52a0\u901f\u8fd0\u7b97\u3002</p>"},{"location":"algorithm/math/linear-algebra/matrix/#p3390","title":"P3390 \u3010\u6a21\u677f\u3011\u77e9\u9635\u5feb\u901f\u5e42","text":"<pre><code>constexpr int mod = int(1e9) + 7;\n\nvoid ChatGptDeepSeek() // Date: 2025-04-28\n{                      // Time: 16:37:41 \n    int n;\n    ll k;\n    cin &gt;&gt; n &gt;&gt; k;\n    vector&lt;vl&gt; a(n + 1, vl(n + 1));\n    for(int i = 1; i &lt;= n; i++){\n        for(int j = 1; j &lt;= n; j++)\n            cin &gt;&gt; a[i][j];\n    }\n    auto matrix_ksm = [&amp;](){\n        vector&lt;vl&gt; res(n + 1, vl(n + 1));\n        for(int i = 1; i &lt;= n; i++) res[i][i] = 1;\n        while(k){\n            if(k&amp;1){\n                vector&lt;vl&gt; tmp(n + 1, vl(n + 1));\n                for(int i = 1; i &lt;= n; i++){\n                    for(int j = 1; j &lt;= n; j++){\n                        for(int k = 1; k &lt;= n; k++){\n                            tmp[i][j] = (tmp[i][j] + res[i][k] * a[k][j] % mod) % mod;\n                        }\n                    }\n                }\n                res = tmp;\n            }\n            {\n                vector&lt;vl&gt; tmp(n + 1, vl(n + 1));\n                for(int i = 1; i &lt;= n; i++){\n                    for(int j = 1; j &lt;= n; j++){\n                        for(int k = 1; k &lt;= n; k++){\n                            tmp[i][j] = (tmp[i][j] + a[i][k] * a[k][j] % mod) % mod;\n                        }\n                    }\n                }\n                a = tmp;\n            }\n            k &gt;&gt;= 1;\n        }\n        return res;\n    };\n    vector ans = matrix_ksm();\n    for(int i = 1; i &lt;= n; i++){\n        for(int j = 1; j &lt;= n; j++)\n            cout &lt;&lt; ans[i][j] &lt;&lt; \" \\n\"[j == n];\n    }\n}\n</code></pre>"},{"location":"algorithm/math/linear-algebra/matrix/#p1962","title":"P1962 \u6590\u6ce2\u90a3\u5951\u6570\u5217","text":"<p>\u53ef\u4ee5\u63a8\u4e00\u4e0b\u5f0f\u5b50\uff0c \u4f1a\u53d8\u6210\u77e9\u9635\u4e58\u6cd5\u3002</p> <pre><code>constexpr int mod = int(1e9)+7;\nvoid ChatGptDeepSeek() // Date: 2025-04-28\n{                      // Time: 17:32:58 \n    ll n;\n    cin &gt;&gt; n;\n    vector&lt;vl&gt; res(3, vl(3));\n    vector&lt;vl&gt; a(3, vl(3));\n    a[1][1] = a[1][2] = a[2][1] = 1;\n    res[1][1] = res[2][2] = 1;\n    n--;\n    while(n){\n        if(n&amp;1){\n            vector&lt;vl&gt; tmp(3,vl(3));\n            for(int i=1;i&lt;=2;i++){\n                for(int j=1;j&lt;=2;j++){\n                    for(int k=1;k&lt;=2;k++){\n                        tmp[i][j]=(tmp[i][j]+res[i][k]*a[k][j]%mod)%mod;\n                    }\n                }\n            }\n            res=tmp;\n            // for(int i=1;i&lt;=2;i++)\n            //     for(int j=1;j&lt;=2;j++)\n            //         cout&lt;&lt;res[i][j]&lt;&lt;\" \\n\"[j==2];\n        }\n        {\n            vector&lt;vl&gt; tmp(3,vl(3));\n            for(int i=1;i&lt;=2;i++){\n                for(int j=1;j&lt;=2;j++){\n                    for(int k=1;k&lt;=2;k++){\n                        tmp[i][j]=(tmp[i][j]+a[i][k]*a[k][j]%mod)%mod;\n                    }\n                }\n            }\n            a=tmp;\n        }\n        n&gt;&gt;=1;\n    }\n    //[1,0] \n    cout &lt;&lt; res[1][1] &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"algorithm/numbertheory/basic/","title":"\u6570\u8bba\u57fa\u7840","text":"<p>\u8bb0\u4e00\u4e9b\u57fa\u7840\u77e5\u8bc6\u6027\u8d28\u4e4b\u7c7b\u7684\uff0c\u65b9\u4fbf\u81ea\u5df1\u4e4b\u540e\u67e5\u770b\uff0c\u56e0\u4e3aoi-wiki\u8fd9\u79cd\uff0c\u867d\u7136\u5185\u5bb9\u5f88\u5168\uff0c\u4f46\u662f\u5927\u90e8\u5206\u6211\u90fd\u4e0d\u4f1a\u3002\u81ea\u5df1\u770b\u4e00\u70b9\u8bb0\u4e00\u70b9\u4e5f\u597d\u3002</p>"},{"location":"algorithm/numbertheory/basic/#_1","title":"\u6570\u8bba\u57fa\u7840","text":""},{"location":"algorithm/numbertheory/basic/#_2","title":"\u6574\u9664","text":"<p>\u5176\u5b9e\u6211\u6709\u65f6\u5019\u90fd\u4e0d\u592a\u8bb0\u5f97\u6574\u9664\u7b26\u53f7\u90a3\u4e2a\uff0c\u54ea\u4e2a\u662f\u88ab\u9664\u6570\u90a3\u4e2a\u662f\u9664\u6570...</p> <p>\\(a|b\\) \u8868\u793a\uff0c\\(a\\) \u53ef\u4ee5\u6574\u9664 \\(b\\) \uff0c\u5373\u5b58\u5728 \\(q\\) \u4f7f\u5f97 \\(b=aq\\) \u3002</p> <p>\\(b\\) \u662f \\(a\\) \u7684\u500d\u6570\uff0c\\(a\\) \u662f \\(b\\) \u7684\u7ea6\u6570\u3002</p>"},{"location":"algorithm/numbertheory/basic/#_3","title":"\u6700\u5927\u516c\u7ea6\u6570","text":"<p>\u6700\u5927\u516c\u7ea6\u6570(greatest common divisor)\uff0c\u7b80\u79f0gcd\u3002</p> <p>\u6307\u4e24\u4e2a\u6216\u591a\u4e2a\u6574\u6570\u62e5\u6709\u7684\u5171\u540c\u7ea6\u6570\u4e2d\u6700\u5927\u7684\u4e00\u4e2a\u3002</p> <p>\\(a,b,c\\) \u7684\u6700\u5927\u516c\u7ea6\u6570\u8bb0\u4e3a \\((a,b,c)\\) \uff0c\u6700\u5c0f\u516c\u500d\u6570\u8bb0\u4e3a \\([a,b,c]\\)\u3002</p>"},{"location":"algorithm/numbertheory/basic/#_4","title":"\u8f97\u8f6c\u76f8\u9664\u6cd5","text":"<p>\u6211\u597d\u50cf\u8fd8\u662f\u4e0d\u4f1a\u8bc1\u660e\u8fd9\u4e2a\u6765\u7740\u3002\u3002\u3002</p> <p>\\(gcd(a,b)=g\\) \uff0c\u90a3\u4e48 \\(gcd(a,b-a)=g\\) \u3002</p> <p>\u6216\u8005\u8bf4\u56e0\u4e3a\u540e\u9762\u7684\u7b49\u4e8e \\(g\\) \uff0c\u6240\u4ee5\u524d\u9762\u7684\u7b49\u4e8e \\(g\\) ?</p> <p>\u8bbe \\(a&lt;b\\) ,  \\(gcd(a,b)=g\\) , \\(a=xg\\) , \\(b=yg\\) \u3002</p> <p>\u90a3\u4e48 \\(gcd(x,y)=1\\) , \u6240\u4ee5 \\(gcd(x,y-x)=1\\) \uff0c\u989d\uff0c\u8fd9\u4e0d\u8fd8\u662f\u8f97\u8f6c\u76f8\u9664\u6cd5\u5417\u3002\u3002\u3002</p> <p>\u7136\u540e\u8fd9\u4e2a\u53c8\u662f\u548b\u8bc1\u660e\u7684\u5462\u3002\u3002\u3002\u6211\u8bb0\u5f97\u6709\u4e2a\u5565\u662f\u8ddf\u4e92\u7d20\u6709\u5173\u7684\u3002\u3002\u3002</p>"},{"location":"algorithm/numbertheory/basic/#__gcd","title":"__gcd()","text":"<pre><code>  template&lt;typename _EuclideanRingElement&gt;\n    _GLIBCXX20_CONSTEXPR\n    _EuclideanRingElement\n    __gcd(_EuclideanRingElement __m, _EuclideanRingElement __n)\n    {\n      while (__n != 0)\n    {\n      _EuclideanRingElement __t = __m % __n;\n      __m = __n;\n      __n = __t;\n    }\n      return __m;\n    }\n</code></pre>"},{"location":"algorithm/others/duipai/","title":"\u5bf9\u62cd","text":""},{"location":"algorithm/others/duipai/#_1","title":"\u5bf9\u62cd","text":"<p>2025-03-28</p> <p>\u53ef\u80fd\u4e3b\u8981\u4f9b\u6211\u81ea\u5df1\u590d\u5236\uff0c\u7ecf\u5e38\u9700\u8981\u5bf9\u62cd\u7684\u65f6\u5019\u518d\u53bb\u4e4b\u524d\u7528\u8fc7\u7684\u5730\u65b9\u590d\u5236\uff0c\u4e0d\u5982\u65e9\u70b9\u4f20\u7ebf\u4e0a\uff0c\u518d\u5f04\u4e2a <code>snippets</code> \uff0c\u4e4b\u524d\u5f04\u8fc7\u597d\u51e0\u4e2a\uff0c\u4f46\u90fd\u6ca1\u4e86\u3002\u6700\u8fd1\u5f97\u90fd\u5b58\u7740\u3002</p> <p>\u53ea\u662f\u653e\u4e00\u4e0b\u6211\u7684\u5bf9\u62cd\u7684\u4ee3\u7801\u3002</p> <p>\u628a\u5bf9\u5e94\u7684\u4ee3\u7801\u653e\u6587\u4ef6\u91cc\uff0c\u6587\u4ef6\u540d\u5bf9\u5e94\uff0c\u8fd0\u884c\u5bf9\u62cd\u6587\u4ef6\u5373\u53ef\uff0c\u9700\u8981\u5728\u540c\u4e00\u76ee\u5f55\u4e0b\u3002</p>"},{"location":"algorithm/others/duipai/#_2","title":"\u5bf9\u62cd\u6587\u4ef6","text":"<p>\u8fd9\u4e2a\u6587\u4ef6\u540d\u6ca1\u6709\u8981\u6c42\uff0c\u53eb\u5565\u90fd\u884c\u3002\u4f46\u662f\u6211\u7684\u751f\u6210\u968f\u673a\u6570\u73b0\u5728\u7528\u7684C++\uff0c\u540d\u5b57\u53eb <code>gen</code> \uff0c \u4e24\u4efd\u4ee3\u7801\u5206\u522b\u53eb <code>sol</code> \u548c <code>std</code> \u3002\u5982\u679c\u4f60\u60f3\u6539\uff0c\u628a\u5bf9\u5e94\u7684\u540d\u5b57\u5168\u90fd\u4fee\u6539\u5c31\u884c\u3002 <code>.in</code> <code>.out</code> \u7684\u6587\u4ef6\u540d\u4e0d\u5fc5\u4e0e\u524d\u9762\u7684\u5bf9\u5e94\uff0c\u53eb\u5565\u90fd\u884c\uff0c\u540e\u7f00\u7528 <code>.txt</code> \u4e4b\u7c7b\u7684\u4e5f\u53ef\u4ee5\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint main()\n{\n    system(\"g++ -std=c++20 gen.cpp -o gen\");\n    system(\"g++ -std=c++20 sol.cpp -o sol\");\n    system(\"g++ -std=c++20 std.cpp -o std\");\n    int t = 10000;\n    for (int i = 1; i &lt;= t; i++) {\n        system(\"gen &gt; 1.in\");\n        system(\"sol &lt; 1.in &gt; sol.out\");\n        system(\"std &lt; 1.in &gt; std.out\");\n        if (system(\"fc sol.out std.out\")) {\n            return 0;\n        } else\n            printf(\"running on test %d\\n\", i);\n    }\n    return 0;\n}\n</code></pre>"},{"location":"algorithm/others/duipai/#_3","title":"\u751f\u6210\u968f\u673a\u6570","text":"<p>\u7528\u4e8e\u751f\u6210\u968f\u673a\u6570\u636e\uff0c\u9700\u8981\u8bbe\u7f6e\u7f16\u8bd1\u53c2\u6570 <code>-std=c++11</code> \u6216\u8bbe\u7f6e\u66f4\u9ad8\u6807\u51c6\uff0cC++11\u5e94\u8be5\u662f\u53ef\u4ee5\u7528\u7684\uff0c\u4f46\u662f\u6211\u597d\u50cf\u6ca1\u8bd5\u8fc7\u5728\u90a3\u4e2a\u84dd\u8272 dev \u7528\u8fc7\u3002</p> <p><code>rand_integer(l,r)</code> \u7528\u4e8e\u4ea7\u751f\u4e00\u4e2a\u5728 \\([l,r]\\) \u4e4b\u95f4\u7684\u6574\u6570\u3002\u9700\u8981\u751f\u6210\u968f\u673a\u5b57\u7b26\u4e32\uff0c\u4f60\u53ef\u4ee5\u751f\u6210\u968f\u673a\u4e0b\u6807\uff0c\u6216\u8005\u5176\u4ed6\u601d\u8def\u3002\u8fd9\u4e2a\u51fd\u6570\u540d\u4f60\u4e5f\u53ef\u4ee5\u6539\u6210\u4efb\u4f55\u4f60\u559c\u6b22\u7684\u3002</p> <p>\u4e5f\u53ef\u4ee5\u7528 python \u751f\u6210\u968f\u673a\u6570\u636e\uff0c\u53ef\u80fd\u4e5f\u4f1a\u6bd4\u8f83\u7b80\u5355\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nusing ll = long long;\n\nmt19937_64 rng(time(NULL));\nll rand_integer(ll l, ll r)\n{\n    uniform_int_distribution&lt;ll&gt; dis(l, r);\n    return dis(rng);\n}\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.tie(nullptr);\n\n    return 0;\n}\n</code></pre>"},{"location":"algorithm/others/snippets/","title":"VScode Snippets","text":"<p>\u5b58\u4e0b\u7528\u6237\u4ee3\u7801\u7247\u6bb5\u4e4b\u7c7b\u7684\uff0c\u4e0d\u8fc7\u73b0\u5728\u662f\u53ea\u7528VSCode\u7684\u3002</p>"},{"location":"algorithm/others/snippets/#vscode","title":"VSCODE","text":"<pre><code>{\n    \"ChatGptDeepSeek Template\": {\n        \"prefix\": \"ChatGptDeepSeek\",\n        \"body\": [\n            \"#include &lt;bits/stdc++.h&gt;\",\n            \"using namespace std;\",\n            \"\",\n            \"void ChatGptDeepSeek() // Date: ${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}\",\n            \"{                      // Time: ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND} \",\n            \"    $0\",\n            \"}\",\n            \"\",\n            \"int main()\",\n            \"{\",\n            \"    ios::sync_with_stdio(false);\",\n            \"    cin.tie(nullptr);\",\n            \"    cout.tie(nullptr);\",\n            \"    int T = 1;\",\n            \"    cin &gt;&gt; T;\",\n            \"    while (T--)\",\n            \"        ChatGptDeepSeek();\",\n            \"    return 0;\",\n            \"}\"\n        ],\n        \"description\": \"Template for ChatGptDeepSeek function\"\n    },\n    \"Zhangwuji Template\": {\n        \"prefix\": \"zwj\",\n        \"body\": [\n            \"// #define YUANSHEN\",\n            \"#if defined(YUANSHEN)\",\n            // \"#include \\\"C:/cp_code/template/debug.hpp\\\"\",\n            \"#include \\\"/home/skadi/cp_code/template/debug.hpp\\\"\",\n            \"#else\",\n            \"#include &lt;bits/stdc++.h&gt;\",\n            \"using namespace std;\",\n            \"#define dbg(...) 42\",\n            \"#endif\",\n            \"template &lt;typename T1, typename T2&gt;\",\n            \"void cmin(T1&amp; x, const T2&amp; y)\",\n            \"{\",\n            \"    x = x &lt; y ? x : y;\",\n            \"}\",\n            \"template &lt;typename T1, typename T2&gt;\",\n            \"void cmax(T1&amp; x, const T2&amp; y)\",\n            \"{\",\n            \"    x = x &gt; y ? x : y;\",\n            \"}\",\n            \"using ll = long long;\",\n            \"using ull = unsigned long long;\",\n            \"using vi = vector&lt;int&gt;;\",\n            \"using vl = vector&lt;ll&gt;;\",\n            \"using pii = pair&lt;int, int&gt;;\",\n            \"using pll = pair&lt;ll, ll&gt;;\",\n            \"#define fixset(x) fixed &lt;&lt; setprecision(x)\",\n            \"#define fi first\",\n            \"#define se second\",\n            \"#define sz(x) (int)(x).size()\",\n            \"#define all(x) (x).begin(), (x).end()\",\n            \"#define ALL(x) (x).begin() + 1, (x).end()\",\n            \"constexpr int INF = 1000000000;\",\n            \"constexpr ll LNF = 1000000000000000000LL;\",\n            \"\",\n            \"void ChatGptDeepSeek() // Date: ${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}\",\n            \"{                      // Time: ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND} \",\n            \"    $0\",\n            \"}\",\n            \"\",\n            \"int main()\",\n            \"{\",\n            \"#ifndef YUANSHEN\",\n            \"    ios::sync_with_stdio(false);\",\n            \"    cin.tie(0);\",\n            \"    cout.tie(0);\",\n            \"#endif\",\n            \"    int T = 1;\",\n            \"    cin &gt;&gt; T;\",\n            \"    while (T--)\",\n            \"        ChatGptDeepSeek();\",\n            \"    return 0;\",\n            \"}\"\n        ],\n        \"description\": \"\"\n    },\n    \"Fast Exponentiation\": {\n        \"prefix\": \"ksm\",\n        \"body\": [\n            \"ll ksm(ll a, ll b) {\",\n            \"    ll res = 1;\",\n            \"    while (b) {\",\n            \"        if (b &amp; 1)\",\n            \"            res = res * a % mod;\",\n            \"        a = a * a % mod;\",\n            \"        b &gt;&gt;= 1;\",\n            \"    }\",\n            \"    return res;\",\n            \"}\"\n        ],\n        \"description\": \"\u5feb\u901f\u5e42 (Exponentiation by Squaring)\"\n    }\n}\n</code></pre>"},{"location":"algorithm/string/KMP/","title":"KMP","text":"<p><code>KMP</code> \u7b97\u6cd5\u53ef\u4ee5\u7ebf\u6027\u65f6\u95f4\u5728\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u67e5\u627e\u53e6\u4e00\u4e2a\u5b57\u7b26\u4e32\u51fa\u73b0\u7684\u60c5\u51b5\u3002</p> <p>\u5177\u4f53\u7684\u5176\u5b9e\u6211\u4e0d\u548b\u4f1a\u8bf4\u3002\u3002\u3002\u76f4\u63a5\u653e\u4ee3\u7801\u5427\u3002</p>"},{"location":"algorithm/string/KMP/#_1","title":"\u6a21\u677f","text":""},{"location":"algorithm/string/KMP/#p3375-kmp","title":"P3375 \u3010\u6a21\u677f\u3011KMP","text":"<p>\u6c42\u4e00\u4e2a\u5b57\u7b26\u4e32\u5728\u53e6\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\u3001\u4f4d\u7f6e\u7b49\u3002\u5b9e\u9645\u4e0a\u6211\u4ee3\u7801\u5199\u7684\u6c42\u7684\u662f <code>border</code> \u6570\u7ec4 ( ) \u3002</p> <p>\u5176\u5b9e\u5c31\u5f97\u7a0d\u5fae\u591a\u5199\u70b9\uff0c\u5c31\u6bd4\u8f83\u5bb9\u6613\u8bb0\u4f4f\u4e86\u5427\uff0c\u4e5f\u4e0d\u662f\u7279\u522b\u96be\u7406\u89e3\u3002</p> <p>\u6211\u4e4b\u524d\u4e5f\u7a0d\u5fae\u770b\u8fc7\u4e00\u4e0b\u7684\uff0c\u4f46\u662f\u9664\u4e86\u5b66\u4e86\u7684\u65f6\u5019\u5199\u4e86\u70b9\u9898\uff0c\u57fa\u672c\u4ece\u6765\u6ca1\u7528\u8fc7\u3002\u6240\u4ee5\u65e9\u5c31\u4e00\u70b9\u4e0d\u8bb0\u5f97\u4e86\u3002</p> <p>\u7b2c\u4e00\u6b21 AC \u8fd9\u9898\u662f 24\u5e7411\u67082\u65e5\uff0c\u4eca\u5929 25\u5e743\u670828\u65e5\u3002\u3002\u4f46\u4e0d\u540c\u7684\u662f\uff0c\u73b0\u5728\u6211\u628a\u5f88\u591a\u4e1c\u897f\u8bb0\u5728\u8fd9\u91cc\uff0c\u53ef\u4ee5\u7ecf\u5e38\u56de\u5230\u8fd9\u91cc\uff0c\u751a\u81f3\u4e0d\u5c0f\u5fc3\u70b9\u5230\u4e00\u4e0b\uff0c\u4e5f\u80fd\u589e\u52a0\u70b9\u6620\u50cf\uff1f</p> <pre><code>vector&lt;int&gt; get_next(string s)\n{\n    vector&lt;int&gt; nxt(s.size());\n    for (int i = 1; i &lt; s.size(); i++)\n    {\n        int j = nxt[i - 1];\n        while (j &gt; 0 &amp;&amp; s[j] != s[i])\n            j = nxt[j - 1];\n        nxt[i] = j;\n        if (s[i] == s[j])\n            nxt[i]++;\n    }\n    return nxt;\n}\nvoid ChatGptDeepSeek()\n{\n    string s1, s2;\n    cin &gt;&gt; s1 &gt;&gt; s2;\n    vector&lt;int&gt; p = get_next(s2);\n    int i = 0, j = 0;\n    while (i &lt; s1.size())\n    {\n        while (j &gt; 0 &amp;&amp; s1[i] != s2[j])\n            j = p[j - 1];\n        if (s1[i] == s2[j])\n            i++, j++;\n        else\n            i++;\n        if (j == s2.size())\n        {\n            cout &lt;&lt; i - j + 1 &lt;&lt; '\\n';\n            j = p[j - 1];\n        }\n    }\n    for (auto x : p)\n        cout &lt;&lt; x &lt;&lt; \" \";\n    cout &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"algorithm/string/KMP/#2024-b","title":"[\u84dd\u6865\u676f 2024 \u56fd B] \u6700\u957f\u56de\u6587\u524d\u540e\u7f00","text":"<p>\u4e5f\u7b97\u53ea\u662f\u968f\u4fbf\u627e\u4e86\u4e00\u4e2a\u53ef\u4ee5\u7528\u5230 KMP \u7684\u9898\u76ee\uff0c\u4f46\u9700\u8981\u4e00\u70b9\u989d\u5916\u7684\u601d\u7ef4\u8f6c\u6362\u4e00\u4e0b\u3002</p>"},{"location":"algorithm/string/KMP/#_2","title":"\u6c42\u6700\u957f\u56de\u6587\u524d\u7f00/\u540e\u7f00","text":"<p>\u5e76\u4e0d\u662f\u6700\u957f\u56de\u6587\u5b50\u4e32\uff0c\u56de\u6587\u5b50\u4e32\u4e00\u822c\u5f97\u7528\u522b\u7684\u65b9\u6cd5\u6c42\uff0c\u8c8c\u4f3c\u4e5f\u662f\u529b\u6263\u5178\u9898\uff0c\u4f46\u662f\u73b0\u5728\u6211\u5e94\u8be5\u4e0d\u4f1a\u3002\u3002</p> <p>\u4e5f\u662f\u975e\u5e38\u5e38\u7528\u7684\u65b9\u6cd5\uff0c\u6211\u5c31\u662f\u4ece\u4e00\u4e2a\u9700\u8981\u8fd9\u4e2a\u7684\u9898\u76ee\uff0c\u624d\u6765\u770b KMP \u7684\u3002\u4f46\u662f\u95ee\u7684 GPT \u600e\u4e48\u628a KMP \u548c\u56de\u6587\u4e32\u7ed3\u5408\u8d77\u6765\u3002</p> <p>\u7ed9\u4e00\u4e2a\u5b57\u7b26\u4e32 \\(s\\) \uff0c\u5047\u8bbe\u5b83\u7684\u7ffb\u8f6c\u7684\u5b57\u7b26\u4e32\u662f \\(s'\\) \uff0c\u90a3\u4e48\u6211\u4eec\u6c42 $s+'?'+s' $ \u7684 border \u6570\u7ec4\uff0cborder\u6570\u7ec4\u7684\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u5b9e\u9645\u4e0a\u5c31\u662f\u6700\u957f\u56de\u6587\u524d\u7f00\u7684\u957f\u5ea6\u3002</p>"},{"location":"algorithm/string/KMP/#abc398f","title":"ABC398F","text":"<p>\u53ef\u4ee5\u8f6c\u6362\u6210\u6c42\u6700\u957f\u56de\u6587\u540e\u7f00\u7684\u95ee\u9898\uff0c\u8fd9\u4e00\u9898\u91cc Manacher \u5b9e\u73b0\u7684\u4e5f\u662f\u540c\u6837\u7684\u529f\u80fd\u5417?\u6ca1\u548b\u770b\u8fd9\u9898\u7684\u9898\u89e3\u3002\u3002\u4ee5\u540e\u770b Manacher \u7684\u65f6\u5019\u518d\u56de\u6765\u770b\u770b\u8fd9\u4e2a\u9898\u5427\u3002</p>"},{"location":"algorithm/string/KMP/#border-next","title":"border next","text":"<p>\u6211\u4e0d\u592a\u6e05\u695a\uff0c\u4ee5\u4e0b\u662f <code>ChatGPT</code> \u7684\u56de\u7b54\u3002\u6211\u4eec\u6570\u636e\u7ed3\u6784\u4e66\u6559\u7684\u5c31\u662f <code>next</code> \u6570\u7ec4\uff0c\u6211\u4e0a\u9762\u5199\u7684\u90fd\u662f <code>border</code> \u6570\u7ec4\u3002</p> <p><code>next</code> \u6570\u7ec4\u548c <code>border</code> \u6570\u7ec4\u5728\u5b57\u7b26\u4e32\u5339\u914d\u7b97\u6cd5\u4e2d\u662f\u76f8\u5173\u4f46\u4e0d\u5b8c\u5168\u76f8\u540c\u7684\u6982\u5ff5\uff0c\u5177\u4f53\u6765\u8bf4\uff0c\u5b83\u4eec\u5728 KMP\uff08Knuth-Morris-Pratt\uff09\u7b97\u6cd5 \u4e2d\u7684\u4f5c\u7528\u6709\u6240\u533a\u522b\u3002</p>"},{"location":"algorithm/string/KMP/#1-border","title":"1. border\u6570\u7ec4\uff08\u524d\u7f00\u51fd\u6570 \u03c0 \u6570\u7ec4\uff09","text":"<p>\u5728\u67d0\u4e9b\u8d44\u6599\u4e2d\uff0c<code>border</code> \u6570\u7ec4\u6307\u7684\u662f \u524d\u7f00\u51fd\u6570\uff0c\u901a\u5e38\u8bb0\u4f5c <code>\u03c0[i]</code>\uff0c\u8868\u793a\u5b57\u7b26\u4e32 <code>s[0...i]</code> \u7684\u6700\u957f\u7684\u76f8\u7b49\u771f\u524d\u540e\u7f00\u7684\u957f\u5ea6\u3002</p>"},{"location":"algorithm/string/KMP/#_3","title":"\u5b9a\u4e49\uff1a","text":"<p>\u4ee4 <code>\u03c0[i]</code> \u8868\u793a <code>s[0...i]</code> \u7684\u6700\u957f\u76f8\u7b49\u771f\u524d\u540e\u7f00\u7684\u957f\u5ea6\uff1a</p> <ul> <li>\"\u771f\u524d\u7f00\" \u6307\u7684\u662f <code>s[0...k-1]</code>\uff0c\u4e0d\u80fd\u5305\u542b\u6574\u4e2a <code>s[0...i]</code></li> <li>\"\u771f\u540e\u7f00\" \u6307\u7684\u662f <code>s[i-k+1...i]</code></li> </ul>"},{"location":"algorithm/string/KMP/#_4","title":"\u793a\u4f8b\uff1a","text":"<p>\u5bf9\u4e8e\u5b57\u7b26\u4e32 <code>s = \"ababab\"</code>\uff0c\u5176 <code>border</code> \u6570\u7ec4\uff08\u524d\u7f00\u51fd\u6570 <code>\u03c0</code>\uff09\u662f\uff1a</p> <pre><code>i    0  1  2  3  4  5\ns    a  b  a  b  a  b\n\u03c0[i] 0  0  1  2  3  4\n</code></pre> <p>\u4f8b\u5982\uff1a</p> <ul> <li><code>s[0...4] = \"ababa\"</code> \u7684\u6700\u957f\u76f8\u7b49\u771f\u524d\u540e\u7f00\u662f <code>\"aba\"</code>\uff0c\u957f\u5ea6\u4e3a 3\u3002</li> </ul> <p>\u8ba1\u7b97 <code>\u03c0[i]</code> \u65f6\uff0c\u901a\u5e38\u7528\u9012\u63a8\u516c\u5f0f\uff1a</p> <ul> <li>\u5982\u679c <code>s[i] == s[\u03c0[i\u22121]]</code>\uff0c\u90a3\u4e48 <code>\u03c0[i] = \u03c0[i\u22121] + 1</code></li> <li>\u5426\u5219\uff0c\u56de\u6eaf\u5230 <code>\u03c0[\u03c0[i\u22121]\u22121]</code>\uff0c\u76f4\u5230\u627e\u5230\u5339\u914d\u7684\u524d\u540e\u7f00\u6216\u56de\u6eaf\u81f3 0\u3002</li> </ul>"},{"location":"algorithm/string/KMP/#2-next","title":"2. next \u6570\u7ec4","text":"<p><code>next</code> \u6570\u7ec4\u5e38\u7528\u4e8e KMP \u7b97\u6cd5\uff0c\u5728\u4e0d\u540c\u7684\u6559\u6750\u4e2d\u5b9a\u4e49\u53ef\u80fd\u7565\u6709\u4e0d\u540c\uff1a</p> <ul> <li>\u4e00\u79cd\u5b9a\u4e49\uff1a<code>next[i] = \u03c0[i-1]</code>\uff08\u5373 <code>border</code> \u6570\u7ec4\u6574\u4f53\u53f3\u79fb\u4e00\u4f4d\uff09</li> <li>\u53e6\u4e00\u79cd\u5b9a\u4e49\uff08\u6539\u8fdb\u7248\uff09\uff1a<code>next[i]</code> \u8fdb\u4e00\u6b65\u4f18\u5316\uff0c\u4f7f\u5f97 <code>next[i]</code> \u76f4\u63a5\u8df3\u5230\u6b63\u786e\u7684\u4f4d\u7f6e\uff0c\u4e0d\u6d6a\u8d39\u591a\u4f59\u7684\u5339\u914d\u5c1d\u8bd5\u3002</li> </ul> <p>\u5728 KMP \u5339\u914d\u8fc7\u7a0b\u4e2d\uff0c<code>next</code> \u6570\u7ec4\u7528\u4e8e\u5728\u4e0d\u5339\u914d\u65f6\u5feb\u901f\u8df3\u8f6c\uff0c\u4f8b\u5982\uff1a</p> <ul> <li><code>s[i] != p[j]</code> \u65f6\uff0c\u76f4\u63a5\u8df3\u5230 <code>j = next[j]</code>\uff0c\u800c\u4e0d\u662f\u66b4\u529b\u56de\u6eaf\u3002</li> </ul>"},{"location":"algorithm/string/KMP/#_5","title":"\u793a\u4f8b\uff1a","text":"<p>\u5b57\u7b26\u4e32 <code>p = \"ababab\"</code>\uff0c\u5176 <code>next</code> \u6570\u7ec4\uff08\u53d6 <code>next[i] = \u03c0[i-1]</code>\uff09\uff1a</p> <pre><code>i      0  1  2  3  4  5\np      a  b  a  b  a  b\n\u03c0[i]   0  0  1  2  3  4\nnext[i] -1  0  0  1  2  3\n</code></pre> <p>\uff08<code>next[0]</code> \u901a\u5e38\u8bbe\u4e3a <code>-1</code> \u65b9\u4fbf\u5b9e\u73b0 KMP\uff09</p>"},{"location":"algorithm/string/KMP/#3","title":"3. \u4e3b\u8981\u533a\u522b","text":"\u6982\u5ff5 <code>border</code> \u6570\u7ec4\uff08\u524d\u7f00\u51fd\u6570 <code>\u03c0</code>\uff09 <code>next</code> \u6570\u7ec4\uff08\u90e8\u5206\u5339\u914d\u8868\uff09 \u5b9a\u4e49 <code>\u03c0[i]</code> \u662f <code>s[0...i]</code> \u7684\u6700\u957f\u76f8\u7b49\u771f\u524d\u540e\u7f00\u957f\u5ea6 <code>next[i] = \u03c0[i-1]</code> \u6216\u7ecf\u8fc7\u4f18\u5316 \u4f5c\u7528 \u4e3b\u8981\u7528\u4e8e\u5b57\u7b26\u4e32\u5206\u6790 \u7528\u4e8e KMP \u5931\u914d\u65f6\u7684\u8df3\u8f6c \u8ba1\u7b97\u516c\u5f0f <code>\u03c0[i] = \u03c0[i-1] + 1</code> \u6216\u56de\u6eaf \u53ef\u80fd\u7ecf\u8fc7\u4f18\u5316\u907f\u514d\u591a\u4f59\u5339\u914d \u5178\u578b\u503c <code>\u03c0[i] = {0, 0, 1, 2, ...}</code> <code>next[i] = {-1, 0, 0, 1, 2, ...}</code>"},{"location":"algorithm/string/KMP/#4","title":"4. \u603b\u7ed3","text":"<ol> <li><code>border</code> \u6570\u7ec4\uff08\u524d\u7f00\u51fd\u6570 <code>\u03c0</code>\uff09\u662f <code>s[0...i]</code> \u7684\u6700\u957f\u76f8\u7b49\u771f\u524d\u540e\u7f00\u957f\u5ea6\u3002</li> <li><code>next</code> \u6570\u7ec4\uff08\u90e8\u5206\u5339\u914d\u8868\uff09\u901a\u5e38\u662f <code>\u03c0</code> \u7684\u53d8\u4f53\uff0c\u7528\u4e8e KMP \u7b97\u6cd5\u52a0\u901f\u5931\u914d\u8df3\u8f6c\u3002</li> <li><code>next</code> \u6570\u7ec4\u53ef\u80fd\u7ecf\u8fc7\u4f18\u5316\uff0c\u907f\u514d\u4e00\u4e9b\u4e0d\u5fc5\u8981\u7684\u56de\u6eaf\uff0c\u4f7f KMP \u66f4\u9ad8\u6548\u3002</li> </ol> <p>\u6240\u4ee5\uff0c\u5b83\u4eec\u672c\u8d28\u4e0a\u76f8\u5173\uff0c\u4f46\u4e0d\u662f\u5b8c\u5168\u76f8\u540c\u7684\u4e1c\u897f\uff01</p>"},{"location":"algorithm/string/trie/","title":"Trie","text":"<p>\u4e5f\u662f\u53bb\u5e74\u770b\u8fc7\u7684\uff0c\u4f46\u4e4b\u540e\u57fa\u672c\u6ca1\u7528\u8fc7\uff0c\u524d\u4e24\u5929 Div. 3 \u7684 G \u9898\u8981\u7528\uff0c\u6b63\u597d\u518d\u770b\u770b\uff0c\u987a\u4fbf\u52a0\u5230\u535a\u5ba2\u91cc\u6765\u3002\ud83e\udd13\ud83e\udd13\ud83e\udd13</p>"},{"location":"algorithm/string/trie/#_1","title":"\u68c0\u7d22\u5b57\u7b26\u4e32","text":""},{"location":"algorithm/string/trie/#p2580","title":"\u6d1b\u8c37P2580","text":"<p>\u8fd9\u4e2a\u8fd8\u662f\u6bd4\u8f83\u57fa\u7840\u7684\uff0c\u5c5e\u4e8e\u662f\u6a21\u677f\u9898\u4e86\u3002</p> <pre><code>void ChatGptDeepSeek() // Date: 2025-04-10\n{                      // Time: 10:31:36\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;vector&lt;int&gt;&gt; trie(n * 51, vector&lt;int&gt;(26, 0));\n    vector&lt;bool&gt; word(n * 51), vis(n * 51);\n    int tot = 0;\n    auto Insert = [&amp;](string s)\n    {\n        int cur = 0;\n        for (auto x : s)\n        {\n            if (trie[cur][x - 'a'] == 0)\n                trie[cur][x - 'a'] = ++tot;\n            cur = trie[cur][x - 'a'];\n        }\n        word[cur] = true;\n    };\n    auto Find = [&amp;](string s)\n    {\n        int cur = 0;\n        for (auto x : s)\n        {\n            if (trie[cur][x - 'a'] == 0)\n            {\n                cout &lt;&lt; \"WRONG\\n\";\n                return;\n            }\n            cur = trie[cur][x - 'a'];\n        }\n        if (vis[cur])\n            cout &lt;&lt; \"REPEAT\\n\";\n        else if (word[cur])\n            cout &lt;&lt; \"OK\\n\", vis[cur] = true;\n        else\n            cout &lt;&lt; \"WRONG\\n\";\n    };\n    for (int i = 1; i &lt;= n; i++)\n    {\n        string x;\n        cin &gt;&gt; x;\n        Insert(x);\n    }\n    int m;\n    cin &gt;&gt; m;\n    while (m--)\n    {\n        string x;\n        cin &gt;&gt; x;\n        Find(x);\n    }\n}\n</code></pre>"},{"location":"algorithm/string/trie/#_2","title":"\u5f02\u6216\u6700\u5927\u503c","text":""},{"location":"algorithm/string/trie/#p4551","title":"\u6d1b\u8c37P4551","text":"<p>\u6811\u4e0a\u4e24\u70b9\u8def\u5f84\u7684\u5f02\u6216\u503c\uff0c\u7b49\u4e8e\u4e24\u4e2a\u70b9\u5230\u6839\u8282\u70b9\u7684\u5f02\u6216\u8def\u5f84\u503c\u5f02\u6216\u3002</p> <p>\u6240\u4ee5\u53ef\u4ee5\u7b49\u4ef7\u4e8e\u7ed9 \\(n\\) \u4e2a\u6570\uff0c\u627e\u51fa\u5f02\u6216\u503c\u6700\u5927\u7684\u4e24\u4e2a\u6570\u3002\u53ef\u4ee5\u7528 trie \u4ece\u9ad8\u4f4d\u5f80\u4f4e\u4f4d\u5b58\uff0c\u8d2a\u5fc3\u5730\u53bb\u53d6\u3002</p> <pre><code>void ChatGptDeepSeek() // Date: 2025-04-10\n{                      // Time: 19:30:23 \n    int n;\n    cin&gt;&gt;n;\n    vector&lt;vector&lt;pii&gt;&gt;adj(n+1,vector&lt;pii&gt;());\n    for(int i=1;i&lt;n;i++){\n        int u,v,w;\n        cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;\n        adj[u].push_back({v,w});\n        adj[v].push_back({u,w});\n    }\n    vector&lt;int&gt;s(n+1);\n    auto dfs=[&amp;](auto&amp;&amp; self,int u,int pre)-&gt;void{\n        for(auto [v,w]:adj[u]){\n            if(v==pre) continue;\n            s[v]=s[u]^w;\n            self(self,v,u);\n        }\n    };\n    dfs(dfs,1,0);\n    vector&lt;vi&gt;trie(n*31,vi(2));\n    int tot=0;\n    auto Insert=[&amp;](int Val){\n        int cur=0;\n        for(int i=30;i&gt;=0;i--){\n            int x=Val&gt;&gt;i&amp;1;\n            if(!trie[cur][x])\n                trie[cur][x]=++tot;\n            cur=trie[cur][x];\n        }\n    };\n    auto Find=[&amp;](int Val){\n        int cur=0,res=0;\n        for(int i=30;i&gt;=0;i--){\n            int x=Val&gt;&gt;i&amp;1;\n            if(trie[cur][x^1]){\n                res|=1&lt;&lt;i;\n                cur=trie[cur][x^1];\n            }else\n                cur=trie[cur][x];\n        }\n        return res;\n    };\n    for(int i=1;i&lt;=n;i++)\n        Insert(s[i]);\n    int ans=0;\n    for(int i=1;i&lt;=n;i++)\n        ans=max(ans,Find(s[i]));\n    cout&lt;&lt;ans&lt;&lt;'\\n';\n}\n</code></pre>"},{"location":"algorithm/string/trie/#cf2093g","title":"CF2093G","text":"<p>\u7528 trie \u627e\u662f\u5426\u6709\u4e24\u4e2a\u6570\u7684\u5f02\u6216\u503c\u5927\u4e8e\u7b49\u4e8e \\(x\\) \u3002</p> <p>\u53ea\u9700\u8981\u591a\u4e00\u70b9\u5c0f\u5c0f\u7684\u4e8c\u8fdb\u5236\u6280\u5de7\uff0c\u5c31\u53ef\u4ee5\u505a\u51fa\u6765\u4e86\uff0c\u4e0a\u6b21\u676d\u7535\u67d0\u4e2a\u4f4d\u8fd0\u7b97\u9898\u3002</p> <p>\u6bcf\u4e00\u4e2a  \\(trie_{cur,x}\\) \u7684\u503c\u90fd\u662f\u4e0d\u540c\u7684\uff0c\u53ef\u4ee5\u7528\u6765\u8bb0\u72b6\u6001\uff0c\u8fd9\u91cc\u662f\u7528\u6765\u8bb0\u4e0b\u6807\u6700\u5927\u7684\u8fd9\u4e00\u4f4d\u4e3a \\(1\\) \u7684\u6570\u5b57\u7684\u4e0b\u6807\u3002</p> <pre><code>void ChatGptDeepSeek() // Date: 2025-04-10\n{                      // Time: 20:26:45\n    int n, k;\n    cin &gt;&gt; n &gt;&gt; k;\n    vector&lt;vi&gt; trie(n * 31, vi(2));\n    vi p(n * 32);\n    int tot = 0, ans = n + 1;\n    auto Insert = [&amp;](int Val, int idx)\n    {\n        int cur = 0;\n        for (int i = 30; i &gt;= 0; i--)\n        {\n            int x = Val &gt;&gt; i &amp; 1;\n            if (trie[cur][x] == 0)\n                trie[cur][x] = ++tot;\n            cur = trie[cur][x];\n            p[cur] = idx;\n        }\n    };\n    auto Find = [&amp;](int Val)\n    {\n        int cur = 0, now = 0, L = -1;\n        for (int i = 30; i &gt;= 0; i--)\n        {\n            int x = Val &gt;&gt; i &amp; 1;\n            int y = k &gt;&gt; i &amp; 1;\n            if (y)\n            {\n                if (!trie[cur][x ^ 1])\n                    return L;\n                cur = trie[cur][x ^ 1];\n            }\n            else\n            {\n                if (trie[cur][x ^ 1])\n                    cmax(L, p[trie[cur][x ^ 1]]);\n                if (trie[cur][x] == 0)\n                    return L;\n                cur = trie[cur][x];\n            }\n        }\n        cmax(L,p[cur]);\n        return L;\n    };\n    for (int i = 1; i &lt;= n; i++)\n    {\n        int x;\n        cin &gt;&gt; x;\n        int L=Find(x);\n        if(L&gt;0) ans=min(ans,i-L+1);\n        Insert(x, i);\n    }\n    if (k == 0)\n        cout &lt;&lt; \"1\\n\";\n    else if (ans == n + 1)\n        cout &lt;&lt; \"-1\\n\";\n    else\n        cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/0313/","title":"\u6210\u957f\u8bb0\u5f55","text":"<p>\u521b\u5efa\u65e5\u671f: 2025-03-13</p> <p>\u8fd9\u91cc\u662f\u51c6\u5907\u8bb0\u5f55\u6211\u957f\u671f\u7684rating\u53d8\u5316\u4e4b\u7c7b\u7684\uff0c\u6211\u4e5f\u60f3\u77e5\u9053\u81ea\u5df1\u9700\u8981\u591a\u4e45\u624d\u80fd\u7a33\u5b9a\u84dd\u540d\uff0c\u591a\u4e45\u624d\u80fd\u8fbe\u5230 <code>Candidate Master</code> \uff0c\u53e6\u5916\u5f88\u7fa1\u6155\u90a3\u4e9b\u77e5\u4e4e\u91cc\u53d1\u8d85\u957f\u8bb0\u5f55\u7684\u56de\u7b54\u7684\u4eba\uff0c\u6211\u76f4\u63a5\u5199\u5f88\u591a\u7136\u540e\u4e4b\u540e\u76f4\u63a5\u53d1\uff0c\u563b\u563b\u3002</p> <p>\u73b0\u5728\u4e5f\u4e0d\u597d\u610f\u601d\u53d1\uff0c\u7b49\u6211\u7a0d\u5fae\u6709\u77f3\u7c92\u4e00\u70b9\u5427\u3002</p> <p>\u968f\u4fbf\u5199\u4e86\u70b9\u610f\u8bc6\u5230\u4e86\u53ef\u80fd\u6bcf\u6b21\u4f1a\u8bb0\u5f88\u591a\u5185\u5bb9... \u6ca1\u4e8b\uff0c\u8d8a\u591a\u8d8a\u597d\u3002\u5e0c\u671b\u81ea\u5df1\u53ef\u4ee5\u4e0d\u65ad\u5f97\u5230\u542f\u53d1\u5427\uff0c\u4e5f\u5e0c\u671b\u81ea\u5df1\u771f\u7684\u80fd\u8fdb\u6b65\uff0c\u8fd9\u6837\u672a\u6765\u8fd9\u7bc7\u5185\u5bb9\u5c06\u5e2e\u5230\u4e00\u4e9b\u8ff7\u832b\u7684\u9053\u53cb\u5427\u3002</p>"},{"location":"cp_solving/0313/#2025-03","title":"2025-03","text":""},{"location":"cp_solving/0313/#4-28","title":"4-28","text":"<p>\u6628\u65e5\u662f\u6b66\u6c49\u9080\u8bf7\u8d5b\u6b63\u5f0f\u8d5b\uff0c \u65e0\u5948\u62ff\u5230\u94c1\u724c\u7b2c\u4e00\u540d\uff0c \u5fc5\u987b\u52a0\u8bad\u3002 \u82b1\u7684\u65f6\u95f4\u8fdc\u8fdc\u4e0d\u591f\u3002</p> <p>\u8fd9\u4e24\u5929\u5b66\u4e86\u70b9\u57fa\u7840\u7684\u83ab\u961f\u7b97\u6cd5\uff0c \u9884\u8ba1\u63a5\u4e0b\u6765\u8981\u5b66\u4e60\u4e00\u4e9b\u57fa\u7840\u7684\u8ba1\u7b97\u51e0\u4f55 \u65cb\u8f6c\u5361\u58f3 \u51f8\u5305\u8fd9\u4e9b\uff0c \u6570\u8bba\u7684\u4e00\u4e9b\u57fa\u7840\u70b9\u7684\u5185\u5bb9\uff0c \u8fd8\u6709\u5565\u6765\u7740\uff1f \u770b\u5427\uff0c \u677f\u5237 CF \u9047\u5230\u5565\u5c31\u5b66\u70b9\u3002</p> <p>\u51c6\u5907\u6700\u8fd1\u5c31\u8981\u5236\u4f5c\u7b80\u5355\u7684\u8bb2\u89e3 CF \u9898\u76ee\u7684\u89c6\u9891\uff1f \u5c31\u7b97\u8bb2\u5f97\u53ef\u80fd\u4e0d\u592a\u597d\uff0c \u6216\u8bb8\u4e5f\u4f1a\u5e2e\u5230\u4e00\u4e9b\u4eba\u5427\uff0c \u8fd8\u80fd\u7763\u4fc3\u6211\u8865\u9898\u3002</p>"},{"location":"cp_solving/0313/#4-20","title":"4-20","text":"<p>\u53c8\u6389\u5206\uff0c\u65e0\u6240\u8c13\u3002\u54ce\u54ce\uff0c\u611f\u89c9\u6700\u8fd1\u6839\u672c\u5199\u9898\u592a\u5c11\u3002\u6389\u5c31\u52a0\u8bad\u3002</p> <p>\u4eca\u65e5\u8d77\u5148\u677f\u5237\u4e00\u4e9b *1900+ \u7684\u9898\u76ee\uff0c\u7136\u540e\u540c\u65f6\u5b66\u7b97\u6cd5\uff0c\u53bb\u6d1b\u8c37\u5199\u4e00\u4e9b\u677f\u9898\uff0c\u6700\u8fd1\u5b66\u4e86\u4e2a\u6811\u94fe\u5256\u5206\u3002</p>"},{"location":"cp_solving/0313/#3-31","title":"3-31","text":"<p>\u524d\u4e24\u5929\u7684\u573a\u53c8\u56de\u5230\u4e86 1734 \uff0c\u4f46\u662f\u5c31\u662f 3-24 \u7684\u540e\u9762\u4e00\u573a\uff0c\u54ce\u54ce\uff0cd2 E \u9898\u90fd\u4e0d\u592a\u597d\u8865\u611f\u89c9\u3002\u3002\u5927\u591a\u6570\u573a\u7684 ABCD \u53c8\u592a\u7b80\u5355\uff0c\u6216\u8005\u592a\u96be\u3002\u662f\u4e0d\u662f\u8fd8\u662f\u5f97\u677f\u5237\u56fa\u5b9a rating \u9898\u76ee\u6216\u8005\u8ddf\u7740\u7b97\u6cd5\u4e66\u5b66\u548c\u505a\u3002</p> <p>\u6700\u8fd1\u5e7b\u60f3\u6210\u4e3a OIer \uff0c \u54ce\u54ce\u597d\u597d\u5b66\u5427\u3002</p>"},{"location":"cp_solving/0313/#3-24","title":"3-24","text":"<p>\u524d\u5929\u4e0a\u4e8665\u5206\uff0c\u4f46\u662f\u6628\u5929\u7684\u9633\u95f4 div. 2 \u6389\u4e86\u5feb\u4e00\u767e\u5206\u3002\u3002\u3002\u751a\u81f3C\u6ca1\u5199\u51fa\u6765\u3002\u672c\u6765 max \u53d8\u6210\u4e86 1741 \u7136\u540e\u53c8\u6389\u56de 1647\u3002\u65e0\u6240\u8c13\u4e86\uff0c\u591a\u7ec3\u7ec3\u554a\uff0c\u8d81\u7740\u8fd8\u662f\u84dd\u8272\u540d\u5b57\uff08\uff09\u3002</p> <p>\u90a3\u4e2aC\u6839\u672c\u5f88\u7b80\u5355\u7684\uff0c\u4f46\u662f\u6211\u5c31\u662f\u4e0d\u60f3\u5199\uff0c\u4ec5\u4ec5\u662f\u56e0\u4e3a \"\u611f\u89c9\" \u5b83\u4e0d\u592a\u597d\u5199\uff0c\u4e5f\u6ca1\u600e\u4e48\u53bb\u601d\u8003\u3002\u8fd9\u662f\u6211\u8fd9\u4e2a\u9636\u6bb5\u7ecf\u5e38\u6709\u7684\u5fc3\u6001\u3002\u3002\u3002</p> <p>\u4e00\u5b9a\u8981\u6212\u6389\u8fd9\u4e2a\u574f\u4e60\u60ef\u554a\u3002\u7136\u540e\u8981\u575a\u6301\u591a\u5199\u9898\u7684\u3002\u6bcf\u5929\u575a\u6301 VP \u4e00\u573a div. 2\u3002\u770b\u5230\u4e0a\u6b21\u5199\u7684\u8bf4\u8981\u4e00\u5929VP\u4e00\u573a\uff0c\u5176\u5b9e\u8fd9\u4e9b\u5929\u597d\u50cf\u5c31 VP \u4e86\u4e00\u6b21\uff0c\u800c\u4e14\u5b8c\u6210\u8d28\u91cf\u8fd8\u5f88\u4f4e\u3002\u3002\u3002</p>"},{"location":"cp_solving/0313/#_2","title":"\u8fd1\u671f\u76ee\u6807","text":"<p>\u90a3\u5c31\u4ece\u4eca\u5929\u5f00\u59cb\u5427\uff0c\u4e00\u5929 VP \u4e00\u573a div. 2\uff0c\u5982\u679c\u5f53\u5929\u65e0\u6bd4\u8d5b\u5c31\u518d\u8865\u4e00\u573a ABC \u3002ABC\u7684\u9752\u8272\u9898\u771f\u7684\u4e5f\u5f97\u597d\u597d\u8865\u8865\uff0c\u8fd8\u6709\u6709\u7684\u7eff\u8272\u751a\u81f3\u5199\u8d77\u6765\u4e5f\u5f88\u8d39\u529f\u592b\uff0c\u9752\u8272\u57fa\u672c\u6ca1\u6cd5\u5199\u3002\u3002\u3002</p>"},{"location":"cp_solving/0313/#_3","title":"\u611f\u89c9\u6700\u8fd1\u72b6\u6001\u597d\u5dee","text":"<p>\u5c31\u662f\u611f\u89c9\u5199\u9898\u89e3\u5199\u4e0d\u8fdb\u53bb\uff0c\u5199\u9898\u4e5f\u4e0d\u60f3\u5199\uff0c\u6bd4\u8d5b\u65f6\u601d\u7ef4\u4e5f\u4e0d\u591f\u6d3b\u8dc3\uff0c\u4e5f\u4e0d\u591f\u79ef\u6781\uff0c\u770b\u5230\u4e0d\u60f3\u5199\u7684\u9898\u5c31\u4e0d\u60f3\u601d\u8003\u6216\u6548\u7387\u5f88\u4f4e\u3002</p> <p>\u9898\u5199\u5f97\u4e5f\u662f\u975e\u5e38\u975e\u5e38\u5c11\u3002\u5c31\u8fd9\u4f1a\uff0c\u5468\u672b\u73a9\u4e86\u4e24\u5929\uff0c\u73b0\u5728\u51cc\u6668\u4e24\u70b9\uff0c\u5199\u535a\u5ba2\u5012\u662f\u611f\u89c9\u633a\u723d\u7684\u3002\u3002\u3002\u540e\u9762\u4e5f\u5c3d\u91cf\u4e0d\u8981\u592a\u665a\u4f11\u606f\u5427\u3002</p>"},{"location":"cp_solving/0313/#when-candidate-master","title":"When <code>Candidate Master</code> ?","text":"<p>\u611f\u89c9\u4e0d\u90a3\u4e48\u61d2\u7684\u8bdd\uff0c\u8fd9\u5b66\u671f\u7edd\u5bf9\u5e94\u8be5\u4e0a\u7d2b\u540d\u3002\u3002\u52a0\u6cb9\uff0c\u8fbe\u5230\u90a3\u4e2a\u9ad8\u624b\u7684\u5883\u754c\u3002\u6211\u611f\u89c9\u6211\u73b0\u5728\u5f88\u7f3a\u4e4f\u7684\u5c31\u662f\u8010\u5fc3\uff0c\u5373\u4f7f\u9047\u5230\u5f88\u4e45\u6ca1\u6709\u601d\u8def\u7684\u9898\u76ee\uff0c\u4e5f\u8be5\u8010\u5fc3\u53bb\u601d\u8003\uff0c\u800c\u4e0d\u662f\u89c9\u5f97\u9ebb\u70e6\u5c31\u4e0d\u5199\u4e86\u88c5\u4f5c\u601d\u8003\u5b9e\u9645\u7ea6\u7b49\u4e8e\u53d1\u5446\u3002</p> <p>\u6211\u9700\u8981\u53bb\u8865\u9898\uff0c\u53bb\u8010\u5fc3\u5730\u6bcf\u65e5\u66f4\u65b0\u535a\u5ba2\uff0c\u8fd9\u4e9b\u4e8b\u60c5\u5e94\u8be5\u8ba9\u6211\u611f\u5230\u5f00\u5fc3\u800c\u4e0d\u662f\u53ea\u6709\u75b2\u60eb\u3002</p> <p>\u5bf9\u4e8e\u5199\u9898\uff0c\u76ee\u524d 1600-1800 \u7684\u9898\uff0c\u6211\u5f88\u591a\u90fd\u4e0d\u592a\u80fd\u60f3\u51fa\u6765\u5427\uff0c\u66f4\u522b\u9898\u5982\u679c\u60f3\u4e0a\u7d2b\uff0c\u5e94\u8be5\u5076\u5c14\u80fd\u5199\u51fa 2100+ \u7684\u9898\u76ee\u5427\uff0c\u800c\u4e14\u624b\u901f\u4e5f\u9700\u8981\u5f88\u5feb\u3002</p> <p>\u6211\u9700\u8981\u66f4\u591a\u5730\u6709\u6548\u7684\u53bb\u601d\u8003\u3002\u79ef\u6512\u4e00\u4e9b\u7ecf\u9a8c\uff0c\u6bd4\u5982\u8bf4\u5f88\u591a\u9898\u521a\u5f00\u59cb\u6ca1\u6709\u601d\u8def\u53ef\u80fd\uff0c\u4f46\u662f\u6211\u8981\u901a\u8fc7\u7ecf\u5386\u5f97\u66f4\u591a\uff0c\u53bb\u4f53\u4f1a\u90a3\u79cd\u4ece\u6ca1\u6709\u601d\u8def\u5230\u6709\u601d\u8def\u7684\u8fc7\u7a0b\uff0c\u8fdb\u884c\u66f4\u9ad8\u6548\u7684\u601d\u8003\u3002</p>"},{"location":"cp_solving/0313/#3-13","title":"3-13","text":"<p>\u4eca\u5929\u51b3\u5b9a\u5f00\u59cb\u5199\u8fd9\u7bc7\u8bb0\u5f55\uff0c\u8bb0\u5f55\u81ea\u5df1\u4f55\u65f6\u624d\u80fd\u7a33\u5b9a\u84dd\u540d\u5427\u3002\u4e0a\u573a div. 3 \u521a\u91cd\u65b0\u4e0a\u84dd\u4e86\uff0c\u76ee\u524d\u662f\u4e0a\u8fc7\u56db\u6b21\u84dd\u4e86\uff0c\u4f46\u662f\u4e4b\u524d\u6bcf\u6b21\u90fd\u662f\u4e0b\u4e00\u573a\u5c31\u6389\u5206\u3002</p> <p>\u5e0c\u671b\u80fd\u8d76\u7d27\u7a33\u5b9a\u4e00\u4e0b\u5427\uff0c\u4e5f\u597d\u597d\u4eab\u53d7\u4e00\u4e0b\u4e0a\u5206\u53ef\u80fd\u5e26\u6765\u7684\u5feb\u4e50\u3002</p> <p>\u6700\u8fd1\u90fd\u662f\u4e00\u76f4\u5728\u6389\u5206\u7684\uff0c\u5c31\u8fd9\u4e00\u573a\u7a0d\u5fae\u723d\u4e86\u4e00\u70b9\uff0c\u7ee7\u7eed\u52a0\u6cb9\u5427\uff0c\u6211\u76f8\u4fe1\u6211\u79bb\u5f97\u4e5f\u4e0d\u8fdc\u4e86\u3002\u53c8\u5728\u77e5\u4e4e\u5237\u5230\u4e86\u90a3\u4e2a\u4e24\u4e09\u4e2a\u6708\u9752\u5230\u7d2b\u7684\u54e5\uff0c\u4ed6\u8bf4\u81ea\u5df1\u6bcf\u5929VP\u4e00\u573aCF\uff0c\u5e76\u4e14\u82b1\u5f88\u591a\u65f6\u95f4\uff0c\u4fdd\u6301\u9ad8\u901f\u5ea6\uff0c\u8865\u51fa\u8be5\u8865\u7684\u9898\u76ee\u3002</p> <p>\u6211\u5e0c\u671b\u6211\u53ef\u4ee5\u590d\u523b\u4ed6\u7684\u8fdb\u6b65\u3002\u6211\u4e0d\u60f3\u4e00\u76f4\u5446\u5728\u8fd9\u4e2a\u5206\u6bb5\u4e0a\u4e0d\u53bb\u4e0b\u4e0d\u6765\u4e86\u3002</p>"},{"location":"cp_solving/1/","title":"_1","text":""},{"location":"cp_solving/1/#2025","title":"2025\u5e74","text":"<p>2\u67088\u65e5</p>"},{"location":"cp_solving/1/#4c","title":"\u725b\u5ba2\u5bd2\u50474C","text":"<p>\u8fd9\u662f\u600e\u4e48\u60f3\u5230\u7684... \u4e3a\u4ec0\u4e48\u6211\u60f3\u4e0d\u5230\u5462\u3002\u3002\u3002</p> <p>\u6211\u90fd\u6ca1\u6709\u60f3\u5230\u8fc7\u5982\u679c\u5b57\u7b26\u4e32\u7684\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u76f8\u540c\uff0c\u90a3\u4e48 <code>01</code> \u548c <code>10</code> \u7684\u6570\u91cf\u4e00\u5b9a\u76f8\u540c\u3002\u3002\u3002</p> <p>\u8fd9\u4e2a\u600e\u4e48\u60f3\u5230\u5462\uff1f\uff1f\uff1f</p> <p><code>101010</code> \u50cf\u8fd9\u6837\u7684\uff0c\u5176\u5b9e <code>01</code> \u548c <code>10</code> \u7684\u6570\u91cf\u5c31\u4f1a\u4e0d\u4e00\u6837\uff0c\u90a3\u4e48\u6700\u540e\u52a0\u4e00\u4e2a <code>1</code> \u5c31\u80fd\u6570\u91cf\u4e00\u6837\u4e86\uff0c\u662f\u53ef\u4ee5\u53d1\u73b0\u662f\u5934\u5c3e\u662f\u5426\u76f8\u540c\u624d\u4f1a\u5f71\u54cd\uff0c\u4e2d\u95f4\u7684\u5b57\u7b26\u662f\u4ec0\u4e48\u90fd\u662f\u65e0\u6240\u8c13\u7684\u3002</p> <p>\u6240\u4ee5\u5982\u679c\u7b2c\u4e00\u4e2a\u5b57\u7b26\u548c\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u76f8\u540c\uff0c\u90a3\u4e48\u4e2d\u95f4\u7684\u6bcf\u4e00\u4e2a\u5b57\u7b26\u53cd\u8f6c\u8fc7\u6765\u90fd\u662f\u4e0d\u5f71\u54cd\u7ed3\u679c\u7684\u3002\u597d\u5427\u3002\u3002\u3002</p>"},{"location":"cp_solving/1/#4d","title":"\u725b\u5ba2\u5bd2\u50474D","text":"<p>\u8001\u5b9e\u8bf4\u6211\u771f\u6709\u70b9\u8fd8\u662f\u6ca1\u770b\u61c2\u9898\u89e3\u3002\u3002\u3002</p> <p>\u6211\u4eec\u4f1a\u5148\u62ff\u4e24\u4e2a\u5b57\u7b26\u4e32\u76f4\u63a5\u5339\u914d\uff0c\u7136\u540e\u770b\u77ed\u7684\u8fd9\u4e2a\uff0c\u6211\u4eec\u9700\u8981\u591a\u5c11\u6b21\u3002\u8fd9\u4e2a\u6570\u91cf\u8bb0\u4e3a <code>sum</code> \uff0c\u7136\u540e\u4e4b\u540e\u957f\u7684\u4f1a\u591a\u51fa\u4e00\u6bb5\u6765\u3002</p> <p>\u8fd9\u4e00\u6bb5\u53ef\u4ee5\u4e24\u4e24\u4e4b\u95f4\u8fdb\u884c\u5339\u914d\uff0c\u5269\u5355\u4e2a\u5c31\u5f97\u989d\u5916\u82b1\u4e00\u6b21\u673a\u4f1a\uff0c\u8fd9\u4e2a\u6570\u91cf\u8bb0\u4e3a <code>ans</code> \u3002</p> <p>\u5982\u679c <code>ans</code> \\(\\le\\) <code>sum</code> \u90a3\u4e48\u53ef\u4ee5\u8c03\u6574\u4f4d\u7f6e\u4f7f\u5f97\u8fd9\u4e9b\u8981\u6539\u7684\u5730\u65b9\uff0c\u53ef\u4ee5\u4e00\u8d77\u6539\uff0c\u6240\u4ee5\u9700\u8981\u64cd\u4f5c\u7684\u6b21\u6570\u53ef\u4ee5\u53d8\u6210 <code>ans</code> \u6b21\u3002\u5426\u5219\u5c31\u662f \\(ans+\\frac{\\lfloor sum-ans \\rfloor}{2}\\) \u3002\u3002\u3002</p> <p>\u4e5f\u662f\u5dee\u4e0d\u591a\u7406\u89e3\u4e86\u3002\u3002\u3002</p> <p>2\u670816\u65e5</p> <p></p>"},{"location":"cp_solving/1/#cf1041c","title":"CF1041C","text":"<p>\u786e\u5b9e\u6c34\u9898\uff0c\u56e0\u4e3a\u6bcf\u4e00\u5929\u90fd\u662f\u76f8\u5bf9\u72ec\u7acb\u7684\uff0c\u6240\u4ee5\u76f4\u63a5\u8d2a\u5fc3\u5c31\u884c\u4e86\u3002</p> <pre><code>void solve()\n{\n    int n,m,d;\n    cin&gt;&gt;n&gt;&gt;m&gt;&gt;d;\n    d++;\n    vector&lt;pii&gt;a(n+1);\n    for(int i=1;i&lt;=n;i++){\n        cin&gt;&gt;a[i].fi;\n        a[i].se=i;\n    }\n    sort(ALL(a));\n    dbg(a);\n    set&lt;pii&gt;st;\n    st.insert({a[1].fi,a[1].se});\n    vi ans(n+1);\n    ans[a[1].se]=1;\n    int tot=1;\n    for(int i=2;i&lt;=n;i++){\n        dbg(st);\n        if(st.begin()-&gt;fi&gt;a[i].fi-d){\n            ans[a[i].se]=++tot;\n            st.insert({a[i].fi,a[i].se});\n        }else{\n            // auto [x,y]=*st.lower_bound({a[i].fi-d,0});\n            //\u54e6\u54e6\u662f\u8fd9\u91cc \u4e0a\u4e00\u884c\u5199\u9519\u4e86 \u56e0\u4e3a\u54b1\u4eec\u8fd9\u91cc\u662f\u9700\u8981\u627e\u7b2c\u4e00\u4e2a\u6bd4a[i].fi-d\u5c0f\u7684\u6570\u5b57\u3002\u3002\u3002\n\n            auto [x,y]=*prev(st.upper_bound({a[i].fi-d+1,0}));\n            //\u6ce8\u610f\u8fd9\u91cc\u5f97\u6539\u6210a[i].fi-d+1\u3002\u3002\u3002 \u591a\u6ce8\u610f\uff0c\u4e0d\u7136\u771f\u7684\u4e0d\u597d\u627e\u51fa\u6765\u5982\u679c\u770b\u4e0d\u4e86\u6837\u4f8b\n            ans[a[i].se]=ans[y];\n            st.erase({x,y});\n            st.insert({a[i].fi,a[i].se});\n        }\n    }\n    cout&lt;&lt;tot&lt;&lt;'\\n';\n    for(int i=1;i&lt;=n;i++)\n        cout&lt;&lt;ans[i]&lt;&lt;\" \\n\"[i==n];\n}\n</code></pre>"},{"location":"cp_solving/1/#cf698b","title":"CF698B","text":"<p>\u751a\u81f3\u662f\u4e00\u4e2a\u6d1b\u8c37\u84dd\u9898\uff0c\u4f46\u662fcf *1700\u3002</p> <p>\u4f46\u662f\u8fd9\u9898\u7ea6\u7b49\u4e8e\u6284\u7684\u9898\u89e3\u3002</p> <pre><code>void solve()\n{\n    int n;\n    cin&gt;&gt;n;\n\n    vi p(n+1);\n    int root=0;\n    for(int i=1;i&lt;=n;i++)\n        cin&gt;&gt;p[i];\n    for(int i=1;i&lt;=n;i++){\n        if(i==p[i]){\n            root=i;\n            break;\n        }\n    }\n    vi q(p);\n    vector&lt;int&gt;vis(n+1);\n    int tot=0;\n    auto dfs=[&amp;](auto &amp;&amp;self,int u){\n        if(vis[u]) return;\n        vis[u]=tot;\n        if(q[u]==u){\n            if(root){\n                q[u]=root;\n            }else{\n                root=u;\n            }\n            return;\n        }\n        if(vis[q[u]]){\n            if(vis[q[u]]==tot){\n                //\u6210\u73af\u4e86\n                if(root){\n                    q[u]=root;\n                }else{\n                    root=u;\n                    q[u]=u;\n                }\n                return;\n            }\n        }\n        self(self,q[u]);\n    };\n    for(int i=1;i&lt;=n;i++){\n        ++tot;\n        dfs(dfs,i);\n    }\n    int ans=0;\n    for(int i=1;i&lt;=n;i++){\n        ans+=q[i]!=p[i];\n    }\n    cout&lt;&lt;ans&lt;&lt;'\\n';\n    for(int i=1;i&lt;=n;i++)\n        cout&lt;&lt;q[i]&lt;&lt;\" \\n\"[i==n];\n}\n</code></pre> <p>\u5c31\u662f\u76f4\u63a5DFS\uff0c\u5982\u679c\u8d70\u5230\u73af\u4e86\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u628a\u73af\u4e0a\u4e00\u70b9\u62c6\u5f00\uff0c\u6709\u6839\u8282\u70b9\u5c31\u8fde\u6839\uff0c\u6ca1\u6709\u5c31\u9009\u4e00\u4e2a\u6839\u8282\u70b9\u3002\u5982\u679c\u6709\u4e00\u4e2a\u5b83\u672c\u6765\u5c31\u662f\u7236\u8282\u70b9\u4e3a\u81ea\u8eab\uff0c\u90a3\u4e48\u8981\u4e48\u8ba9\u5b83\u505a\u6839\u8282\u70b9\uff0c\u8981\u4e48\u8ba9\u5b83\u8fde\u5230\u8ddf\u6839\u8282\u70b9\u3002\u6700\u540e\u7edf\u8ba1\u4fee\u6539\u6b21\u6570\u548c\u8f93\u51fa\u65b9\u6848\u4e5f\u662f\u975e\u5e38\u7684\u65b9\u4fbf\u3002</p> <p>\u4f46\u662f\u4e3a\u4ec0\u4e48vis\u8981\u5f04\u6210int\u578b\uff0c\u4e14\u8981\u6bcf\u6b21dfs\u90fd\u4e0d\u4e00\u6837\u7684\u503c\u5462\u3002\u56e0\u4e3a\u8fd9\u662f\u5355\u5411\u8fb9\uff0c\u53ef\u80fd\u662f\u5176\u4ed6\u65b9\u5f0f\u8bbf\u95ee\u8fc7\u7684\u70b9\u3002</p> <p>2\u670817\u65e5</p>"},{"location":"cp_solving/1/#cf691d","title":"CF691D","text":"<p>\u4ec0\u4e48\u6c34\u9898\uff0c\u76f4\u63a5DFS\u5c31\u8fc7\u4e86\u3002\u3002\u3002</p>"},{"location":"cp_solving/1/#cf1721d","title":"CF1721D","text":"<p>\u6700\u70e7\u8111\u7684\u4e00\u96c6\u3002\u3002\u3002</p> <p>\u6211\u4eec\u662f\u6bd4\u8f83\u5bb9\u6613\u5224\u65ad\u6700\u9ad8\u4f4d\u80fd\u4e0d\u80fd\u53d6\u52301\u7684\uff0c\u53ea\u9700\u8981 \\(c\\) \u6570\u7ec4\u5168\u4e3a 1 \uff0c\u5373  \\(a\\) \u548c \\(b\\) \u79cd\u8fd9\u4e00\u4f4d\u7684 1 \u7684\u4e2a\u6570\u521a\u597d\u4e3a n \u3002\u4f46\u662f\u540e\u9762\u7684\u4f4d\u5374\u4e0d\u80fd\u8fd9\u6837\uff0c\u56e0\u4e3a\u4f60\u53ef\u80fd\u4e3a\u4e86\u4f7f\u4e0b\u4e00\u4f4d\u4e3a1\u800c\u4f7f\u5f97\u9ad8\u4f4d\u7684\u53ef\u4ee5\u5f97\u5230\u76841\u53d8\u62100\u3002</p> <p>\u5047\u8bbe\u5f53\u524d\u7684\u7b54\u6848\u662f ans \uff0c\u90a3\u4e48\u5982\u679c\u65b0\u7684\u4e00\u4f4d\u8981\u9009 1 \uff0c\u90a3\u4e48 </p> <p>$(a_i \\&amp;  x ) \\oplus (b_i \\&amp; x)=x $ .</p> <p>\u8fd9\u6837\u4e0d\u4f1a\u5f71\u54cd\u524d\u9762\u7684\u4f4d\u4e86\uff0c\u975e\u5e38\u5de7\u5999\u7684\u4e00\u4e2a\u4f4d\u8fd0\u7b97\u9898\u554a\u3002</p> <pre><code>void solve()\n{\n    int n;\n    cin&gt;&gt;n;\n    vi a(n+1),b(n+1);\n    for(int i=1;i&lt;=n;i++){\n        cin&gt;&gt;a[i];\n    }\n    for(int i=1;i&lt;=n;i++){\n        cin&gt;&gt;b[i];\n    }\n    // (ai&amp;x)^(bi&amp;x)=x\n    int ans=0;\n    auto check=[&amp;](int x){\n        vi v1,v2;\n        for(int i=1;i&lt;=n;i++)\n            v1.push_back(a[i]&amp;x);\n        for(int i=1;i&lt;=n;i++)\n            v2.push_back(b[i]&amp;x^x);\n        sort(all(v1));\n        sort(all(v2));\n        return v1==v2;\n    };\n    for(int i=29;i&gt;=0;i--){\n        if(check(ans|(1&lt;&lt;i)))\n            ans|=(1&lt;&lt;i);\n    }\n    cout&lt;&lt;ans&lt;&lt;'\\n';\n}\n</code></pre> <p>\u8fd8\u662f\u4e00\u4e2a1800\u7684\u9898\u554a\uff0c\u4e0b\u6b21\u9047\u5230\u8fd9\u79cd\uff0c\u8fd8\u662f\u5f88\u96be\u5199\u51fa\u6765\uff0c\u4f46\u662f\u65e0\u6240\u8c13\uff0c\u6211\u519950\u4e2a\u519980\u4e2a\u3002</p>"},{"location":"cp_solving/1/#cf1281b","title":"CF1281B","text":"<p>\u4e0d\u77e5\u9053\u5bf9\u4e86\u6ca1\uff0c\u5076\u9047 <code>queueforces</code> \uff0c\u62fc\u5c3d\u5168\u529b\u65e0\u6cd5\u6218\u80dc\u3002</p> <p>\u4f46\u662f\u770b\u7740\u611f\u89c9\u5e94\u8be5\u4e0d\u96be\u3002\u3002\u3002</p> <p>WA\u4e86\u51e0\u6b21\uff0c\u4f46\u662f\u8fd9\u592a\u7b80\u5355\u5427\u3002</p> <pre><code>void solve()\n{\n    string s,c;\n    cin&gt;&gt;s&gt;&gt;c;\n    int n=sz(s);\n    vi f(26);\n    for(int i=0;i&lt;n;i++)\n        f[s[i]-'A']=i;\n    if(s&lt;c){\n        cout&lt;&lt;s&lt;&lt;'\\n';\n        return;\n    }\n    vi suf(n);\n    suf[n-1]=s[n-1]-'A';\n    for(int i=n-2;i&gt;=0;i--){\n        suf[i]=min(suf[i+1],s[i]-'A');\n    }\n    //\u8bb0\u5f55\u540e\u7f00\u7684\u6700\u5c0f\u5b57\u6bcd\n    //\u5426\u5219s\u4e00\u5b9a\u6709\u4e00\u4e2a\u5b57\u6bcd\u6bd4c\u5927\u7684\uff0c\u6216\u8005\u957f\u5ea6\u66f4\u957f\n    for(int i=0;i&lt;min(sz(s),sz(c));i++){\n        if(s[i]&gt;c[i]){\n            char ch=*min_element(s.begin()+i,s.end());\n            swap(s[i],s[f[ch-'A']]);\n            // cerr&lt;&lt;ch&lt;&lt;\" \"&lt;&lt;f[ch-'a']&lt;&lt;'\\n';\n            if(s&lt;c)\n                cout&lt;&lt;s&lt;&lt;'\\n';\n            else\n                cout&lt;&lt;\"---\\n\";\n            return;\n        }else{\n            //\u7b49\u4e8e\u7684\u60c5\u51b5\u4e5f\u53ef\u4ee5\u4ea4\u6362\n            if(suf[i]&lt;s[i]-'A'){\n                // cerr&lt;&lt;i&lt;&lt;\" \"&lt;&lt;suf[i]&lt;&lt;\" \"&lt;&lt;s[i]&lt;&lt;'\\n';\n                swap(s[i],s[f[suf[i]]]);\n                cout&lt;&lt;s&lt;&lt;'\\n';\n                return;\n            }\n        }\n    }\n    cout&lt;&lt;\"---\\n\";\n}\n</code></pre> <p>\u8ba8\u8bba\u4e00\u4e0b\u5c31\u884c\uff0c\u8fd9\u4e5f\u80fd\u67091600\u3002</p>"},{"location":"cp_solving/1/#p3371","title":"\u6d1b\u8c37P3371","text":"<p>\u56e0\u4e3aCF\u521a\u624d\u5728queue\uff0c\u4e8e\u662f\u968f\u624b\u6253\u4e2adijkstra\uff0c10\u5206\u949f\u3002</p> <p>\u4f46\u662f\u5c31\u7a81\u7136\u53d1\u73b0\u6211\u597d\u50cf\u771f\u5fd8\u8bb0\u4e86\u600e\u4e48\u5b9a\u4e49greater&lt;&gt;\u7684\u4f18\u5148\u961f\u5217\u4e86\u3002\u3002\u3002</p> <pre><code>void solve()\n{\n    int n,m,s;\n    cin&gt;&gt;n&gt;&gt;m&gt;&gt;s;\n    vector&lt;vector&lt;pii&gt;&gt;adj(n+1,vector&lt;pii&gt;());\n    for(int i=1;i&lt;=m;i++){\n        int u,v,w;\n        cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;\n        adj[u].push_back({v,w});\n    }\n    vector&lt;int&gt;dis(n+1,(1LL&lt;&lt;31)-1);\n    dis[s]=0;\n    auto dij=[&amp;](){\n        priority_queue&lt;pii&gt;pq;\n        pq.push({0,s});\n        while(!pq.empty()){\n            auto [dist,u]=pq.top();\n            // cerr&lt;&lt;dist&lt;&lt;\" \"&lt;&lt;u&lt;&lt;'\\n';\n            dist=-dist;\n            pq.pop();\n            if(dist&gt;dis[u]) continue;\n            for(auto [v,w]:adj[u]){\n                if(dis[u]+w&lt;dis[v]){\n                    dis[v]=dis[u]+w;\n                    pq.push({-dis[v],v});\n                }\n            }\n        }\n    };\n    dij();\n    for(int i=1;i&lt;=n;i++)\n        cout&lt;&lt;dis[i]&lt;&lt;\" \\n\"[i==n];\n}\n</code></pre>"},{"location":"cp_solving/1/#cf1619f","title":"CF1619F","text":"<p>\u611f\u89c9\u597d\u96be\u7684\u6765\u7740\u3002\u3002\u3002</p> <p>\u4e0d\u662f\uff0c\u770b\u9898\u89e3\u4e4b\u540e\u600e\u4e48\u8fd9\u4e48\u7b80\u5355\u3002\u3002\u3002</p> <p>\u56e0\u4e3a \\(nk \\le 2\\cdot 10^5\\) \uff0c\u6240\u4ee5\u76f4\u63a5\u66b4\u529b\u5c31\u884c\u4e86\uff0c\u7528\u4e00\u4e2a\u4f18\u5148\u961f\u5217\u6765\u5b58\u5f53\u524d\u7684\u72b6\u6001\uff0c\\(b_i\\) \u5927\u7684\u5750\u5c0f\u684c\u5b50\uff0c\\(b_i\\) \u5c0f\u7684\u5750\u5927\u684c\u5b50\u3002\u3002\u3002\u6ca1\u60f3\u5230\u5b9e\u73b0\u8fd9\u4e48\u7b80\u5355\u3002</p> <pre><code>void solve()\n{\n    int n, m, k;\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;\n    vi b(n + 1);\n    for (int i = 1; i &lt;= k; i++) {\n        priority_queue&lt;pii&gt; pq;\n        for (int j = 1; j &lt;= n; j++)\n            pq.push({ b[j], j });\n        for (int j = 1; j &lt;= m - (n % m); j++) {\n            cout &lt;&lt; n / m &lt;&lt; \" \";\n            for (int l = 1; l &lt;= n / m; l++) {\n                // assert(!pq.empty());\n                auto x = pq.top().se;\n                pq.pop();\n                cout &lt;&lt; x &lt;&lt; \" \";\n            }\n            cout &lt;&lt; '\\n';\n        }\n        for (int j = 1; j &lt;= n % m; j++) {\n            cout &lt;&lt; n / m + 1 &lt;&lt; \" \";\n            for (int l = 1; l &lt;= n / m + 1; l++) {\n                // assert(!pq.empty());\n\n                auto x = pq.top().se;\n                pq.pop();\n                cout &lt;&lt; x &lt;&lt; \" \";\n                b[x]++;\n            }\n            cout &lt;&lt; '\\n';\n        }\n    }\n    cout &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/2/","title":"1600-1800 day1-day4","text":"<p>\u56e0\u4e3a\u611f\u89c9\u591a\u5199\u4e00\u70b9\u5bf9\u81ea\u5df1\u6709\u4e00\u70b9\u70b9\u96be\u5ea6\u7684\u9898\uff0c\u4f1a\u5e2e\u52a9\u5f88\u5927\u3002\u6240\u4ee5\u51b3\u5b9a\u8bd5\u4e00\u4e0b\u3002\u6bd4\u5982\u6bcf\u5929\u51993\u9053cf rating\u5728*1600-*1800\u7684\u9898\u76ee\uff0c\u770b\u770b\u4e00\u6bb5\u65f6\u95f4\u4e4b\u540e\u80fd\u4e0d\u80fd\u7a33\u5b9a\u84dd\u540d\u6c34\u5e73\u4e0d\u8981\u6389\u5230\u9752\u3002\u3002\u3002</p> <p>\u7136\u540e\u6709\u65f6\u5019\u53ef\u80fd\u4e5f\u4f1a\u5199\u6d1b\u8c37\u7684\u7eff\u8272\u96be\u5ea6\u7684\u9898\uff0c\u5927\u81f4\u4e5f\u662f\u6700\u4f4ecf *1600\u7684\u9898\u3002\u8bf4\u767d\u4e86\u5176\u5b9e\u5927\u90e8\u5206\u90fd\u662f\u770b\u9898\u89e3\u7684\uff0c\u751a\u81f3\u53ef\u80fd\u770b\u9898\u6ca1\u770b\u4e00\u4f1a\u5c31\u770b\u9898\u89e3\u3002\u53ea\u80fd\u8bf4\u6211\u8bd5\u4e00\u4e0b\u5427\uff0c\u4e5f\u8bb8\u662f\u9a97\u81ea\u5df1\uff0c\u4e5f\u8bb8\u662f\u6709\u5e2e\u52a9\uff0c\u603b\u6bd4\u4ec0\u4e48\u90fd\u4e0d\u505a\u597d\u3002</p>"},{"location":"cp_solving/2/#day1-219","title":"day1 2\u670819\u65e5","text":""},{"location":"cp_solving/2/#cf2022c-1800","title":"CF2022C *1800","text":"<p>\u8fd9\u4e2a DP \u592a\u725b\u3002\u3002\u3002</p> <p>\u6bcf\u6b21\u5206\u5272\u5b8c\u533a\u57df\u4e4b\u540e\uff0c\u672b\u5c3e\u53ea\u6709\u51e0\u79cd\u72b6\u6001:</p> <pre><code>XX   X.   XX\nX.   XX   XX \n</code></pre> <p>X\u8868\u793a\u5df2\u7ecf\u88ab\u9009\u51fa\u6765\uff0c$ .$ \u8868\u793a\u6ca1\u6709\u88ab\u9009\u3002</p> <p>\u56e0\u4e3a\u5982\u679c\u653e\u4e86\u4e00\u4e2a\u957f\u5ea6\u4e3a3\u7684\uff0c\u90a3\u4e48\u5e95\u4e0b\u4e5f\u4e00\u5b9a\u5f97\u653e\u4e00\u4e2a\u3002\u6240\u4ee5\u72b6\u6001\u5176\u5b9e\u53ef\u4ee5\u770b\u6210\u53ea\u6709\u8fd93\u79cd\u3002\u7136\u540e\u8fdb\u884cDP\uff0c\u770b\u6bcf\u4e00\u79cd\u72b6\u6001\u7684\u7968\u6570\u662f\u591a\u5c11\u3002</p> <p>\u6211\u521a\u624d\u8fd8\u5728\u60f3\uff0c\u5b83\u600e\u4e48\u4fdd\u8bc1\u7b54\u6848\u4e00\u5b9a\u662f\u5408\u6cd5\u7684\u5212\u5206\u5462\uff1f</p> <p>\u5176\u5b9e\u56e0\u4e3a\u53ef\u4ee5\u5012\u7740\u770b\u7684\uff0c\u6700\u540e\u662f\u5168\u90e8\u586b\u6ee1\u4e86\uff0c\u6240\u4ee5\u9006\u7740\u63a8\u56de\u53bb\u4e00\u5b9a\u4f1a\u662f\u5168\u90e8\u586b\u6ee1\u7684\u3002</p> <pre><code>void solve()\n{\n    /*\n    dp0 dp1 dp2\n    X.  XX  XX\n    XX  X.  XX \n    */\n    int n;\n    cin&gt;&gt;n;\n    string s[2];\n    cin&gt;&gt;s[0]&gt;&gt;s[1];\n    s[0]=\" \"+s[0];\n    s[1]=\" \"+s[1];\n    auto check1=[&amp;](int i){\n        return ((s[0][i+1]=='A')+(s[1][i+1]=='A')+(s[1][i+2]=='A'))&gt;=2;\n    };\n    auto check2=[&amp;](int i){\n        return (s[0][i+1]=='A')+(s[1][i+1]=='A')+(s[0][i+2]=='A')&gt;=2;\n    };\n    auto check3=[&amp;](int i){\n        int res=0;\n        assert(i+3&lt;=n);\n        if((s[0][i+1]=='A')+(s[0][i+2]=='A')+(s[0][i+3]=='A')&gt;=2) res++;\n        if((s[1][i+1]=='A')+(s[1][i+2]=='A')+(s[1][i+3]=='A')&gt;=2) res++;\n        return res;\n    };\n    vector&lt;vi&gt; dp(n+1,vi(3));\n    for(int i=1;i&lt;=n;i++){\n        if(i+1&lt;=n){\n            cmax(dp[i+1][0],dp[i-1][2]+check1(i-1));\n            cmax(dp[i+1][1],dp[i-1][2]+check2(i-1));\n            cmax(dp[i+1][2],dp[i][0]+((s[0][i]=='A')+(s[0][i+1]=='A')+(s[1][i+1]=='A')&gt;=2));\n            cmax(dp[i+1][2],dp[i][1]+((s[1][i]=='A')+(s[0][i+1]=='A')+(s[1][i+1]=='A')&gt;=2));\n        }\n        if(i+3&lt;=n){\n            cmax(dp[i+3][0],dp[i][0]+((s[0][i]=='A')+(s[0][i+1]=='A')+(s[0][i+2]=='A')&gt;=2)+((s[1][i+1]=='A')+(s[1][i+2]=='A')+(s[1][i+3]=='A')&gt;=2));\n            cmax(dp[i+3][1],dp[i][1]+((s[1][i]=='A')+(s[1][i+1]=='A')+(s[1][i+2]=='A')&gt;=2)+((s[0][i+1]=='A')+(s[0][i+2]=='A')+(s[0][i+3]=='A')&gt;=2));\n        }\n        if(i+2&lt;=n){\n            cmax(dp[i+2][2],dp[i-1][2]+check3(i-1));\n        }\n    }\n    // for(int i=1;i&lt;=n;i++)\n    //     cerr&lt;&lt;dp[i][0]&lt;&lt;\" \"&lt;&lt;dp[i][1]&lt;&lt;\" \"&lt;&lt;dp[i][2]&lt;&lt;\" \\n\";\n    cout&lt;&lt;dp[n][2]&lt;&lt;'\\n';\n}\n</code></pre>"},{"location":"cp_solving/2/#cf1949i-1800","title":"CF1949I *1800","text":"<p>\u8fd9\u662f\u4e4b\u524d\u54b1\u4eec\u4e00\u8d77\u6253\u7684\u90a3\u4e00\u573a\uff0c\u53ea\u5199\u4e86\u4e00\u9898\u3002</p> <p>\u90a3\u4e2a\u5706\u76d8\u7684\u9898\u3002\u3002\u3002</p> <p>\u770b\u4e86\u9898\u89e3\u611f\u89c9\u5c31\u597d\u6709\u9053\u7406\uff0c\u800c\u4e14\u4e0d\u662f\u5f88\u96be\u60f3\u3002</p> <p>\u8bf4\u767d\u4e86\u76ee\u524d\u8fd8\u662f\u5f97\u591a\u6284\u9898\u89e3\u624d\u80fd\u8fdb\u6b65\u3002\u3002\u3002</p> <p>\u56e0\u4e3a\u534a\u5f84\u4e4b\u548c\u8981\u4e25\u683c\u51cf\u5c0f\uff0c\u90a3\u4e9b\u4e0d\u4e0e\u5176\u4ed6\u5706\u76d8\u76f8\u5207\u7684\uff0c\u5f88\u663e\u7136\u53ef\u4ee5\u76f4\u63a5\u51cf\u5c0f\u5c31\u884c\u3002\u5982\u679c\u6709\u82e5\u5e72\u4e2a\u76f8\u5207\u7684\u6328\u5728\u4e00\u8d77\uff0c\u5982\u679c\u6709\u4e00\u4e2a\u5706\u76d8\u534a\u5f84\u51cf\u5c0f\uff0c\u90a3\u4e48\u548c\u5b83\u76f8\u90bb\u7684\u4e00\u5b9a\u8981\u589e\u52a0\u3002\u6211\u4eec\u53ea\u9700\u8981\u68c0\u67e5\u6709\u6ca1\u6709\u5408\u6cd5\u7684\u65b9\u6848\uff0c\u4e14\u589e\u5927\u51cf\u5c0f\u7684\u6570\u91cf\u4e0d\u540c\uff0c\u5219\u53ef\u4ee5\u4f7f\u5f97\u603b\u7684\u534a\u5f84\u51cf\u5c0f\u3002</p> <p>\u53ef\u4ee5\u628a\u76f8\u5207\u7684\u8fde\u8fb9\u5efa\u56fe\uff0c\u8fd9\u6837\u4f1a\u6709\u82e5\u5e72\u4e2a\u8fde\u901a\u5757\u3002\u68c0\u67e5\u6709\u6ca1\u6709\u53ef\u4ee5\u51cf\u5c0f\u534a\u5f84\u7684\u3002\u9898\u89e3\u8bf4\u597d\u50cf\u8fd9\u6837\u9ed1\u767d\u67d3\u8272\u7684\u5c31\u662f\u4e8c\u5206\u56fe\uff0c\u6709\u7a7a\u770b\u770b\u8fd9\u4e2a\u6982\u5ff5\u3002</p> <p>\u554a\u3002\u6211\u670d\u4e86\uff0c\u4e00\u4e2a continue \u7684\u4f4d\u7f6e\u653e\u9519\u4e86\u5bfc\u81f4 WA \u4e86\u534a\u5c0f\u65f6\u624d\u53d1\u73b0\uff0c\u4e00\u76f4 RE \uff0c\u5e78\u597d\u80fd\u770b\u9519\u5728\u7b2c\u51e0\u4e2a\u6d4b\u8bd5\u70b9\uff0cRE \u5f88\u591a\u65f6\u5019\u53ef\u80fd\u662f\u56e0\u4e3a\u5185\u5b58\u66b4\u4e86\uff0c\u9012\u5f52\u6ca1\u6709\u7ed3\u675f\u4e4b\u7c7b\u7684\u3002</p> <pre><code>void solve()\n{\n    int n;\n    cin&gt;&gt;n;\n    vi x(n+1),y(n+1),r(n+1);\n    for(int i=1;i&lt;=n;i++)\n        cin&gt;&gt;x[i]&gt;&gt;y[i]&gt;&gt;r[i];\n    vector&lt;vi&gt;adj(n+1,vi());\n    auto calc=[&amp;](int x){\n        return 1ll*x*x;\n    };\n    for(int i=1;i&lt;=n;i++)\n        for(int j=i+1;j&lt;=n;j++){\n            if(calc(x[i]-x[j])+calc(y[i]-y[j])==calc(r[i]+r[j])){\n                adj[i].push_back(j);\n                adj[j].push_back(i);\n            }\n        }\n    vi s(n+1,-1);\n    for(int i=1;i&lt;=n;i++){\n        if(s[i]!=-1) continue;\n        bool ok=true;\n        int x=0,y=0;\n        auto dfs=[&amp;](auto &amp;&amp;self,int u)-&gt;void{\n            if(s[u]) x++;\n            else y++;\n            // cerr&lt;&lt;u&lt;&lt;'\\n';\n            for(auto v:adj[u]){\n                if(s[v]!=-1){\n                    if(s[v]==s[u]) ok=false;\n                    continue;\n                }\n                s[v]=s[u]^1;\n                self(self,v);\n            }\n        };\n        s[i]=0;\n        dfs(dfs,i);\n        if(ok&amp;&amp;x!=y){\n            cout&lt;&lt;\"YES\\n\";\n            return;\n        }\n    }\n    cout&lt;&lt;\"NO\\n\";\n}\n</code></pre>"},{"location":"cp_solving/2/#cf1995c-1800","title":"CF1995C *1800","text":"<p>\u7ed9\u4e00\u4e2a\u6570\u7ec4 \\(a\\) \uff0c\u6bcf\u6b21\u53ef\u4ee5\u9009\u62e9\u4e00\u4e2a \\(a_i\\) \u5c06\u5176\u53d8\u4e3a \\(a_i^2\\) \uff0c\u95ee\u6700\u5c11\u9700\u8981\u591a\u5c11\u6b21\u64cd\u4f5c\u624d\u80fd\u4f7f\u5176\u6210\u4e3a\u975e\u9012\u51cf\u6570\u7ec4\u3002</p> <p>\u76f4\u63a5\u4e58\u80af\u5b9a\u4f1a\u7206\u3002\u5176\u5b9e\u53ef\u4ee5\u4e34\u65f6\u8fdb\u884c\u64cd\u4f5c\u4f7f\u5f97 \\(a_i\\) \u521a\u597d\u5927\u4e8e \\(a_{i-1}\\) \uff0c\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u8bb0\u5f55\u6bcf\u4e2a \\(a_i\\) \u9700\u8981\u64cd\u4f5c\u591a\u5c11\u6b21\u3002</p> <p>\u5982\u679c \\(a_i\\) \u5148\u64cd\u4f5c\u5230\u521a\u597d\u5927\u4e8e \\(a_{i-1}\\) \uff0c\u90a3\u4e48\u53ea\u9700\u8981\u52a0\u4e0a \\(a_{i-1}\\) \u7684\u64cd\u4f5c\u6b21\u6570\u5c31\u884c\u3002</p> <p>\u8bb0 \\(f_i\\) \u4e3a \\(a_i\\) \u9700\u8981\u64cd\u4f5c\u7684\u6b21\u6570\uff0c\u5982\u679c \\(a_i\\) \u6bd4 \\(a_{i-1}\\) \u5c0f\uff0c\u90a3\u4e48\u663e\u7136\u8fdb\u884c\u540c\u6837\u6b21\u6570\u7684\u64cd\u4f5c\u662f\u4e0d\u591f\u7528\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5148\u8bb0\u5f55\u4f7f\u5f97 \\(a_i\\) \u521a\u597d\u5927\u4e8e \\(a_{i-1}\\) \u7684\u64cd\u4f5c\u6b21\u6570\u3002\u82e5\u4e00\u5f00\u59cb\u5c31\u5927\u4e8e\uff0c\u5c31\u5f97\u628a \\(a_{i-1}\\) \u589e\u5927\u5230\u521a\u597d\u5c0f\u4e8e \\(a_i\\) \u3002</p> <pre><code>void solve()\n{\n    int n;\n    cin&gt;&gt;n;\n    vl a(n+1);\n    for(int i=1;i&lt;=n;i++)\n        cin&gt;&gt;a[i];\n    ll ans=0;\n    vl b(n+1);\n    for(int i=2;i&lt;=n;i++){\n        if(a[i]==1&amp;&amp;a[i]&lt;a[i-1]){\n            cout&lt;&lt;\"-1\\n\";\n            return;\n        }\n    }\n    for(int i=2;i&lt;=n;i++){\n        ll x=a[i],y=a[i-1];\n        while(x&lt;y){\n            x*=x;\n            b[i]++;\n        }\n        while(y!=1&amp;&amp;y*y&lt;=x){\n            y*=y;\n            b[i]--;\n        }\n        b[i]+=b[i-1];\n        cmax(b[i],0LL);\n        ans+=b[i];\n    }\n    cout&lt;&lt;ans&lt;&lt;'\\n';\n}\n</code></pre>"},{"location":"cp_solving/2/#p3386","title":"\u6d1b\u8c37P3386 \u666e\u53ca+/\u63d0\u9ad8","text":"<p>\u4e8c\u5206\u56fe\u6700\u5927\u5339\u914d\u95ee\u9898\u3002</p> <p>\u6bcf\u6b21\u770b\u65b0\u7684\u70b9\u80fd\u4e0d\u80fd\u627e\u5230\u5339\u914d\u7684\u70b9\u3002</p> <pre><code>void solve()\n{\n    int n,m,e;\n    cin&gt;&gt;n&gt;&gt;m&gt;&gt;e;\n    vector&lt;vi&gt;adj(n+1,vi());\n    for(int i=1;i&lt;=e;i++){\n        int u,v;\n        cin&gt;&gt;u&gt;&gt;v;\n        adj[u].push_back(v);\n    }\n    vector&lt;int&gt;match(m+1);\n    int ans=0;\n    for(int i=1;i&lt;=n;i++){\n        vector&lt;bool&gt;sel(m+1);//\u8bb0\u6709\u6ca1\u6709\u88ab\u9009\u8fc7\n        auto dfs=[&amp;](auto &amp;&amp;self,int u)-&gt;bool{\n            for(auto v:adj[u]){\n                if(!sel[v]){\n                    sel[v]=true;\n                    if(!match[v]||self(self,match[v])){\n                        match[v]=u;\n                        return true;\n                    }\n                }\n            }\n            return false;\n        };\n        if(dfs(dfs,i))\n            ans++;\n    }\n    cout&lt;&lt;ans&lt;&lt;'\\n';\n}\n</code></pre>"},{"location":"cp_solving/2/#day2-220","title":"day2 2\u670820\u65e5","text":""},{"location":"cp_solving/2/#cf1985h1-1700","title":"CF1985H1 *1700","text":"<p>\u8fd9\u9898\u597d\u7b80\u5355\uff0c\u76f4\u63a5\u66b4\u529b\u5c31\u8fc7\u4e86\u3002</p> <pre><code>void solve()\n{\n    int n,m;\n    cin&gt;&gt;n&gt;&gt;m;\n    vector&lt;vector&lt;char&gt;&gt;a(n+1,vector&lt;char&gt;(m+1));\n    for(int i=1;i&lt;=n;i++)\n        for(int j=1;j&lt;=m;j++)\n            cin&gt;&gt;a[i][j];\n    int tot=0,sum=0;\n    vector&lt;vi&gt;vis(n+1,vi(m+1));\n    vector&lt;pii&gt;dir{{0,1},{0,-1},{1,0},{-1,0}};\n    auto dfs=[&amp;](auto &amp;&amp;self,int i,int j)-&gt;void{\n        // cerr&lt;&lt;i&lt;&lt;\" \"&lt;&lt;j&lt;&lt;'\\n';\n        vis[i][j]=tot;\n        sum++;\n        for(auto [dx,dy]:dir){\n            int nx=dx+i,ny=dy+j;\n            if(nx&lt;1||nx&gt;n||ny&lt;1||ny&gt;m) continue;\n            if(a[nx][ny]=='#'&amp;&amp;!vis[nx][ny])\n                self(self,nx,ny);\n        }\n    };\n    vi cnt(n*m+1);\n    for(int i=1;i&lt;=n;i++)\n        for(int j=1;j&lt;=m;j++){\n            if(a[i][j]=='#'&amp;&amp;!vis[i][j]){\n                // cerr&lt;&lt;i&lt;&lt;\" \"&lt;&lt;j&lt;&lt;'\\n';\n                ++tot,sum=0;\n                dfs(dfs,i,j);\n                cnt[tot]=sum;\n\n            }\n        }\n    // cerr&lt;&lt;tot&lt;&lt;'\\n';\n    int ans=0;\n    for(int i=1;i&lt;=n;i++){\n        int now=m;\n        set&lt;int&gt;st;\n        if(i-1&gt;=1){\n            for(int j=1;j&lt;=m;j++)\n                st.insert(vis[i-1][j]);\n        }\n        if(i+1&lt;=n){\n            for(int j=1;j&lt;=m;j++){\n                st.insert(vis[i+1][j]);\n            }\n        }\n        for(int j=1;j&lt;=m;j++){\n            st.insert(vis[i][j]);\n            now-=(a[i][j]=='#');\n        }\n        for(auto x:st)\n            now+=cnt[x];\n        cmax(ans,now);\n    }\n    for(int i=1;i&lt;=m;i++){\n        int now=n;\n        set&lt;int&gt;st;\n        if(i-1&gt;=1){\n            for(int j=1;j&lt;=n;j++)\n                st.insert(vis[j][i-1]);\n        }\n        if(i+1&lt;=m){\n            for(int j=1;j&lt;=n;j++){\n                st.insert(vis[j][i+1]);\n            }\n        }\n        for(int j=1;j&lt;=n;j++){\n            st.insert(vis[j][i]);\n            now-=(a[j][i]=='#');\n        }\n        for(auto x:st)\n            now+=cnt[x];\n        cmax(ans,now);\n    }\n    cout&lt;&lt;ans&lt;&lt;'\\n';\n}\n</code></pre>"},{"location":"cp_solving/2/#cf1930c-1700","title":"CF1930C *1700","text":"<p>\u8fd9\u4e2a\u6ca1\u60f3\u5230\u54c8\u3002</p> <p>\u5c31\u662f\u62ff\u7684\u987a\u5e8f\u65e0\u6240\u8c13\u7684\uff0c\u56e0\u4e3a\u4f60\u5e76\u4e0d\u662f\u8981\u4f18\u5148\u62ff\u5927\u7684\u3002\u5148\u62ff\u540e\u9762\u7684\u4e00\u6837\u7684\u3002</p> <p>\u76f4\u63a5\u5148\u5c06 \\(a_i+i\\)  \u6392\u5e8f\uff0c\u7136\u540e\u987a\u7740\u62ff\u3002\u56e0\u4e3a\u5e76\u4e0d\u662f\u591a\u96c6\uff0c\u6240\u4ee5\u91cd\u590d\u7684\u54b1\u4eec\u4e00\u5b9a\u662f\u628a\u4ed6 -1 \u3002</p> <pre><code>void solve()\n{\n    int n;\n    cin &gt;&gt; n;\n    vi a(n + 1);\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; a[i], a[i] += i;\n    sort(ALL(a), greater&lt;&gt;());\n    set&lt;int&gt; st;\n    st.insert(a[1]);\n    for (int i = 2; i &lt;= n; i++) {\n        cmin(a[i],a[i-1]-1);\n        st.insert(a[i]);\n    }\n    for (auto it = st.rbegin(); it != st.rend(); it++)\n        cout &lt;&lt; *it &lt;&lt; ' ';\n    cout &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/2/#cf1923d-1800","title":"CF1923D *1800","text":"<p>\u5509\u5509\uff0c\u8fd9\u4e2a\u81ea\u5df1\u591a\u770b\u770b\u8bf4\u4e0d\u5b9a\u80fd\u60f3\u51fa\u6765\u7684\u3002</p> <p>\u4e8c\u5206\uff0c\u9996\u5148\u80af\u5b9a\u6709\u5355\u8c03\u6027\u3002</p> <p>\u5176\u6b21\u53ea\u8981\u67d0\u4e00\u6bb5\u4e0d\u5168\u4e3a\u540c\u4e00\u4e2a\u6570\u5b57\uff0c\u90a3\u4e48\u80af\u5b9a\u53ef\u4ee5\u5408\u6210\u4e00\u4e2a\u3002</p> <pre><code>void solve()\n{\n    int n;\n    cin &gt;&gt; n;\n    vi a(n + 1);\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; a[i];\n    vi c(n + 1);\n    vl pre(n + 1);\n    for (int i = 1; i &lt;= n; i++)\n        pre[i] = pre[i - 1] + a[i];\n    for (int i = 2; i &lt;= n; i++)\n        c[i] = c[i - 1] + (a[i - 1] != a[i]);\n    for (int i = 1; i &lt;= n; i++) {\n        int ans = n + 1;\n        if (a[i - 1] &gt; a[i])\n            ans = 1;\n        if (i + 1 &lt;= n &amp;&amp; a[i + 1] &gt; a[i])\n            ans = 1;\n        if (pre[i - 1] &gt; a[i] &amp;&amp; c[i - 1]) {\n            int lo = 0, hi = i;\n            while (lo &lt; hi - 1) {\n                int mid = (lo + hi) &gt;&gt; 1;\n                if (pre[i - 1] - pre[mid - 1] &gt; a[i] &amp;&amp; c[i - 1] - c[mid])\n                    lo = mid;\n                else\n                    hi = mid;\n            }\n            cmin(ans, i - lo);\n        }\n        if (i != n &amp;&amp; pre[n] - pre[i] &gt; a[i] &amp;&amp; c[n] - c[i + 1]) {\n            int lo = i, hi = n + 1;\n            while (lo &lt; hi - 1) {\n                int mid = (lo + hi) &gt;&gt; 1;\n                // cerr&lt;&lt;mid&lt;&lt;\" \"&lt;&lt;pre[mid]-pre[i]&lt;&lt;'\\n';\n                if (pre[mid] - pre[i] &gt; a[i] &amp;&amp; c[mid] - c[i + 1])\n                    hi = mid;\n                else\n                    lo = mid;\n            }\n            cmin(ans, hi - i);\n        }\n        if (ans == n + 1)\n            ans = -1;\n        cout &lt;&lt; ans &lt;&lt; \" \\n\"[i == n];\n    }\n}\n</code></pre>"},{"location":"cp_solving/2/#day3-221-22","title":"day3 2\u670821 22\u65e5","text":"<p>\u8fd9\u51e0\u5929\u6ca1\u548b\u5199\u3002\u3002\u3002</p>"},{"location":"cp_solving/2/#cf2044g1-1700","title":"CF2044G1 *1700","text":"<p>\u56e0\u4e3a\u6709n\u4e2a\u70b9n\u6761\u8fb9\uff0c\u6bcf\u4e2a\u4eba\u90fd\u6709\u4e00\u4e2a\u51fa\u5ea6\uff0c\u4e14\u6ca1\u6709\u81ea\u73af\uff0c\u6240\u4ee5\u4e00\u5b9a\u4f1a\u6709\u73af\u3002\u73af\u4e0a\u7684\u70b9\u662f\u4e00\u76f4\u4e0d\u4f1a\u53d8\u7684\uff0c\u6240\u4ee5\u9700\u8981\u7b49\u5176\u4ed6\u7684\u70b9\u90fd\u53d8\u62100\u3002\u6240\u4ee5\u6211\u4eec\u9700\u8981\u627e\u8fde\u5230\u73af\u4e0a\u7684\u6700\u957f\u7684\u94fe\u3002\u7136\u540e\u8fd9\u4e2a\u94fe\u4e0a\u7684\u70b9\u5168\u53d8\u62100\u4e86\u4e4b\u540e\uff0c\u70b9\u7684\u503c\u5c31\u4e0d\u4f1a\u53d8\u4e86\u3002\u76f4\u63a5DFS\u5c31\u884c\u3002</p> <pre><code>void solve()\n{\n    int n;\n    cin &gt;&gt; n;\n    vi r(n + 1), a(n + 1, 1), de(n + 1);\n    a[0] = 0;\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; r[i];\n        de[r[i]]++;\n    }\n    /*\n    \u53ea\u6709\u5728\u73af\u4e0a\u7684\u70b9\u662f\u4e0d\u4f1a\u53d8\u7684\n    \u5426\u5219\u5c31\u5f97\u627e\u6700\u957f\u7684\u94fe\u662f\u591a\u957f\n    */\n    vi t = de;\n    vector&lt;bool&gt; circle(n + 1);\n    vi L(n + 1);\n    auto topsort = [&amp;]() {\n        queue&lt;int&gt; q;\n        for (int i = 1; i &lt;= n; i++)\n            if (!de[i])\n                q.push(i);\n        while (!q.empty()) {\n            int x = q.front();\n            // cerr&lt;&lt;x&lt;&lt;'\\n';\n            circle[x] = true;\n            q.pop();\n            // assert(x&gt;=1&amp;&amp;x&lt;=n);\n            if (!(--de[r[x]]))\n                q.push(r[x]);\n        }\n        // cerr&lt;&lt;sz(q)&lt;&lt;'\\n';\n        while (!q.empty()) {\n            assert(q.front() &gt;= 1 &amp;&amp; q.front() &lt;= n);\n            circle[q.front()] = true;\n            q.pop();\n        }\n    };\n    topsort();\n    int ans = 0;\n    for (int i = 1; i &lt;= n; i++) {\n        if (!t[i]) {\n            auto dfs = [&amp;](auto&amp;&amp; self, int u) {\n                // cerr&lt;&lt;u&lt;&lt;'\\n';\n                // assert(len&lt;=n);\n                // assert(u&lt;=n);\n                if (!circle[u] || L[u])\n                    return;\n                self(self, r[u]);\n                cmax(L[u], L[r[u]] + 1);\n                cmax(ans, L[u]);\n            };\n            dfs(dfs, i);\n        }\n    }\n    cout &lt;&lt; ans + 2 &lt;&lt; '\\n';\n}\n</code></pre> <p>\u7528\u62d3\u6251\u6392\u5e8f\u628a\u4e0d\u5728\u73af\u4e0a\u7684\u70b9\u7ed9\u627e\u51fa\u6765\uff0c\u7136\u540e\u54b1\u4eec\u53ef\u4ee5\u53ea\u5bf9\u4e0d\u5728\u73af\u4e0a\u7684\u70b9\u8fdb\u884cDFS\uff0c\u800c\u4e14\u53ef\u4ee5\u53ea\u7528\u5bf9\u5165\u5ea6\u4e3a0\u7684\u70b9\u5f00\u59cbDFS\uff0c\u8fd9\u6837\u4e00\u5b9a\u53ef\u4ee5\u8d70\u5230\u6240\u6709\u4e0d\u5728\u73af\u4e0a\u7684\u70b9\u3002</p>"},{"location":"cp_solving/2/#cf2044g2-1900","title":"CF2044G2 *1900","text":"<p>\u548cG1\u7279\u522b\u50cf\uff0c\u4e5f\u633a\u7b80\u5355\u7684\u5176\u5b9e\u3002\u3002\u3002</p> <p>\u56e0\u4e3a\u53ef\u4ee5\u5b58\u5728\u624b\u4e0a\uff0c\u7136\u540e\u4e5f\u53ea\u6709\u73af\u4e0a\u7684\u70b9\u4e0d\u4f1a\u53d8\u3002\u6240\u4ee5\u9700\u8981\u7edf\u8ba1\u6240\u6709\u8fde\u5728\u73af\u4e0a\u7684\u70b9\u7684\u5b50\u6811\u7684\u6700\u5927\u5927\u5c0f\u3002</p> <p>\u6211\u81ea\u5df1\u5199\u5f97\u6709\u95ee\u9898\u627e\u4e86\u597d\u4e45\uff0c\u56e0\u4e3a\u6211\u6700\u5f00\u59cb\u5199\u7684\u662f\u7edf\u8ba1\u73af\u4e0a\u7684\u70b9\u80fd\u5230\u7684\u70b9\u7684\u6570\u91cf\u3002\u3002\u3002\u4f46\u5b9e\u9645\u4e0a\uff0c\u4e00\u4e2a\u70b9\u53ef\u80fd\u4f1a\u8fde\u51e0\u4e2a\u5b50\u6811\uff0c\u8fd9\u51e0\u4e2a\u5b50\u6811\u662f\u540c\u65f6\u51cf\u5c0f\u7684\uff0c\u6240\u4ee5\u8981\u6ce8\u610f\u8fd9\u4e00\u70b9\u3002\u3002\u3002</p> <pre><code>void solve()\n{\n    /*\n    \u56e0\u4e3a\u4e0d\u4f1a\u4e22\u4e86\uff0cn\u6761\u8fb9 \u4e00\u5b9a\u4f1a\u6709\u73af\n    \u90a3\u4e48\u5fc5\u987b\u4fdd\u8bc1\u6bcf\u4e2a\u73af\u4e0a\u6bcf\u4e2a\u70b9\u4e0a\u7684\u503c\u4e00\u76f4\u76f8\u540c\n    \u5373\u540c\u4e00\u73af\u4e0a\u6bcf\u4e00\u4e2a\u70b9\u8fde\u7684\u70b9\u7684\u6570\u91cf\u8981\u662f\u76f8\u540c\u7684\n    \u3002\u3002\u3002\u4e0d\u5bf9\uff0c\u5510\u4e86\n    \u6bcf\u6b21\u53ea\u4f1a\u7ed9\u4e00\u4e2a \u6240\u4ee5\u65e0\u8bba\u5982\u4f55\u73af\u4e0a\u662f\u4e0d\u4f1a\u53d8\u7684\n    */\n    int n;\n    cin &gt;&gt; n;\n    vi r(n + 1), a(n + 1, 1), de(n + 1);\n    a[0] = 0;\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; r[i];\n        de[r[i]]++;\n    }\n    vi t = de;\n    vector&lt;bool&gt; circle(n + 1);\n    // vi L(n + 1);\n    auto topsort = [&amp;]() {\n        queue&lt;int&gt; q;\n        for (int i = 1; i &lt;= n; i++)\n            if (!de[i])\n                q.push(i);\n        while (!q.empty()) {\n            int x = q.front();\n            circle[x] = true;\n            q.pop();\n            if (!(--de[r[x]]))\n                q.push(r[x]);\n        }\n    };\n    topsort();\n    int ans = 0;\n    vi cnt(n + 1), f(n + 1);\n    for (int i = 1; i &lt;= n; i++) {\n        if (!t[i]) {\n            auto dfs = [&amp;](auto&amp;&amp; self, int u) -&gt; void {\n                if (f[u])\n                    return;\n                if (!circle[r[u]]) {\n                    f[u] = u;\n                    cnt[u] = 1;\n                    return;\n                }\n\n                self(self, r[u]);\n                f[u] = f[r[u]];\n                cnt[f[u]]++;\n                // cerr &lt;&lt; u&lt;&lt;\" \"&lt;&lt;f[u] &lt;&lt; \" \" &lt;&lt; cnt[f[u]] &lt;&lt; '\\n';\n                // assert(f[u]&amp;&amp;(f[u]!=u)&amp;&amp;(!circle[f[u]]));\n                cmax(ans, cnt[f[u]]);\n            };\n            dfs(dfs, i);\n        }\n    }\n    cmax(ans, *max_element(ALL(cnt)));\n    cout &lt;&lt; ans + 2 &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/2/#cf2059c-1600","title":"CF2059C *1600","text":"<p>\u597d\u7b80\u5355\u7684\uff0c\uff0c\uff0c\u53ea\u8981\u7528\u4e0a\u4e00\u70b9\u70b9\u7684\u89c2\u5bdf\u80fd\u529b\u3002</p> <p>\u8d5b\u65f6\u5361b\u597d\u4e45\uff0c\u7136\u540ec\u6ca1\u548b\u770b\u4e86\u3002\u607c\u3002</p> <pre><code>void solve()\n{\n    /*\n    \u7b2cn-1\u6b21\u670d\u52a1\u53ea\u80fd\u7ed9a_n=1\u7684\n    \u800cn-2\u6b21\u670d\u52a1\u53ea\u80fd\u7ed9a_n=1 a_n-1=1\u7684\n    \u56e0\u4e3a\u8981+2\u4e2a\u6570\u5b57\u7b49\u4e8e2 \u6240\u4ee5\u53ea\u80fd\u90a3\u6837\n    \u6240\u4ee5\u54b1\u4eec\u5c31\u662f\u8981\u770b\u5168\u75311\u7ec4\u6210\u7684\u5217\u6709\u591a\u5c11\u4e2a\n    */\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;vi&gt; a(n + 1, vi(n + 1));\n    for (int i = 1; i &lt;= n; i++)\n        for (int j = 1; j &lt;= n; j++)\n            cin &gt;&gt; a[i][j];\n    // vi cnt(n + 1);\n    multiset&lt;int&gt; st;\n    for (int i = 1; i &lt;= n; i++) {\n        int now = 0;\n        for (int j = n; j &gt;= 1; j--) {\n            if (a[i][j] != 1)\n                break;\n            now++;\n        }\n        // cnt[now]++;\n        st.insert(now);\n    }\n    for (int i = 1; i &lt; n; i++) {\n        if (*st.rbegin() &lt; i) {\n            cout &lt;&lt; i &lt;&lt; '\\n';\n            return;\n        }\n        st.erase(st.lower_bound(i));\n    }\n    cout &lt;&lt; n &lt;&lt; '\\n';\n}\n</code></pre> <p>\u56e0\u4e3a \\(a_{i,j}\\) \u8303\u56f4\u662f \\([1,10^9]\\) \uff0c\u6211\u4eec\u6bcf\u6b21\u5fc5\u987b\u8ba9\u4e00\u5217\u53d8\u62100\uff0c\u90a3\u4e48\u6211\u4eec\u5012\u6570\u7b2c\u4e8c\u6b21\u670d\u52a1\u7684\u90a3\u4e00\u5217\uff0c\u4ed6\u7684\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u5fc5\u987b\u662f1\uff0c\u4e0d\u7136\u6211\u4eec\u4e0d\u53ef\u80fd\u5f97\u52301\u4e86\u3002\u6211\u4eec\u4e0b\u4e00\u4e2a\u8981\u5f97\u5230\u7684\u6570\u5b57\u662f2\uff0c\u4f46\u53ea\u80fd\u5728\u5012\u6570\u7b2c\u4e8c\u6b21\u64cd\u4f5c\u4e4b\u524d\u7528\u4e86\uff0c\u4f46\u662f\u4e24\u4e2a\u6570\u5b57\u4ee5\u4e0a\u52a0\u8d77\u6765\u662f\u4e0d\u53ef\u80fd\u7b49\u4e8e2\u7684\uff0c\u800c\u4e24\u4e2a\u6570\u5b57\u52a0\u8d77\u6765\u7b49\u4e8e2\u4e5f\u53ea\u6709\u4e00\u79cd\u60c5\u51b5\u3002</p> <p>\u6240\u4ee5\u6211\u4eec\u53ea\u6709\u5bf9\u540e\u4e24\u4e2a\u6570\u5b57\u90fd\u4e3a1\u7684\u90a3\u4e00\u5217\u64cd\u4f5c\u624d\u80fd\u5f97\u52301\u3002</p> <p>\u540c\u7406\uff0c\u6211\u4eec\u8981\u5f97\u5230\u4e0b\u4e00\u4e2a\u503c\uff0c\u53ea\u80fd\u662f\u90a3\u4e00\u5217\u540e\u9762\u7684\u8fde\u7eed\u76841\u7684\u4e2a\u6570\u5927\u4e8e\u8fd9\u4e2a\u503c\u3002</p> <p>\u5509\u5509\uff0c\u611f\u89c9\u5f88\u591a\u5927\u6982\u96be\u5ea6\u7684\u9898\uff0c\u591a\u60f3\u4e00\u4f1a\u5c31\u80fd\u51fa\u6765\u7684\u3002\u5c31\u7b97\u60f3\u4e0d\u51fa\u6765\uff0c\u4e5f\u4f1a\u597d\u5f88\u591a\u3002</p>"},{"location":"cp_solving/2/#day4-224","title":"day4 2\u670824\u65e5","text":""},{"location":"cp_solving/2/#cf1766d-1600","title":"CF1766D *1600","text":"<p>\\(gcd(x,y)\\) = \\(gcd(x,y\\%x)\\)</p> <p>\u8fd9\u9898\u91cc\uff0c\u6211\u4eec\u77e5\u9053 \\(gcd(x+k,y+k)\\) = \\(gcd(x+k,y-x)\\) \uff0c\u6240\u4ee5\u5982\u679c \\(gcd(x+k,y+k)\\ne 1\\) \uff0c\u90a3\u4e48 \\(x+k\\) \u4e00\u5b9a\u4f1a\u662f \\(y-x\\) \u7684\u4e00\u4e2a\u56e0\u5b50\u7684\u500d\u6570\u3002\u4f46\u662f\u76f4\u63a5\u679a\u4e3e\u56e0\u5b50\uff0c\u590d\u6742\u5ea6\u5f88\u9ad8\uff0c\u65e0\u6cd5\u901a\u8fc7\u672c\u9898\u3002</p> <p>\u4e8e\u662f\u6211\u770b\u4e86\u9898\u89e3\u624d\u77e5\u9053\uff0c\u53ea\u7528\u679a\u4e3e\u8d28\u56e0\u5b50\uff0c\u56e0\u4e3a\u5982\u679c\u4e0d\u662f\u8d28\u56e0\u5b50\uff0c\u6bd4\u5982\u8ba9 $x=(\\lfloor\\frac{x}{g}\\rfloor+1) \\cdot g $\uff0c\u5982\u679c \\(g\\) \u4e0d\u662f\u8d28\u6570\uff0c\u90a3\u6211\u4eec\u53ef\u4ee5\u7528 \\(g\\) \u7684\u56e0\u5b50\uff0c\u7edd\u5bf9\u4e0d\u4f1a\u60c5\u51b5\u66f4\u5dee\u3002</p> <p>\u7b5b\u8d28\u56e0\u5b50\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u9884\u5904\u7406\u51fa\u6bcf\u4e2a\u6570\u5b57\u7684\u6700\u5c0f\u8d28\u56e0\u5b50\u3002\u77e5\u9053\u6700\u5c0f\u8d28\u56e0\u5b50\u4e4b\u540e\u53ef\u4ee5\u4e00\u76f4\u9664\u6700\u5c0f\u8d28\u56e0\u5b50\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u5206\u89e3\u51fa\u8d28\u56e0\u5b50\u3002\u5728\u9884\u5904\u7406\u5b8c\u540e\uff0c\u7b5b\u8d28\u56e0\u5b50\u590d\u6742\u5ea6\u4e3a \\(\\log k\\) \u3002</p> <p>\u7528\u57c3\u6c0f\u7b5b\u6cd5\u7684\u590d\u6742\u5ea6\u4e3a \\(n\\log\\log n\\)   \uff0c\u6b27\u62c9\u7b5b\u7684\u590d\u6742\u5ea6\u4e3a \\(n\\) \u3002</p> <pre><code>constexpr int N = 1e7 + 5;\nint mind[N + 5];\n\nvoid init()\n{\n    for (int i = 1; i &lt;= N; i++)\n        mind[i] = i;\n    for (int i = 2; i * i &lt;= N; i++) {\n        if (mind[i] != i)\n            continue;\n        for (int j = i * i; j &lt;= N; j += i)\n            cmin(mind[j], i);\n    }\n}\nvi get_primes(int x)\n{\n    vi res;\n    while (x &gt; 1) {\n        res.push_back(mind[x]);\n        while (x % res.back() == 0)\n            x /= res.back();\n    }\n    return res;\n}\nvoid solve()\n{\n    int n;\n    cin &gt;&gt; n;\n    for (int i = 0; i &lt; n; i++) {\n        int x, y;\n        cin &gt;&gt; x &gt;&gt; y;\n        if (y == x + 1) {\n            cout &lt;&lt; \"-1\\n\";\n            continue;\n        }\n        if (__gcd(x, y) != 1) {\n            cout &lt;&lt; \"0\\n\";\n            continue;\n        }\n        int z = y - x;\n        int ans = INF;\n        auto calc = [&amp;](int t) {\n            return (x / t + 1) * t;\n        };\n        for (auto v : get_primes(z)) {\n            cmin(ans, calc(v) - x);\n        }\n        cout &lt;&lt; ans &lt;&lt; '\\n';\n    }\n}\n</code></pre>"},{"location":"cp_solving/2/#p10814","title":"\u6d1b\u8c37P10814 \u666e\u53ca+/\u63d0\u9ad8","text":"<p>\u786e\u5b9e\u662f\u4e00\u4e2a\u5f88\u5178\u7684\u9898\uff0c\u6211\u8bb0\u5f97\u7f51\u7edc\u8d5b\u8fd8\u662f\u54ea\u4e2a\u533a\u57df\u8d5b\u4e5f\u6709\u4e2a\u5dee\u4e0d\u591a\u7684\u3002\u3002\u3002</p> <p>\u6211\u4eec\u7528\u7ebf\u6bb5\u6811\u548c\u6811\u72b6\u6570\u7ec4\u67e5\u8be2\u5c0f\u4e8e\u7b49\u4e8ex\u7684\u6570\u5b57\u7684\u6570\u91cf\u662f\u6bd4\u8f83\u5bb9\u6613\u7684\uff0c\u4f46\u662f\u5982\u679c\u8981\u67e5\u8be2\u533a\u95f4\u7684\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u4f1a\u6bd4\u8f83\u9ad8\u3002</p> <p>\u53ef\u4ee5\u79bb\u7ebf\u5904\u7406\uff0c\u8d70\u5230 \\(l-1\\) \uff0c\u5c31\u5148\u628a\u5bf9\u5e94\u7684 \\(ans\\) \u51cf\u53bb\u5f53\u524d\u7684\u5c0f\u4e8e \\(x\\) \u7684\u6570\u91cf\uff0c\u7136\u540e\u7b49\u8d70\u5230 \\(r\\) \u518d\u52a0\u4e0a\u5f53\u524d\u7684\u5c0f\u4e8e \\(x\\) \u7684\u6570\u91cf\u3002</p> <pre><code>constexpr int N = 2e6;\n\nstruct Fenwick {\n    vector&lt;int&gt; b;\n    Fenwick()\n    {\n        // b.resize(N+1,0);\n        b = vector&lt;int&gt;(N + 1);\n    }\n    int lowbit(int x) { return (x) &amp; (-x); }\n    void upd(int i, int x)\n    {\n        while (i &lt;= N) {\n            // dbg(i);\n            b[i] += x;\n            i += lowbit(i);\n        }\n    }\n    int ask(int i)\n    {\n        int res = 0;\n        while (i) {\n            // cerr&lt;&lt;\"ask: \"&lt;&lt;i&lt;&lt;\" \"&lt;&lt;b[i]&lt;&lt;'\\n';\n            res += b[i];\n            i -= lowbit(i);\n        }\n        // cerr&lt;&lt;\"res: \"&lt;&lt;res&lt;&lt;'\\n';\n        return res;\n    }\n    int query(int l, int r)\n    {\n        return ask(r) - ask(l - 1);\n    }\n};\n\nvoid solve()\n{\n    Fenwick C;\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    vector&lt;int&gt; a(n + 1);\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; a[i];\n    vector&lt;array&lt;int, 4&gt;&gt; q(m);\n    for (int i = 0; i &lt; m; i++)\n        cin &gt;&gt; q[i][0] &gt;&gt; q[i][1] &gt;&gt; q[i][2], q[i][3] = i;\n    sort(q.begin(), q.end(), greater&lt;&gt;());\n    vector&lt;vector&lt;pair&lt;int, int&gt;&gt;&gt; adj(n + 1, vector&lt;pair&lt;int, int&gt;&gt;());\n    vector&lt;int&gt; ans(m);\n    for (int i = 1; i &lt;= n; i++) {\n        // cerr&lt;&lt;\"i: \"&lt;&lt;i&lt;&lt;'\\n';\n        while (!q.empty() &amp;&amp; q.back()[0] == i) {\n            auto [x, y, z, j] = q.back();\n            // cerr&lt;&lt;\"q: \"&lt;&lt;z&lt;&lt;\" \"&lt;&lt;j&lt;&lt;'\\n';\n            q.pop_back();\n            // dbg(adj);\n            // dbg(q);\n            ans[j] -= C.ask(z);\n            adj[y].push_back({ z, j });\n        }\n        // dbg(\"yuanshen\");\n        // dbg(adj);\n        C.upd(a[i], 1);\n        for (auto [x, j] : adj[i]) {\n            // cerr&lt;&lt;\" adj: \"&lt;&lt;x&lt;&lt;\" \"&lt;&lt;j&lt;&lt;'\\n';\n            ans[j] += C.ask(x);\n        }\n    }\n    for (auto x : ans)\n        cout &lt;&lt; x &lt;&lt; \"\\n\";\n    // cout&lt;&lt;'\\n';\n}\n</code></pre>"},{"location":"cp_solving/2/#cf2045m-1800","title":"CF2045M *1800","text":"<p>\u4e0d\u662f\uff0c\u8fd9\u600e\u4e48\u4e5f\u80fd\u662f1800\u7684\u9898\u554a\uff0c\u5199\u4e86\u5c31\u80fd\u5bf9\u3002\u3002\u3002\u867d\u7136\u6211WA\u4e86\uff0c\u6ca1\u770b\u6570\u636e\u611f\u89c9\u5f88\u96be\u627e\u51fa\u6765\u3002\u3002\u3002</p> <p>\u6ca1\u6ce8\u610f\u3002\u3002\u3002\u4e0d\u7528 <code>to_string</code> \u5bfc\u81f4\u7684\u3002</p> <pre><code>void solve()\n{\n    int r, c;\n    cin &gt;&gt; r &gt;&gt; c;\n    vector&lt;string&gt; s(r);\n    int all = 0;\n    for (int i = 0; i &lt; r; i++) {\n        cin &gt;&gt; s[i];\n        for (auto x : s[i])\n            if (x == '\\\\' || x == '/')\n                all++;\n    }\n    // map&lt;char, pair&lt;int, int&gt;&gt; mp;\n    vector&lt;pair&lt;int, int&gt;&gt; mp(128);\n    mp['N'] = { 1, 0 }, mp['S'] = { -1, 0 };\n    mp['W'] = { 0, 1 }, mp['E'] = { 0, -1 };\n    // int cnt = 0;\n    set&lt;pair&lt;int, int&gt;&gt; st;\n    auto dfs = [&amp;](auto&amp;&amp; self, int x, int y, char d) -&gt; void {\n        if (x &lt; 0 || x &gt;= r || y &lt; 0 || y &gt;= c)\n            return;\n        if (s[x][y] == '/') {\n            // cnt++;\n            st.insert({ x, y });\n            if (d == 'N')\n                d = 'E';\n            else if (d == 'S')\n                d = 'W';\n            else if (d == 'W')\n                d = 'S';\n            else\n                d = 'N';\n        } else if (s[x][y] == '\\\\') {\n            // cnt++;\n            st.insert({ x, y });\n            if (d == 'N')\n                d = 'W';\n            else if (d == 'S')\n                d = 'E';\n            else if (d == 'W')\n                d = 'N';\n            else\n                d = 'S';\n        }\n        int nx = x + mp[d].first, ny = y + mp[d].second;\n        self(self, nx, ny, d);\n    };\n    vector&lt;string&gt; ans;\n    for (int _ = 0; _ &lt; 2; _++) {\n        char d = (_ ? 'N' : 'S');\n        for (int i = 0; i &lt; c; i++) {\n            // cnt = 0;\n            st.clear();\n            if (d == 'N')\n                dfs(dfs, 0, i, d);\n            else\n                dfs(dfs, r - 1, i, d);\n            // cerr&lt;&lt;cnt&lt;&lt;'\\n';\n            if (st.size() == all) {\n                string tmp { d };\n                // tmp.push_back('1' + i);\n                tmp+=to_string(i+1);\n                ans.push_back(tmp);\n            }\n        }\n    }\n    for (int _ = 0; _ &lt; 2; _++) {\n        char d = (_ ? 'W' : 'E');\n        for (int i = 0; i &lt; r; i++) {\n            // cnt = 0;\n            st.clear();\n            if (d == 'W')\n                dfs(dfs, i, 0, d);\n            else\n                dfs(dfs, i, c - 1, d);\n            if (st.size() == all) {\n                string tmp { d };\n                // tmp.push_back('1' + i);\n                tmp+=to_string(i+1);\n                ans.push_back(tmp);\n            }\n        }\n    }\n    cout &lt;&lt; ans.size() &lt;&lt; '\\n';\n    for (auto x : ans)\n        cout &lt;&lt; x &lt;&lt; ' ';\n}\n</code></pre> <p>\u4f46\u662f\u771f\u7684\u5199\u4e86\u5c31\u80fd\u8fc7\u554a\uff0c\u4e4b\u524d\u770b\u8fc7\u4e00\u773c\u8fd9\u4e2a\u9898\uff0c\u770b\u5230\u8fd9\u4e2a\u56fe\u5c31\u4e0d\u60f3\u5199\u4e86\u3002\u4f46\u662f\u771f\u5199\u8d77\u6765\u5f88\u7b80\u5355\uff0c\u5c31\u6309\u9898\u610fDFS\u5c31\u884c\u3002\u5728\u6d1b\u8c37\u4f30\u8ba1\u8981 <code>\u5efa\u8bae\u8bc4\u6a59</code> \u4e86\u3002\u597d\u5427\u6ca1\u6709\uff0c\u662f\u7eff\u3002\u5f00\u4e2a\u73a9\u7b11</p> <p>\u6211\u8981\u505a\u7684\u662f\u677f\u5237\uff0c\u90a3\u4e48\u5c31\u662f\u4e0d\u80fd\u7ba1\u96be\u8fd8\u662f\u7b80\u5355\uff0c\u4e0d\u7ba1\u5199\u8d77\u6765\u96be\u4e0d\u96be\u53d7\uff0c\u5c31\u987a\u7740\u5199\uff0c\u800c\u4e14\u5176\u5b9e\u96be\u5ea6\u90fd\u5dee\u4e0d\u591a\u7684\uff0c\u591a\u601d\u8003\uff0c\u603b\u4f1a\u66f4\u63a5\u8fd1\u7b54\u6848\u7684\u3002</p>"},{"location":"cp_solving/2/#cf2045a-1700","title":"CF2045A *1700","text":"<p>\u8fd9\u9898\u66f4\u662f\u7b80\u5355\uff0c\u867d\u7136\u8fd8\u662f\u82b1\u4e86\u4e09\u5341\u591a\u5206\u949f\uff0c\u5f88\u6162\u4e86\u3002</p> <p>\u5c31\u662f\u7eaf\u5206\u7c7b\u8ba8\u8bba+\u4e00\u70b9\u70b9\u8d2a\u5fc3\u3002\u3002\u3002</p> <p>\u53ea\u8981\u80fd\u8010\u5fc3\u5199\uff0c\u5927\u6982\u7387\u80fd\u5199\u51fa\u6765\u7684\u3002</p> <pre><code>void solve()\n{\n    string s;\n    cin &gt;&gt; s;\n    vector&lt;int&gt; cnt(26);\n    for (auto x : s)\n        cnt[x - 'A']++;\n    int vowels = cnt['A' - 'A'] + cnt['E' - 'A'] + cnt['I' - 'A'] + cnt['O' - 'A'] + cnt['U' - 'A'];\n    int consonants = s.size() - vowels;\n    if (vowels * 2 &gt; consonants) {\n        // cerr &lt;&lt; \"1\\n\";\n        vowels = consonants / 2;\n        int ans = vowels * 3;\n        int rest = consonants % 2;\n        int x = cnt['N' - 'A'], y = cnt['G' - 'A'];\n        if (x &gt; y)\n            swap(x, y);\n        // \u6700\u591a\u53ea\u80fd\u591a\u52a0x\u4e2a\n        ans += min({ vowels * 2, x, rest });\n        cout &lt;&lt; ans &lt;&lt; '\\n';\n    } else {\n        // \u53ef\u80fd\u9700\u8981\u7528y\n        int x = cnt['N' - 'A'], y = cnt['G' - 'A'], z = cnt['Y' - 'A'];\n        if (x &gt; y)\n            swap(x, y);\n        if ((vowels + z) * 3 &lt;= s.size()) {\n            // \u80af\u5b9a\u5168\u62ff\n            // cerr &lt;&lt; \"2\\n\";\n            int ans = (vowels + z) * 3;\n            int rest = s.size() - ans;\n            ans += min({ (vowels + z) * 2, x, rest });\n            cout &lt;&lt; ans &lt;&lt; '\\n';\n        } else {\n            // \u5426\u5219\u53ea\u80fd\u52a0\u4e00\u90e8\u5206\n            // \u76f4\u63a5\u62ff\u6210s.size()/3\n            vowels = s.size() / 3;\n            if (vowels * 3 == s.size()) {\n                // cerr &lt;&lt; \"3\\n\";\n                cout &lt;&lt; s.size() &lt;&lt; '\\n';\n            } else {\n                // \u5426\u5219\u7ee7\u7eed\u4e4b\u524d\u7684\u64cd\u4f5c\n                // cerr &lt;&lt; \"4\\n\";\n                int ans = vowels * 3;\n                int rest = s.size() - ans;\n                int x = cnt['N' - 'A'], y = cnt['G' - 'A'];\n                if (x &gt; y)\n                    swap(x, y);\n                // \u6700\u591a\u53ea\u80fd\u591a\u52a0x\u4e2a\n                ans += min({ vowels * 2, x, rest });\n                cout &lt;&lt; ans &lt;&lt; '\\n';\n            }\n        }\n    }\n}\n</code></pre> <p>\u4e5f\u591a\u4e8f\u6837\u4f8b\u7ed9\u5f97\u7b97\u6bd4\u8f83\u5f3a\u7684\u4e86\uff0c\u4e0d\u7136\u6709\u4e9b\u60c5\u51b5\u786e\u5b9e\u53ef\u80fd\u5f97\u591a\u82b1\u70b9\u65f6\u95f4\u624d\u80fd\u60f3\u5230\u3002\u3002\u3002</p>"},{"location":"cp_solving/2/#cf2039c2-1800","title":"CF2039C2 *1800","text":"<p>\u5f53 \\(y\\le x\\) \u65f6\uff0c\u6211\u4eec\u76f4\u63a5\u7b97\u5c31\u884c\u4e86\u3002</p> <p>\u5f53 $y&gt;x $ \u65f6\uff0c\\(x\\oplus y\\le x+y &lt;2y\\) \uff0c\u6240\u4ee5 \\(x\\oplus y\\) \u4e0d\u53ef\u80fd\u88ab \\(y\\) \u6574\u9664\uff0c\u53ea\u53ef\u80fd\u662f \\(x\\) \u7684\u500d\u6570\u3002</p> <p>\u6211\u4eec\u8bbe \\(p=x\\oplus y\\) \uff0c\u90a3\u4e48 \\(y=p\\oplus x\\) \uff0c\u6211\u4eec\u9700\u8981 \\(y\\) \u662f\u5c0f\u4e8e\u7b49\u4e8e \\(m\\)\u3002</p> <p>\\(p\\) \u662f \\(x\\) \u7684\u500d\u6570\uff0c\\(y\\le p\\oplus x\\le p+x\\le m\\) \uff0c\u6240\u4ee5 \\(x\\) \u7684 \\(\\lfloor\\frac{m}{x}\\rfloor-1\\) \u500d\u80af\u5b9a\u90fd\u662f\u80fd\u8868\u793a\u51fa\u6765\u7684\uff0c\u54b1\u4eec\u53ea\u7528\u5224\u65ad \\(\\lfloor\\frac{m}{x}\\rfloor\\) \u80fd\u4e0d\u80fd\u8fbe\u5230\u3002</p> <p>\u4e0d\u5bf9\uff0c\u518d\u5224\u4e00\u4e0b\u591a\u4e00\u70b9\u80fd\u4e0d\u80fd\u8fbe\u5230\u3002\u4e3a\u4ec0\u4e48\u53ea\u7528\u591a\u5224\u4e00\u4e2a\u518d\u591a\u4e00\u500d\uff1f</p> <p>\\(x\\oplus y \\le x+y\\) \uff0c\u6240\u4ee5\u82e5 \\(x\\oplus y &gt;m+x\\) \uff0c\u90a3\u4e48 \\(y&gt; m\\) \uff0c\u6240\u4ee5 \\(p\\le m+x\\) \uff0c\u6240\u4ee5\u4e0d\u53ef\u80fd\u5927\u4e8e \\(\\lfloor \\frac{m}{x} \\rfloor +1\\) \u500d\u3002</p> <pre><code>void solve()\n{\n    int x;\n    long long m;\n    cin&gt;&gt;x&gt;&gt;m;\n    long long ans=0;\n    for(int i=1;i&lt;=min(m,1LL*x-1);i++){\n        if((i^x)%i==0)\n            ans++;\n    }\n    if(m&lt;x){\n        cout&lt;&lt;ans&lt;&lt;'\\n';\n    }else{\n        ans+=m/x-1;\n        if(((m/x*x)^x)&lt;=m) ans++;\n        if(((m/x*x+x)^x)&lt;=m) ans++;\n        cout&lt;&lt;ans&lt;&lt;'\\n';\n    }\n}\n</code></pre> <p>\u611f\u89c9\u662f\u4e00\u9053\u975e\u5e38\u597d\u7684\u9898\u76ee\u554a\uff0c\u4e4b\u524d\u8bb0\u5f97\u54ea\u4e00\u573a\u533a\u57df\u8d5b\u8fd8\u662f\u5565\uff0c\u4e5f\u6709\u4e00\u4e2a\u7c7b\u4f3c\u7684\u3002\u3002\u3002\u975e\u5e38\u597d\u7684\u9898\u76ee\uff0c\u611f\u89c9\u6709\u5fc5\u8981\u6536\u85cf\u4e00\u4e0b\u3002</p> <p>\u770b\u4e86\u4e00\u4e0b\u9898\u89e3\uff0c\u4f46\u662f\u8fd9\u4e9b\u662f\u6309\u6211\u81ea\u5df1\u7684\u7406\u89e3\u63a8\u51fa\u6765\u7684\u3002</p>"},{"location":"cp_solving/100_blue/P1450/","title":"P1450 [HAOI2008] \u786c\u5e01\u8d2d\u7269","text":"<p>2025-05-27</p> <p>\u6709\u70b9\u96be\u5427\uff0c\u770b\u9898\u89e3\u770b\u4e86\u4f1a\u6ca1\u770b\u61c2\u3002\u4f46\u4e5f\u4e0d\u662f\u5f88\u96be\u770b\u61c2\u3002</p> <p>\u5176\u5b9e\u6211\u4eec\u5c31\u662f\u5148\u628a\u6240\u6709\u786c\u5e01\u90fd\u4e0d\u8bbe\u7f6e\u9650\u5236\u7684\u7b54\u6848\u6c42\u51fa\u6765\uff0c\u7136\u540e\u518d\u628a\u8d85\u51fa\u9650\u5236\u7684\u65b9\u6848\u7ed9\u51cf\u6389\u3002</p> <p>\u90a3\u4e48\u8d85\u51fa\u9650\u5236\u7684\u65b9\u6848\u5c31\u662f <code>1\u79cd\u786c\u5e01\u8d85\u51fa - 2\u79cd\u786c\u5e01\u8d85\u51fa + 3\u79cd\u786c\u5e01\u8d85\u51fa - 4\u79cd\u786c\u5e01\u8d85\u51fa</code> \u7684\u65b9\u6848\u6570\u3002</p> <p>\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u679a\u4e3e\u5b50\u96c6\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u79cd\u786c\u5e01, \\(dp_{cur - c_{i}(d_{i}+1)}\\) \u5c31\u662f\u8fd9\u79cd\u786c\u5e01\u8d85\u51fa\u4e86\u9650\u5236\u7684\u65b9\u6848\u6570\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u80af\u5b9a\u662f\u4f7f\u7528\u6b21\u6570\u5927\u4e8e \\(d_i\\) \u4e86\uff0c\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u53bb\u5173\u5fc3\u5b83\u5177\u4f53\u4f7f\u7528\u4e86\u591a\u5c11\u6b21\uff0c\u4e5f\u4e0d\u7528\u53bb\u5728\u610f\u5176\u5b83\u786c\u5e01\u4f7f\u7528\u7684\u60c5\u51b5\u3002</p> <p>\u591a\u79cd\u786c\u5e01\u8d85\u51fa\u9650\u5236\u7684\u60c5\u51b5\u4e5f\u662f\u540c\u7406\u7684\u3002</p> <pre><code>// #define YUANSHEN\n#if defined(YUANSHEN)\n#include \"C:/codes/cp_code/template/debug.hpp\"\n#else\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n#define dbg(...) 42\n#endif\n\n#define rep(N) for(int i = 1; i &lt;= N; i++)\n\ntemplate &lt;typename T1, typename T2&gt;\nvoid cmin(T1&amp; x, const T2&amp; y)\n{\n    x = x &lt; y ? x : y;\n}\ntemplate &lt;typename T1, typename T2&gt;\nvoid cmax(T1&amp; x, const T2&amp; y)\n{\n    x = x &gt; y ? x : y;\n}\nusing ll = long long;\nusing ull = unsigned long long;\nusing vi = vector&lt;int&gt;;\nusing vl = vector&lt;ll&gt;;\nusing pii = pair&lt;int, int&gt;;\nusing pll = pair&lt;ll, ll&gt;;\ntemplate &lt;class T&gt;\nusing vc = vector&lt;T&gt;;\n\n#define fixset(x) fixed &lt;&lt; setprecision(x)\n#define fi first\n#define se second\n#define sz(x) (int)(x).size()\n#define all(x) (x).begin(), (x).end()\n#define ALL(x) (x).begin() + 1, (x).end()\nconstexpr int INF = 1000000000;\nconstexpr ll LNF = 1000000000000000000LL;\n\n// Date: 2025-05-27\n// Time: 15:07:58\nconstexpr int N = int(1e5);\nll dp[N + 1], c[5], d[5];\n\nvoid ChatGptDeepSeek()\n{\n    int q;\n    cin &gt;&gt; c[1] &gt;&gt; c[2] &gt;&gt; c[3] &gt;&gt; c[4] &gt;&gt; q;\n    dp[0] = 1;\n    for(int i = 1; i &lt;= 4; i++){\n        for(int j = c[i]; j &lt;= N; j++)\n            dp[j] += dp[j - c[i]];\n    }\n    while(q--){\n        for(int i = 1; i &lt;= 4; i++)\n            cin &gt;&gt; d[i];\n        int s;\n        cin &gt;&gt; s;\n        ll ans = dp[s];\n        for(int mask = 1; mask &lt;= 15; mask++){\n            ll x = 0;\n            for(int j = 0; j &lt; 4; j++){\n                if(mask &gt;&gt; j &amp; 1) x += c[j + 1] * (d[j + 1] + 1);\n            }\n            if(x &gt; s) continue;\n            if(__builtin_popcount(mask) &amp; 1) ans -= dp[s - x];\n            else ans += dp[s - x];\n        }\n        cout &lt;&lt; ans &lt;&lt; '\\n';\n    }\n}\n\nint main()\n{\n#ifndef YUANSHEN\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr), cout.tie(nullptr);\n#endif\n    int T = 1;\n    // cin &gt;&gt; T;\n    while (T--)\n        ChatGptDeepSeek();\n    return 0;\n}\n</code></pre>"},{"location":"cp_solving/100_blue/P1967/","title":"P1967 [NOIP 2013 \u63d0\u9ad8\u7ec4] \u8d27\u8f66\u8fd0\u8f93","text":"<p>2025-05-27</p> <p>\u770b\u7740\u4e0d\u592a\u4f1a\uff0c\u4e8e\u662f\u679c\u65ad\u6253\u5f00\u9898\u89e3\u3002\u679c\u7136\u7a0d\u5fae\u6709\u70b9\u96be\u60f3\uff0c\u9700\u8981\u6811\u4e0a\u500d\u589e\u6c42LCA\uff0c\u6211\u4e0d\u548b\u719f\uff0c\u4e5f\u662f\u540e\u9762\u57fa\u672c\u6ca1\u7528\u8fc7\u3002\u6811\u5256\u8fd8\u7a0d\u5fae\u5199\u4e86\u51e0\u9898\u3002</p> <p>tag: LCA \u751f\u6210\u6811 \u500d\u589e</p> <p>hhh\uff0c\u8fd8\u6709\u597d\u591a\u7bc7\u535a\u5ba2\u6ca1\u6709\u5199\uff0c\u5f88\u591a\u9898\u76ee\u6ca1\u6709\u8865\uff0c\u4e5f\u5feb\u8981\u671f\u672b\u8003\u8bd5\u4e86\uff0c\u4e0b\u5468\u662f\u6700\u540e\u4e00\u4e2a\u6709\u8bfe\u7684\u5468\uff0c\u7aef\u5348\u6253\u7b97\u56de\u5bb6\u73a9\u73a9\u3002</p>"},{"location":"cp_solving/100_blue/P1967/#_1","title":"\u9898\u610f","text":"<p>\u7ed9\u4e00\u4e2a \\(n\\) \u4e2a\u70b9 \\(m\\) \u6761\u8fb9\u7684\u65e0\u5411\u56fe\uff0c\u6709 \\(q\\) \u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee \\(x\\) \u5230 \\(y\\) \u7684\u8def\u5f84\u7ecf\u8fc7\u7684\u6700\u5c0f\u8fb9\u6743\u6700\u5927\u662f\u591a\u5c11\u3002</p>"},{"location":"cp_solving/100_blue/P1967/#_2","title":"\u601d\u8def","text":"<p>\u5982\u679c\u662f\u4e00\u4e2a\u6811\uff0c\u90a3\u5c31\u5f88\u597d\u8003\u8651\u8def\u5f84\u95ee\u9898\uff0c\u4f46\u662f\u56fe\u5c31\u4e0d\u597d\u641e\u3002\u4f46\u8fd9\u9898\uff0c\u53ea\u9700\u8981\u8003\u8651\u8def\u5f84\u4e0a\u7684\u6700\u5c0f\u7684\u8fb9\uff0c\u53ef\u4ee5\u628a\u8fd9\u4e2a\u56fe\u4e0a\u5f88\u591a\u65e0\u7528\u7684\u8fb9\u53bb\u6389\uff0c\u53ea\u9700\u8981\u4fdd\u7559\u6700\u5927\u751f\u6210\u6811\u3002\u8fd8\u6709\u54ea\u4e9b\u60c5\u51b5\u53ef\u4ee5\u50cf\u8fd9\u6837\u8f6c\u6362\u5462\uff1f\u7136\u540e\u5c31\u53d8\u6210\u6811\u4e0a\u7684\u95ee\u9898\u4e86\uff0c\u4e24\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u53d8\u6210\u4e86\u552f\u4e00\u7684\uff0c\u53ea\u9700\u8981 LCA \u6765\u6c42\u8def\u5f84\uff0c\u9884\u5904\u7406\u4e00\u4e0b\u7ecf\u8fc7\u7684\u6700\u5c0f\u7684\u8fb9\u3002</p>"},{"location":"cp_solving/100_blue/P1967/#_3","title":"\u4ee3\u7801","text":"<p>lca \u4ee3\u7801\u8fd8\u633a\u597d\u61c2\u7684\uff0c\u5c31\u662f\u5148\u8ba9\u4e24\u4e2a\u70b9\u6df1\u5ea6\u76f8\u540c\uff0c\u7136\u540e\u82e5\u5b83\u4eec\u6df1\u5ea6\u76f8\u540c\u540e\u4ecd\u4e3a\u4e0d\u540c\u7684\u70b9\uff0c\u90a3\u4e48\u5b83\u4eec\u7684 lca \u5728\u6df1\u5ea6\u66f4\u5c0f\u7684\u8282\u70b9\u3002\u8fd9\u91cc\u4f7f\u7528 \\(e_{u,i}\\) \u6765\u6c42 \\(u\\) \u5230\u7b2c \\(2^{i}\\) \u4e2a\u7956\u5148\u7684\u8def\u5f84\u4e0a\u7ecf\u8fc7\u7684\u6700\u77ed\u7684\u8fb9\uff0c\u8ddf lca \u4e00\u6837\u7684\u3002 </p> <pre><code>// #define YUANSHEN\n#if defined(YUANSHEN)\n#include \"C:/codes/cp_code/template/debug.hpp\"\n#else\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n#define dbg(...) 42\n#endif\n\n#define rep(N) for(int i = 1; i &lt;= N; i++)\n\ntemplate &lt;typename T1, typename T2&gt;\nvoid cmin(T1&amp; x, const T2&amp; y)\n{\n    x = x &lt; y ? x : y;\n}\ntemplate &lt;typename T1, typename T2&gt;\nvoid cmax(T1&amp; x, const T2&amp; y)\n{\n    x = x &gt; y ? x : y;\n}\nusing ll = long long;\nusing ull = unsigned long long;\nusing vi = vector&lt;int&gt;;\nusing vl = vector&lt;ll&gt;;\nusing pii = pair&lt;int, int&gt;;\nusing pll = pair&lt;ll, ll&gt;;\ntemplate &lt;class T&gt;\nusing vc = vector&lt;T&gt;;\n\n#define fixset(x) fixed &lt;&lt; setprecision(x)\n#define fi first\n#define se second\n#define sz(x) (int)(x).size()\n#define all(x) (x).begin(), (x).end()\n#define ALL(x) (x).begin() + 1, (x).end()\nconstexpr int INF = 1000000000;\nconstexpr ll LNF = 1000000000000000000LL;\n\n// Date: 2025-05-27\n// Time: 17:01:29\nint fa[10005][21], e[10005][21];\n\nvoid ChatGptDeepSeek()\n{\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    vector&lt;array&lt;int, 3&gt;&gt; edge(m);\n    for(int i = 0; i &lt; m; i++)\n        cin &gt;&gt; edge[i][0] &gt;&gt; edge[i][1] &gt;&gt; edge[i][2];\n    vi f(n + 1);\n    vc&lt;vc&lt;array&lt;int, 2&gt;&gt;&gt; g(n + 1);\n    auto find = [&amp;](auto &amp;&amp;self, int x) -&gt; int{\n        return f[x] == x ? x : f[x] = self(self, f[x]);\n    };\n    auto kruskal = [&amp;](){\n        ranges::sort(edge, [](array&lt;int, 3&gt; x, array&lt;int, 3&gt; y){\n            return x[2] &gt; y[2];\n        });\n        for(int i = 1; i &lt;= n; i++)\n            f[i] = i;\n        for(auto [u, v, w] : edge){\n            if(find(find, u) != find(find, v)){\n                f[f[v]] = f[u];\n                g[u].push_back({v, w});\n                g[v].push_back({u, w});\n            }\n        }\n    };\n    kruskal();\n    vi dep(n + 1);\n    auto dfs = [&amp;](auto &amp;&amp;self, int u, int pre) -&gt; void{\n        dep[u] = dep[pre] + 1;\n        for(auto [v, w] : g[u]){\n            if(v == pre) continue;\n            fa[v][0] = u, e[v][0] = w;\n            self(self, v, u);\n        }\n    };\n\n    for(int i = 1; i &lt;= n; i++){\n        if(dep[i] == 0){\n            dfs(dfs, i, 0);\n            fa[i][0] = i;\n            e[i][0] = INF;\n        }\n    }\n    for(int i = 1; i &lt;= 20; i++){\n        for(int j = 1; j &lt;= n; j++){\n            fa[j][i] = fa[fa[j][i - 1]][i - 1];\n            e[j][i] = min(e[j][i - 1], e[fa[j][i - 1]][i - 1]);\n        }\n    }\n    auto lca = [&amp;](int x, int y){\n        if(find(find, x) != find(find, y)) return -1;\n        if(dep[x] &lt; dep[y]) swap(x, y);\n        int res = INF;\n        for(int i = 0, z = dep[x] - dep[y]; z; i++, z &gt;&gt;= 1){\n            if(z &amp; 1){\n                cmin(res, e[x][i]);\n                x = fa[x][i];\n            }\n        }\n        if(x == y) return res;\n        for(int i = 20; x != y &amp;&amp; i &gt;= 0; i--){\n            if(fa[x][i] != fa[y][i]){\n                cmin(res, min(e[x][i], e[y][i]));\n                x = fa[x][i], y = fa[y][i];\n            }\n        }\n        cmin(res, min(e[x][0], e[y][0]));\n        return res;\n    };\n    int q;\n    cin &gt;&gt; q;\n    while(q--){\n        int x, y;\n        cin &gt;&gt; x &gt;&gt; y;\n        cout &lt;&lt; lca(x, y) &lt;&lt; '\\n';\n    }\n}\n\nint main()\n{\n#ifndef YUANSHEN\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr), cout.tie(nullptr);\n#endif\n    int T = 1;\n    // cin &gt;&gt; T;\n    while (T--)\n        ChatGptDeepSeek();\n    return 0;\n}\n</code></pre>"},{"location":"cp_solving/100_blue/P3694/","title":"P3694 \u90a6\u90a6\u7684\u5927\u5408\u5531\u7ad9\u961f","text":"<p>2025-05-26</p> <p>\u540c\u6837\u662f @GUAIKATTO \u7ed9\u6211\u63a8\u7684\u9898\u76ee\u3002</p>"},{"location":"cp_solving/100_blue/P3694/#_1","title":"\u9898\u610f","text":"<p>\u6709 \\(n\\) \u4e2a\u6570\u5b57\uff0c\u5747\u4e3a \\([1, m]\\)\uff0c\u6211\u4eec\u53ef\u4ee5\u53d6\u51fa\u4e00\u4e9b\u6570\u5b57\uff0c\u7136\u540e\u91cd\u65b0\u5b89\u6392\u5b83\u4eec\u7684\u4f4d\u7f6e\uff0c\u9700\u8981\u4f7f\u5f97\u6700\u7ec8\u6240\u6709\u76f8\u540c\u7684\u6570\u5b57\u90fd\u76f8\u90bb\uff0c\u95ee\u6700\u5c11\u8981\u6392\u51e0\u4e2a\u6570\u5b57\u7684\u4f4d\u7f6e\u3002</p>"},{"location":"cp_solving/100_blue/P3694/#_2","title":"\u601d\u8def","text":"<p>\u5176\u5b9e tag \u91cc\u770b\u5230\u72b6\u538bdp\u4e86\uff0c\u5c31\u8be5\u5b8c\u5168\u4e0d\u770b tag \u7684\u3002\u3002\u3002\u56e0\u4e3a M \u53ea\u6709 \\(20\\)\uff0c\u6240\u4ee5\u72b6\u6001\u603b\u5171\u53ea\u6709 \\(2^{20}\\) \u79cd\uff0c\u53ef\u4ee5\u4f7f\u7528\u72b6\u538bdp\u3002\u5373\u4e3a \\(1\\) \u7684\u4f4d\u8868\u793a\u5df2\u7ecf\u6392\u597d\u4e86\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5728\u5f53\u524d\u72b6\u6001\u8fd8\u6ca1\u6709\u9009\u62e9\u7684\u6570\u5b57\u4e2d\uff0c\u9009\u62e9\u4e00\u79cd\uff0c\u7136\u540e\u770b\u9700\u8981\u82b1\u8d39\u591a\u5c11\u3002</p> <p>\u90a3\u4e48\u663e\u7136\u5c31\u662f\u540e\u9762 \\(cnt_x\\) \u4e2a\u6570\u5b57\u4e2d\u4e0d\u7b49\u4e8e \\(x\\) \u7684\u6570\u5b57\u7684\u4e2a\u6570\u3002</p> <p>\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u5f88\u57fa\u7840\u7684\u72b6\u538bDP\u54c8\uff0c\u5f88\u5feb\u5c31 AC \u4e86\u3002</p> <pre><code>// #define YUANSHEN\n#if defined(YUANSHEN)\n#include \"C:/codes/cp_code/template/debug.hpp\"\n#else\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n#define dbg(...) 42\n#endif\n\n#define rep(N) for(int i = 1; i &lt;= N; i++)\n\ntemplate &lt;typename T1, typename T2&gt;\nvoid cmin(T1&amp; x, const T2&amp; y)\n{\n    x = x &lt; y ? x : y;\n}\ntemplate &lt;typename T1, typename T2&gt;\nvoid cmax(T1&amp; x, const T2&amp; y)\n{\n    x = x &gt; y ? x : y;\n}\nusing ll = long long;\nusing ull = unsigned long long;\nusing vi = vector&lt;int&gt;;\nusing vl = vector&lt;ll&gt;;\nusing pii = pair&lt;int, int&gt;;\nusing pll = pair&lt;ll, ll&gt;;\ntemplate &lt;class T&gt;\nusing vc = vector&lt;T&gt;;\n\n#define fixset(x) fixed &lt;&lt; setprecision(x)\n#define fi first\n#define se second\n#define sz(x) (int)(x).size()\n#define all(x) (x).begin(), (x).end()\n#define ALL(x) (x).begin() + 1, (x).end()\nconstexpr int INF = 1000000000;\nconstexpr ll LNF = 1000000000000000000LL;\n\n// Date: 2025-05-26\n// Time: 10:39:15\nint dp[1048576];\n\nvoid ChatGptDeepSeek()\n{\n    memset(dp, 0x3f, sizeof dp);\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    vi a(n + 1), cnt(m);\n    vc&lt;vi&gt; pre(n + 1, vi(m));\n    for(int i = 1; i &lt;= n; i++){\n        cin &gt;&gt; a[i];\n        cnt[--a[i]]++;\n        pre[i] = pre[i - 1];\n        pre[i][a[i]]++;\n    }\n    dp[0] = 0;\n    for(int i = 0; i &lt; (1 &lt;&lt; m); i++){\n        int len = 0;\n        for(int j = 0; j &lt; m; j++)\n            if(i &gt;&gt; j &amp; 1) len += cnt[j];\n        for(int j = 0; j &lt; m; j++){\n            if((i &gt;&gt; j &amp; 1) == 0){\n                dp[i ^ (1 &lt;&lt; j)] = min(dp[i ^ (1 &lt;&lt; j)], dp[i] + (cnt[j] - (pre[len + cnt[j]][j] - pre[len][j])));\n            }\n        }\n    }\n    cout &lt;&lt; dp[(1 &lt;&lt; m) - 1];\n}\n\nint main()\n{\n#ifndef YUANSHEN\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr), cout.tie(nullptr);\n#endif\n    // cerr &lt;&lt; (1 &lt;&lt; 20) ;\n    int T = 1;\n    // cin &gt;&gt; T;\n    while (T--)\n        ChatGptDeepSeek();\n    return 0;\n}\n</code></pre>"},{"location":"cp_solving/100_blue/P6088/","title":"P6088 [JSOI2015] \u5b57\u7b26\u4e32\u6811","text":"<p>2025-05-22</p> <p>\u611f\u8c22 @GUAIKATTO \u7ed9\u6211\u63a8\u9898\u76ee\uff0c\u2764\ufe0f\u2764\ufe0f\u2764\ufe0f\u3002</p> <p>\u4f5c\u6218\u8bb0\u5f55: </p> <p>tag: \u6811\u5256 Trie</p> <p>\u5199\u4e86\u4e00\u5c0f\u65f6\u4f46 0 \u884c\u6709\u7528\u7684\u4ee3\u7801\u3002\u3002\u3002\u7136\u540e\u679c\u65ad\u770b\u9898\u89e3\uff0c\u7136\u540e\u91cd\u5199\u5c31\u8fc7\u4e86\u3002</p>"},{"location":"cp_solving/100_blue/P6088/#_1","title":"\u9898\u610f","text":"<p>\u7ed9\u4e00\u68f5\u6811\uff0c\u6bcf\u6761\u8fb9\u90fd\u662f\u65e0\u5411\u8fb9\u4e14\u8fb9\u6743\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u9700\u8981\u56de\u7b54 Q \u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u95ee \\(u\\) \u5230 \\(v\\) \u7684\u7b80\u5355\u8def\u5f84\u4e0a\uff0c\u5b57\u7b26\u4e32 \\(s\\) \u662f\u591a\u5c11\u6761\u8fb9\u7684\u524d\u7f00\u3002</p> <p>\\(|s| \\le 10\\)\uff0c \\(n, q \\le 10 ^ 5\\)\u3002</p>"},{"location":"cp_solving/100_blue/P6088/#_2","title":"\u601d\u8def","text":"<p>\u6ca1\u60f3\u5230\u554a\uff0c\u867d\u7136\u6211\u662f\u60f3\u5230\u4e86\u6811\u4e0a\u7684\u8def\u5f84\u80af\u5b9a\u5f97\u8f6c\u6362\u6210 LCA \u6765\u6c42\u7684\uff0c\u4f46\u662f\u6211\u540e\u6765\u53bb\u60f3\u7684\u662f\u6bcf\u4e2a\u8282\u70b9\u5f00\u4e00\u4e2a trie\u3002\u3002\u3002\u8fd9\u6837\u80af\u5b9a\u662f\u4e0d\u592a\u884c\u5440\uff0c\u7a7a\u95f4\u8981\u5f88\u5927\u800c\u4e14\u5f88\u96be\u5199\u7684\u3002</p> <p>\u9ebb\u4e86\uff0c\u5176\u5b9e\u592a\u4e45\u6ca1\u7528\u8fc7 trie \u4e86\uff0c\u672c\u6765 Insert \u5565\u7684\u90fd\u5fd8\u4e86\uff0c\u7136\u540e\u5bf9\u8fd9\u4e2a\u8981\u7684\u7a7a\u95f4\u4e5f\u4e0d\u592a\u6e05\u695a\u3002</p> <p>\u4e0d\u8fc7\u5176\u5b9e\u662f\u4e0d\u662f\u601d\u8def\u79bb ac \u53ea\u5dee\u4e00\u70b9\u4e86\uff01\u90fd\u60f3\u5230\u6811\u5256\u4e86\uff0c\u548b\u6ca1\u60f3\u5230\u5c31\u662f\u53ef\u4ee5\u628a\u8be2\u95ee\u90fd\u62c6\u6210 \\([l, r, s]\\) \u8fd9\u79cd\u683c\u5f0f\u3002</p> <p>\u597d\u5427\u5176\u5b9e\u4e5f\u60f3\u5230\u4e86\uff0c\u4f46\u662f\u8fd9\u73a9\u610f\u770b\u8d77\u6765\u5c31\u5f88\u96be\u5904\u7406\u5440\u3002trie \u53ef\u4ee5 insert\uff0c\u4f46\u4e5f\u6ca1\u89c1\u8fc7\u5220\u9664\u7684\u5427\u3002\u3002\u3002\u5e78\u597d\u4e0d\u80fd\u5220\u9664\uff0c\u5176\u5b9e\u4f60\u80fd\u5220\u9664\u7684\u8bdd\uff0c\u8fd9\u4e2a\u4e5f\u641e\u4e0d\u4e86\u5440\u3002\u8fd9\u4e2a\u4e0d\u5c31\u662f\u4e00\u4e2a\u5f88\u7ecf\u5178\u7684\u626b\u63cf\u7ebf\u5440\ud83d\ude05\uff0c\u628a \\([1, l - 1]\\) \u7684\u7b54\u6848\u51cf\u53bb\uff0c\u518d\u628a \\([1, r]\\) \u7684\u7b54\u6848\u52a0\u56de\u6765\uff0c\u4e0d\u5c31\u5199\u51fa\u6765\u4e86\u5417\uff1f</p>"},{"location":"cp_solving/100_blue/P6088/#_3","title":"\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconstexpr int N = int(1e5) + 5;\nint siz[N], dep[N], fa[N], son[N], dfn[N], top[N], seg[N];\n\nstruct edge {\n    int u, v;\n    string s;\n};\nstruct ques{\n    int l, r, idx;\n    string s;\n};\nint trie[N * 10][26], cnt[N * 10];\n\nint main() {\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr), cout.tie(nullptr);\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;string&gt; t(n + 1);\n    vector&lt;edge&gt; Edge(n);\n    vector&lt;vector&lt;int&gt;&gt; g(n + 1);\n    for (int i = 1; i &lt; n; i++) {\n        int u, v;\n        string s;\n        cin &gt;&gt; u &gt;&gt; v &gt;&gt; s;\n        Edge[i] = {u, v, s};\n        g[u].push_back(v);\n        g[v].push_back(u);\n    }\n    auto dfs1 = [&amp;](auto &amp;&amp;self, int u, int pre) -&gt; void {\n        fa[u] = pre, siz[u] = 1, dep[u] = dep[pre] + 1;\n        for (auto v : g[u]) {\n            if (v == pre) continue;\n            self(self, v, u);\n            siz[u] += siz[v];\n            if(siz[v] &gt; siz[son[u]])\n                son[u] = v;\n        }\n    };\n    dfs1(dfs1, 1, 0);\n    {\n        int tot = 0;\n        auto dfs2 = [&amp;](auto &amp;&amp;self, int u, int pre) -&gt; void{\n            dfn[u] = ++tot, seg[tot] = u;\n            if(son[pre] == u) top[u] = top[pre];\n            else top[u] = u;\n            if(son[u]) self(self, son[u], u);\n            for(auto v : g[u]){\n                if(v == pre || v == son[u]) continue;\n                self(self, v, u);\n            }\n        };\n        dfs2(dfs2, 1, 0);\n    }\n    for(int i = 1; i &lt; n; i++){\n        auto [u, v, s] = Edge[i];\n        if(dep[u] &gt; dep[v]) swap(u, v);\n        t[v] = s;\n    }\n    int q;\n    cin &gt;&gt; q;\n    vector&lt;ques&gt; Q;\n    for(int k = 0; k &lt; q; k++){\n        int u, v;\n        string s;\n        cin &gt;&gt; u &gt;&gt; v &gt;&gt; s;\n        while(top[u] != top[v]){\n            if(dep[top[u]] &lt; dep[top[v]]) swap(u, v);\n            Q.push_back({dfn[top[u]], dfn[u], k, s});\n            u = fa[top[u]];\n        }\n        if(u != v){\n            if(dep[u] &gt; dep[v]) swap(u, v);\n            Q.push_back({dfn[u] + 1, dfn[v], k, s});\n        }\n    }\n    ranges::sort(Q, [](ques x, ques y){\n        return x.l &lt; y.l;\n    });\n    auto cmp = [](ques x, ques y){\n        return x.r &gt; y.r;\n    };\n    priority_queue&lt;ques, vector&lt;ques&gt;, decltype(cmp)&gt; pq(cmp);\n    vector&lt;int&gt; ans(q);\n    auto query = [&amp;](string s){\n        int cur = 0;\n        for(auto x : s){\n            if(trie[cur][x - 'a'] == 0) return 0;\n            cur = trie[cur][x - 'a'];\n        }\n        return cnt[cur];\n    };\n    int tot = 0;\n    auto Insert = [&amp;](string s){\n        int cur = 0;\n        for(auto x : s){\n            if(trie[cur][x - 'a'] == 0){\n                trie[cur][x - 'a'] = ++tot;\n            }\n            cur = trie[cur][x - 'a'];\n            cnt[cur]++;\n        }\n    };\n    for(int i = 2, j = 0; i &lt;= n; i++){\n        while(j &lt; Q.size() &amp;&amp; Q[j].l == i){\n            // cerr &lt;&lt; j &lt;&lt; \" \\n\";\n            ans[Q[j].idx] -= query(Q[j].s);\n            pq.push(Q[j++]);\n        }\n        Insert(t[seg[i]]);\n        while(!pq.empty() &amp;&amp; pq.top().r == i){\n            auto [l, r, idx, s] = pq.top();\n            // cerr &lt;&lt; l &lt;&lt; \"  \" &lt;&lt; r &lt;&lt; '\\n';\n            pq.pop();\n            ans[idx] += query(s);\n        }\n    }\n    // cerr &lt;&lt; \"query: \" &lt;&lt; query(\"ab\") &lt;&lt; '\\n';\n    for(int i = 0; i &lt; q; i++)\n        cout &lt;&lt; ans[i] &lt;&lt; \"\\n\";\n    return 0;\n}\n</code></pre>"},{"location":"cp_solving/100_blue/P6088/#_4","title":"\u603b\u7ed3","text":"<p>\u591a\u5199\u5c31\u597d\u3002\u3002\u3002</p> <p>\u6ce8\u610f\u8981\u4f1a\u7a0d\u5fae\u7b97\u4e00\u4e0b trie \u7684\u7a7a\u95f4\uff0c\u50cf\u8fd9\u9898\uff0c\u5fc5\u987b\u5dee\u4e0d\u591a\u5f00 \\(10n\\) \u7684\u7a7a\u95f4\uff0c\u56e0\u4e3a\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u6700\u591a\u53ef\u80fd\u4f1a\u589e\u52a0 \\(10\\) \u4e2a\u70b9\uff0c\u5176\u5b9e\u633a\u597d\u5206\u6790\u7684\u3002</p> <p>\u7136\u540e\u50cf\u8ba1\u6570\u4ee5\u53ca\u72b6\u6001\u5565\u7684\uff0c\u90fd\u662f\u53ea\u7528\u770b \\(trie_{cur,c}\\) \u8fd9\u79cd\uff0c\u50cf\u8fd9\u9898\u7684 \\(cnt\\) \u6570\u7ec4\uff0c\u8fd9\u4e2a\u662f\u4e4b\u524d\u4e00\u4e2a CF \u9898 CF2093G \u7528\u8fc7 trie\uff0c\u5176\u4ed6\u65f6\u5019\u8fd8\u771f\u6ca1\u7528\u8fc7\u3002</p> <p>\u7136\u540e\u6ca1\u6709\u5565\u60f3\u8bf4\u7684\u4e86\u5427\uff0c\u4f46\u5c31\u662f\u611f\u89c9\u8fd9\u9898\u50cf\u8fd9\u6837\uff0c\u5370\u8c61\u4e0d\u4f1a\u5f88\u6df1\u523b\uff0c\u5982\u679c\u662f\u81ea\u5df1\u80fd\u60f3\u51fa\u6765\uff0c\u80af\u5b9a\u6536\u83b7\u66f4\u591a\uff0c\u8bb0\u4e0b\u6765\u5076\u5c14\u7ffb\u7ffb\u4f1a\u597d\u70b9\u3002\u8fd8\u597d\u81ea\u5df1\u601d\u8003\u4e86\u4e0b\u5427\uff0c\u76f4\u63a5\u770b\u9898\u89e3\u80af\u5b9a\u66f4\u4e0d\u723d\u3002</p>"},{"location":"cp_solving/100_blue/main/","title":"100\u9053\u6d1b\u8c37\u84dd/\u7d2b\u9898","text":"<p>2025-05-23</p> <p>\u60f3\u505a\u4e00\u4e2a\u8fd9\u79cd\u5408\u96c6\uff0c\u4e3b\u8981\u662f\u770b\u89c1\u522b\u4eba\u6709\u7c7b\u4f3c\u7684\uff0c\u53d7\u5230\u542f\u53d1\uff0c\u52a0\u4e0a\u6211\u4e00\u76f4\u4ee5\u6765\u5199\u7684\u7a0d\u5fae\u6709\u610f\u601d\u70b9\u7684\u9898\u76ee\u592a\u5c11\uff0c\u73b0\u5728\u7b97\u6cd5\u65f6\u95f4\u4e0d\u591a\u4e86\uff0c\u60f3\u7a0d\u5fae\u5199\u4e00\u4e9b\u6709\u70b9\u96be\u5ea6\u7684\u9898\u76ee\u518d\u9000\u51fa\u5427\u3002\u7d2b\u53c8\u592a\u96be\u4e86\uff0c\u84dd\u9898\u53ef\u80fd\u7a0d\u5fae\u8212\u670d\u70b9\u5427\u3002</p> <p>\u5176\u5b9e\u521a\u624d\u4f3c\u4e4e\u60f3\u5230\u70b9\u5565\uff0c\u4f46\u662f\u53c8\u5fd8\u4e86\uff0c\u4e8e\u662f\u8fd9\u91cc\u4e0d\u77e5\u9053\u5199\u4ec0\u4e48\u4e86\uff01\uff01\uff01</p> <p>\u60f3\u8d77\u6765\u4e86\uff0c\u5c31\u662f\u8bf4\uff0c\u4e3a\u4e86\u953b\u70bc\u81ea\u5df1\uff0c\u4ee5\u53ca\u84dd\u9898\u5176\u5b9e\u5bf9\u6211\u633a\u96be\uff0c\u5fc5\u987b\u8bb0\u70b9\u535a\u5ba2\u624d\u80fd\u8ba9\u6211\u611f\u89c9\u5b89\u5fc3\uff0c\u6240\u4ee5\u8fd9\u4e2a\u671f\u95f4\u6211\u5199\u5f97\u6240\u6709\u96be\u5ea6 \\(\\ge\\) \u84dd\u7684\u9898\uff0c\u90fd\u4f1a\u653e\u5728\u4e00\u4e2a\u5355\u72ec\u7684\u535a\u5ba2\uff0c\u6211\u4e5f\u4f1a\u5c3d\u91cf\u6bcf\u9898\u5f04\u4e00\u4e2a\u5f55\u5c4f\u5408\u96c6\u653e B \u7ad9\u3002\u8fd9\u6837\u6709\u7a7a\u4e5f\u53ef\u4ee5\u770b\u770b\u81ea\u5df1\u662f\u5982\u4f55\u601d\u8003\u7684\uff0c\u662f\u5426\u4f1a\u6709\u5927\u70b9\u7684\u8fdb\u6b65\u3002</p> <p>\u867d\u7136\u6211\u4e4b\u540e\u53ef\u80fd\u4e0d\u51c6\u5907\u6253\u6bd4\u8d5b\u4e86\uff0c\u4f46\u6211\u611f\u89c9\u4f5c\u4e3a\u4e00\u4e2a\u5199\u4e86\u5feb\u4e24\u5e74\u9898\u76ee\u7684\u4eba\uff0c\u6d1b\u8c37\u8fd8\u6ca1\u6709 100 \u84dd\u9898\u7684\u8bdd\uff08\u6216\u5176\u4ed6\u5e73\u53f0\u540c\u96be\u5ea6\u53ca\u6570\u91cf\uff09\uff0c\u90a3\u6211\u5728\u5199\u4ec0\u4e48\uff1f\u6211 CF \u5199\u7684\u6709\u96be\u5ea6\u7684\u9898\u4e5f\u4e0d\u591a\u3002\u6240\u4ee5\u4e3a\u4e86\u5f25\u8865\u6700\u540e\u7684\u9057\u61be\uff0c\u505a\u4e00\u4e0b\u8fd9\u4e2a\u5408\u96c6\uff0c\u5982\u679c\u80fd\u987a\u4fbf\u63d0\u5347\u70b9\u5b9e\u529b\uff0c\u5c31\u66f4\u597d\u4e86\u3002</p> <p>\u76ee\u6807\u5927\u6982\u662f\u653e\u6691\u5047\u524d\u628a\u8fd9\u4e2a\u5408\u96c6\u5b8c\u7ed3\u5427\uff0c\u4e0d\u5bf9\uff0c\u8fd9\u6837\u65f6\u95f4\u4e5f\u592a\u8d76\u4e86\u3002\u3002\u3002\u540e\u9762\u8fd8\u8981\u590d\u4e60\u3002\u4f46\u662f\u62d6\u5f97\u592a\u4e45\u5c31\u6ca1\u4ec0\u4e48\u610f\u4e49\u4e86\uff0c\u4e5f\u4e0d\u80fd\u786e\u4fdd\u80fd\u4e00\u5b9a\u5b8c\u6210\u3002\u5148\u6682\u5b9a\u5427\u3002</p> <p>\u7136\u540e\u5199\u5b8c\u8fd9\u4e48\u591a\u9898\uff0c\u6211\u80af\u5b9a\u5f97\u6709\u8fdb\u6b65\u5427\uff0c\u90a3\u6211\u5c31\u628a\u8fdb\u6b65\u7684\u76ee\u6807\u8bbe\u7f6e\u6210 Codeforces rating \u5230\u8fbe *1900\u3002\u8fd9\u53ef\u80fd\u9700\u8981\u6211\u53bb\u989d\u5916\u5199\u4e00\u4e9bCF\u4ee5\u53caATC\u7684\u6bd4\u8d5b\u548c\u8865\u9898\u3002</p> <p>\u4e0d\u77e5\u4f1a\u505a\u5f97\u600e\u4e48\u6837\uff0c\u4f46 @GUAIKATTO \u521a\u624d\u7ed9\u6211\u63a8\u4e86\u5f88\u591a\u9898\u76ee\uff0c\u6211\u5fc5\u987b\u65e9\u70b9\u5b8c\u6210\u5427\u3002</p> <p>\u5c31\u8fd9\u6837\u7b80\u5355\u70b9\u5427\u3002</p> <p></p> <p>\u8bb0\u5f55\u4e0b\u4eca\u65e5\u7684\u5237\u9898\u6570\u91cf\uff0c\u4e4b\u540e\u84dd\u52a0\u7d2b\u5fc5\u987b\u81f3\u5c11\u5927\u4e8e 130 \u5dee\u4e0d\u591a\u3002</p>"},{"location":"cp_solving/2025/0301/","title":"3\u67081\u65e5-3\u67089\u65e5","text":"<p>\u4ee5\u540e\u53ea\u4f1a\u8bb0\u5f55\u6bcf\u5468\u7684\u60c5\u51b5\u4e86\uff0c\u6216\u8005\u4e00\u6bb5\u65f6\u95f4\u7684\u3002</p> <p>\u56e0\u4e3a\u5f88\u96be\u4fdd\u8bc1\u6bcf\u5929\u80fd\u56fa\u5b9a\u505a\u591a\u5c11\u4e2a\u7279\u5b9a\u96be\u5ea6\u7684\u9898\u76ee\uff0c\u53ef\u80fd\u4f1a\u6709\u5404\u79cd\u5404\u6837\u7684\u4e8b\u60c5\uff0c\u6216\u8005\u6709\u6bd4\u8d5b\u4e4b\u7c7b\u7684\u3002\u800c\u4e14\u5c31\u662f\u4e5f\u6b63\u597d\u53ef\u4ee5\u8bb0\u5f55\u4e00\u4e0b\u8fd9\u5468\u90fd\u6253\u4e86\u54ea\u4e9b\u6bd4\u8d5b\u4e4b\u7c7b\u7684\u3002</p> <p>\u4ee5\u540e\u65b0VP\u6216\u8005\u8865\u6700\u8fd1\u6bd4\u8d5b\u7684\u9898\uff0c\u5c31\u4f1a\u653e\u5728\u6bd4\u8d5b\u7684\u754c\u9762\u6216XCPC\u3002\u7136\u540e\u65e5\u5e38\u627e\u7684\u5199\u7684\u9898\u53ef\u80fd\u4f1a\u653e\u8fd9\u3002</p>"},{"location":"cp_solving/2025/0301/#33","title":"3\u67083\u65e5","text":""},{"location":"cp_solving/2025/0301/#cf2065g-1700","title":"CF2065G *1700","text":"<p>\u5c31\u4e0a\u4e2a\u661f\u671f\u624d\u505a\u8fc7\u4e00\u9053\u7528\u4e86\u8d28\u6570\u7b5b\u548c\u7b5b\u6700\u5c0f\u8d28\u56e0\u5b50\u7684\u9898\u76ee\uff0c\u4e8e\u662f\u5c31\u60f3\u4e86\u4e0b\u8fd9\u9898\u7684\u6027\u8d28\u5f88\u5feb\u5c31\u80fd\u5bf9\u3002</p> <p>\u867d\u7136\u4e5f\u662fWA\u4e86\u4e00\u6b21\uff0c\u770b\u4e86\u6570\u636e\u624d\u77e5\u9053\u54ea\u6709\u95ee\u9898\u3002\u5e94\u8be5\u5148\u6392\u5e8f\u7684\u3002\u53ef\u4ee5\u5c11\u8003\u8651\u5f88\u591a\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconstexpr int N = 2e5;\nbitset&lt;N + 1&gt; is;\nstd::vector&lt;int&gt; primes;\n// \u8bb0\u4e00\u4e0b\u6700\u5c0f\u8d28\u56e0\u5b50\nvector&lt;int&gt; minp(N + 1);\n\nvoid solve()\n{\n    int n;\n    cin &gt;&gt; n;\n    long long ans = 0;\n    int sum = 0;\n    vector&lt;int&gt; cnt(n + 1);\n    // auto sqrtI = [&amp;](int x) {\n    //     int y = (int)sqrt(x);\n    //     return y * y == x ? y : 0;\n    // };\n    vector&lt;int&gt; a(n);\n    for (auto&amp; i : a)\n        cin &gt;&gt; i;\n    sort(a.begin(), a.end());\n    for (int i = 1; i &lt;= n; i++) {\n        int x = a[i - 1];\n        // cin &gt;&gt; x;\n        cnt[x]++;\n        if (!is[x]) {\n            // \u5982\u679c\u662f\u4e00\u4e2a\u8d28\u6570\uff0c\u90a3\u4e48\u53ea\u80fd\u548c\u5176\u4ed6\u7684\u8d28\u6570\uff0c\u9664\u4e86\u5b83\u672c\u8eab\n            sum++;\n            ans += sum - cnt[x];\n            // \u8fd8\u5f97\u770b\u4e00\u4e0b x*x\n            if (1LL * x * x &lt;= n)\n                ans += cnt[x * x];\n        } else {\n            // \u5426\u5219\u5224\u4e00\u4e0b\u6700\u5c0f\u8d28\u56e0\u5b50\n            if (!is[x / minp[x]]) {\n                // cerr &lt;&lt; x &lt;&lt; \" \" &lt;&lt; minp[x] &lt;&lt; '\\n';\n                // \u5982\u679c\u53ea\u6709\u4e24\u4e2a\u8d28\u56e0\u5b50 \u90a3\u4e48\u7b54\u6848\u52a0\u4e0a\u8fd9\u4e24\u4e2a\u7684\u6570\u91cf\n                // \u5f53\u7136\u5b83\u81ea\u5df1\u548c\u81ea\u5df1\u4e5f\u662f\u53ef\u4ee5\u7684\n                ans += cnt[minp[x]] + cnt[x];\n                if (1LL * minp[x] * minp[x] != x)\n                    ans += cnt[x / minp[x]];\n            }\n            // 2 3 ,6 ,2 7\n        }\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n/*\n6\n5 4 6 6 2 3\n\u8fd9\u4e3a\u4ec0\u4e48\u4f1a\u662f8\u5462\uff1f\n5 2,5 3,2 3,2 4\n6 2,6 3. \u5076\u6ca1\u6709\u5224 \u8d28\u6570\u53ef\u80fd\u548c\u500d\u6570\n*/\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.tie(nullptr);\n    for (int i = 2; i &lt;= N; i++) {\n        if (!is[i]) {\n            minp[i] = i;\n            primes.push_back(i);\n            // cerr &lt;&lt; i &lt;&lt; '\\n';\n            if (1LL * i * i &gt; N)\n                continue;\n            for (int j = i * i; j &lt;= N; j += i) {\n                is[j] = true, minp[j] = i;\n            }\n        }\n    }\n    // cout &lt;&lt; primes.size() &lt;&lt; '\\n';\n    int T = 1;\n    cin &gt;&gt; T;\n    while (T--)\n        solve();\n    return 0;\n}\n</code></pre>"},{"location":"cp_solving/2025/0301/#cf2065f-1700","title":"CF2065F *1700","text":"<p>\u8fd9\u4e2a\u66f4\u662f\u7b80\u5355\u4e86\u3002\u6ee1\u8db3\u7b54\u6848\u7684\u60c5\u51b5\u5b9e\u9645\u4e0a\u53ea\u9700\u8981\u5224\u65ad\u957f\u5ea6\u4e3a2\u548c3\u7684\u8def\u5f84\u662f\u5426\u6ee1\u8db3\u3002\u5c31\u5f88\u7b80\u5355\u4e86\u3002\u4f46\u662fDFS\u662f\u4e0d\u662f\u53ef\u80fd\u4f1a\u8d85\u65f6\u6765\u7740\u3002</p> <p>\u53ea\u8981\u8fde\u8fb9\u7684\u65f6\u5019\u5c31\u5904\u7406\u5c31\u884c\u4e86\u3002\u597d\u5427DFS\u597d\u50cf\u4e5f\u884c\u3002</p> <p>\u770b\u4e86\u4e0b\uff0c\u5176\u5b9e\u4e5f\u53ef\u4ee5\u8f93\u5165\u65f6\u5148\u5224\u4e0b\u957f\u5ea6\u4e3a2\u7684\uff0c\u7136\u540e\u627e\u7684\u65f6\u5019\u53ea\u9700\u8981\u904d\u5386\u6bcf\u4e2a\u70b9\u8fde\u7684\u70b9\uff0c\u770b\u8fd9\u4e00\u6b21\u6807\u8bb0\u662f\u5426\u6709\u91cd\u590d\u7684\u3002\u4e5f\u5f88\u597d\u3002\u5dee\u4e0d\u591a\uff0c\u6216\u8005\u6bcf\u6b21\u5f00\u4e2aset\u3002</p> <pre><code>void solve()\n{\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;int&gt; a(n + 1);\n    string s(n, '0');\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; a[i];\n    vector&lt;set&lt;int&gt;&gt; g(n + 1);\n    // vector&lt;vector&lt;int&gt;&gt; adj(n + 1, vector&lt;int&gt;());\n    for (int i = 1; i &lt; n; i++) {\n        int u, v;\n        cin &gt;&gt; u &gt;&gt; v;\n        if (a[u] == a[v]) {\n            s[a[u] - 1] = '1';\n        }\n        if (g[u].contains(a[v])) {\n            s[a[v] - 1] = '1';\n        } else\n            g[u].insert(a[v]);\n        if (g[v].contains(a[u])) {\n            s[a[u] - 1] = '1';\n        } else\n            g[v].insert(a[u]);\n        // g[u].insert(a[v]), g[v].insert(a[u]);\n    }\n    // auto dfs = [&amp;](auto&amp;&amp; self, int u, int pre, int val, int cnt, int len) -&gt; void {\n    //     if ((s[val - 1] == '1') || (pre &amp;&amp; cnt &gt; 0)) {\n    //         // cerr &lt;&lt; pre &lt;&lt; \" \" &lt;&lt; u &lt;&lt; \" \" &lt;&lt; val &lt;&lt; '\\n';\n    //         s[val - 1] = '1';\n    //         return;\n    //     }\n    //     if (len == 3)\n    //         return;\n    //     for (auto v : adj[u]) {\n    //         if (v == pre)\n    //             continue;\n    //         if (a[v] == val)\n    //             self(self, v, u, val, cnt + 1, len + 1);\n    //         else\n    //             self(self, v, u, val, cnt - 1, len + 1);\n    //     }\n    // };\n    // for (int i = 1; i &lt;= n; i++) {\n    //     dfs(dfs, i, 0, a[i], 1, 0);\n    // }\n    cout &lt;&lt; s &lt;&lt; '\\n';\n}\n</code></pre> <p><code>set::count</code> \u548c <code>contains</code> \u6548\u7387\u5dee\u522b\u4e0d\u662f\u5f88\u5927\uff0c\u90fd\u662f \\(\\log n\\) \uff0c\u4f46\u662f <code>multiset::count</code> \u7684\u590d\u6742\u5ea6\u65f6 <code>n</code> \u3002</p>"},{"location":"cp_solving/2025/0301/#cf2065e-1600","title":"CF2065E *1600","text":"<p>\u6709\u70b9\u7b80\u5355\u7684\u6784\u9020\u3002</p> <pre><code>void solve()\n{\n    int n, m, k;\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;\n    auto work = [](int n, int m, int k) -&gt; string {\n        // \u8ba9n \u5927\u4e8e m\n        // \u76f4\u63a5\u653ek\u4e2a0\uff0c\n        // \u7136\u540e\u5982\u679cn-k&gt;m \u90a3\u4e48\u4e0d\u884c\n\n        // \u597d\u50cf\u4e5f\u884c\n        // \u4e0d\u5bf9\uff0c\u5e94\u8be5\u4e0d\u884c\u5427\uff0c\u6bcf\u4e2a\u90fd\u9700\u8981\u4e00\u4e2a1\u6765\u963b\u6321\u3002\n\n        // \u8fd8\u6709\u5176\u4ed6\u65b9\u5f0f\u5417\uff1f\n        string s(k, '0');\n        if (k &gt; n || n - k &gt; m) {\n            return {};\n        }\n        n -= k;\n        for (int i = k; n &amp;&amp; m; i += 2) {\n            s += \"10\";\n            n--, m--;\n        }\n        // m\u5269\u4e0b\u7684\u80af\u5b9a\u5c0f\u4e8ek\n        s = string(m, '1') + s;\n        return s;\n    };\n    string ans = (n &gt; m ? work(n, m, k) : work(m, n, k));\n    if (n &lt; m) {\n        for (int i = 0; i &lt; ans.size(); i++) {\n            if (ans[i] == '0')\n                ans[i] = '1';\n            else\n                ans[i] = '0';\n        }\n    }\n    if (ans.empty())\n        cout &lt;&lt; \"-1\\n\";\n    else\n        cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/2025/0301/#35","title":"3\u67085\u65e5","text":""},{"location":"cp_solving/2025/0301/#cf2006b-1800","title":"CF2006B *1800","text":"<p>\u7edf\u8ba1\u5f53\u524d\u7684\u5df2\u77e5\u8fb9\u7684\u6743\u503c\u4e4b\u548c <code>sum</code> \uff0c\u82e5\u662f\u4e00\u6761\u8def\u5f84\u4e0d\u662f\u6240\u6709\u7684\u8fb9\u90fd\u5df2\u7ecf\u786e\u5b9a\uff0c\u90a3\u4e48\u5b83\u7684\u6743\u503c\u53ef\u4ee5\u52a0\u4e0a <code>w-sum</code>  \u3002\u800c\u5176\u5b9e\u6bcf\u6761\u8fb9\u90fd\u4e00\u5b9a\u4f1a\u88ab\u7ecf\u8fc7\u4e24\u6b21\u3002</p> <p>\u8fd9\u4e2a\u786e\u5b9e\u662f\u4e00\u4e2a\u5f88\u5de7\u5999\u7684\u7ed3\u8bba\u4e86\u3002\u6211\u4eec\u53ea\u9700\u8981\u770b\u6709\u591a\u5c11\u6761\u8def\u5f84\u4e0a\u7684\u8fb9\u5df2\u7ecf\u88ab\u5168\u90e8\u8d4b\u503c\u4e86\u3002</p> <pre><code>void solve()\n{\n    int n;\n    long long w;\n    cin &gt;&gt; n &gt;&gt; w;\n    vector&lt;vector&lt;int&gt;&gt; adj(n + 1, vector&lt;int&gt;());\n    vector&lt;vector&lt;int&gt;&gt; f(n + 1, vector&lt;int&gt;());\n    vector&lt;int&gt; p(n + 1), cnt(n + 1);\n    for (int i = 2; i &lt;= n; i++) {\n        cin &gt;&gt; p[i];\n        adj[p[i]].push_back(i);\n    }\n    auto dfs = [&amp;](auto&amp;&amp; self, int u) -&gt; int {\n        int mx = u;\n        // cerr&lt;&lt;u&lt;&lt;'\\n';\n        for (auto v : adj[u]) {\n            cnt[mx]++;\n            f[v].push_back(mx);\n            mx = max(mx, self(self, v));\n            cnt[mx]++;\n            f[v].push_back(mx);\n        }\n        return mx;\n    };\n    dfs(dfs, 1);\n    // for(int i=1;i&lt;=n;i++)\n    //     cerr&lt;&lt;cnt[i]&lt;&lt;\" \\n\"[i==n];\n    // return ;\n    long long ans = 0, sum = 0;\n    int tot = n;\n    for (int z = 1; z &lt; n; z++) {\n        int x;\n        long long y;\n        cin &gt;&gt; x &gt;&gt; y;\n        for (auto v : f[x]) {\n            cnt[v]--;\n            if (!cnt[v]) {\n                --tot;\n            }\n        }\n        w -= y;\n        ans += 2 * y;\n        cout &lt;&lt; ans + 1LL * tot * w &lt;&lt; ' ';\n    }\n    cout &lt;&lt; '\\n';\n}\n</code></pre> <p>\u8bf4\u5b9e\u8bdd\uff0c\u53ef\u80fd\u8fd8\u662f\u6709\u4e9b\u5730\u65b9\u4e0d\u592a\u7406\u89e3\u7684\u3002</p>"},{"location":"cp_solving/2025/0301/#cf1990d-1800","title":"CF1990D *1800","text":"<p>\u8bf4\u5b9e\u8bdd\uff0c\u8fd9\u4e2a\u7eaf\u6c34\u9898\u4e86\u3002\u5f88\u663e\u7136\u5982\u679c\u5f53\u524d\u8fd9\u4e00\u884c\u76841\u7684\u4e2a\u6570\u662f\u5927\u4e8e2\u7684\u8bdd\uff0c\u90a3\u54b1\u4eec\u80af\u5b9a\u5f97\u6d88\u9664\u4e00\u884c\u5427\u3002\u5982\u679c\u662f\u4e24\u4e2a2\u4e14\u8fde\u7740\uff0c\u90a3\u6211\u4eec\u80af\u5b9a\u4e0d\u4f1a\u4ecb\u610f\u53bb\u4f7f\u7528 1 \u64cd\u4f5c\u3002</p> <p>\u90a3\u4e48\u6211\u4eec\u4ece\u4e0a\u5f80\u4e0b\u904d\u5386\uff0c\u6211\u4eec\u7b2c\u4e00\u6b21\u4f7f\u75281\u64cd\u4f5c\u4f1a\u662f\u5728\u4ec0\u4e48\u5730\u65b9\u5462\uff1f\u80af\u5b9a\u662f\u5728\u7b2c\u4e00\u5217\u7684\u4f4d\u7f6e\uff0c\u90a3\u4e48\u6b64\u65f6\u5982\u679c\u4e0b\u4e00\u884c\u7684\u6570\u91cf\u662f\u5c0f\u4e8e\u7b49\u4e8e2\uff0c\u54b1\u4eec\u65e0\u9700\u8fdb\u884c\u64cd\u4f5c\u4e86\uff0c\u5982\u679c\u662f\u572834\u4e4b\u95f4\uff0c\u6211\u4eec\u80af\u5b9a\u8fd8\u53ef\u4ee5\u8fdb\u884c\u4e00\u6b211\u64cd\u4f5c\uff0c\u4e14\u663e\u7136\u80af\u5b9a\u662f\u53ea\u80fd\u5728\u7b2c3\u5217\u4f7f\u7528\u3002</p> <p>\u5c31\u8bb0\u4e00\u4e0b\u4e0a\u4e00\u884c\u7684\u4f7f\u7528\u60c5\u51b5\u5c31\u597d\u4e86\uff0c\u800c\u4e14\u53ea\u4f1a\u5728\u7b2c\u4e00\u5217\u548c\u7b2c\u4e09\u5217\u4f7f\u7528\u3002</p> <pre><code>void solve()\n{\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;int&gt; a(n + 1);\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; a[i];\n    vector&lt;int&gt; lst(n + 1);\n    int ans = 0;\n    for (int i = 1; i &lt;= n; i++) {\n        if (!a[i])\n            continue;\n        if (lst[i - 1] == 1) {\n            if (a[i] &lt;= 2)\n                continue;\n            if (a[i] &gt; 4) {\n                ans++;\n                continue;\n            }\n            lst[i] = 3, ans++;\n        } else if (lst[i - 1] == 3) {\n            if (a[i] &gt; 4) {\n                ans++;\n                continue;\n            }\n            ans++;\n            lst[i] = 1;\n            continue;\n        } else {\n            if (a[i] &lt;= 2) {\n                lst[i] = 1;\n                ans++;\n            } else\n                ans++;\n        }\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/2025/0301/#cf1987d-1800","title":"CF1987D *1800","text":"<p>\u6211\u4eec\u5148\u5bf9A\u8fdb\u884c\u53bb\u91cd\uff0c\u8bb0\u4e00\u4e0b\u6bcf\u4e2a\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570\u3002</p> <p>\u8fd9\u65f6\u5019\u6211\u4eec\u4ee4 \\(n\\) \u4e3a\u6570\u7ec4\u7684\u957f\u5ea6\u3002</p> <p>\u6211\u4eec\u9700\u8981\u4ece \\(n\\) \u4e2a\u6570\u5b57\u91cc\u9009\u51fa \\(k\\) \u4e2a\u6570\u5b57\u8fdb\u884c\u5220\u9664\uff0c\u4e14\u5e0c\u671b\u5220\u9664\u7684\u6570\u5b57\u6700\u591a\u3002</p> <p>\u6211\u4eec\u5220\u9664\u7684\u7b2c\u4e00\u4e2a\u6570\u5b57\u7684\u6570\u91cf\u4e00\u5b9a\u8981\u5c0f\u4e8e\u5b83\u524d\u9762\u7684\u4e0d\u540c\u5143\u7d20\u7684\u6570\u91cf\uff0c\u5373\u6ee1\u8db3\u80fd\u5728Alice\u5230\u8fd9\u91cc\u4e4b\u524d\u5220\u9664\u5b8c\u8fd9\u4e2a\u6570\u5b57\u3002\u540e\u9762\u7684\u540c\u7406\u3002</p> <p>\u53ef\u4ee5\u7528 dp \u6765\u5b9e\u73b0\u3002</p> <pre><code>void solve()\n{\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;int&gt; a(n + 1);\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; a[i];\n    vector&lt;int&gt; A(1), c(1);\n    sort(a.begin() + 1, a.end());\n    for (int i = 1, cnt = 0; i &lt;= n; i++) {\n        cnt++;\n        if ((i == n) || (a[i + 1] != a[i])) {\n            A.push_back(a[i]);\n            c.push_back(cnt);\n            cnt = 0;\n        }\n    }\n    n = A.size() - 1;\n    // vector&lt;vector&lt;int&gt;&gt; dp(n + 1, vector&lt;int&gt;(n + 1, 6666));\n    vector&lt;int&gt; dp(n + 1, 6666);\n    dp[0] = 0;\n    cerr &lt;&lt; n &lt;&lt; '\\n';\n    for (int i = 1; i &lt;= n; i++) {\n        vector ndp = dp;\n        for (int j = 1; j &lt;= i; j++) {\n            // if (dp[j - 1] == 6666)\n            //     break;\n            if (dp[j - 1] + c[i] &lt;= i - j)\n                ndp[j] = min(dp[j - 1] + c[i], dp[j]);\n        }\n        dp = ndp;\n    }\n    for (int i = n; i &gt;= 0; i--) {\n        if (dp[i] != 6666) {\n            cout &lt;&lt; n - i &lt;&lt; '\\n';\n            return;\n        }\n    }\n}\n</code></pre> <p>\\(dp_{i,j}\\) \u8868\u793a\u4ece\u524d \\(i\\) \u4e2a\u6570\u5b57\u91cc\u9009\u51fa \\(j\\) \u4e2a\u8fdb\u884c\u5220\u9664\u82b1\u8d39\u7684\u6700\u5c0f\u56de\u5408\u6570\u3002</p>"},{"location":"cp_solving/2025/0301/#details","title":"details","text":""},{"location":"cp_solving/2025/0301/#31","title":"3\u67081\u65e5","text":"<ul> <li> CF2071C</li> <li> 24\u56db\u5ddd\u7701\u8d5bBFG</li> <li> ABC394ABCD</li> </ul> <p>\u8865\u4e86\u6628\u665a\u6ca1\u5199\u51fa\u6765\u7684 CF2071C \u3002</p> <p>\u4e2d\u5348VP\u4e862024\u5e74\u56db\u5ddd\u7701\u8d5b\uff0c\u5927\u6982110\u540d\u94dc\uff0c54\u94f6\uff0c\u6211\u4eec80\u3002</p> <p>\u53ea\u80fd\u8bf4\u7b97\u6b63\u5e38\u5427\uff0c\u5f97\u591a\u8865\u9898\u554a\uff0c\u80fd\u81ea\u5df1\u5199\u51fa\u6765\u7684\uff0c\u5927\u6982\u7387\u5e2e\u52a9\u4e0d\u5927\uff0c\u53ea\u6709\u89c9\u5f97\u5750\u7262\u7684\u9898\u76ee\u624d\u4f1a\u6709\u4e9b\u4ef7\u503c\u3002\u3002\u3002</p> <p>\u8fd9\u573a B\uff0c F \uff0c G \uff0c\u8865\u9898\u90fd\u53ef\u4ee5\u770b\u4e0b\u3002</p> <p>\u665a\u4e0a\u6253\u4e86 ABC394 \uff0c\u53ea\u5199\u4e864\u9898\uff0cE\u9898\u6ca1\u5199\u51fa\u6765\uff0c\u6ca1\u591a\u5c11\u65f6\u95f4\u4e86\uff0cD\u9898\u5199\u5f97\u592a\u6162\u4e86\uff0cE\u4e00\u5f00\u59cb\u53c8\u60f3\u9519\u4e86\u3002</p> <p>\u5e94\u8be5\u662fdijkstra\u677f\u5b50\u9898\u3002</p>"},{"location":"cp_solving/2025/0301/#32","title":"3\u67082\u65e5","text":"<ul> <li> ABC395E</li> <li> ABC395F</li> <li> CF2071D1</li> <li> 24\u56db\u5ddd\u7701\u8d5bB</li> <li> 24\u56db\u5ddd\u7701\u8d5bF</li> <li> \u725b\u5ba2\u5468\u8d5b83 ABCDE</li> </ul>"},{"location":"cp_solving/2025/0301/#33_1","title":"3\u67083\u65e5","text":"<ul> <li> CF2065G</li> <li> CF2065F</li> <li> CF2065E</li> </ul>"},{"location":"cp_solving/2025/0301/#35_1","title":"3\u67085\u65e5","text":"<ul> <li> CF2006B</li> <li> CF1990D</li> <li> CF1987D</li> </ul>"},{"location":"cp_solving/2025/0301/#37","title":"3\u67087\u65e5","text":"<p>\u5509\u5509\uff0c\u6628\u5929\u53c8\u662f\u6ca1\u548b\u5199\u9898\uff0c\u4eca\u5929\u518d\u597d\u597d\u5199\u4e0b\uff0c\u4eca\u5929\u676d\u7535\u6625\u5b63\u8054\u8d5b\u7b2c\u4e00\u573a\u3002</p>"},{"location":"cp_solving/2025/0313/","title":"3\u670812\u65e5-3\u670831\u65e5","text":"<p>\u8fd9\u91cc\u5c06\u8bb0\u5f55\u6bcf\u5929\u5199\u7684\u4e00\u4e9b\u4e0d\u5c5e\u4e8e\u6700\u65b0\u7684\u6bd4\u8d5b\u91cc\u7684\u9898\u76ee\uff0c\u5e76\u4e14\u662f\u5bf9\u5f53\u524d\u7684\u6211\u7a0d\u5fae\u6709\u70b9\u96be\u5ea6\u7684\u9898\u76ee\u3002</p>"},{"location":"cp_solving/2025/0313/#cf2063d-2000","title":"CF2063D *2000","text":"<p>2025-03-12</p> <p>\u8fd9\u9898\u5e76\u4e0d\u96be\u7684\uff0c\u6ca1\u770b\u9898\u89e345\u5206\u949f\u5199\u51fa\u6765\u7684\uff0cWA\u4e86\u4e00\u53d1\u6570\u7ec4\u6ca1\u5f00 <code>ll</code> \uff0c\u803d\u8bef\u4e86\u4e09\u56db\u5206\u949f\u3002</p> <p>\u9996\u5148\u6211\u4eec\u5148\u8003\u8651 \\(x\\) \u53d6 \\(1\\) \u7684\u7b54\u6848\uff0c\u5fc5\u7136\u662f\u4ece\u4e0a\u9762\u6216\u8005\u4e0b\u9762\u9009\u4e24\u4e2a\u8ddd\u79bb\u6700\u8fdc\u7684\u70b9\uff0c\u518d\u4ece\u53e6\u4e00\u8fb9\u968f\u4fbf\u9009\u4e00\u4e2a\u70b9\u3002</p> <p>\u8003\u8651 \\(x\\) \u53d6 \\(2\\) \u7684\u60c5\u51b5\u5462\uff0c\u4f1a\u4e0d\u4f1a\u628a \\(x=1\\) \u7684\u4e09\u4e2a\u70b9\u7ed9\u8fd8\u539f\u56de\u6765\u5462? \u4ec0\u4e48\u65f6\u5019\u4f1a\u8fd8\u539f\u56de\u6765\uff1f</p> <p>\u5982\u679c\u4f60\u80fd\u76f4\u63a5\u518d\u9009 \\(3\\) \u4e2a\u5408\u6cd5\u7684\u70b9\u51fa\u6765\uff0c\u90a3\u4e48\u5c31\u4e0d\u9700\u8981\u518d\u53bb\u6539\u4e4b\u524d\u7684\u65b9\u6848\u4e86\u3002</p> <p>\u56e0\u4e3a\u4f60\u9009\u53e6\u4e00\u8fb9\u7684\u70b9\u5f53\u5e95\u8fb9\u663e\u7136\u4e0d\u4f1a\u5f71\u54cd\u8fd9\u4e00\u8fb9\u7684\u5e95\u8fb9\u7684\u9762\u79ef\u3002\u81f3\u4e8e\u8bf4\u628a\u8fd9\u4e24\u4e2a\u70b9\u91cd\u65b0\u5206\u914d\u5230\u8fd9\u8fb9\u7ec4\u4e24\u4e2a\u5e95\u8fb9\uff0c\u5c31\u66f4\u4e0d\u53ef\u80fd\u4e86\u3002</p> <p>\u6240\u4ee5\u53ea\u6709\u5f53\u524d\u7684\u70b9\u4e0d\u591f\u518d\u5f00\u4e00\u4e2a\u65b0\u7684\u4e09\u89d2\u5f62\u4e86\uff0c\u624d\u6709\u53ef\u80fd\u62c6\u4e00\u4e2a\u5df2\u7ecf\u62fc\u597d\u7684\u4e09\u89d2\u5f62\u3002\u5e76\u4e14\u62c6\u4e86\u4e4b\u540e\u5f97\u80fd\u62fc\u51fa\u4e24\u4e2a\u4e09\u89d2\u5f62\u624d\u884c\u3002</p> <p>\u8003\u8651\u4e00\u4e0b\uff0c\u62c6\u4e00\u4e2a\u4e09\u89d2\u5f62\u4f1a\u4f7f\u4e00\u8fb9\u589e\u52a02\u4e2a\u70b9\uff0c\u53e6\u4e00\u8fb9\u52a01\u4e2a\u70b9\u3002\u65b0\u62fc\u6210\u7684\u4e24\u4e2a\u4e09\u89d2\u5f62\u7684\u9876\u70b9\u662f\u4e00\u5b9a\u5728\u540c\u4e00\u6761\u8fb9\u4e0a\u7684\u3002\u3002\u3002\u6211\u4e0a\u5348\u5199\u7684\u65f6\u5019\u90fd\u6ca1\u8003\u8651\u8fd9\u4e2a\u6765\u7740\uff0c\u5c31\u53ea\u60f3\u7740\u662f\u4f1a\u5728\u540c\u4e00\u8fb9\uff0c\u867d\u7136\u8fd9\u786e\u5b9e\u633a\u76f4\u89c9\u7684\uff0c\u4e5f\u5f88\u597d\u63a8\u7684\u3002\u53ef\u80fd\u662f\u56e0\u4e3a\u6837\u4f8b\u7684\u63d0\u793a\u5427\u3002</p> <p>\u7136\u540e\u5c31\u662f\u76f4\u63a5\u6a21\u62df\u5c31\u597d\u4e86\u3002 \u62c6\u4e00\u4e2a\u4e09\u89d2\u5f62\u7684\u8bdd\uff0c\u80af\u5b9a\u5f97\u5220\u8fb9\u6700\u77ed\u7684\u90a3\u4e2a\u3002</p> <pre><code>void ChatGptDeepSeek()\n{\n    // \u4e3b\u8981\u662f\u770b\u4e0a\u9762\u53d6\u591a\u5c11\u4e2a \u4e0b\u9762\u53d6\u591a\u5c11\u4e2a\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    vector&lt;int&gt; a(n + 1), b(m + 1);\n    set&lt;int&gt; u, d;\n    priority_queue&lt;int, vector&lt;int&gt;, greater&lt;&gt;&gt; uq, dq;\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; a[i], u.insert(a[i]);\n    for (int i = 1; i &lt;= m; i++)\n        cin &gt;&gt; b[i], d.insert(b[i]);\n    int U = 0, D = 0;\n    ll ans = 0;\n    vector&lt;ll&gt; res;\n    for (int i = 1;; i++)\n    {\n        int uu = 0, dd = 0;\n        if (u.size() &gt;= U + 2 &amp;&amp; d.size() &gt;= D + 1)\n        {\n            uu = *u.rbegin() - *u.begin();\n        }\n        if (d.size() &gt;= D + 2 &amp;&amp; u.size() &gt;= U + 1)\n        {\n            dd = *d.rbegin() - *d.begin();\n        }\n        // cerr&lt;&lt;dd&lt;&lt;\" \"&lt;&lt;uu&lt;&lt;'\\n';\n        if (dd + uu == 0)\n        {\n            // cerr&lt;&lt;u.size()&lt;&lt;\" \"&lt;&lt;U&lt;&lt;\" \"&lt;&lt;d.size()&lt;&lt;\" \"&lt;&lt;D&lt;&lt;'\\n';\n            // cerr&lt;&lt;\"empty: \"&lt;&lt;uq.size()&lt;&lt;'\\n';\n            // \u4e0a\u9762\u7684\u51cf\u53bb\u4e24\u4e2a\uff0c\u6216\u8005\u662f\u4e0b\u9762\u7684\u51cf\u53bb\u4e24\u4e2a\n            if (u.size() &gt;= U + 3 &amp;&amp; !dq.empty())\n            {\n                ans += *u.rbegin() - *u.begin();\n                // uq.push(*u.rbegin() - *u.begin());\n                u.erase(u.begin()), u.erase(prev(u.end()));\n                ans += *u.rbegin() - *u.begin();\n                // uq.push(*u.rbegin() - *u.begin());\n                u.erase(u.begin()), u.erase(prev(u.end()));\n                ans -= dq.top();\n                dq.pop();\n                U--;\n            }\n            else if (d.size() &gt;= D + 3 &amp;&amp; !uq.empty())\n            {\n                // cerr&lt;&lt;\"here\\n\";\n                ans += *d.rbegin() - *d.begin();\n                // dq.push(*d.rbegin() - *d.begin());\n                d.erase(d.begin()), d.erase(prev(d.end()));\n                ans += *d.rbegin() - *d.begin();\n                // dq.push(*d.rbegin() - *d.begin());\n                d.erase(d.begin()), d.erase(prev(d.end()));\n                ans -= uq.top();\n                uq.pop();\n                D--;\n            }\n            else\n                break;\n        }\n        else if (dd &gt;= uu)\n        {\n            d.erase(d.begin());\n            d.erase(prev(d.end()));\n            U++;\n            ans += dd;\n            dq.push(dd);\n        }\n        else\n        {\n            u.erase(u.begin());\n            u.erase(prev(u.end()));\n            D++;\n            ans += uu;\n            uq.push(uu);\n        }\n        // cout&lt;&lt;ans&lt;&lt;\" \";\n        res.push_back(ans);\n    }\n    cout &lt;&lt; res.size() &lt;&lt; '\\n';\n    for (auto x : res)\n        cout &lt;&lt; x &lt;&lt; \" \";\n    cout &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/2025/0313/#cf2069e-2300","title":"CF2069E *2300","text":"<p>2025-03-14</p> <p>\u7531\u4e8e\u662f\u6ca1\u6709 AA \u548c BB \u8fd9\u79cd\u7684\uff0c\u6240\u4ee5\u8fde\u7740\u7684 A B \uff0c \u6211\u4eec\u53ea\u80fd\u82b1\u5355\u4e2a\u7684 A \u548c B \u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u5e8f\u5217\u62c6\u6210\u82e5\u5e72\u4e2a\u9996\u5c3e\u4e0d\u540c\u7684\u5e8f\u5217\u3002</p> <p>\u4f8b\u5982 ABABA ABABAB BABAB BABA \u8fd9\u79cd\u3002\u770b\u8d77\u6765\u4f1a\u4e0d\u592a\u597d\u5904\u7406\u3002\u3002\u4f46\u662f\u5f53\u4f60\u770b\u4e86\u9898\u89e3\u4e4b\u540e\u5c31\u5f88\u7b80\u5355\u4e86\u3002\u3002\u89c2\u5bdf\u4e00\u4e0b\uff0c\u5bf9\u4e8e\u5947\u6570\u957f\u5ea6\u7684\uff0c\u6211\u4eec\u4f7f\u7528 AB \u548c BA \uff0c \u989d\u5916\u7684\u5355\u4e2a\u7684\u82b1\u8d39\u662f\u76f8\u540c\u7684\u3002\u4f46\u662f\u5076\u6570\u957f\u5ea6\u7684 ABABAB \u5982\u679c\u8981\u7528 BA \u7684\u8bdd\u4f1a\u6bd4\u4f7f\u7528 AB \u591a\u4e00\u4e2a\u989d\u5916\u7684\u82b1\u8d39\u3002BABABA \u540c\u7406\u3002</p> <p>\u6240\u4ee5\u6211\u4eec\u4f18\u5148\u628a\u5076\u6570\u957f\u5ea6\u7684\u5904\u7406\u5b8c\uff0c\u7136\u540e\u5269\u4e0b\u7684\u591a\u7684\u6570\u91cf\u5c31\u53bb\u5904\u7406\u5176\u4ed6\u7684\u3002\u5e76\u4e14\u6211\u4eec\u6bcf\u7528\u5bf9\u5e94\u7684 AB \u6216 BA \u5904\u7406\u5b8c\u4e00\u4e2a\u5076\u6570\u957f\u5ea6\u7684\u5e8f\u5217\u90fd\u53ef\u4ee5\u7701\u4e00\u4e9b\u82b1\u8d39\uff0c\u6240\u4ee5\u6211\u4eec\u5148\u5904\u7406\u957f\u5ea6\u8f83\u77ed\u7684\u5b57\u7b26\u4e32\u3002</p> <p>\u7136\u540e\u5c31\u597d\u597d\u5206\u7c7b\u8ba8\u8bba\u5c31\u597d\u4e86\u3002\uff08\u5176\u5b9e\u90fd\u6ca1\u5fc5\u8981\u5b58\u5b57\u7b26\u4e32</p> <pre><code>void ChatGptDeepSeek()\n{\n    string s;\n    cin &gt;&gt; s;\n    int a, b, ab, ba;\n    cin &gt;&gt; a &gt;&gt; b &gt;&gt; ab &gt;&gt; ba;\n    vector&lt;string&gt; v;\n    for (int i = 0; i &lt; s.size(); i++) {\n        int j = i + 1;\n        string t(1, s[i]);\n        while (j &lt; s.size() &amp;&amp; s[j] != s[j - 1]) {\n            t += s[j];\n            j++;\n        }\n        i = j - 1;\n        if (t.size() &gt; 1)\n            v.push_back(t);\n    }\n    sort(v.begin(), v.end(), [](string x, string y) {\n        if ((x.size() ^ y.size() ^ 1) &amp; 1)\n            return x.size() &lt; y.size();\n        // if(x.size()==y.size())\n        //     return x&lt;y;\n        return x.size() % 2 &lt; y.size() % 2;\n    });\n    int A = count(s.begin(), s.end(), 'A'), B = s.size() - A;\n    for (auto x : v) {\n        // cerr&lt;&lt;x&lt;&lt;\" \\n\";\n        int len = x.size();\n        if (x.size() &amp; 1) {\n            // \u5947\u6570\u7528\u8c01\u90fd\u4e00\u6837\u7684\n            while (ab &amp;&amp; len &gt; 1) {\n                A--, B--;\n                ab--;\n                len -= 2;\n            }\n            while (ba &amp;&amp; len &gt; 1) {\n                A--, B--;\n                ba--;\n                len -= 2;\n            }\n        } else {\n            if (x.front() == 'A') {\n                if (ab &gt;= len / 2) {\n                    ab -= len / 2;\n                    A -= len / 2, B -= len / 2;\n                    len = 0;\n                    // cerr&lt;&lt;ab&lt;&lt;'\\n';\n                } else {\n                    len -= 2 * ab;\n                    A -= ab, B -= ab;\n                    ab = 0;\n                }\n                if (len) {\n                    if (ba &gt;= (len - 2) / 2) {\n                        ba -= (len - 2) / 2;\n                        A -= (len - 2) / 2, B -= (len - 2) / 2;\n                    } else {\n                        A -= ba, B -= ba, ba = 0;\n                    }\n                }\n            } else {\n                if (ba &gt;= len / 2) {\n                    ba -= len / 2;\n                    A -= len / 2, B -= len / 2;\n                    len = 0;\n                } else {\n                    len -= 2 * ba;\n                    A -= ba, B -= ba;\n                    ba = 0;\n                }\n                if (len) {\n                    if (ab &gt;= (len - 2) / 2) {\n                        ab -= (len - 2) / 2;\n                        A -= (len - 2) / 2, B -= (len - 2) / 2;\n                    } else {\n                        A -= ab, B -= ab, ab = 0;\n                    }\n                }\n            }\n        }\n    }\n    // cerr&lt;&lt;ab&lt;&lt;\" \"&lt;&lt;ba&lt;&lt;'\\n';\n    assert(A &gt;= 0 &amp;&amp; B &gt;= 0);\n    if (A &lt;= a &amp;&amp; B &lt;= b)\n        cout &lt;&lt; \"YES\\n\";\n    else\n        cout &lt;&lt; \"NO\\n\";\n}\n</code></pre>"},{"location":"cp_solving/2025/0313/#cf1981c-1800","title":"CF1981C *1800","text":"<p>2025-03-14</p> <p>\u597d\u9898\u3002\u3002</p> <p>\u53ef\u4ee5\u770b\u6210\u4e00\u9897\u6ee1\u4e8c\u53c9\u6811\uff0c \\(x\\) \u53ef\u4ee5\u8d70\u5230 \\(2x\\) \u548c \\(2x+1\\) \uff0c\u8fd9\u6b63\u597d\u5bf9\u5e94\u7684\u662f\u4e8c\u53c9\u6811\u4e0a\u7684\u4e24\u4e2a\u5b50\u8282\u70b9\u3002\u4f46\u662f\u77e5\u9053\u4e86\u8fd9\u4e2a\u4e5f\u786e\u5b9e\u6ca1\u529e\u6cd5\u505a\u5427\u3002</p> <p>\u4e8e\u662f\u9898\u89e3\u544a\u8bc9\u6211\u4eec\u8fd9\u9898\u4e0e LCA \u6709\u5173\u3002\u7136\u540e\u6211\u53bb\u770b\u4e86\u4e0b LCA \uff0c\u56de\u6765\u53d1\u73b0\uff0c\u8fd9\u8fd9\u4e0d\u5bf9\u554a \\(10^8\\) \u8fd9\u8ba9\u6211\u600e\u4e48 LCA \u554a\u3002\u3002\u3002</p> <p>\u8fd9\u9898\u53ef\u4ee5\u8f6c\u6362\u6210\u7ed9\u4e24\u4e2a\u4e8c\u53c9\u6811\u7684\u70b9\uff0c\u6211\u4eec\u8981\u4f7f\u5b83\u4eec\u76f8\u9047\u3002\u90a3\u4e48\u6700\u77ed\u7684\u8ddd\u79bb\u5c31\u662f\u5728\u5b83\u4eec\u4e24\u5230LCA\u7684\u8def\u5f84\u4e0a \uff0c\u7136\u540e\u5982\u679c\u6709\u591a\u7684\u6b65\u6570\uff0c\u5c31\u6bcf\u6b21\u8d70\u5230\u76f8\u90bb\u7684\u518d\u8d70\u56de\u6765\u5c31\u884c\u3002\u5f53\u7136\u5269\u4f59\u7684\u6b65\u6570\u5fc5\u987b\u662f\u5076\u6570\u624d\u884c\u3002</p> <p>\u8003\u8651\u4e00\u4e0b \u518d\u5b83\u4eec\u8d70\u5230 \u76f8\u9047 \u4e4b\u524d\uff0c\u8def\u5f84\u5df2\u7ecf\u662f\u6700\u77ed\u7684\u4e86\uff0c\u6240\u4ee5\u53ea\u80fd\u989d\u5916\u6d88\u8017\u6b65\u6570\u3002\u8fd9\u4e00\u4e2a\u8fc7\u7a0b\u662f\u6ca1\u6709\u529e\u6cd5\u6d88\u8017\u5947\u6570\u6b65\u7684\u3002\u56e0\u4e3a\u6bd4\u5982\u4e00\u4e2a\u8282\u70b9\u540e\u9000\u4e86\u4e00\u6b65\uff0c\u90a3\u4e48\u8fd9\u4e00\u6b65\u540e\u9762\u4e5f\u662f\u4f1a\u8865\u56de\u6765\u7684 \u6216\u8005\u8bf4\u662f\u6d88\u8017\u4e86\u4f60\u7684\u4e00\u4e2a\u524d\u8fdb\u7684\u6b65\u6570\uff0c\u6240\u4ee5\u603b\u4f53\u4e00\u76f4\u662f\u5947\u5076\u4fdd\u6301\u4e0d\u53d8\u7684\u3002</p> <p>\u800c\u5b83\u4eec\u76f8\u9047\u4e4b\u540e\uff0c\u540c\u6837\u4e0d\u53ef\u80fd\u53bb\u6d88\u8017\u5947\u6570\u6b65\uff0c\u8981\u4e48\u4e00\u4e2a\u8282\u70b9\u51fa\u53bb\u518d\u56de\u6765\uff0c\u8fd9\u6837\u662f 2 \u500d\u7684\u8def\u7a0b\uff0c\u6d88\u8017\u5fc5\u7136\u662f\u5076\u6570\uff0c\u5982\u679c\u5b83\u4eec\u4e00\u8d77\u8d70\uff0c\u90a3\u6d88\u8017\u7684\u6b65\u6570\u4e5f\u5fc5\u7136\u662f\u5076\u6570\u3002</p> <p>\u6240\u4ee5\u73b0\u5728\u95ee\u9898\u8f6c\u6362\u6210\u4e86\u5982\u4f55\u8ba9\u5b83\u4eec\u8d70\u5230 LCA \u4e0a\uff0c\u770b\u4e86\u54e5\u54e5\u7684\u4ee3\u7801\uff0c\u592a\u725b\u4e86\u3002\u3002\u3002\u5c31\u662f\u5de6\u53f3\u7aef\u70b9\uff0c\u54ea\u4e2a\u5927\u5c31\u628a\u54ea\u4e2a\u9664\u4ee5\u4e8c\u3002\u3002\u8fd9\u5c31\u662f\u76f8\u5f53\u4e8e\u628a\u4e00\u4e2a\u70b9\u5f80\u4e0a\u79fb\u4e86\u4e00\u5c42\uff0c\u6211\u4eec\u6700\u7ec8\u662f\u8981\u628a\u4e24\u4e2a\u70b9\u90fd\u79fb\u52a8\u5230 LCA \u90a3\u4e00\u5c42\u3002\u800c\u7531\u4e8e\u662f\u4e00\u9897\u6ee1\u4e8c\u53c9\u6811\uff0c\u6240\u4ee5\u6700\u591a\u53ea\u4f1a\u6709\u4e8c\u4e09\u5341\u5c42\u7684\u3002\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u6570\u503c\u66f4\u5927\uff0c\u90a3\u4e48\u5b83\u7684\u5c42\u6570\u4e00\u5b9a\u662f\u5927\u4e8e\u7b49\u4e8e\u53e6\u4e00\u4e2a\u70b9\u7684\u3002</p> <pre><code>void ChatGptDeepSeek()\n{\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;int&gt; a(n + 1);\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; a[i];\n    a[0] = 1;\n    int l = -1, r = 0;\n    for (int i = 1; i &lt;= n; i++) {\n        if (a[i] != -1) {\n            r = i;\n            if (l == -1) {\n                for (int j = i - 1; j &gt;= 1; j--)\n                    a[j] = a[j + 1] == 1 ? 2 : a[j + 1] / 2;\n            } else {\n                int L = l, R = r;\n                while (L &lt; R - 1) {\n                    if (a[L] &gt;= a[R]) {\n                        a[L + 1] = a[L] == 1 ? 2 : a[L] / 2;\n                        L++;\n                    } else {\n                        a[R - 1] = a[R - 1] == 1 ? 2 : a[R] / 2;\n                        R--;\n                    }\n                }\n                if (a[L] != a[R] / 2 &amp;&amp; a[L] / 2 != a[R]) {\n                    cout &lt;&lt; \"-1\\n\";\n                    return;\n                }\n            }\n            l=i;\n        }\n    }\n    for (int i = r + 1; i &lt;= n; i++)\n        a[i] = a[i - 1] == 1 ? 2 : a[i - 1] / 2;\n    for (int i = 1; i &lt;= n; i++)\n        cout &lt;&lt; a[i] &lt;&lt; \" \\n\"[i == n];\n}\n</code></pre> <p>\u5c31\u50cf\u8fd9\u9898\u4ee5\u53ca\u5f88\u591a\u7684 CF \u9898\uff0c\u4f60\u8981\u95ee\u7528\u4e86\u4ec0\u4e48\u7b97\u6cd5\uff0c\u597d\u50cf\u771f\u6ca1\u4ec0\u4e48\u7b97\u6cd5\u3002\u4f46\u4f60\u8981\u8bf4\u96be\u4e0d\u96be\u3002\u3002\u3002\u6211\u611f\u89c9\u8fd8\u662f\u633a\u96be\u7684\u3002</p> <p>\u591a\u505a\u70b9\u597d\u9898\u5427\uff0c\u79ef\u6512\u4e00\u4e0b\uff08\uff09\u3002</p>"},{"location":"cp_solving/2025/0313/#cf1975d-1700","title":"CF1975D *1700","text":"<p>2025-03-17</p> <p>\u5f88\u597d\u7684\u9898\u76ee\uff0c\u5373\u4f7f\u662f\u6211\u4e5f\u80fd\u611f\u5230\u5fc3\u6f6e\u6f8e\u6e43\u3002</p> <p>\u6211\u4eec\u5e0c\u671b\u84dd\u8272\u7684\u70b9\u65e9\u70b9\u8d70\u5230\u88ab\u67d3\u6210\u7ea2\u8272\u7684\u70b9\u4e0a\u3002</p> <p>\u56e0\u4e3a\u4ece\u4e00\u4e2a\u70b9\u904d\u5386\u6811\uff0c\u6700\u5c11\u7684\u60c5\u51b5\u6bcf\u4e2a\u8fb9\u90fd\u4f1a\u88ab\u8d70 \\(2\\) \u904d\uff0c\u4f46\u662f\u8fd9\u4e2a\u60c5\u51b5\u4e0b\u6211\u4eec\u6700\u540e\u4e00\u6b21\u662f\u4e0d\u7528\u56de\u53bb\u7684\u3002</p> <p>\u6240\u4ee5\u8d21\u732e\u4f1a\u51cf\u53bb\u6700\u540e\u53bb\u7684\u4e00\u4e2a\u70b9\u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb\uff0c\u6240\u4ee5\u6211\u4eec\u5e0c\u671b\u6700\u540e\u4e00\u4e2a\u70b9\u8ddd\u79bb\u6839\u8282\u70b9\u5c3d\u91cf\u7684\u8fdc\u3002\u5e76\u4e14\u84dd\u8272\u7684\u70b9\u80af\u5b9a\u4e00\u8d70\u5230\u7ea2\u8272\u7684\u533a\u57df\u5c31\u8be5\u5f00\u59cb\u4e86\uff0c\u56e0\u4e3a\u7ea2\u8272\u53ef\u4ee5\u81ea\u52a8\u53bb\u628a\u84dd\u8272\u8be5\u8d70\u7684\u5730\u65b9\u7ed9\u8d70\u4e86\u3002\u800c\u4e14\u5373\u4f7f\u8fd9\u65f6\u8c03\u6574\u4f4d\u7f6e\uff0c\u8ddd\u79bb\u6839\u8282\u70b9\u6700\u5927\u7684\u8ddd\u79bb\u4e5f\u6700\u591a\u53ea\u4f1a\u51cf\u4e00\uff0c\u5e76\u4e0d\u4f1a\u4f7f\u5f97\u7b54\u6848\u66f4\u5c0f\u3002</p> <pre><code>// \u611f\u89c9\u53ea\u80fd\u4e00\u4e2a\u5b50\u6811\u4e00\u4e2a\u5b50\u6811\u7684\u8d70\u3002\u3002\u3002\n// \u5982\u679c\u84dd\u8272\u7684\u4e0d\u5728\u6839\u8282\u70b9\u6216\u4e0e\u6839\u76f8\u8fde\n// \u90a3\u4e48\u6211\u4eec\u80af\u5b9a\u8ba9\u7ea2\u8272\u7684\u5148\u8d70\u5b83\u5728\u7684\u5b50\u6811\n// \u7136\u540e\u5b83\u81ea\u5df1\u8d70\u5230\u6df1\u5ea6\u4e3a1\u7684\u70b9\u5c31\u597d\u4e86 \u5426\u5219\u5b83\u9700\u8981\u8d70\u5230\u6839\u8282\u70b9\u53bb\n// \u5982\u679c\u5728\u6839\u8282\u70b9 \u90a3\u4e48\u9700\u8981\u989d\u5916\u82b1\u8d39\u4e24\u4e2a\u8d39\u7528\n// \u904d\u5386\u4e00\u4e2a\u5b50\u6811\u5fc5\u7136\u4f1a\u628a\u8fd9\u4e2a\u5b50\u6811\u7684\u6bcf\u6761\u8fb9\u90fd\u8d70\u4e24\u6b21 \u9664\u4e86\u6700\u540e\u53bb\u7684\u4e00\u4e9b\u8fb9\u3002\u3002\n// \u3002\u3002\u3002\u3002\u597d\u50cf\u5f88\u4e0d\u597d\u8ba8\u8bba\u7684\u3002\u3002\u3002\u3002\n\n// \u597d\u50cf\u8fd8\u771f\u662f\u4ec0\u4e48\u5f88\u795e\u5947\u7684\u7ed3\u8bba\u3002\u3002\u3002\n// \u592a\u725b\uff0c\u4e5f\u662f\u76f4\u63a5\u770b\u4e86\u9898\u89e3\u3002\u3002\n// \u904d\u5386\u4e00\u9897\u6811 \u5982\u679c\u6700\u540e\u8981\u56de\u5230\u6839\u8282\u70b9 \u90a3\u4e48\u6700\u5c0f\u7684\u8d70\u7684\u8def\u7a0b\u5c31\u662f\u6bcf\u6761\u8fb9\u90fd\u8d70\u4e24\u6b21\n// \u4f46\u662f\u5982\u679c\u6700\u540e\u4e0d\u56de\u6765\u5462\uff1f\u5b9e\u9645\u4e0a\u5c31\u662f\u51cf\u5c11\u4e86\u6700\u540e\u4e00\u4e2a\u70b9\u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb\n// \u6240\u4ee5\u5982\u679c\u6700\u540e\u4e0d\u56de\u6765\uff0c\u90a3\u6211\u4eec\u5e0c\u671b\u5b83\u6700\u540e\u4e00\u4e2a\u53bb\u7684\u70b9\u8ddd\u79bb\u6839\u8282\u70b9\u6700\u8fdc\n\n// \u6240\u4ee5\u6211\u4eec\u5e0c\u671ba b \u5c3d\u53ef\u80fd\u5feb\u7684\u76f8\u9047\u3002\u3002\n// \u65e0\u6cd5\u76f8\u9047\u4e5f\u6ca1\u5173\u7cfb\u3002\u56e0\u4e3a\u90a3\u5c31\u76f8\u5f53\u4e8e\u7ea2\u8272\u6bd4\u84dd\u8272\u591a\u4e00\u6b65\u4e86\uff0c\u90a3\u5b83\u663e\u7136\u53ef\u4ee5\u53bb\u63d0\u524d\u628a\u84dd\u8272\u8981\u8d70\u7684\u8def\u7ed9\u67d3\u8272\u597d\n// \u5982\u679c\u53ef\u4ee5\u76f8\u9047 \u90a3\u5c31\u6b63\u597d\u4e00\u8d77\u8d70\u5c31\u76f4\u63a5\u67d3\u6210\u84dd\u8272\n// \u6240\u4ee5\u5176\u5b9e\u5c31\u662f\u5e0c\u671b\u84dd\u8272\u7684\u70b9\u5c3d\u53ef\u80fd\u5feb\u5730\u8d70\u5230\u88ab\u67d3\u6210\u7ea2\u8272\u7684\u70b9\n\n// \u6240\u4ee5\u6700\u540e\u7684\u7b54\u6848\u5c31\u662f\uff0c2(n-1)-d\n// d \u4e3a a b \u76f8\u9047\u7684\u70b9\u5230\u6700\u8fdc\u7684\u70b9\u7684\u8ddd\u79bb\n// \u6709\u6ca1\u6709\u53ef\u80fd\u79fb\u52a8\u521d\u59cb\u7684\u70b9\u4f7f\u5f97d \u66f4\u5927\u5462\uff1f\u6ca1\u6709\n// \u56e0\u4e3a\u4f60\u4e00\u6b21\u79fb\u52a8\u6700\u591a\u5c31\u4f7f\u5f97d+1 \u8fd9\u8ddf\u4e0d\u79fb\u52a8 \u6ca1\u5565\u533a\u522b\n\n// Date: 2025-03-17\n// Time: 16:25:11\n\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid ChatGptDeepSeek()\n{\n    int n;\n    cin &gt;&gt; n;\n    int a, b;\n    cin &gt;&gt; a &gt;&gt; b;\n    vector&lt;vector&lt;int&gt;&gt; adj(n + 1, vector&lt;int&gt;());\n    for (int i = 1; i &lt; n; i++) {\n        int u, v;\n        cin &gt;&gt; u &gt;&gt; v;\n        adj[u].push_back(v);\n        adj[v].push_back(u);\n    }\n    vector&lt;int&gt; dep(n + 1), f(n + 1);\n    auto dfs = [&amp;](auto&amp;&amp; self, int u, int pre) -&gt; void {\n        for (auto v : adj[u]) {\n            if (v == pre)\n                continue;\n            f[v] = u;\n            dep[v] = dep[u] + 1;\n            self(self, v, u);\n        }\n    };\n    dfs(dfs, a, 0);\n    int st = b, ans = 2 * (n - 1);\n    for (int i = 1; i &lt;= dep[b] / 2; i++, ans++)\n        st = f[st];\n    if(dep[b]&amp;1) st=f[st],ans++;\n    dep[st] = 0;\n    dfs(dfs, st, 0);\n    cout &lt;&lt; ans - *max_element(dep.begin() + 1, dep.end()) &lt;&lt; '\\n';\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.tie(nullptr);\n    int T = 1;\n    cin &gt;&gt; T;\n    while (T--)\n        ChatGptDeepSeek();\n    return 0;\n}\n</code></pre>"},{"location":"cp_solving/2025/0313/#cf1974e-1800","title":"CF1974E *1800","text":"<p>2025-03-17</p> <p>\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u975e\u5e38\u57fa\u7840\u7684dp\u554a\u3002\u3002\u3002</p> <p>\u4f46\u662f\u6211 WA + TLE \u597d\u591a\u53d1\u3002</p> <pre><code>        vector ndp = dp;\n        for (int j = 0; j + h[i] &lt; dp.size(); j++) {\n            if (have &gt;= dp[j] + c[i]) {\n                ndp[j + h[i]] = min(ndp[j + h[i]], dp[j] + c[i]);\n                assert(j + h[i] &lt;= m * 1000);\n            }\n        }\n        dp = ndp;\n        have += x;\n</code></pre> <p>\u521a\u5f00\u59cb\u662f\u8fd9\u6837\u5199\u7684\uff0c\u4e4b\u524d\u4e00\u822c\u90fd\u8fd9\u6837\u5199\u7684\u3002\u3002\u3002\u4f46\u662f\u6211\u53d1\u73b0\u8fd9\u5176\u5b9e\u6ca1\u5fc5\u8981\u591a\u5f00\u4e00\u4e2a\u6570\u7ec4\u3002\u3002\u3002\u56e0\u4e3a\u53ea\u4f1a\u5f71\u54cd\u540e\u9762\u7684\uff0c\u6240\u4ee5\u76f4\u63a5\u5012\u7740\u904d\u5386\u5c31\u53ef\u4ee5\u3002\u3002</p> <pre><code>        for (int j = n; j - h[i] &gt;= 0; j--) {\n            if (dp[j - h[i]] + c[i] &lt;= have)\n                dp[j] = min(dp[j], dp[j - h[i]] + c[i]);\n        }\n        have += x;\n</code></pre> <p>\u4f46\u662f \\(2202ms\\) \uff0c \u539f\u56e0\u662f\u6211\u5f00\u7684 vector \u4ee5\u53ca\u6bcf\u6b21\u90fd\u5f00\u7684\u6700\u5927\u7684\uff0c\u867d\u7136\u8fc7\u4e86\u554a\uff0c\u4f46\u662f\u5176\u5b9e\u9898\u76ee\u9650\u5236\u4e86 \\(\\sum h_i\\) \uff0c\u6211\u7406\u89e3\u6709\u95ee\u9898\u554a\uff0c\u90a3\u5176\u5b9e\u5c31\u8be5\u76f4\u63a5\u6bcf\u6b21\u5f00 \\(\\sum h\\) \u7684\u7a7a\u95f4\u5c31\u884c\u4e86\u3002</p> <pre><code>using ll = long long;\n\nconstexpr ll inf = 1e18;\nll dp[1000 * 100 + 1];\n\nvoid ChatGptDeepSeek()\n{\n    int m, x;\n    cin &gt;&gt; m &gt;&gt; x;\n    vector&lt;int&gt; c(m + 1), h(m + 1);\n    int n = 0;\n    for (int i = 1; i &lt;= m; i++) {\n        cin &gt;&gt; c[i] &gt;&gt; h[i];\n        for (int j = 1; j &lt;= h[i]; j++)\n            dp[n + j] = inf;\n        n += h[i];\n    }\n    // vector&lt;ll&gt; dp(1000 * m + 1, inf);\n\n    dp[0] = 0;\n    ll have = 0;\n    for (int i = 1; i &lt;= m; i++) {\n        // vector ndp = dp;\n        for (int j = n; j - h[i] &gt;= 0; j--) {\n            if (dp[j - h[i]] + c[i] &lt;= have)\n                dp[j] = min(dp[j], dp[j - h[i]] + c[i]);\n        }\n        have += x;\n    }\n    for (int i = n; i &gt;= 0; i--) {\n        if (dp[i] != inf) {\n            cout &lt;&lt; i &lt;&lt; \"\\n\";\n            return;\n        }\n    }\n}\n</code></pre>"},{"location":"cp_solving/2025/0313/#p10865","title":"\u6d1b\u8c37P10865 \u666e\u53ca+/\u63d0\u9ad8","text":"<p>2025-03-18</p> <p>\u53bb\u5e74\u6bd4\u8d5b\u6ca1\u65f6\u95f4\u770b\uff0c\u867d\u7136\u770b\u4e86\u4e5f\u80af\u5b9a\u4e0d\u4f1a\u5199\u3002\u5076\u7136\u7ffb\u9898\u5355\u5728\u72b6\u538bDP\u91cc\u7ffb\u5230\uff0c\uff0c\u4f46\u662f\u6211\u8fde\u5565\u53eb\u72b6\u538bDP\u90fd\u4e0d\u592a\u8bb0\u5f97\u4e86\uff0c\u4e4b\u524d\u53ea\u770b\u8fc7\u51e0\u9898\u3002</p> <p>\u5176\u5b9e\u662f\u6628\u5929\u5148\u770b\u4e86\u4e0b\u9898\u89e3\uff0c\u5927\u6982\u77e5\u9053\u8981\u7528\u72b6\u538b DP \uff0c\u7136\u540e\u6bcf\u4e24\u4f4d\u8868\u793a\u4e00\u4e2a\u6709\u9c7c\u7684\u5355\u5143\u683c\u7684\u72b6\u6001\u3002</p> <p>\u56e0\u4e3a\u6bcf\u4e2a\u6c60\u5858\u7684\u9c7c\u7684\u6570\u91cf\u6700\u591a\u53ea\u67093\uff0c\u6240\u4ee5\u6211\u4eec\u75282\u4f4d\u4e8c\u8fdb\u5236\u4f4d\u5c31\u53ef\u4ee5\u8868\u793a\u51fa\u6765\u3002\u603b\u5171\u9700\u8981 \\(2k\\) \u4f4d\u3002\u7531\u4e8e \\(k\\) \u5f88\u5c0f\uff0c\u6240\u4ee5\u5c31\u53ef\u4ee5\u8fd9\u6837\u3002</p> <p>\u5e76\u4e14\u8fd8\u6709\u4e00\u4e2a\u5f88\u5173\u952e\u7684\u4fe1\u606f\u5c31\u662f\uff0c\u6bcf\u4e2a\u70b8\u5f39\u6700\u591a\u53ea\u80fd\u70b8\u4e94\u4e2a\u5355\u5143\u683c\uff0c\u5e76\u4e14\u5f62\u72b6\u662f\u56fa\u5b9a\u7684\u3002\u6240\u4ee5\u6bcf\u4e2a\u6c60\u5858\u6700\u591a\u53ea\u4f1a\u88ab5\u4e2a\u5355\u5143\u683c\u7ed9\u70b8\u5230\u3002</p> <p>\u6240\u4ee5\u603b\u5171\u6700\u591a\u53ea\u6709 \\(5k\\) \u4e2a\u6c60\u5858\u6709\u53ef\u80fd\u88ab\u653e\u7f6e\u70b8\u5f39\u3002\u6211\u4eec\u679a\u4e3e\u6bcf\u4e00\u4e2a\u72b6\u6001\uff0c\u770b\u4f7f\u7528\u6bcf\u4e00\u4e2a\u70b8\u5f39\u4f1a\u8f6c\u79fb\u5230\u4ec0\u4e48\u72b6\u6001\u3002</p> <p>\u6700\u540e\u6211\u4eec\u9700\u8981\u8f93\u51fa\u9c7c\u5168\u90fd\u88ab\u70b8\u4f3c\u7684\u6700\u5c0f\u7684\u7b54\u6848\uff0c\u4e5f\u5c31\u662f \\(dp_0\\) \u3002</p> <pre><code>int mp[1001][1001];\n\nvoid ChatGptDeepSeek()\n{\n    memset(mp, -1, sizeof mp);\n    // cerr&lt;&lt;mp[0][0]&lt;&lt;'\\n';\n    int n, m, k;\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;\n    vector&lt;int&gt; x(k), y(k), a(k);\n    int now = 0;\n    // map&lt;pair&lt;int, int&gt;, int&gt; mp;\n    for (int i = 0; i &lt; k; i++) {\n        cin &gt;&gt; x[i] &gt;&gt; y[i] &gt;&gt; a[i];\n        mp[x[i]][y[i]] = i;\n        // mp[{ x[i], y[i] }] = i;\n        now |= (a[i] &lt;&lt; (2 * i));\n    }\n    // 10 01 10\n    // cerr &lt;&lt; now &lt;&lt; '\\n';\n    vector&lt;int&gt; dp(now + 1, 666);\n    dp[now] = 0;\n    vector&lt;pair&lt;int, int&gt;&gt; dir { { 0, 0 }, { 0, 1 }, { 0, -1 }, { 1, 0 }, { -1, 0 } };\n    auto calc = [&amp;](int now_val, int i, int j) {\n        for (auto it : dir) {\n            int nx = i + it.first, ny = j + it.second;\n            if (nx &gt; n || nx &lt; 1 || ny &gt; m || ny &lt; 1)\n                continue;\n            if (mp[nx][ny] != -1) {\n                int xx = (now_val &gt;&gt; (2 * mp[nx][ny])) &amp; 3;\n                assert(xx &lt;= 3 &amp;&amp; xx &gt;= 0);\n                now_val ^= (xx &lt;&lt; (2 * mp[nx][ny]));\n                xx = max(0, xx - 1);\n                now_val |= (xx &lt;&lt; (2 * mp[nx][ny]));\n            }\n        }\n        return now_val;\n    };\n    //k * 2**20\n    //k*1e6*5\n    for (int i = 0; i &lt; k; i++) {\n        for (auto it : dir) {\n            int nx = x[i] + it.first, ny = y[i] + it.second;\n            if (nx &gt; n || nx &lt; 1 || ny &gt; m || ny &lt; 1)\n                continue;\n            // for (int _ = 1; _ &lt;= 3; _++)\n            for (int j = now; j &gt;= 0; j--) {\n                int nxt = calc(j, nx, ny);\n                assert(nxt &lt;= j);\n                dp[nxt] = min(dp[nxt], dp[j] + 1);\n            }\n        }\n    }\n    cout &lt;&lt; dp[0] &lt;&lt; '\\n';\n}\n</code></pre> <p>\u7136\u540e\u5176\u5b9e\u5c31\u662f\u4e00\u4e9b\u7b80\u5355\u7684\u64cd\u4f5c\u4e86\u3002\u3002\u4f46\u662f\u6211\u628a map \u6539\u6210\u6570\u7ec4\u5c31\u4e0d\u8d85\u65f6\u4e86\u3002\u3002</p> <p>\u4f46\u662f\u65f6\u95f4\u6700\u591a 500ms \u4e86\uff0c\u7b97\u6bd4\u8f83\u6162\u7684\u4e86\u3002\u770b\u4e86\u522b\u4eba\u7684\u66f4\u5feb\u4ee3\u7801\u53d1\u73b0\uff0c\u6709\u7684\u662f DFS \uff0c\u6709\u7684\u662f\u628a\u72b6\u6001\u653e\u5916\u5c42\uff0c\u5982\u679c\u4e0d\u662f\u5408\u6cd5\u72b6\u6001\u5c31\u8df3\u8fc7\uff0c\u53ef\u4ee5\u51cf\u5c11\u5f88\u591a\u7684\u65f6\u95f4\u3002</p> <p>\u6539\u4e86\u4e4b\u540e\u53d8\u6210 240ms\u3002\u3002\u867d\u7136\u5199\u4e86\u5341\u5206\u949f\u591a\uff0c\u4e14\u5199\u9519\u4e86\u770b\u4e86\u4e00\u4f1a\u624d\u770b\u51fa\u6765\u3002\u3002\u6211\u628a <code>ny&gt;m || ny&lt;1</code> \u5199\u6210\u4e86 <code>ny&gt;m || ny&gt;m</code> \u3002</p> <pre><code>    for (int i = now; i &gt;= 0; i--) {\n        {\n            int tmp = i;\n            bool skip = false;\n            for (int j = 0; j &lt; k; j++) {\n                if ((tmp &amp; 3) &gt; a[j]) {\n                    skip = true;\n                    break;\n                }\n                tmp &gt;&gt;= 2;\n            }\n            if (skip)\n                continue;\n        }\n        // cerr&lt;&lt;i&lt;&lt;\" \"&lt;&lt;dp[i]&lt;&lt;\" \\n\";\n        for (int j = 0; j &lt; k; j++) {\n            for (auto it : dir) {\n                int nx = x[j] + it.first, ny = y[j] + it.second;\n                if (nx &gt; n || nx &lt; 1 || ny &gt; m || ny &lt; 1)\n                    continue;\n                int nxt = calc(i, nx, ny);\n                // cerr&lt;&lt;nxt&lt;&lt;'\\n';\n                dp[nxt] = min(dp[nxt], dp[i] + 1);\n            }\n        }\n    }\n</code></pre>"},{"location":"cp_solving/2025/0313/#p10864","title":"\u6d1b\u8c37P10864 \u666e\u53ca+/\u63d0\u9ad8","text":"<p>2025-03-18</p> <p>\u4e50\uff0c\u5199\u4e86\u4e09\u4e2a\u5c0f\u65f6\u3002\u3002\u3002\u867d\u7136\u524d\u9762\u4e00\u76f4\u5728\u5199\u9519\u8bef\u7684\u505a\u6cd5\u3002\u3002</p> <p>\u6700\u540e\u7cbe\u529b\u4e0d\u592a\u884c\u4e86\uff0c\u5b9e\u5728\u770b\u4e0d\u51fa\u6765\u3002\u3002\u95ee\u4e86\u4e0bdeepseek\uff0c\u5e2e\u6211\u627e\u5230\u4e86\u4e00\u4e9b\u95ee\u9898\u3002\u56e0\u4e3a\u5199\u9519\u4e86\u91cd\u65b0\u5199\u4e00\u4e0b\uff0c\u7136\u540e\u5fd8\u8bb0\u521d\u59cb\u5316\u5e76\u67e5\u96c6\u4e86\u3002\u3002</p> <p>\u7136\u540e\u5360\u4e86\u65b0\u683c\u5b50\u7684\u8bdd\uff0c\u5468\u56f4\u6240\u6709\u7684\u70b9\u7684\u6c14\u90fd\u4e0d\u80fd\u6709\u8fd9\u4e2a\u683c\u5b50\u3002\u8fd9\u4e00\u70b9\u6211\u4e5f\u77e5\u9053\u554a\uff0c\u4f46\u662f\u8111\u5b50\u975e\u5e38\u6df7\u4e71\u4e86\u3002\u3002\u7136\u540e\u778e\u6539\u4e86\u4e0b\u8fc7\u4e86\u3002</p> <p>\u8fd8\u662f\u5f88\u9ebb\u70e6\u7684\u4e00\u4e2a\u9898\u7684\uff0c\u7136\u540e\u6211\u662f\u6ca1\u6709\u60f3\u5230\u6bcf\u4e2a\u8fde\u901a\u5757\u7684\u6c14\u90fd\u653e\u96c6\u5408\u91cc\u4e0d\u4f1aTLE MLE\u3002\u3002\u3002\u4f46\u662f\u6bcf\u4e2a\u8fde\u901a\u5757\u6bcf\u6b21 DFS BFS\u7b97\u6c14\u4e5f\u662f\u6ca1\u95ee\u9898\u3002\u3002</p> <p>\u786e\u5b9e\u5c31\u662f\u6a21\u62df\u3002\u4e0d\u7136\u6211\u4e5f\u5199\u4e0d\u4e86\u8fd9\u4e48\u4e45\uff0c\u53ef\u80fd\u5c31\u4e00\u70b9\u4e1c\u897f\u90fd\u6572\u4e0d\u4e86\u3002</p> <p>\u611f\u89c9 BFS DFS \u540c\u6837\u4e0d\u597d\u5199\u3002\u771f\u8981\u54c8\u6c14\u4e86\u3002</p> <p>\u867d\u7136\u6548\u7387\u5f88\u4f4e\uff0c\u4f46\u4e5f\u662f\u591a\u5199\u4e00\u9898\u5427\u3002\u4e5f\u8be5\u4f11\u606f\u4e00\u4e0b\u4e86\u3002</p> <pre><code>int board[20][20];\nint p[20][20];\n\nconstexpr int N = 5e5;\nint cnt[N + 1], f[N + 1];\n// bool vis[N + 1];\n// vector&lt;int&gt; f(9);\nint find(int x)\n{\n    return f[x] == x ? x : f[x] = find(f[x]);\n}\nvoid ChatGptDeepSeek()\n{\n    // \u770b\u81ea\u5df1\u4e0a\u4e0b\u5de6\u53f3\u7684\u540c\u8272\u7684\n    // \u5982\u679c\u6709 \u90a3\u4e48\u52a0\u5165\u5b83\u4eec\u6240\u5728\u7684\u8054\u901a\u5757\n    // \u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u8054\u901a\u7684\u4fe1\u606f\n    //\n    // \u770b\u5b83\u5468\u56f4\u7684\u989c\u8272\u4e0d\u540c\u7684 \u82e5\u6c14\u4e3a0\u4e86 \u5219\u8be5\u5168\u90e8\u79fb\u9664\u4e86\n    // \u600e\u4e48\u7528\u5e76\u67e5\u96c6\u5462\uff1f\u597d\u50cf\u8fd8\u884c \u8bd5\u8bd5 \uff0c\u5176\u5b9e\u6ca1\u7528\u8fc7\u51e0\u6b21\u5e76\u67e5\u96c6\uff08\n    for (int i = 0; i &lt;= 19; i++)\n        for (int j = 0; j &lt;= 19; j++)\n            board[i][j] = -1;\n    int m;\n    cin &gt;&gt; m;\n\n    vector&lt;pair&lt;int, int&gt;&gt; dir { { -1, 0 }, { 1, 0 }, { 0, -1 }, { 0, 1 } };\n    vector&lt;set&lt;pair&lt;int, int&gt;&gt;&gt; Qi(m + 1, set&lt;pair&lt;int, int&gt;&gt;());\n\n    int res = 0;\n    auto Eat = [&amp;](auto&amp;&amp; self, int x, int y, int v) -&gt; void {\n        // cerr &lt;&lt; x &lt;&lt; \" \" &lt;&lt; y &lt;&lt; '\\n';\n        res++;\n        assert(x &lt;= 19 &amp;&amp; x &gt;= 1 &amp;&amp; y &lt;= 19 &amp;&amp; y &gt;= 1);\n        board[x][y] = -1;\n        for (auto it : dir) {\n            int nx = x + it.first, ny = y + it.second;\n            if (nx &gt; 19 || nx &lt; 1 || ny &gt; 19 || ny &lt; 1 || board[nx][ny] == -1)\n                continue;\n            if (board[nx][ny] != v) {\n                int idx = find(p[nx][ny]);\n                assert(idx &lt;= m &amp;&amp; idx &gt; 0);\n\n                Qi[idx].insert({ x, y });\n            } else\n                self(self, nx, ny, v);\n        }\n    };\n    for (int i = 1; i &lt;= m; i++) {\n        res = 0;\n        int x, y;\n        cin &gt;&gt; x &gt;&gt; y;\n        board[x][y] = (i % 2);\n        p[x][y] = i;\n        f[i] = i;\n\n        // \u5148\u7b97\u5468\u56f4\u7684\u53cd\u8272\u7684\u6c14\n        for (auto it : dir) {\n            int nx = x + it.first, ny = y + it.second;\n            if (nx &gt; 19 || nx &lt; 1 || ny &gt; 19 || ny &lt; 1 || board[nx][ny] == -1)\n                continue;\n            int idx = find(p[nx][ny]);\n            // if(!idx) continue;\n            assert(idx &lt;= m &amp;&amp; idx &gt; 0);\n\n            if (!Qi[idx].empty())\n                Qi[idx].erase({ x, y });\n            if (p[nx][ny] % 2 != i % 2) {\n                // dbg(i, nx, ny);\n\n                if (Qi[idx].empty()) {\n                    // dbg(nx, ny, idx);\n                    Eat(Eat, nx, ny, p[nx][ny] % 2);\n                    // f[idx] = 0;\n                }\n            }\n        }\n        for (auto it : dir) {\n            int nx = x + it.first, ny = y + it.second;\n            if (nx &gt; 19 || nx &lt; 1 || ny &gt; 19 || ny &lt; 1)\n                continue;\n            if (board[nx][ny] == -1)\n                Qi[i].insert({ nx, ny });\n        }\n        for (auto it : dir) {\n            int nx = x + it.first, ny = y + it.second;\n            if (nx &gt; 19 || nx &lt; 1 || ny &gt; 19 || ny &lt; 1 || (board[nx][ny] != i % 2))\n                continue;\n            int idx = find(p[nx][ny]);\n            if (idx == i)\n                continue;\n            assert(idx &lt;= m &amp;&amp; idx &gt; 0 &amp;&amp; board[nx][ny] == board[x][y]);\n            for (auto it : Qi[idx]) {\n                // if (board[it.first][it.second] == -1)\n                Qi[i].insert(it);\n            }\n            f[idx] = i;\n        }\n        // dbg(Qi[i]);\n        // cerr &lt;&lt; Qi[i].size() &lt;&lt; '\\n';\n        int val = res;\n        res = 0;\n        if (Qi[i].empty())\n            Eat(Eat, x, y, i &amp; 1);\n        if (i &amp; 1) {\n            cout &lt;&lt; res &lt;&lt; \" \" &lt;&lt; val &lt;&lt; '\\n';\n        } else {\n            cout &lt;&lt; val &lt;&lt; \" \" &lt;&lt; res &lt;&lt; '\\n';\n        }\n        // dbg(Qi[find(1)]);\n        // dbg(Qi[2]);\n    }\n    // \u6211\u8981\u54c8\u6c14\u4e86\n}\n</code></pre>"},{"location":"cp_solving/2025/0313/#p4170-","title":"\u6d1b\u8c37P4170 \u63d0\u9ad8+/\u7701\u9009-","text":"<p>2025-03-25</p> <p>tag: \u533a\u95f4DP</p> <p>\\(n\\le 50\\) \uff0c\u4f46\u786e\u5b9e\u4e0d\u592a\u597d\u5199\u3002</p> <p>\u6211\u4eec\u9700\u8981\u5148\u53bb\u5904\u7406\u957f\u5ea6\u77ed\u7684\u533a\u95f4\u3002</p> <p>\\(dp_{i,j}\\) \u4e3a\u5c06 \\([i,j]\\) \u533a\u95f4\u6d82\u6210\u5bf9\u5e94\u989c\u8272\u6240\u9700\u7684\u64cd\u4f5c\u6b21\u6570\uff0c\u5f53 \\(i=j\\) \u65f6\uff0c\\(dp_{i,j}=1\\) \u3002</p> <p>\u90a3\u4e48\u5f53 \\(s_l=s_r\\) \u65f6\uff0c\\(dp_{l,r}=dp_{l,r-1}\\) \uff0c\u5426\u5219\u4e00\u5b9a\u81f3\u5c11\u9700\u8981\u4e24\u6b21\u64cd\u4f5c\uff0c\u679a\u4e3e\u95f4\u65ad\u70b9 \\(m\\) \uff0c \\(dp_{l,r}=min(dp_{l,m},dp_{m+1,r})\\) \u3002</p> <pre><code>// \u786e\u5b9e\uff0c\u6211\u521a\u521a\u7684\u601d\u8def\u5b8c\u5168\u662f\u9519\u7684\ud83d\ude05\n\nvoid ChatGptDeepSeek()\n{\n    string s;\n    cin &gt;&gt; s;\n    int n = s.size();\n    s = \" \" + s;\n    vector&lt;vector&lt;int&gt;&gt; dp(n + 1, vector&lt;int&gt;(n + 1, n));\n    for (int i = 1; i &lt;= n; i++)\n        dp[i][i] = 1;\n    for (int len = 2; len &lt;= n; len++)\n    {\n        for (int l = 1; l + len - 1 &lt;= n; l++)\n        {\n            int r = l + len - 1;\n            if (s[r] == s[l])\n                dp[l][r] = min(dp[l][r], dp[l][r - 1]);\n            for (int m = l; m + 1 &lt;= r; m++)\n            {\n                dp[l][r] = min(dp[l][r], dp[l][m] + dp[m + 1][r]);\n            }\n        }\n    }\n    cout &lt;&lt; dp[1][n] &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/2025/0313/#cf1970e1-1800","title":"CF1970E1 *1800","text":"<p>2025-03-25</p> <p>\u4e0d\u662f\u54e5\u4eec\uff0c\u8fd9\u80fd\u7ed91800\u3002\u5176\u5b9e\u5f88\u7b80\u5355\u5427\u3002</p> <p>\u6211\u4eec\u5176\u5b9e\u53ea\u9700\u8981\u77e5\u9053\u6709\u591a\u5c11\u6761\u957f\u8def\u591a\u5c11\u6761\u77ed\u8def\u53ef\u80fd\u8d70\u56de\u6765\uff0c\u5c31\u80fd\u77e5\u9053\u5728\u7b2c \\(i\\) \u6709\u591a\u5c11\u79cd\u65b9\u5f0f\u53ef\u4ee5\u5230\u8fbe\u6bcf\u4e00\u4e2a\u623f\u5b50\u3002</p> <pre><code>void ChatGptDeepSeek()\n{\n    constexpr int mod = 1e9 + 7;\n    int m, n;\n    cin &gt;&gt; m &gt;&gt; n;\n    /*\n    1 0 1\n    0 1 1\n\n    \u7b2c\u4e00\u5929 1-&gt;1 1-&gt;2 1-&gt;3 (S,L)\n    \u7b2c\u4e8c\u5929\n    d[1]=1 d[2]=1 d[3]=2\n\n    S=3 L=3\n    */\n    vector&lt;int&gt; s(m + 1), l(m + 1);\n    for (int i = 1; i &lt;= m; i++)\n        cin &gt;&gt; s[i];\n    for (int i = 1; i &lt;= m; i++)\n        cin &gt;&gt; l[i];\n    ll S = s[1], L = l[1];\n    vector&lt;ll&gt; ways(m + 1);\n    for (int i = 1; i &lt;= n; i++)\n    {\n        ll nS = 0, nL = 0;\n        for (int j = 1; j &lt;= m; j++)\n        {\n            ways[j] = (1LL * s[j] * (S + L) % mod + 1LL * l[j] * S % mod) % mod;\n            nS = (nS + 1LL * ways[j] * s[j] % mod) % mod;\n            nL = (nL + 1LL * ways[j] * l[j] % mod) % mod;\n            // cerr &lt;&lt; ways[j] &lt;&lt; \" \\n\"[j == m];\n        }\n        S = nS, L = nL;\n        // cerr &lt;&lt; S &lt;&lt; \" \" &lt;&lt; L &lt;&lt; '\\n';\n    }\n    ll ans = 0;\n    for (int i = 1; i &lt;= m; i++)\n    {\n        ans = (ans + ways[i]) % mod;\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/2025/0313/#p1013","title":"\u6d1b\u8c37P1013 \u666e\u53ca+/\u63d0\u9ad8","text":"<p>2025-03-28</p> <p>\u5f88\u6c34\u7684\u4e00\u4e2a\u9898\u76ee\u4e86\uff0c\u76f4\u63a5\u5168\u6392\u5217\u679a\u4e3e\u5373\u53ef\uff0c\u4e8c\u5341\u5206\u949f\u5199\u5b8c\u4e86\u3002\u611f\u89c9\u96be\u5ea6\u8bc4\u9ad8\u4e86\u70b9\uff0c\u4f46\u662f\u4e4b\u524d\u770b\u8fc7\u4e00\u773c\u9898\u76ee\uff0c\u611f\u89c9\u4e0d\u592a\u60f3\u5199\u3002\u4f46\u662f\u8fd9\u6b21\u770b\u4e86\u4e00\u4f1a\u6000\u7591\u662f\u6c34\u9898\uff0c\u7ed3\u679c\u786e\u5b9e\u5dee\u4e0d\u591a\u3002</p> <p>\u4f46\u662f\u8fd8\u662f\u4e5f\u5f97\u6709\u70b9\u8010\u5fc3\u5199\u548c\u601d\u8003\u5427\u3002</p> <p>\u7531\u4e8e\u6bcf\u4e2a\u6570\u5b57\u90fd\u4e0d\u540c\uff0c\u800c\u4e14\u6240\u6709\u6570\u5b57\u90fd\u4f1a\u4e24\u4e24\u52a0\u4e00\u8d77\uff0c\u6240\u4ee5\u5982\u679c\u662f\u5408\u6cd5\u65b9\u6848\uff0c\u4e00\u5b9a\u662f\u8868\u793a\u7684 \\(n-1\\) \u8fdb\u5236\u7684\u52a0\u6cd5\u3002\u76f4\u63a5\u679a\u4e3e\u6bcf\u4e2a\u7b26\u53f7\u662f\u54ea\u4e2a\u503c\u5373\u53ef\u3002</p> <pre><code>void ChatGptDeepSeek()\n{\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;vector&lt;string&gt;&gt; s(n, vector&lt;string&gt;(n));\n    for (int i = 0; i &lt; n; i++)\n        for (int j = 0; j &lt; n; j++)\n            cin &gt;&gt; s[i][j];\n    vector&lt;int&gt; p(n - 1);\n    iota(p.begin(), p.end(), 0);\n    auto check = [&amp;]()\n    {\n        vector&lt;int&gt; q(129);\n        for (int i = 0; i &lt; n - 1; i++)\n            q[s[0][i + 1][0]] = p[i];\n        vector&lt;vector&lt;int&gt;&gt; a(n, vector&lt;int&gt;(n));\n        for (int i = 1; i &lt; n; i++)\n            a[0][i] = p[i - 1];\n        for (int i = 1; i &lt; n; i++)\n            a[i][0] = p[i - 1];\n        auto get = [&amp;](string x)\n        {\n            int res = 0;\n            for (auto y : x)\n                res = res * (n - 1) + q[y];\n            return res;\n        };\n        for (int i = 1; i &lt; n; i++)\n            for (int j = 1; j &lt; n; j++)\n            {\n                // if (i == j &amp;&amp; i == 1)\n                // {\n                //     cerr &lt;&lt; p[i - 1] &lt;&lt; \" \" &lt;&lt; p[j - 1] &lt;&lt; \" \" &lt;&lt; get(s[i][j]) &lt;&lt; '\\n';\n                // }\n                if (p[i - 1] + p[j - 1] != get(s[i][j]))\n                    return false;\n            }\n        return true;\n    };\n    do\n    {\n        if (check())\n        {\n            for (int i = 1; i &lt; n; i++)\n                cout &lt;&lt; s[0][i] &lt;&lt; \"=\" &lt;&lt; p[i - 1] &lt;&lt; \" \\n\"[i + 1 == n];\n            cout &lt;&lt; n - 1 &lt;&lt; '\\n';\n            return;\n        }\n    } while (next_permutation(p.begin(), p.end()));\n    cout &lt;&lt; \"ERROR!\\n\";\n}\n</code></pre>"},{"location":"cp_solving/2025/0313/#p10915","title":"\u6d1b\u8c37P10915 \u666e\u53ca+/\u63d0\u9ad8","text":"<p>2025-03-28</p> <p>\u84dd\u6865\u676f24 B\u7ec4\u56fd\u8d5b\u9898\u76ee\uff1f\u4f46\u662f\u6211\u611f\u89c9\u6ca1\u89c1\u8fc7\uff0c\u53ef\u80fd\u662f Java \u6216\u8005 Python \u7ec4\u7684\u5427\uff0c\u4e5f\u53ef\u80fd\u662f C++ \u7684\uff08\uff09\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u5220\u9664\u4e00\u4e2a\u5b50\u4e32\uff0c\u5047\u8bbe\u6211\u4eec\u7684\u7b54\u6848\u7684\u524d\u7f00\u7684\u957f\u5ea6\u662f <code>len</code> \uff0c\u6211\u4eec\u5207\u5272\u5b50\u4e32\u4e4b\u540e\uff0c\u5fc5\u7136\u524d\u7f00\u548c\u540e\u7f00\u81f3\u5c11\u6709\u4e00\u4e2a\u7684\u957f\u5ea6\u662f\u5927\u4e8e\u7b49\u4e8e <code>len</code> \u3002\u6240\u4ee5\u6211\u4eec\u7684\u7b54\u6848\u7684\u524d\u534a\u90e8\u5206\u6216\u8005\u540e\u534a\u90e8\u5206\uff0c\u5fc5\u7136\u662f \\(s\\) \u7684\u4e00\u4e2a\u524d\u7f00\u6216\u8005\u4e00\u4e2a\u540e\u7f00\u3002</p> <p>\u82e5 <code>len</code> \u662f\u4ee5\u5f97\u5230\u7684\u524d\u7f00\u957f\u5ea6\uff0c\u90a3\u4e48 <code>[1, len-1]</code> \u5fc5\u7136\u4e5f\u662f\u53ef\u4ee5\u5f97\u5230\u7684\u957f\u5ea6\uff0c\u53ea\u9700\u8981\u591a\u5220\u4e00\u90e8\u5206\u5c31\u884c\u3002</p> <p>\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7528\u4e8c\u5206\u6765\u6c42\u6700\u957f\u7684\u957f\u5ea6\uff0c\u90a3\u4e48\u7531\u4e8e\u5207\u5272\u540e\u81f3\u5c11\u6709\u4e00\u8fb9\u7684\u957f\u5ea6\u662f\u5927\u4e8e\u7b49\u4e8e <code>len</code> \uff0c\u6240\u4ee5\u8981\u4e48\u524d\u9762\u662f <code>s[1, len]</code> \uff0c\u8981\u4e48\u540e\u9762\u662f <code>s[n-len+1, n]</code> \u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u53ea\u7528\u8003\u8651\u7b54\u6848\u7684\u524d\u7f00\u5b8c\u5168\u4e3a \\(s\\) \u7684\u524d\u7f00\u7684\u60c5\u51b5\uff0c\u53e6\u4e00\u79cd\u60c5\u51b5\u53ef\u4ee5\u901a\u8fc7\u7ffb\u8f6c \\(s\\) \u6765\u6c42\u89e3\u7b54\u6848\u3002</p> <p>\u5047\u8bbe <code>t = s[1, len]</code> \uff0c\\(t'=reverse(t)\\) \u90a3\u4e48\u6211\u4eec\u5b9e\u9645\u4e0a\u5c31\u662f\u8981\u5728 <code>s[len+1, n]</code> \u4e4b\u4e2d\u627e\u5230\u4e00\u4e2a\u5b57\u7b26\u4e32 \\(t'\\) \uff0c\u4f46\u662f \\(t'\\) \u53ef\u80fd\u662f\u5728 \\(s[len+1, n]\\)\u88ab\u5206\u6210\u4e24\u6bb5\u7684\u3002\u7531\u4e8e\u7b54\u6848\u7684\u540e\u7f00\u5fc5\u987b\u662f\u5207\u5272\u540e\u7684\u5b57\u7b26\u4e32\u7684\u540e\u7f00\u3002\u6709\u53ef\u80fd\u662f\u628a\u672b\u5c3e\u4e00\u90e8\u5206\u5207\u4e86\uff0c\u6709\u53ef\u80fd\u628a\u4e2d\u95f4\u7684\u67d0\u4e00\u90e8\u5206\u5207\u4e86\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u4ece\u672b\u5c3e\u770b \\(t\\) \u548c \\(s\\) \u7684\u8fd9\u4e00\u4f4d\u662f\u5426\u76f8\u7b49\uff0c\u82e5\u76f8\u7b49\u5219\u628a \\(t\\) \u7684\u672b\u5c3e\u5220\u9664\u3002\u7136\u540e\u6700\u540e\u6211\u4eec\u53ea\u9700\u8981\u5728 \\(s[len+1,n]\\) \u4e2d\u67e5\u627e\u65b0\u7684 \\(t\\) \u3002</p> <p>\u53ef\u4ee5\u7528 KMP \u7b97\u6cd5\u6c42\uff0c\u5355\u6b21 check \u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n)\\) \u3002</p> <pre><code>int solve(string s)\n{\n    int n = s.size();\n    auto check = [&amp;](int len)\n    {\n        string t = s.substr(0, len);\n        reverse(t.begin(), t.end());\n        for (int i = n - 1; i &gt;= n - len; i--)\n        {\n            if (t.back() == s[i])\n                t.pop_back();\n            else\n                break;\n        }\n\n        if (t.empty())\n            return true;\n        int i = len, m = t.size();\n        vector&lt;int&gt; p(m);\n        for (int i = 1; i &lt; m; i++)\n        {\n            int j = i - 1;\n            while (j &gt; 0 &amp;&amp; t[i] != t[j])\n                j = p[j - 1];\n            p[i] = j;\n            if (t[i] == t[j])\n                p[i]++;\n        }\n        int j = 0;\n        while (i &lt; n)\n        {\n            while (j &gt; 0 &amp;&amp; s[i] != t[j])\n                j = p[j - 1];\n            if (s[i] == t[j])\n                i++, j++;\n            else\n                i++; // \u5982\u679c\u4e0d\u76f8\u7b49 \u90a3\u4e48j \u5fc5\u7136\u7b49\u4e8e0 \u6240\u4ee5\u76f4\u63a5\u770b\u4e0b\u4e00\u4e2a1\n            if (j == t.size())\n                return true;\n        }\n        return false;\n    };\n    int lo = 0, hi = n / 2 + 1;\n    while (lo &lt; hi - 1)\n    {\n        int mid = (lo + hi) &gt;&gt; 1;\n        if (check(mid))\n            lo = mid;\n        else\n            hi = mid;\n    }\n    return lo;\n}\nvoid ChatGptDeepSeek()\n{\n    string s;\n    cin &gt;&gt; s;\n    int ans = solve(s);\n    reverse(s.begin(), s.end());\n    ans = max(ans, solve(s));\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/2025/0313/#p8812","title":"\u6d1b\u8c37P8812 \u666e\u53ca+/\u63d0\u9ad8","text":"<p>2025-03-31</p> <p>\u540c\u5b66\u95ee\u7684\u9898\uff0c\u4e8e\u662f\u987a\u4fbf\u770b\u4e00\u4e0b\uff0c\u662f\u67d0\u5e74\u67d0\u7ec4\u7684\u84dd\u6865\u676f\u7684\u9898\u3002\u611f\u89c9\u6c34\u9898\u3002</p> <p>\u4f46\u662f\u8fd8\u662f\u53d1\u73b0\u4e00\u70b9\u95ee\u9898\uff0c<code>st.erase(st.lower_bound(val))</code> T\u4e86\uff0c<code>st.erase(st.find(val))</code> AC\u4e86\uff0c\u5927\u6982\u5dee\u4e86150ms\u5de6\u53f3\uff0c\u603b\u5171\u662f1000ms\u3002\u611f\u89c9\u4f18\u5148\u961f\u5217\u5c11\u653e\u70b9\u4e1c\u897f\uff0c\u5f00\u4e2a\u6570\u7ec4\u5b58\u4fe1\u606f\u5e94\u8be5\u5feb\u5f88\u591a\u3002</p> <pre><code>int main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.tie(nullptr);\n\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    priority_queue&lt;array&lt;int, 5&gt;, vector&lt;array&lt;int, 5&gt;&gt;, greater&lt;&gt;&gt; pq;\n    priority_queue&lt;array&lt;int, 4&gt;, vector&lt;array&lt;int, 4&gt;&gt;, greater&lt;&gt;&gt; pq1;\n    vector&lt;multiset&lt;int&gt;&gt; price(n, multiset&lt;int&gt;());\n    vector&lt;int&gt; days;\n    for (int i = 1; i &lt;= m; i++)\n    {\n        int s, t, p, c;\n        cin &gt;&gt; s &gt;&gt; t &gt;&gt; p &gt;&gt; c;\n        days.push_back(s);\n        days.push_back(t + 1);\n        for (int j = 1; j &lt;= c; j++)\n        {\n            int a, b;\n            cin &gt;&gt; a &gt;&gt; b;\n            a--;\n            pq.push({s, t, a, b, p});\n            price[a].insert(b);\n        }\n    }\n    long long cost = 0;\n    for (int i = 0; i &lt; n; i++)\n        cost += *price[i].begin();\n    long long ans = cost;\n    sort(days.begin(), days.end());\n    days.erase(unique(days.begin(), days.end()), days.end());\n    for (auto now : days)\n    {\n        while (!pq.empty() &amp;&amp; pq.top()[0] == now)\n        {\n            auto [s, t, a, b, p] = pq.top();\n            pq.pop();\n            int val = 1LL * b * p / 100;\n            cost -= *price[a].begin();\n            price[a].insert(val);\n            cost += *price[a].begin();\n            pq1.push({t + 1, a, b, p});\n        }\n        while (!pq1.empty() &amp;&amp; pq1.top()[0] == now)\n        {\n            auto [t, a, b, p] = pq1.top();\n            pq1.pop();\n            int val = 1LL * b * p / 100;\n            cost -= *price[a].begin();\n            price[a].erase(price[a].find(val));\n            cost += *price[a].begin();\n        }\n        ans = min(cost, ans);\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n    return 0;\n}\n</code></pre>"},{"location":"cp_solving/2025/0401/","title":"\u90e8\u5206\u505a\u9898\u8bb0\u5f55","text":"<p>2025-04-01 \u6700\u8fd1\u51c6\u5907\u591a\u505a\u70b9DP\u3002\u3002\u3002</p>"},{"location":"cp_solving/2025/0401/#p1095-","title":"\u6d1b\u8c37P1095 \u666e\u53ca/\u63d0\u9ad8-","text":"<p>2025-04-01 tag: DP</p> <p>\u9ec4\u9898\uff0c\u4f46\u662f\u8fd8\u662f\u505a\u4e86\u56db\u4e94\u5341\u5206\u949f\u3002\u3002\u3002\u6ca1\u5565\u597d\u8bf4\u7684\u3002</p> <pre><code>void ChatGptDeepSeek()\n{\n    int m, s, t;\n    cin &gt;&gt; m &gt;&gt; s &gt;&gt; t;\n    // \u6c34\u9898 \u679a\u4e3e\u7528\u4e86\u591a\u5c11\u6b21\u9b54\u6cd5\u5c31\u884c\n\n    vector&lt;int&gt; d(t + 1), T(t + 1), r(t + 1), ned(t + 1);\n    r[0] = m;               // \u7528 i \u6b21\u9b54\u6cd5\u540e \u5269\u4f59\u7684\u9b54\u6cd5\n    T[0] = 0;               // \u7528 i \u6b21\u9b54\u6cd5 \u6062\u590d\u9700\u8981\u7684\u65f6\u95f4\n    ned[0] = (s + 16) / 17; // \u7528 i \u6b21\u9b54\u6cd5 \u8d70\u5230\u7ec8\u70b9\u9700\u8981\u7684\u65f6\u95f4\n\n    d[0] = (t + 16) / 17 * 17; // \u7528 i \u6b21\u9b54\u6cd5 t\u65f6\u95f4\u8d70\u7684\u8ddd\u79bb\n    for (int i = 1; i &lt;= t; i++)\n    {\n        T[i] = T[i - 1];\n        r[i] = r[i - 1];\n        if (r[i - 1] &lt; 10)\n        {\n            T[i] += (10 - r[i - 1] + 3) / 4;\n            r[i] = r[i] + (T[i] - T[i - 1]) * 4 - 10;\n        }\n        else\n            r[i] -= 10;\n        // \u5269\u4e0b t-T[i]\u7684\u65f6\u95f4 \u770b\u80fd\u8d70\u591a\u5c11\n        ned[i] = T[i] + i;\n        if (ned[i] &gt; t)\n            break;\n        d[i] = i * 60 + (t - ned[i]) * 17;\n\n        if (s &gt;= i * 60)\n        {\n            ned[i] += (s - i * 60 + 16) / 17;\n        }\n        // cerr &lt;&lt; i &lt;&lt; \" \" &lt;&lt; r[i] &lt;&lt; \" \" &lt;&lt; T[i] &lt;&lt; \" \" &lt;&lt; ned[i] &lt;&lt; \" \\n\";\n    }\n    int time = t + 1;\n    for (int i = 0; i &lt;= t; i++)\n    {\n        if (d[i] &gt;= s &amp;&amp; ned[i] &lt;= t)\n        {\n            // cerr &lt;&lt; i &lt;&lt; \" \" &lt;&lt; ned[i] &lt;&lt; \" \\n\";\n            time = min(time, ned[i]);\n        }\n    }\n    if (time != t + 1)\n        cout &lt;&lt; \"Yes\\n\"\n             &lt;&lt; time &lt;&lt; '\\n';\n    else\n        cout &lt;&lt; \"No\\n\"\n             &lt;&lt; *max_element(d.begin(), d.end()) &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/2025/0401/#p2679","title":"\u6d1b\u8c37P2679 \u666e\u53ca+/\u63d0\u9ad8","text":"<p>2025-04-01 tag: DP</p> <p>\u867d\u7136\u60f3\u4e86\u4e00\u4f1a\uff0c\u5199\u4e86\u4e00\u4e2a\u591a\u5c0f\u65f6\u3002\u4f46\u8fd9\u4e2a\u5c31\u662f\u5f88\u6b63\u5e38\u7684DP\u9898\uff0c\u633a\u597d\u7684\u3002</p> <p>\u5b66\u5230\u4e00\u4e2a\u5c0f\u6280\u5de7\uff0c\u5c31\u662f\u5f88\u591a\u65f6\u5019\u6211\u4eec\u5f00\u591a\u7ef4\u7684 DP \u53ea\u4f1a\u7528\u5230 \\(i\\) \u548c \\(i-1\\) \u7684\uff0c\u53ef\u4ee5\u6eda\u52a8\u6570\u7ec4\uff0c\u6211\u4e00\u822c\u559c\u6b22\u6bcf\u6b21\u5faa\u73af\u65b0\u5f00\u4e00\u4e2a\u3002\u4f46\u662f\u5176\u5b9e\u53ef\u4ee5\u7528 \\(i\\&amp; 1\\) \u548c \\((i\\&amp;1) \\oplus 1\\) \u8fd9\u79cd\u8868\u793a\uff0c\u6bd4\u8f83\u597d\u5199\u3002</p> <pre><code>constexpr int mod = 1000000007;\n\nint dp[2][202][202];\nvoid ChatGptDeepSeek()\n{\n    int n, m, k;\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;\n\n    // \u5339\u914d\u4e86i\u957f\u5ea6\uff0c\u7528\u4e86 j \u6bb5\n    vector&lt;char&gt; A(n + 1), B(m + 1);\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; A[i];\n    for (int i = 1; i &lt;= m; i++)\n        cin &gt;&gt; B[i];\n    vector&lt;vector&lt;int&gt;&gt; DP(m + 1, vector&lt;int&gt;(k + 1));\n    dp[0][0][0] = DP[0][0] = 1;\n    for (int i = 1; i &lt;= n; i++)\n    {\n\n        vector nDP = DP;\n        for (int j = 1; j &lt;= min(i, m); j++)\n        {\n            if (A[i] == B[j])\n            {\n                for (int l = 1; l &lt;= min(k, j); l++)\n                {\n                    dp[i &amp; 1][j][l] = (dp[i &amp; 1][j][l] + DP[j - 1][l - 1]) % mod;\n                    nDP[j][l] = (nDP[j][l] + DP[j - 1][l - 1]) % mod;\n\n                    dp[i &amp; 1][j][l] = (dp[i &amp; 1][j][l] + dp[(i ^ 1) &amp; 1][j - 1][l]) % mod;\n                    nDP[j][l] = (nDP[j][l] + dp[(i ^ 1) &amp; 1][j - 1][l]) % mod;\n                }\n            }\n        }\n        for (int j = 0; j &lt;= min(i, m); j++)\n            for (int l = 1; l &lt;= min(k, j); l++)\n                dp[(i ^ 1) &amp; 1][j][l] = 0;\n        DP = nDP;\n    }\n    cout &lt;&lt; DP[m][k] &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/2025/0401/#p5658","title":"\u6d1b\u8c37P5658 \u666e\u53ca+/\u63d0\u9ad8","text":"<p>2025-04-01 tag: DFS</p> <p>\u6211\u670d\u4e86\uff0c\u672c\u6765\u662f\u5728\u5199 DP\u9898\u5355\u7684\uff0cWA\u4e86\u4e00\u665a\u4e0a\uff0c\u4e0d\u662f\u54e5\u4eec\u8fd9\u8ddfDP\u6709\u5173\u7cfb\u5417\uff1f\u867d\u7136\u5e94\u8be5\u53ef\u4ee5\uff0c\u4f46\u662f\u4f1a\u5f88\u4e0d\u597d\u505a\u3002</p> <p>\u5b66\u4e60\u4e86\u9898\u89e3\u7684\u65b9\u6cd5\u3002\u3002\u3002</p> <pre><code>void ChatGptDeepSeek()\n{\n    int n;\n    cin &gt;&gt; n;\n    string s;\n    cin &gt;&gt; s;\n    vector&lt;vector&lt;ll&gt;&gt; adj(n + 1, vector&lt;ll&gt;());\n    vector&lt;int&gt; fa(n + 1);\n    for (int i = 2; i &lt;= n; i++)\n    {\n        int x;\n        cin &gt;&gt; x;\n        fa[i] = x;\n        adj[x].push_back(i);\n    }\n    s = \" \" + s;\n    vector&lt;int&gt; stk, lst(n + 1);\n    vector&lt;long long&gt; sum(n + 1);\n\n    auto dfs = [&amp;](auto &amp;&amp;self, int u, int pre) -&gt; void\n    {\n        int tmp = 0;\n        if (s[u] == ')')\n        {\n            if (!stk.empty())\n            {\n                tmp = stk.back();\n                stk.pop_back();\n                lst[u] = lst[fa[tmp]] + 1;\n            }\n        }\n        else\n            stk.push_back(u);\n        sum[u] = sum[pre] + lst[u];\n        for (auto v : adj[u])\n        {\n            if (v == pre)\n                continue;\n            self(self, v, u);\n        }\n        if (tmp)\n            stk.push_back(tmp);\n        else if (!stk.empty())\n            stk.pop_back();\n    };\n    dfs(dfs, 1, 0);\n    long long ans = 0;\n    for (int i = 1; i &lt;= n; i++)\n    {\n        ans ^= (1LL * i * sum[i]);\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/2025/0407/","title":"\u52a8\u6001\u89c4\u5212\u7ec3\u4e60","text":"<p>2025-04-07</p> <p>\u6700\u8fd1\u51c6\u5907\u7ec3\u70b9\u52a8\u6001\u89c4\u5212\u7684\u9898\u3002\u3002\u3002\u4f46\u662f\u5176\u5b9e\u597d\u50cf\u53ea\u662f\u5728\u6d1b\u8c37\u5199\u4e86\u51e0\u4e2a\u7eff\u8272\u7684\u677f\u5b50\u9898\u3002\u57fa\u672c\u90fd\u662f\u5f88\u7b80\u5355\u7684\u96be\u5ea6\u3002</p> <p>\u611f\u89c9\u4e5f\u662f\u53ef\u4ee5\u7a0d\u5fae\u8bb0\u5f55\u4e00\u4e0b\u5427\uff0c\u4f46\u662f\u540e\u9762\u5f97\u7a0d\u5fae\u5199\u70b9\u96be\u70b9\u7684\u9898\u4e86\uff0c\u867d\u7136\u6709\u7684\u7eff\u4e5f\u662f\u611f\u89c9\u6ca1\u5565\u601d\u8def\u3002</p> <p>\u7a0d\u5fae\u603b\u7ed3\u4e00\u4e0b\u3002\u611f\u89c9\u90fd\u8fd8\u662f\u6bd4\u8f83\u5178\u7684\u9898\uff0c\u633a\u597d\u7684\uff0c\u8865\u8d77\u6765\u5e94\u8be5\u4e5f\u4e0d\u4f1a\u5f88\u56f0\u96be\u3002</p>"},{"location":"cp_solving/2025/0407/#p2679","title":"\u6d1b\u8c37P2679 \u666e\u53ca+/\u63d0\u9ad8","text":"<p>\u611f\u89c9\u597d\u50cf\u6ca1\u5565\u597d\u8bf4\u7684\uff0c\u679a\u4e3e \\(A_i\\) \u548c \\(B_j\\) \u5339\u914d\uff0c\u5339\u914d\u4e86\u591a\u5c11\u6bb5\u3002\\(i\\) \u8fd9\u4e00\u7ef4\u53ea\u9700\u8981\u77e5\u9053\u524d\u4e00\u4f4d\u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u7528\u6eda\u52a8\u6570\u7ec4\u3002</p> <p>\\(dp_{i,j,l}\\) \u8868\u793a \\(A_{i}\\) \u548c \\(B_j\\) \u5339\u914d\u7528\u4e86 \\(l\\) \u6bb5\u7684\u65b9\u6848\u6570\u3002</p> <p>\u8f6c\u79fb\u65b9\u7a0b\u4e3a \\(dp_{i,j,l}=\\sum\\limits_{k=1}^{i-1}{dp_{k,j-1,l-1}}+dp_{i-1,j-1,l}\\) \u3002</p> <p>\u6240\u4ee5\u6211\u4eec\u5176\u5b9e\u53ea\u9700\u8981\u77e5\u9053\u524d\u7f00\u7684\u548c\uff0c\u4ee5\u53ca \\(dp_{i-1}\\) \uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528\u6eda\u52a8\u6570\u7ec4\uff0c\u518d\u7528\u4e00\u4e2a\u6570\u7ec4\u6765\u8bb0\u524d\u7f00\u548c\u3002</p> <pre><code>constexpr int mod = 1000000007;\n\nint dp[2][202][202];\nvoid ChatGptDeepSeek()\n{\n    int n, m, k;\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;\n    vector&lt;char&gt; A(n + 1), B(m + 1);\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; A[i];\n    for (int i = 1; i &lt;= m; i++)\n        cin &gt;&gt; B[i];\n    vector&lt;vector&lt;int&gt;&gt; DP(m + 1, vector&lt;int&gt;(k + 1));\n    dp[0][0][0] = DP[0][0] = 1;\n    for (int i = 1; i &lt;= n; i++)\n    {\n\n        vector nDP = DP;\n        for (int j = 1; j &lt;= min(i, m); j++)\n        {\n            if (A[i] == B[j])\n            {\n                for (int l = 1; l &lt;= min(k, j); l++)\n                {\n                    dp[i &amp; 1][j][l] = (dp[i &amp; 1][j][l] + DP[j - 1][l - 1]) % mod;\n                    nDP[j][l] = (nDP[j][l] + DP[j - 1][l - 1]) % mod;\n\n                    dp[i &amp; 1][j][l] = (dp[i &amp; 1][j][l] + dp[(i ^ 1) &amp; 1][j - 1][l]) % mod;\n                    nDP[j][l] = (nDP[j][l] + dp[(i ^ 1) &amp; 1][j - 1][l]) % mod;\n                }\n            }\n        }\n        for (int j = 0; j &lt;= min(i, m); j++)\n            for (int l = 1; l &lt;= min(k, j); l++)\n                dp[(i ^ 1) &amp; 1][j][l] = 0;\n        DP = nDP;\n    }\n    cout &lt;&lt; DP[m][k] &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/2025/0407/#p1541","title":"\u6d1b\u8c37P1541 \u666e\u53ca+/\u63d0\u9ad8","text":"<p>\u8fd9\u4e2a\u5f88\u57fa\u7840\u7684\u9898\u76ee\u4e86\uff0c\u867d\u7136\u6807\u7684\u6709\u7eff\uff0c\u4f46\u662f\u5b9e\u9645\u96be\u5ea6\u5e76\u975e\u5f88\u9ad8\uff0c\u5e94\u8be5\u8fd8\u662f\u6bd4\u8f83\u5bb9\u6613\u60f3\u51fa\u6765\u7684\u3002\u53ea\u9700\u8981\u679a\u4e3e\u6bcf\u79cd\u7c7b\u578b\u7c7b\u578b\u7684\u5361\u7247\u7528\u4e86\u591a\u5c11\u6b21\u3002</p> <p>\u56e0\u4e3a\u8d70\u7684\u6b65\u6570\u662f\u53ef\u4ee5\u6839\u636e\u7528\u7684\u5361\u7247\u7684\u60c5\u51b5\u76f4\u63a5\u7b97\u51fa\u7684\u3002</p> <pre><code>int dp[41][41][41][41];\n\nvoid ChatGptDeepSeek()\n{\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    vector&lt;int&gt; a(n + 1);\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; a[i];\n    vector&lt;int&gt; b(4);\n    for (int i = 1; i &lt;= m; i++)\n    {\n        int x;\n        cin &gt;&gt; x;\n        b[x - 1]++;\n    }\n    dp[0][0][0][0] = a[1];\n    for (int i = 0; i &lt;= b[0]; i++)\n        for (int j = 0; j &lt;= b[1]; j++)\n            for (int k = 0; k &lt;= b[2]; k++)\n                for (int l = 0; l &lt;= b[3]; l++)\n                {\n                    int len = i * 1 + j * 2 + k * 3 + l * 4;\n                    // dp[i][j][k][l] = a[1];\n                    // cerr &lt;&lt; len &lt;&lt; '\\n';\n                    if (i - 1 &gt;= 0)\n                        dp[i][j][k][l] = max(dp[i][j][k][l], dp[i - 1][j][k][l] + a[len + 1]);\n                    if (j - 1 &gt;= 0)\n                        dp[i][j][k][l] = max(dp[i][j][k][l], dp[i][j - 1][k][l] + a[len + 1]);\n                    if (k - 1 &gt;= 0)\n                        dp[i][j][k][l] = max(dp[i][j][k][l], dp[i][j][k - 1][l] + a[len + 1]);\n                    if (l - 1 &gt;= 0)\n                        dp[i][j][k][l] = max(dp[i][j][k][l], dp[i][j][k][l - 1] + a[len + 1]);\n                }\n    cout &lt;&lt; dp[b[0]][b[1]][b[2]][b[3]] &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/2025/0407/#p1868","title":"\u6d1b\u8c37P1868 \u666e\u53ca+/\u63d0\u9ad8","text":"<p>\u4e5f\u662f\u6bd4\u8f83\u5bb9\u6613\u60f3\u5230\u7684\u4e86\u3002\u5b9a\u4e49 \\(dp_i\\) \u4e3a \\([1,i]\\) \u7684\u6700\u5927\u7b54\u6848\u3002</p> <p>\u90a3\u4e48\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u533a\u95f4 \\([l,r]\\) \uff0c\u6211\u4eec\u53ef\u4ee5\u66f4\u65b0 \\(dp_r=dp_{l-1}+r-l+1\\) \u3002</p> <pre><code>constexpr int N = 3e6 + 10;\nint dp[N];\n\nvoid ChatGptDeepSeek()\n{\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;pair&lt;int, int&gt;&gt; v(n);\n    for (int i = 0; i &lt; n; i++)\n        cin &gt;&gt; v[i].first &gt;&gt; v[i].second;\n    sort(v.begin(), v.end());\n    int j = 0;\n    for (int i = 0; i &lt;= 3000000; i++)\n    {\n        while (j &lt; v.size() &amp;&amp; v[j].first == i)\n        {\n            auto [l, r] = v[j];\n            j++;\n            dp[r] = max(dp[r], (l ? dp[l - 1] : 0) + r - l + 1);\n        }\n        dp[i] = max(dp[i], dp[i - 1]);\n    }\n    cout &lt;&lt; dp[3000000] &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/2025/0407/#p1156","title":"\u6d1b\u8c37P1156 \u666e\u53ca+/\u63d0\u9ad8","text":"<p>\u4e5f\u662f\u6bd4\u8f83\u5e38\u89c4\u7684\u9898\u76ee\u3002\u7ef4\u62a4\u6bcf\u4e00\u4e2a\u9ad8\u5ea6\u65f6\u7684\u6700\u5927\u7684\u4f53\u529b\u503c\u3002</p> <p>\u53ea\u9700\u8981\u6ce8\u610f\u4e0b\uff0c\u8f93\u5165\u7684\u65f6\u95f4\u4e0d\u5168\u662f\u6309\u65f6\u95f4\u6392\u5e8f\u7684\u3002</p> <pre><code>void ChatGptDeepSeek()\n{\n    int D, G;\n    cin &gt;&gt; D &gt;&gt; G;\n    vector&lt;int&gt; T(G), F(G), H(G);\n    {\n        vector&lt;array&lt;int, 3&gt;&gt; tmp(G);\n        for (int i = 0; i &lt; G; i++)\n            cin &gt;&gt; tmp[i][0] &gt;&gt; tmp[i][1] &gt;&gt; tmp[i][2];\n        sort(tmp.begin(), tmp.end());\n        for (int i = 0; i &lt; G; i++)\n            T[i] = tmp[i][0], F[i] = tmp[i][1], H[i] = tmp[i][2];\n    }\n    // for (int i = 0; i &lt; G; i++)\n    //     cin &gt;&gt; T[i] &gt;&gt; F[i] &gt;&gt; H[i];\n    dp[1][0] = 10;\n    // for (int i = 1; i &lt;= 25000; i++)\n    //     dp[1][i] = dp[0][i] = -1;\n\n    for (int i = 0; i &lt; G; i++)\n    {\n        for (int j = 0; j &lt;= 25000; j++)\n        {\n\n            if (dp[(i &amp; 1) ^ 1][j] &gt;= T[i])\n            {\n                if (j + H[i] &gt;= D)\n                {\n                    // cerr &lt;&lt; j &lt;&lt; \" \" &lt;&lt; dp[(i &amp; 1) ^ 1][j] &lt;&lt; \" \\n\";\n                    cout &lt;&lt; T[i] &lt;&lt; '\\n';\n                    return;\n                }\n                if (j + H[i] &lt;= 25000)\n                    dp[(i &amp; 1)][j + H[i]] = max(dp[(i &amp; 1)][j + H[i]], dp[(i &amp; 1) ^ 1][j]);\n                dp[(i &amp; 1)][j] = max(dp[(i &amp; 1)][j], dp[(i &amp; 1) ^ 1][j] + F[i]);\n                // cerr &lt;&lt; i &lt;&lt; \" \" &lt;&lt; j &lt;&lt; '\\n';\n            }\n        }\n        // for (int j = 1; j &lt;= 25000; j++)\n        //     dp[(i &amp; 1) ^ 1][j] = -1;\n    }\n    // \u5982\u679c\u4e0d\u884c\u7684\u8bdd \u5c31\u4e00\u76f4\u5403\uff01\n    int now = 10;\n    for (int i = 0; i &lt; G; i++)\n    {\n        // cerr &lt;&lt; now &lt;&lt; \" \" &lt;&lt; T[i] &lt;&lt; '\\n';\n        if (now &lt; T[i])\n            break;\n        now += F[i];\n    }\n    cout &lt;&lt; now &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/2025/0407/#p3558","title":"\u6d1b\u8c37P3558 \u666e\u53ca+/\u63d0\u9ad8","text":"<p>\u5176\u5b9e\u4e5f\u4e0d\u662f\u5f88\u96be\uff0c\u53ea\u9700\u8981\u7a0d\u5fae\u601d\u8003\u4e00\u4e0b\u3002\u867d\u7136\u8bf4 WA \u4e86\u51e0\u6b21\uff0c\u521a\u5f00\u59cb\u9898\u76ee\u6ca1\u770b\u6e05\u3002\u3002\u3002\u7136\u540e\u601d\u8def\u4e5f\u662f\u6709\u95ee\u9898\u7684\u3002\u540e\u6765\u7a0d\u5fae\u6539\u4e00\u4e0b\u5c31\u597d\u4e86\u3002\u795e\u5947\u7684\u662f\uff0c\u8fd9\u4e94\u9898\u5c45\u7136\u90fd\u4e0d\u7528\u770b\u9898\u89e3\u3002</p> <p>\u679a\u4e3e\u6bcf\u4e00\u4f4d\u53d8\u6210 \\(-1,0,1\\) \u7684\u524d\u7f00\u7684\u7b54\u6848\uff0c\\(a_i\\) \u6700\u591a\u4f1a\u88ab\u524d\u9762\u7684\u6570\u5b57\u52a0\u4e24\u6b21\uff0c\u4e14\u52a0\u4e86\u4e4b\u540e\u4e00\u5b9a\u8981\u5927\u4e8e\u7b49\u4e8e\u524d\u9762\u7684\u6570\u5b57\u3002</p> <pre><code>void ChatGptDeepSeek() // Date: 2025-04-07\n{                      // Time: 17:51:48\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;int&gt; a(n + 1);\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; a[i];\n    // \u679a\u4e3e\u6bcf\u4e00\u4f4d\u53d8\u6210 -1 0 1 \u7684\u7b54\u6848\n    vector&lt;vector&lt;int&gt;&gt; dp(n + 1, vector&lt;int&gt;(3, 1e9));\n    // ... \u597d\u50cf\u60f3\u590d\u6742\u4e86\u7684\n    dp[1][a[1] + 1] = 0;\n    for (int i = 2; i &lt;= n; i++)\n    {\n        for (int x = -1; x &lt;= 1; x++)\n        {\n            for (int z = 0; z &lt;= 2; z++)\n            {\n                int y = a[i] + z * x;\n                if (y &lt; x || y &gt; 1)\n                    continue;\n                dp[i][y + 1] = min(dp[i][y + 1], dp[i - 1][x + 1] + z);\n            }\n        }\n    }\n    int ans = min({dp[n][0], dp[n][1], dp[n][2]});\n    if (ans == 1e9)\n        cout &lt;&lt; \"BRAK\\n\";\n    else\n        cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/2025/0407/#p5322","title":"\u6d1b\u8c37P5322 \u666e\u53ca+/\u63d0\u9ad8","text":"<p>\u53c8\u4e00\u9053\u6c34\u9898\uff0c\u76f4\u63a5\u679a\u4e3e\u5c31\u884c\u5427\u3002\u590d\u6742\u5ea6 \\(O(nms)\\)</p> <p>\u679a\u4e3e\u6d3e\u4e86 \\(k\\) \u4e2a\u4eba\u7684\u6700\u5927\u5f97\u5206\u3002</p> <pre><code>int dp[2][20002];\n\nvoid ChatGptDeepSeek() // Date: 2025-04-07\n{                      // Time: 19:29:06\n    int s, n, m;\n    cin &gt;&gt; s &gt;&gt; n &gt;&gt; m;\n    vector&lt;vector&lt;int&gt;&gt; a(n + 1, vector&lt;int&gt;(s + 1));\n    for (int i = 1; i &lt;= s; i++)\n    {\n        for (int j = 1; j &lt;= n; j++)\n            cin &gt;&gt; a[j][i];\n    }\n\n    for (int i = 1; i &lt;= n; i++)\n    {\n        sort(a[i].begin() + 1, a[i].end());\n        for (int j = 1; j &lt;= s; j++)\n        {\n            int need = 2 * a[i][j] + 1;\n            if (need &gt; m)\n                break;\n            for (int k = m; k &gt;= need; k--)\n            {\n                dp[i &amp; 1][k] = max(dp[i &amp; 1][k], dp[i &amp; 1 ^ 1][k - need] + i * j);\n                // cerr &lt;&lt; dp[k] &lt;&lt; \" \";\n            }\n            // cerr &lt;&lt; '\\n';\n        }\n        for (int k = 0; k &lt;= m; k++)\n            dp[i &amp; 1 ^ 1][k] = dp[i &amp; 1][k];\n        // cout &lt;&lt; *max_element(dp + 1, dp + m + 1) &lt;&lt; '\\n';\n    }\n    int ans = 0;\n    for (int i = 0; i &lt;= m; i++)\n        ans = max(ans, dp[n &amp; 1][i]);\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/2025/0407/#p1880","title":"\u6d1b\u8c37P1880 \u666e\u53ca+/\u63d0\u9ad8","text":"<p>\u77f3\u5b50\u5408\u5e76\uff0c\u5e94\u8be5\u662f\u533a\u95f4 DP \u8fd9\u4e00\u5757\u7684\u6a21\u677f\u9898\u4e86\u3002\u4e5f\u662f\u7b2c\u4e00\u6b21\u81ea\u5df1 AC \u51fa\u7684\u7eff\u8272\u7684\u533a\u95f4 DP \u9898\u3002</p> <p>\u4f46\u662f\u521a\u5f00\u59cb\u770b\u5230\u662f\u53ef\u80fd\u6ca1\u5565\u601d\u8def\u3002\u3002\u6216\u8005\u8bf4\u6ca1\u600e\u4e48\u60f3\u3002\u4e8e\u662f\u53bb\u641c\u4e86\u4e0b\u533a\u95f4 DP \uff0c\u7ed3\u679c\u770b\u5230\u4e00\u4e2a <code>\u77f3\u5b50\u5408\u5e76[\u5f31\u5316\u7248]</code> \uff0c\u4e8e\u662f\u82b1\u4e86\u534a\u5c0f\u65f6 AC \u4e86\u5b83\uff0c\u4e8e\u662f\u518d\u770b\u8fd9\u9898\u53d1\u73b0\u53ea\u662f\u53d8\u6210\u4e86\u73af\u5f62\u7684\u60c5\u51b5\uff0c\u6570\u636e\u8303\u56f4\u8fd8\u53d8\u5c0f\u4e86\u3002\u4e8e\u662f\u82b1\u4e86 40 \u5206\u949f AC \u4e86\u8fd9\u9898\u3002</p> <p>\u5176\u5b9e\u8ddf\u5f31\u5316\u7248\u5176\u5b9e\u6ca1\u533a\u522b\uff0c\u5176\u5b9e\u4e0d\u7528\u600e\u4e48\u7279\u6b8a\u5904\u7406\u73af\u5f62\u7684\u3002\u5c31\u662f\u533a\u95f4 DP \u6a21\u677f\u7684\uff0c\u5982\u679c\u4e0d\u592a\u4f1a\uff0c\u53ef\u4ee5\u5148\u5b66\u4e60\u4e00\u4e0b\u518d\u6765 AC \u3002</p> <pre><code>ll dp[2][114][114];\n\nvoid ChatGptDeepSeek() // Date: 2025-04-07\n{                      // Time: 20:35:26\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;int&gt; a(n + 1), pre(n + 1);\n    for (int i = 1; i &lt;= n; i++)\n    {\n        cin &gt;&gt; a[i];\n        pre[i] = pre[i - 1] + a[i];\n    }\n    auto get = [&amp;](int l, int r)\n    {\n        if (l &lt;= r)\n            return pre[r] - pre[l - 1];\n        else\n            return pre[n] - pre[l - 1] + pre[r];\n    };\n    { // \u5148\u628a\u6700\u5c0f\u503c\u6c42\u4e86\u5427\n        for (int i = 0; i &lt; 114; i++)\n            for (int j = 0; j &lt; 114; j++)\n                dp[0][i][j] = 1e9;\n        for (int i = 1; i &lt;= n; i++)\n            dp[0][i][i] = 0;\n        for (int len = 2; len &lt;= n; len++)\n        {\n            for (int l = 1; l &lt;= n; l++)\n            {\n                int r = l + len - 1;\n                if (r &gt; n)\n                    r -= n;\n                for (int k = l; k != r; k++)\n                {\n                    if (k &gt; n)\n                    {\n                        k = 0;\n                        continue;\n                    }\n                    dp[0][l][r] = min(dp[0][l][r], dp[0][l][k] + dp[0][(k + 1 &gt; n ? k + 1 - n : k + 1)][r] + get(l, r));\n                    dp[1][l][r] = max(dp[1][l][r], dp[1][l][k] + dp[1][(k + 1 &gt; n ? k + 1 - n : k + 1)][r] + get(l, r));\n                }\n            }\n        }\n        ll ans[]{1000000000, 0};\n        for (int l = 1; l &lt;= n; l++)\n        {\n            int r = l + n - 1;\n            if (r &gt; n)\n                r -= n;\n            ans[0] = min(ans[0], dp[0][l][r]), ans[1] = max(ans[1], dp[1][l][r]);\n        }\n        cout &lt;&lt; ans[0] &lt;&lt; '\\n'\n             &lt;&lt; ans[1] &lt;&lt; '\\n';\n    }\n}\n</code></pre>"},{"location":"cp_solving/2025/0407/#p1775-","title":"\u6d1b\u8c37P1775 \u666e\u53ca/\u63d0\u9ad8-","text":"<p>\u53cc\u500d\u7ecf\u9a8c\u4e86\u5c5e\u4e8e\u662f\u3002\u3002\u867d\u7136\u8fd9\u9898\u53ea\u662f\u9ec4\u96be\u5ea6\uff0c\u4f46\u5982\u679c\u4e4b\u524d\u662f\u6ca1\u89c1\u8fc7\u533a\u95f4 DP \u7684\u8bdd\uff0c\u5e94\u8be5\u4f1a\u6bd4\u8f83\u96be\u60f3\u51fa\u6765\u3002\u6bd4\u5982\u6211\u3002\u53ea\u5728\u524d\u4e0d\u4e45\u7684\u4e00\u4e2a Div. 3 \u7684 G \u9898\u89c1\u8fc7\u533a\u95f4 DP \uff0c\u7ea6\u7b49\u4e8e\u6284\u7684\u9898\u89e3\uff0c\u8fd8\u6284\u4e86\u4e00\u4e2a\u84dd\u9898\u7684\u9898\u89e3\uff0c\u8c03\u8272\u90a3\u4e2a\u3002\u6240\u4ee5\u8fd9\u6b21\u6211\u81ea\u5df1\u60f3\u51fa\u6765\u4e86\u3002\u56e0\u4e3a\u5c31\u662f\u6a21\u677f\u554a\u3002\u3002\u3002</p> <pre><code>ll dp[303][303];\n\nvoid ChatGptDeepSeek() // Date: 2025-04-07\n{                      // Time: 20:41:23\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;int&gt; a(n + 1);\n    for (int i = 0; i &lt;= 302; i++)\n        for (int j = 0; j &lt;= 302; j++)\n            dp[i][j] = 1e9;\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; a[i], dp[i][i] = 0;\n    vector&lt;int&gt; pre(n + 1);\n    for (int i = 1; i &lt;= n; i++)\n        pre[i] = pre[i - 1] + a[i];\n    for (int len = 2; len &lt;= n; len++)\n    {\n        for (int l = 1; l + len - 1 &lt;= n; l++)\n        {\n            int r = l + len - 1;\n            for (int k = l; k &lt; r; k++)\n                dp[l][r] = min(dp[l][r], dp[l][k] + dp[k + 1][r] + pre[r] - pre[l - 1]);\n        }\n    }\n    cout &lt;&lt; dp[1][n] &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/2025/0407/#p3146","title":"\u6d1b\u8c37P3146 \u666e\u53ca+/\u63d0\u9ad8","text":"<p>\u60f3\u7b11\uff0c\u600e\u4e48\u4e94\u5206\u949f\u4e0d\u5230AC\u4e86\uff0c\u867d\u7136\u4ee3\u7801\u786e\u5b9e\u5f88\u77ed\u3002\u90a3\u5c31\u4e0d\u591a\u8bf4\u4e86\uff0c\u4e5f\u662f\u533a\u95f4DP\u677f\u5b50\u9898\u3002</p> <pre><code>int dp[250][250];\n\nvoid ChatGptDeepSeek() // Date: 2025-04-08\n{                      // Time: 15:04:31\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;int&gt; a(n + 1);\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; a[i], dp[i][i] = a[i];\n    for (int len = 2; len &lt;= n; len++)\n    {\n        for (int l = 1; l + len - 1 &lt;= n; l++)\n        {\n            int r = l + len - 1;\n            for (int k = l; k &lt; r; k++)\n            {\n                if (dp[l][k] &gt; 0 &amp;&amp; dp[k + 1][r] &gt; 0 &amp;&amp; dp[l][k] == dp[k + 1][r])\n                    dp[l][r] = max(dp[l][r], dp[l][k] + 1);\n            }\n        }\n    }\n    int ans=0;\n    for(int i=1;i&lt;=n;i++) for(int j=i;j&lt;=n;j++) ans=max(ans,dp[i][j]);\n    cout&lt;&lt;ans&lt;&lt;'\\n';\n}\n</code></pre>"},{"location":"cp_solving/2025/0407/#p1063","title":"\u6d1b\u8c37P1063 \u666e\u53ca+/\u63d0\u9ad8","text":"<p>\u8fd9\u9898\u662f\u6bd4\u8f83\u6709\u96be\u5ea6\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u5408\u5e76\u7684\u65f6\u5019\u662f\u8981\u770b\u540e\u9762\u4e00\u4e2a\u7684\u540e\u4e00\u4e2a\u662f\u4ec0\u4e48\u3002\u8fd9\u662f\u8fd9\u4e2a\u9875\u9762\u5230\u8fd9\u91cc\u7b2c\u4e00\u6b21\u770b\u9898\u89e3\u3002\u3002</p> <p>\\(dp_{l,r}=max(dp_{l,r},dp_{l,k}+dp_{k,r}+a_la_ka_r)\\)</p> <p>\u56e0\u4e3a\u5b83\u8fd9\u4e2a\u4e5f\u662f\u4e00\u4e2a\u73af\u5f62\u7684\uff0c\u6240\u4ee5\u6700\u540e\u7684\u7b54\u6848\u4f1a\u662f \\(dp_{i,i+n}\\) \uff0c\u8fd9\u4e2a\u8fd8\u662f\u9700\u8981\u4e00\u4e9b\u7406\u89e3\u7684...</p> <pre><code>int dp[202][202];\nvoid ChatGptDeepSeek() // Date: 2025-04-08\n{                      // Time: 16:03:12\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;int&gt; a(2 * n + 1);\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; a[i], a[i + n] = a[i];\n    for (int len = 2; len &lt;= n + 1; len++)\n        for (int l = 1; l + len - 1 &lt;= 2 * n; l++)\n        {\n            int r = l + len - 1;\n            for (int k = l + 1; k &lt; r; k++)\n            {\n                dp[l][r] = max(dp[l][r], dp[l][k] + dp[k][r] + a[l] * a[k] * a[r]);\n                // cerr &lt;&lt; l &lt;&lt; \" \" &lt;&lt; r &lt;&lt; \" \" &lt;&lt; dp[l][r] &lt;&lt; '\\n';\n            }\n        }\n    int ans = 0;\n    for (int i = 1; i &lt;= n; i++)\n        ans = max(ans, dp[i][i + n]);\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/2025/0407/#p1040","title":"\u6d1b\u8c37P1040 \u666e\u53ca+/\u63d0\u9ad8","text":"<p>\u4e5f\u662f\u4e0d\u96be\u7684\uff0c\u4f46\u770b\u4e86\u4e00\u4e0b\u9898\u89e3\u7684\uff0c\u8fd9\u9898\u4e0d\u8be5\u770b\u7684\u3002\u770b\u4e0b\u5148\u5e8f\u4e2d\u5e8f\u7684\u6982\u5ff5\u5c31\u884c\u7684\u3002\u3002</p> <p>\u5148\u5e8f\u904d\u5386\u5c31\u662f\u5148\u904d\u5386\u6839\u8282\u70b9\uff0c\u518d\u5de6\u53f3\u8282\u70b9;\u4e2d\u5e8f\u904d\u5386\u5c31\u662f\u5148\u904d\u5386\u5de6\u5b50\u6811\uff0c\u518d\u904d\u5386\u6839\u8282\u70b9;\u540e\u7eed\u904d\u5386\u5c31\u662f\u5148\u904d\u5386\u5de6\u53f3\u5b50\u6811\uff0c\u518d\u904d\u5386\u6839\u8282\u70b9\u3002\u6240\u4ee5\u5148\u4e2d\u540e\u6307\u7684\u90fd\u662f\u904d\u5386\u6839\u8282\u70b9\u7684\u987a\u5e8f\u3002</p> <p>\u8fd9\u9898\u8fd8\u662f\u6bd4\u8f83\u57fa\u7840\u7684\uff0c\u7b97\u6bcf\u4e2a \\([l,r]\\) \u5b50\u6811\u7684\u7b54\u6848\u3002\u56e0\u4e3a\u6700\u540e\u8981\u8f93\u51fa\u5148\u5e8f\u904d\u5386\uff0c\u6240\u4ee5\u6211\u4eec\u518d\u62ff\u4e2a\u6570\u7ec4\u8bb0\u5f55\u7b54\u6848\u3002</p> <pre><code>void ChatGptDeepSeek() // Date: 2025-04-11\n{                      // Time: 10:13:41\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;int&gt; d(n + 1);\n\n    vector&lt;vi&gt; dp(n + 1, vi(n + 1, 1));\n    vector&lt;vi&gt; root(n + 1, vi(n + 1));\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; d[i], dp[i][i] = d[i], root[i][i] = i;\n    for (int len = 2; len &lt;= n; len++)\n    {\n        for (int l = 1; l + len - 1 &lt;= n; l++)\n        {\n            int r = l + len - 1;\n\n            for (int k = l; k &lt; r; k++)\n            {\n                if (dp[l][r] &lt; dp[l][k - 1] * dp[k + 1][r] + dp[k][k])\n                {\n                    dp[l][r] = dp[l][k - 1] * dp[k + 1][r] + dp[k][k];\n                    root[l][r] = k;\n                }\n            }\n        }\n    }\n    auto Print = [&amp;](auto &amp;&amp;self, int l, int r) -&gt; void\n    {\n        if (l &gt; r)\n            return;\n        cout &lt;&lt; root[l][r] &lt;&lt; ' ';\n        if (l == r)\n            return;\n        self(self, l, root[l][r] - 1);\n        self(self, root[l][r] + 1, r);\n    };\n    cout &lt;&lt; dp[1][n] &lt;&lt; '\\n';\n    Print(Print, 1, n);\n}\n</code></pre>"},{"location":"cp_solving/2025/0407/#p1273","title":"\u6d1b\u8c37P1273 \u666e\u53ca+/\u63d0\u9ad8","text":"<p>\u672c\u6765\u60f3\u7684\u662f \\(dp_{u,i}\\) \u4ee3\u8868 \\(u\\) \u8282\u70b9\u8d5a\u4e86 \\(i\\) \u91d1\u5e01\u7684\u6700\u5927\u4eba\u6570\uff0c\u4f46\u662f\u590d\u6742\u5ea6\u4f1a\u662f \\(n^3\\) \uff0c\u800c\u4e14\u4e5f\u4e0d\u592a\u597d\u5199\u3002</p> <p>\u5176\u5b9e\u6709\u65f6\u4e00\u79cd\u601d\u8def\u60f3\u4e0d\u901a\uff0c\u53ef\u4ee5\u7a0d\u5fae\u60f3\u60f3\u522b\u7684\uff0c\u50cf\u8fd9\u79cd\u5e76\u975e\u5f88\u590d\u6742\u7684 DP\uff0c\u603b\u5171\u4e5f\u4e0d\u4f1a\u6709\u5f88\u591a\u53ef\u80fd\u6027\u7684\u3002</p> <p>\u4e8e\u662f\u60f3\u5230\u53ef\u4ee5\u4ee3\u8868\u7684\u662f \\(u\\) \u8282\u70b9\u7684\u5b50\u6811\u6709 \\(i\\) \u4eba\u7684\u6700\u5c0f\u82b1\u8d39\uff0c\u7136\u540e TLE \u4e86\u51e0\u4e2a\uff0c\u52a0\u4e86 break \u4e4b\u540e\u5c31\u597d\u4e86\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u5b50\u6811\u7684\u5927\u5c0f\u90fd\u662f\u6709\u9650\u7684\u3002</p> <p>\u8fd9\u662f\u6211\u7684\u7b2c99\u9053\u7eff\u9898\uff0c\u4eca\u5929\u518d\u5199\u4e00\u9898\u5c31\u3002\u3002\u7b49\u4f1a\u676d\u7535\u6bd4\u8d5b\uff0c\u660e\u5929\u84dd\u6865\u7701\u8d5b\u3002</p> <pre><code>void ChatGptDeepSeek() // Date: 2025-04-11\n{                      // Time: 11:04:40\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    vector&lt;vector&lt;pii&gt;&gt; adj(n + 1, vector&lt;pii&gt;());\n    for (int i = 1; i &lt;= n - m; i++)\n    {\n        int k;\n        cin &gt;&gt; k;\n        for (int j = 1; j &lt;= k; j++)\n        {\n            int v, w;\n            cin &gt;&gt; v &gt;&gt; w;\n            adj[i].push_back({v, w});\n        }\n    }\n\n    vector&lt;vi&gt; dp(n + 1, vi(m + 1, -INF));\n    for (int i = 1; i &lt;= n; i++)\n        dp[i][0] = 0;\n    for (int i = n - m + 1; i &lt;= n; i++)\n    {\n        int x;\n        cin &gt;&gt; x;\n        dp[i][1] = x;\n    }\n    vector&lt;vi&gt; ndp(dp);\n\n    auto dfs = [&amp;](auto &amp;&amp;self, int u, int pre) -&gt; void\n    {\n        // cerr &lt;&lt; u &lt;&lt; '\\n';\n        ndp[u] = dp[u];\n        for (auto [v, w] : adj[u])\n        {\n            if (v == pre)\n                continue;\n            self(self, v, u);\n            // \u77e5\u9053\u5b50\u7ed3\u70b9\u7684cost\u60c5\u51b5 \u80fd\u600e\u4e48\u6837\u5462\uff1f\n            // \u6539\u4e00\u4e0b dp[i,j]\u8868\u793a\u8282\u70b9i \u6709j \u7684\u8d21\u732e \u7684\u6700\u5c0f\u7684cost\n            for (int i = 0; i &lt;= m; i++)\n            {\n                if (dp[u][i] == -INF)\n                    break;\n                for (int j = 0; j + i &lt;= m; j++)\n                {\n                    if (dp[v][j] == -INF)\n                        break;\n                    ndp[u][i + j] = max(ndp[u][i + j], dp[u][i] + dp[v][j] - w);\n                }\n            }\n            dp[u] = ndp[u];\n        }\n    };\n    dfs(dfs, 1, 0);\n    for (int i = m; i &gt;= 0; i--)\n    {\n        if (dp[1][i] &gt;= 0)\n        {\n            cout &lt;&lt; i &lt;&lt; '\\n';\n            return;\n        }\n    }\n}\n</code></pre>"},{"location":"cp_solving/2025/0420/","title":"Codeforces Rating 1900+ \u9898\u76ee\u7ec3\u4e60","text":"<p>2025-04-20</p> <p>\u65e9\u8be5\u591a\u5237 1900 \u7684\u9898\u76ee\u7684\uff0c\u867d\u7136 1600 \u4e5f\u6ca1\u592a\u505a\u719f\uff0c\u91cd\u70b9\u662f\u505a\u3002\u4e0d\u4f1a\u5c31\u65e9\u770b\u9898\u89e3\u3002\u4e0d\u8fc7\u5f53\u524d\u662f\u5148\u6309\u4eba\u591a\u7684\u5237\uff0c\u4e0d\u7136\u4f1a\u5f88\u5403\u529b\u3002</p> <p>\u4eba\u591a\u7684\u53ef\u80fd\u6bd4\u8f83\u677f\uff0c\u66f4\u5bb9\u6613\u6709\u6210\u5c31\u611f\uff0c\u53ef\u80fd\u4e5f\u4f1a\u6bd4\u8f83\u6709\u6559\u80b2\u610f\u4e49\u3002\u800c\u4e14\u6570\u91cf\u4e5f\u4e0d\u4f1a\u5f88\u591a\u3002</p> <p>\u901a\u8fc7\u65f6\u95f4\u4e3a\u5012\u5e8f\uff0c\u4e0a\u9762\u7684\u4f1a\u662f\u65b0\u5199\u7684\uff0c\u4e0b\u9762\u7684\u662f\u65e7\u7684\u3002</p>"},{"location":"cp_solving/2025/0420/#cf600e-2300","title":"CF600E *2300","text":"<p>2025-04-30</p> <p>\u4ece\u8fd9\u9898\u51b3\u5b9a\u770b\u7ebf\u6bb5\u6811\u5408\u5e76\u7684\uff0c \u73b0\u5728\u61c2\u5f97\u5dee\u4e0d\u591a\u4e86\u3002</p> <p>\u8fd9\u9898\u662f\u7ed9\u4e00\u68f5\u6811\uff0c \u6bcf\u4e2a\u8282\u70b9\u4f1a\u6709\u4e00\u4e2a\u989c\u8272 \\(c\\) \uff0c \u6211\u4eec\u9700\u8981\u8ba1\u7b97\u6bcf\u4e2a\u5b50\u6811\u4e2d\u7684\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u989c\u8272\u7684\u548c\u3002</p> <p>\u8fd9\u4e2a\u9898\u6211\u4eec\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u53bb\u7ef4\u62a4\u6bcf\u79cd\u989c\u8272\u51fa\u73b0\u7684\u6b21\u6570\u3002</p> <p>\u6211\u4eec\u5bf9\u6811\u8fdb\u884c dfs\uff0c \u90a3\u4e48\u6bcf\u4e2a\u8282\u70b9\u53ea\u9700\u8981\u5408\u5e76\u5b83\u7684\u6bcf\u4e2a\u5b50\u7ed3\u70b9\u7684\u7ebf\u6bb5\u6811\uff0c \u5c31\u53ef\u4ee5\u77e5\u9053\u8fd9\u9897\u5b50\u6811\u7684\u4fe1\u606f\u3002 </p>"},{"location":"cp_solving/2025/0420/#push-up","title":"push up","text":"<p>\u8fd9\u91cc\u662f\u770b\u5de6\u8fb9\u548c\u53f3\u8fb9\uff0c \u54ea\u8fb9\u51fa\u73b0\u7684\u6b21\u6570\u66f4\u591a\uff0c \u6765\u51b3\u5b9a\u5982\u4f55\u5408\u5e76\u3002 \u8fd9\u4e2a\u8fd8\u662f\u6bd4\u8f83\u663e\u7136\u7684\uff0c \u8fd9\u91cc\u8981\u7406\u89e3\u5de6\u53f3\u5b69\u5b50\u5b9e\u9645\u4e0a\u662f\u5de6\u53f3\u7684\u533a\u95f4\uff0c \u662f\u989c\u8272\u7684\u4fe1\u606f\u3002 \u6bd4\u5982 \\([l, r]\\) \u4e4b\u95f4\u7684\u989c\u8272\u51fa\u73b0\u7684\u6b21\u6570\u4ee5\u53ca\u7b54\u6848\u3002</p>"},{"location":"cp_solving/2025/0420/#update","title":"update","text":"<p>\u5b9e\u9645\u4e0a\u8fd9\u9898\u8fd9\u6d89\u53ca\u5230\u5355\u70b9\u4fee\u6539\uff0c \u5982\u679c\u8fd9\u4e2a\u70b9\u662f\u7a7a\u7684\uff0c \u80af\u5b9a\u7ed9\u5b83\u5206\u914d\u4e00\u4e2a\uff0c \u7136\u540e\u9012\u5f52\u53bb\u6539\uff0c \u8fd9\u91cc\u6539\u7684\u5c31\u662f\u8bf4\u7ed9\u8fd9\u4e2a\u503c\u7684\u6570\u91cf\u53bb\u589e\u52a0\u3002 \u6539\u5b8c\u8bb0\u5f97 <code>push up</code> \uff0c \u8ddf\u666e\u901a\u7ebf\u6bb5\u6811\u4e00\u6837\u7684\u3002</p>"},{"location":"cp_solving/2025/0420/#merge","title":"merge","text":"<p><code>merge</code> \u51fd\u6570\u662f\u7528\u4e8e\u5408\u5e76\u7ebf\u6bb5\u6811\u7684\uff0c \u4e00\u822c\u662f\u628a \\(b\\) \u7ed9\u5408\u5e76\u5230 \\(a\\) \u4e0a\uff0c \u9012\u5f52\u5408\u5e76\uff0c \u82e5\u679c\u6709\u4e00\u4e2a\u662f\u7a7a\u7684\uff0c \u80af\u5b9a\u5206\u914d\u975e\u7a7a\u7684\u90a3\u4e2a\uff0c \u5230\u53f6\u5b50\u8282\u70b9\u65f6\uff0c \u5c31\u662f\u8fdb\u884c\u4e00\u4e2a\u5355\u70b9\u7684\u5408\u5e76\u3002</p> <pre><code>constexpr int N = int(1e5) + 5;\nstruct tree{\n    int l, r, cnt;\n    ll ans;\n    tree(int v = 0){\n        l = r = cnt = ans = v;\n    }\n};\ntree tr[N * 50];\n#define mi ((l + r) &gt;&gt; 1)\n#define lson tr[p].l\n#define rson tr[p].r\nint cnt = 0, rt[N];\n\nvoid push_up(int p)\n{\n    tr[p].cnt = max(tr[lson].cnt, tr[rson].cnt);\n    if(tr[lson].cnt &gt; tr[rson].cnt)\n        tr[p].ans = tr[lson].ans;\n    else if(tr[lson].cnt &lt; tr[rson].cnt)\n        tr[p].ans = tr[rson].ans;\n    else\n        tr[p].ans = tr[lson].ans + tr[rson].ans;\n}\nvoid update(int &amp;now, int l, int r, int pos, int v)\n{\n    if(!now) now = ++cnt;\n    if(l == r){\n        // \u5230\u53f6\u5b50\u8282\u70b9\u4e86\n        tr[now].cnt += v;\n        tr[now].ans = l;\n        return;\n    }\n    // \u9012\u5f52\u5904\u7406\n    if(pos &lt;= mi) update(tr[now].l, l, mi, pos, v);\n    else update(tr[now].r, mi + 1, r, pos, v);\n    push_up(now);\n}\nint merge(int a, int b, int l, int r)\n{\n    if(!a) return b;\n    if(!b) return a;\n    if(l == r){\n        tr[a].cnt += tr[b].cnt;\n        tr[a].ans = l;\n        return a;\n    }\n    tr[a].l = merge(tr[a].l, tr[b].l, l, mi);\n    tr[a].r = merge(tr[a].r, tr[b].r, mi + 1, r);\n    push_up(a);\n    return a;\n}\nvoid ChatGptDeepSeek() // Date: 2025-04-29\n{                      // Time: 23:52:50 \n    int n;\n    cin &gt;&gt; n;\n    cnt = n;\n    vi c(n + 1);\n    vl ans(n + 1);\n    for(int i = 1; i &lt;= n; i++){\n        cin &gt;&gt; c[i];\n        rt[i] = i;\n    }\n    vector&lt;vi&gt; g(n + 1, vi());\n    for(int i = 1; i &lt; n; i++){\n        int u, v;\n        cin &gt;&gt; u &gt;&gt; v;\n        g[u].push_back(v);\n        g[v].push_back(u);\n    }\n    auto dfs = [&amp;](auto &amp;&amp;self, int u, int pre) -&gt; void{\n        for(auto v : g[u]){\n            if(v == pre) continue;\n            self(self, v, u);\n            rt[u] = merge(rt[u], rt[v], 1, 100000);\n        }\n        update(rt[u], 1, 100000, c[u], 1);\n        ans[u] = tr[rt[u]].ans;\n    };\n    dfs(dfs, 1, 0);\n    for(int i = 1; i &lt;= n; i++)\n        cout &lt;&lt; ans[i] &lt;&lt; \" \\n\"[i == n];\n}\n</code></pre>"},{"location":"cp_solving/2025/0420/#cf86d-2200","title":"CF86D *2200","text":"<p>2025-04-25</p> <p>\u83ab\u961f\u7b97\u6cd5\u6a21\u677f\u9898\uff0c \u53bb\u5b66\u4e86\u4e00\u4e0b\u53d1\u73b0\u5b66\u4e2a\u6a21\u677f\u8fd8\u662f\u5f88\u5feb\u7684\u3002</p> <pre><code>constexpr int N = int(1e6)+5;\nint cnt[N];\nstruct node{\n    int l, r, idx;\n};\nnode Q[N];\nvoid ChatGptDeepSeek() // Date: 2025-04-25\n{                      // Time: 21:27:09 \n    int n, q;\n    cin &gt;&gt; n &gt;&gt; q;\n    vi a(n + 1), pos(n + 1);\n    vl ans(q + 1);\n    int siz = sqrt(n);\n    for(int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; a[i], pos[i] = i / siz;\n    // vector&lt;node&gt;Q(q);\n    for(int i = 0; i &lt; q; i++){\n        cin &gt;&gt; Q[i].l &gt;&gt; Q[i].r;\n        Q[i].idx = i;\n    }\n    sort(Q, Q + q, [&amp;](node x, node y){\n        return (pos[x.l] == pos[y.l]) ? (x.r &lt; y.r) : (pos[x.l] &lt; pos[y.l]);\n    });\n    // sort(all(Q), [&amp;](node x, node y){\n    //     return (pos[x.l] == pos[y.l]) ? (x.r &lt; y.r) : (pos[x.l] &lt; pos[y.l]);\n    // });\n    ll res = 0;\n    auto add = [&amp;](int i){\n        res -= (ll)cnt[a[i]] * cnt[a[i]] * a[i];\n        cnt[a[i]]++;\n        res += (ll)cnt[a[i]] * cnt[a[i]] * a[i];\n    };\n    auto sub = [&amp;](int i){\n        res -= (ll)cnt[a[i]] * cnt[a[i]] * a[i];\n        cnt[a[i]]--;\n        res += (ll)cnt[a[i]] * cnt[a[i]] * a[i];\n    };\n    int L = 1, R = 0;\n    for(int i = 0; i &lt; q; i++){\n        auto [l, r, idx] = Q[i];\n        while(L &gt; l) add(--L);\n        while(R &lt; r) add(++R);\n        while(L &lt; l) sub(L++);\n        while(R &gt; r) sub(R--);\n        ans[idx] = res;\n    }\n    for(int i = 0; i &lt; q; i++)\n        cout &lt;&lt; ans[i] &lt;&lt; \"\\n\";\n} \n</code></pre>"},{"location":"cp_solving/2025/0420/#cf5c-1900","title":"CF5C *1900","text":"<p>2025-04-21</p> <p>\u8fd9\u9898\u8bc4\u5206\u5b8c\u5168\u778e\u641e\u5427\uff0c\u8fd9\u9898\u5b8c\u5168\u5e94\u8be5\u662f 1300 \u5427\u3002\u3002\u867d\u7136\u4e0d\u59a8\u788d\u6211 WA \u4e24\u6b21\u3002\u6211\u662f\u6b63\u7740\u627e\u4e00\u904d\u9006\u7740\u627e\u4e00\u904d\uff0c\u5176\u5b9e\u4e5f\u4e0d\u9700\u8981\u3002\u4f46\u7b80\u5355\u9898\u4e5f\u6ca1\u5fc5\u8981\u591a\u770b\u4e86\u3002</p> <pre><code>void ChatGptDeepSeek() // Date: 2025-04-21\n{                      // Time: 17:32:33 \n    string s;\n    cin&gt;&gt;s;\n    int now=0,cnt=1,len=0,cur_len=0;\n    for(auto x:s){\n        cur_len++;\n        if(x=='(') now++;\n        else now--;\n        if(now&lt;0){\n            now=0;\n            cur_len=0;\n        }else if(now==0){\n            if(cur_len&gt;len){\n                cnt=1;\n                len=cur_len;\n            }else if(cur_len==len)\n                cnt++;\n        }\n    }\n    int ans_len=len,ans_cnt=cnt;\n    now=0,cnt=1,len=0,cur_len=0;\n    reverse(all(s));\n    for(auto x:s){\n        cur_len++;\n        if(x=='(') now++;\n        else now--;\n        if(now&gt;0){\n            now=0;\n            cur_len=0;\n        }else if(now==0){\n            if(cur_len&gt;len){\n                cnt=1;\n                len=cur_len;\n            }else if(cur_len==len)\n                cnt++;\n        }\n    }\n    if(len&gt;ans_len) cout&lt;&lt;len&lt;&lt;\" \"&lt;&lt;cnt&lt;&lt;'\\n';\n    else if(len==ans_len&amp;&amp;cnt&gt;ans_cnt) cout&lt;&lt;len&lt;&lt;\" \"&lt;&lt;cnt&lt;&lt;'\\n';\n    else cout&lt;&lt;ans_len&lt;&lt;\" \"&lt;&lt;ans_cnt&lt;&lt;'\\n';\n}\n</code></pre>"},{"location":"cp_solving/2025/0420/#cf380c-2000","title":"CF380C *2000","text":"<p>2025-04-20</p> <p>\u7ed9\u4e00\u4e2a\u62ec\u53f7\u4e32\uff0c\u6bcf\u6b21\u8be2\u95ee\u533a\u95f4\u7684\u6700\u957f\u7684\u5408\u6cd5\u62ec\u53f7\u5b50\u5e8f\u5217\u3002\u6ca1\u60f3\u5230\u8fd9\u4e5f\u80fd\u7ebf\u6bb5\u6811\u505a\u54c7\u3002\u8bb0\u7684\u662f\u6bcf\u4e2a\u8282\u70b9\u672a\u5339\u914d\u7684\u5de6\u62ec\u53f7\u548c\u53f3\u62ec\u53f7\u7684\u6570\u91cf\uff0c\u7136\u540e\u5de6\u5b50\u8282\u70b9\u7684\u5de6\u62ec\u53f7\u53ef\u4ee5\u548c\u53f3\u5b50\u8282\u70b9\u7684\u53f3\u62ec\u53f7\u5339\u914d\u3002</p> <pre><code>string s;\n#define ls p&lt;&lt;1\n#define rs p&lt;&lt;1|1\n#define mi ((l+r)&gt;&gt;1)\n\nconstexpr int N = int(1e6)+5;\nstruct node{\n    int l,r;\n};\nnode tr[N&lt;&lt;2];\n\nnode merge(node x,node y){\n    node res;\n    res.l=x.l+y.l-min(x.l,y.r);\n    res.r=x.r+y.r-min(x.l,y.r);\n    return res;\n}\nvoid build(int p,int l,int r){\n    if(l==r){\n        if(s[l]=='(') tr[p]={1,0};\n        else tr[p]={0,1};\n        return;\n    }\n    build(ls,l,mi),build(rs,mi+1,r);\n    tr[p]=merge(tr[ls],tr[rs]);\n}\nnode query(int p,int l,int r,int lx,int rx)\n{\n    if(l&gt;=lx&amp;&amp;r&lt;=rx) return tr[p];\n    node res{0,0};\n    if(lx&lt;=mi) res=merge(res,query(ls,l,mi,lx,rx));\n    if(rx&gt;mi) res=merge(res,query(rs,mi+1,r,lx,rx));\n    return res;\n}\nvoid ChatGptDeepSeek() // Date: 2025-04-16\n{                      // Time: 11:32:28 \n    cin&gt;&gt;s;\n    int n=sz(s);\n    s=\" \"+s;\n    build(1,1,n);\n    int m; cin &gt;&gt; m;\n    while(m--){\n        int l,r; cin&gt;&gt;l&gt;&gt;r;\n        node res=query(1,1,n,l,r);\n        cout&lt;&lt;r-l+1-res.l-res.r&lt;&lt;'\\n';\n    }\n}\n</code></pre>"},{"location":"cp_solving/2025hdu-spring/01/","title":"2025\u201c\u9489\u8019\u7f16\u7a0b\u201d\u4e2d\u56fd\u5927\u5b66\u751f\u7b97\u6cd5\u8bbe\u8ba1\u6625\u5b63\u8054\u8d5b","text":"<p>\u6211\u611f\u89c9\u81ea\u5df1\u6c34\u5e73\u5c31\u662f\u83ab\u540d\u5176\u5999\u5f88\u4f4e\uff0c\u4ee5\u524d\u6216\u8bb8\u8fd8\u80fd\u627e\u501f\u53e3\u8bf4\u81ea\u5df1\u662f\u5927\u4e00\u7684\uff0c\u73b0\u5728\u5462\uff0c\u5df2\u7ecf\u662f\u5927\u4e8c\u4e86\u3002\u8fd8\u662f\u6bd4\u4e0d\u8fc7\u5f88\u591a\u4eba\u634f\u3002</p> <p>\u54c8\u54c8\u54c8\uff0c\u6ca1\u5fc5\u8981\u60f3\u90a3\u4e48\u591a\uff0c\u597d\u597d\u8865\u9898\u5c31\u884c\u3002\ud83d\ude4c\ud83d\ude4c\ud83d\ude2d\ud83d\ude2d\ud83d\ude2d\ud83d\ude4c\ud83d\ude4c</p> <p>\u8fd9\u573a\u505a\u4e86\u4eba\u6700\u591a\u7684\u56db\u4e2a\u9898\uff0c\u5176\u5b9e\u4e5f\u8fd8\u884c\u4e86\u30021005\u662fWA\u4e8615\u6b21\u8fc7\u7684\uff0c\u5f88\u4e0d\u5bb9\u6613\u4e86\u3002\u867d\u7136\u5f88\u591a\u90fd\u4e71\u4ea4\u7684\uff0c\u4f46\u662f\u8fd9\u573a\u5bf9\u6211\u8868\u73b0\u8fd8\u884c\u4e86\u7684\u3002</p> <p>1005\u4e00\u5f00\u59cb\u6ca1\u60f3\u7740\u7528dijkstra\u7684\uff0c\u5c31\u4e00\u5806\u5faa\u73af\u4e71\u641e\uff0c\u6700\u540e\u5f00\u59cb\u5199\u6700\u77ed\u8def30\u5206\u949fac\u4e86\uff0c\u4e2d\u95f4wa\u4e24\u53d1\uff0c\u6ca1\u4ed4\u7ec6\u68c0\u67e5\u3002</p> <p>\u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c1006\u8fd9\u4e2a\u7b7e\u5230\u9898\u90fd WA \u4e86\u56db\u6b21\u3002\u6ca1\u5fc5\u8981\u90a3\u4e48\u6025\u7684\u30021007\u521a\u5f00\u59cb\u770b\u5230\u88ab\u5413\u5230\u4e86\uff0c\u9898\u76ee\u5f88\u4e45\u6ca1\u770b\u61c2\uff0c\u540e\u6765\u770b\u5230\u5f88\u591a\u95ee\u7684\uff0c\u7a0d\u5fae\u653e\u677e\u4e86\u70b9\uff0c\u63a8\u4e86\u4e00\u4e0bac\u4e86\u5f88\u723d\uff0c\u666e\u901a\u535a\u5f08\u5427\u3002</p> <p>\u597d\u597d\u8865\u9898\u5427\uff0c\u6162\u6162\u770b\u3002\u5148\u81ea\u5df1\u770b\u770b\u9898\u8bd5\u8bd5\u3002</p> <p>\u5176\u5b9e\u5f88\u591a\u65f6\u5019\uff0c\u9898\u76ee\u53ea\u662f\u770b\u8d77\u6765\u5f88\u9ebb\u70e6\uff0c\u5176\u5b9e\u6ca1\u4ec0\u4e48\u7684\uff0c\u9759\u4e0b\u5fc3\u6765\uff0c\u6162\u6162\u770b\u770b\u9898\u3002</p>"},{"location":"cp_solving/2025hdu-spring/01/#01","title":"01","text":"<p>\u6700\u7b7e\u5230\u7684\u4e00\u96c6</p> <pre><code>void solve()\n{\n    int n;\n    string p;\n    cin&gt;&gt;n&gt;&gt;p;\n    int ans=-1;\n    for(int i=1;i&lt;=n;i++){\n        string s;\n        cin&gt;&gt;s;\n        if(s==p) ans=i;\n    }\n    cout&lt;&lt;ans&lt;&lt;'\\n';\n}\n</code></pre>"},{"location":"cp_solving/2025hdu-spring/01/#02","title":"02","text":"<p>\u66b4\u529b\u7684\u53bb\u5199\u5c31\u662f\u6a21\u62df\u6bcf\u6b21\u6bd4\u8d5b\u7ed3\u675f\u8f93\u8d62\u7684\u4eba\u662f\u8c01\uff0c\u770b\u9047\u5230\u8d62\u5f97\u4eba\u7684\u65f6\u5019\u7684\u6982\u7387\u662f\u591a\u5c11\u3002</p> <p>\u4f46\u5176\u5b9e\u5982\u679c \\(n\\) \u662f \\(10^5\\) \u6211\u4e5f\u4e0d\u592a\u4f1a\uff0c\u5728\u6ca1\u770b\u9898\u89e3\u4e4b\u524d\u5e94\u8be5\u4e0d\u592a\u80fd\u5199\u51fa\u6765\uff0c\u5c31\u662f\u6a21\u62df\u7684\u8fc7\u7a0b\u611f\u89c9\u4e0d\u592a\u4f1a\u5199\u3002\u4e8e\u662f\u770b\u4e86\u9898\u89e3\u3002</p> <p>\\(f_i\\) \u8868\u793a \\(i\\) \u4f4d\u7f6e\u662f\u7136\u7136\u4e0d\u559c\u6b22\u7684\u4eba\u7684\u6982\u7387\uff0c\u90a3\u4e48\u82e5\u4e0b\u4e00\u8f6e\u80fd\u9047\u5230\u7136\u7136\uff0c\u90a3\u4e48\u7b54\u6848\u9700\u8981\u66f4\u65b0\u4e3a \\(ans(1-f_i)\\) \u3002\u600e\u4e48\u53bb\u6a21\u62df\u8fd9\u4e00\u8fc7\u7a0b\u5462\uff1f\u6bcf\u6b21\u8fdb\u884c\u6bd4\u8d5b\u4eba\u6570\u90fd\u4f1a\u51cf\u534a\uff0c\u4e8e\u662f \u7b2c \\(i\\) \u4f4d\u9009\u624b\u5728\u4e0b\u4e00\u8f6e\u5c06\u4f1a\u53d8\u6210\u7b2c \\(i\\) &gt;&gt; \\(1\\) \u4f4d \uff0c\u4f46\u662f\u9700\u8981\u5148\u628a\u5e8f\u53f7\u90fd -1 \uff0c\u5728\u8fd9\u91cc\u4f1a\u65b9\u4fbf\u5f88\u591a \u3002\u5426\u5219\u5c31\u662f\u9664\u4ee5\u4e8c\u5411\u4e0a\u53d6\u6574\u3002</p> <p>\u7136\u540e\u5982\u679c\u8bf4\u8fd9\u4e00\u8f6e\u91cc\u6bd4\u8d5b\u7684\u4e24\u4e2a\u4eba\u90fd\u662f\u4e0d\u60f3\u9047\u5230\u7684\u4eba\uff0c\u90a3\u4e48 \\(f_{\\frac{i}{2}}\\) \u5c31\u662f \\(\\frac{f_i+f_{i+1}}{2}\\) \uff0c\u5982\u679c\u53ea\u6709\u4e00\u4e2a\u662f\u4e0d\u60f3\u9047\u5230\u7684\u4eba\uff0c\u90a3\u4e48 $f_{\\frac{i}{2}}=\\frac{f_i}{2} $ \u3002\u5982\u679c\u8fd9\u4e00\u8f6e\u4ed6\u4e0d\u9700\u8981\u6bd4\u8d5b\uff0c\u90a3\u4e48\u5c31\u76f4\u63a5\u7b49\u4e8e \\(f_i\\) \u3002</p> <p>\u4e4b\u540e\u4e00\u6b21\u6b21\u66f4\u65b0\u5c31\u884c\uff0c\u5982\u679c\u5e8f\u53f7\u90fd -1 \u4e86\u7684\u8bdd\uff0c \\(i\\) \u7684\u5bf9\u624b\u5c31\u662f \\(i\\oplus 1\\) \u3002\u3002\u5f53\u7136\u8fd9\u4e9b\u601d\u8def\u6211\u5168\u662f\u770b\u7684\u9898\u89e3\u7684\uff0c\u751a\u81f3\u4ee3\u7801\u4e5f\u662f\u6284\u7684\u3002\u3002\u81ea\u5df1\u601d\u8003\u5e94\u8be5\u4f1a\u5f88\u96be\u3002</p> <pre><code>using ll = long long;\n\nconstexpr int mod = 998244353;\n\nll ksm(ll a, ll b)\n{\n    ll res = 1;\n    while (b) {\n        if (b &amp; 1)\n            res = res * a % mod;\n        a = a * a % mod;\n        b &gt;&gt;= 1;\n    }\n    return res;\n}\nll inv(ll x) { return ksm(x, mod - 2); }\n\nvoid ChatGptDeepSeek()\n{\n    int n, k, win;\n    cin &gt;&gt; n &gt;&gt; k &gt;&gt; win;\n    --win;\n    vector&lt;int&gt; p(k), f(k, 1);\n    for (int i = 0; i &lt; k; i++)\n        cin &gt;&gt; p[i], --p[i];\n    sort(p.begin(),p.end());\n    ll ans = 1;\n    ll iv2 = inv(2);\n    while (!p.empty()) {\n        win &gt;&gt;= 1;\n        vector&lt;int&gt; b, g;\n        for (int i = 0; i &lt; p.size(); i++) {\n            if ((p[i] &gt;&gt; 1) == win) {\n                ans = (ans * (1 - f[i])) % mod;\n                ans = (ans + mod) % mod;\n            } else {\n                b.push_back(p[i] &gt;&gt; 1);\n                if (i + 1 &lt; p.size() &amp;&amp; (p[i] &gt;&gt; 1) == (p[i + 1] &gt;&gt; 1)) {\n                    g.push_back(1LL * (f[i] + f[i + 1]) * iv2 % mod);\n                    i++;\n                } else if ((p[i] ^ 1) &lt; n) {\n                    g.push_back(1LL * f[i] * iv2 % mod);\n                } else {\n                    g.push_back(f[i]);\n                }\n            }\n        }\n        p = b, f = g;\n        n = (n + 1) / 2;\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/2025hdu-spring/01/#05","title":"05","text":"<p>\u628a\u4e00\u4e2a\u70b9\u62c6\u62104\u4e2a\u4e0d\u540c\u65b9\u5411\u7684\u70b9\uff0c\u7136\u540e\u8fdb\u884c\u6c42\u6700\u77ed\u8def\u7684\u64cd\u4f5c\u3002</p> <p>\u5176\u5b9e\u6211\u672c\u6765\u662f\u5faa\u73af\u5199\u7684\uff0c\u7136\u540eWA\u4e86\u597d\u591a\u6b21\uff0c\u5f00\u59cb\u5c1d\u8bd5\u7528\u6700\u77ed\u8def\u5199\uff0c\u4e4b\u540e\u5c31AC\u4e86\u3002\u3002</p> <pre><code>using ll = long long;\nusing ull = unsigned long long;\nconstexpr long long LNF = 1000000000000000000LL;\n\nvoid solve()\n{\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    vector&lt;vector&lt;ull&gt;&gt; t(n + 1, vector&lt;ull&gt;(m + 1));\n    vector&lt;vector&lt;ull&gt;&gt; d(n + 1, vector&lt;ull&gt;(m + 1));\n    for (int i = 1; i &lt;= n; i++)\n        for (int j = 1; j &lt;= m; j++)\n            cin &gt;&gt; t[i][j];\n    for (int i = 1; i &lt;= n; i++)\n        for (int j = 1; j &lt;= m; j++)\n            cin &gt;&gt; d[i][j];\n    vector&lt;vector&lt;vector&lt;ull&gt;&gt;&gt; f(n + 1, vector&lt;vector&lt;ull&gt;&gt;(m + 1, vector&lt;ull&gt;(4, LNF)));\n    // 0123 LURD\n    f[1][0][2] = 0;\n\n    {\n        priority_queue&lt;array&lt;ull, 4&gt;, vector&lt;array&lt;ull, 4&gt;&gt;, greater&lt;&gt;&gt; pq;\n        f[1][1][2] = t[1][1];\n        pq.push({ t[1][1], 1, 1, 2 });\n        while (!pq.empty()) {\n            auto [dis, i, j, dir] = pq.top();\n            // cerr &lt;&lt; i &lt;&lt; \" \" &lt;&lt; j &lt;&lt; '\\n';\n            pq.pop();\n            if (f[i][j][dir] &lt; dis)\n                continue;\n            for (ull k = 0; k &lt; 4; k++) {\n                // \u9996\u5148\u5b83\u539f\u5730\u7684\u4e0d\u540c\u65b9\u5411\n                if (f[i][j][dir] + d[i][j] &lt; f[i][j][k]) {\n                    f[i][j][k] = f[i][j][dir] + d[i][j];\n                    pq.push({ f[i][j][k], i, j, k });\n                }\n            }\n            if (i == n &amp;&amp; j == m)\n                continue;\n            // \u770b\u81ea\u5df1\u662f\u54ea\u4e2a\u65b9\u5411\n            if (dir == 0 &amp;&amp; j - 1 &gt;= 1) {\n                if (f[i][j][0] + t[i][j - 1] &lt; f[i][j - 1][0]) {\n                    f[i][j - 1][0] = f[i][j][0] + t[i][j - 1];\n                    pq.push({ f[i][j - 1][0], i, j - 1, 0 });\n                }\n            } else if (dir == 1 &amp;&amp; i - 1 &gt;= 1) {\n                if (f[i][j][1] + t[i - 1][j] &lt; f[i - 1][j][1]) {\n                    f[i - 1][j][1] = f[i][j][1] + t[i - 1][j];\n                    pq.push({ f[i - 1][j][1], i - 1, j, 1 });\n                }\n            } else if (dir == 2 &amp;&amp; j + 1 &lt;= m) {\n                if (f[i][j][2] + t[i][j + 1] &lt; f[i][j + 1][2]) {\n                    f[i][j + 1][2] = f[i][j][2] + t[i][j + 1];\n                    pq.push({ f[i][j + 1][2], i, j + 1, 2 });\n                }\n            } else if (dir == 3 &amp;&amp; i + 1 &lt;= n) {\n                if (f[i][j][3] + t[i + 1][j] &lt; f[i + 1][j][3]) {\n                    f[i + 1][j][3] = f[i][j][3] + t[i + 1][j];\n                    pq.push({ f[i + 1][j][3], i + 1, j, 3 });\n                }\n            }\n        }\n        // \u8ddd\u79bb i j \u65b9\u5411\n    }\n\n    cout &lt;&lt; f[n][m][3] &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/2025hdu-spring/01/#06","title":"06","text":"<p>\u6211\u8d5b\u65f6map erase\u9519\u4e86\u3002\u3002\u3002</p> <p>\u5982\u679c\u5220\u9664\u4e86\uff0cit++\u5c31\u4f1a\u51fa\u95ee\u9898\uff0c\u6240\u4ee5\u7528 <code>it=mp.erase(it)</code></p> <p>set\u5220\u5143\u7d20\u4e5f\u540c\u7406\u3002</p> <p>\u5982\u679c\u662fc++20\u53ca\u4ee5\u4e0a\u53ef\u4ee5\u4f7f\u7528 erase_if \u5220\u9664\u5143\u7d20\u3002</p> <pre><code>std::erase_if(mp, [&amp;](const auto&amp; pair) {\n    return pair.second != num + 1;\n});\n</code></pre> <p>\u7136\u540e\u5c31\u5f88\u7b80\u5355\u4e86\uff0c\u53ea\u9700\u8981\u679a\u4e3e\u6bcf\u4e00\u79cd\u53ef\u80fd\uff0c\u7136\u540e\u8f93\u51fa\u5c31\u884c\u4e86\u3002</p> <pre><code>void solve()\n{\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;array&lt;int, 3&gt;&gt; a(n, array&lt;int, 3&gt;());\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = 0; j &lt; 3; j++)\n            cin &gt;&gt; a[i][j];\n    }\n    map&lt;int, int&gt; mp;\n    auto work = [&amp;](array&lt;int, 3&gt; x, int num) {\n        vector&lt;int&gt; p { 0, 1, 2 };\n        do {\n\n            int u = x[p[0]], v = x[p[1]], w = x[p[2]];\n            if (((w - v) % u != 0) || (w - v) / u &lt; 0)\n                continue;\n            int X = (w - v) / u;\n            if (num &amp;&amp; mp.find(X)!=mp.end()) {\n                if (mp[X] == num + 1)\n                    continue;\n                if (mp[X] == num)\n                    mp[X]++;\n            } else {\n                if (mp.find(X)!=mp.end())\n                    continue;\n                mp[X] = 1;\n            }\n        } while (next_permutation(p.begin(), p.end()));\n        for (map&lt;int,int&gt;::iterator it = mp.begin(); it != mp.end(); ) {\n            if (it-&gt;second != num + 1)\n                it=mp.erase(it);\n            else ++it;\n        }\n    };\n    for (int i = 0; i &lt; n; i++) {\n        work(a[i], i);\n        if (mp.size() == 1) {\n            for (auto [x, y] : mp)\n                cout &lt;&lt; x &lt;&lt; '\\n';\n            return;\n        }\n    }\n}\n</code></pre>"},{"location":"cp_solving/2025hdu-spring/01/#07","title":"07","text":"<p>\u535a\u5f08\u9898\uff0c\u6211\u600e\u4e48\u534a\u5929\u6ca1\u770b\u61c2\u9898\u76ee\u63cf\u8ff0\u3002\u3002\u3002</p> <p>\u4f46\u662f\u540e\u6765\u770b\u5f88\u591a\u63d0\u95ee\u7684\uff0c\u7136\u540e\u591a\u770b\u4e86\u4f1a\u5c31\u5dee\u4e0d\u591a\u4e86\u3002</p> <p>\u6211\u4eec\u4ece\u5c0f\u5230\u5927\u8003\u8651\u4e00\u4e0b\u3002</p> <p>\\(n=1\\) \uff0c\u7b2c \\(1\\) \u4e2a\u4eba\u540c\u4e0d\u540c\u610f\u65e0\u6240\u8c13\uff0c\u80af\u5b9a\u4e0d\u7ed9\u4ed6\u94b1\u3002</p> <p>\\(n=2\\) \uff0c\u7b2c \\(2\\) \u4e2a\u4eba\u80af\u5b9a\u540c\u610f\u5982\u679c\u7ed9\u4ed6\u94b1\uff0c\u5426\u5219\u7b2c \\(1\\) \u4e2a\u4eba\u5f53\u8239\u957f\u4e86\u4ed6\u80af\u5b9a\u62ff\u4e0d\u5230\u94b1\uff0c\u7b2c \\(1\\) \u4e2a\u4eba\u80af\u5b9a\u4f1a\u53cd\u5bf9\uff0c\u6240\u4ee5\u53ea\u7528\u7ed9\u7b2c \\(2\\) \u4e2a\u4eba\u3002</p> <p>\\(n=3\\) \uff0c\u7b2c \\(1\\) \u4e2a\u4eba\u5f53\u8239\u957f\u80af\u5b9a\u53ea\u4f1a\u7ed9\u7b2c \\(3\\) \u4e2a\u4eba\uff0c\u6240\u4ee5\u4ed6\u4eec\u4e24\u90fd\u4f1a\u53cd\u5bf9\uff0c\u53ea\u7528\u7ed9 \\(2\\) \u94b1\u3002</p> <p>\\(n=4\\) \uff0c\u7b2c \\(1\\) \u4e2a\u4eba\u4f1a\u7ed9\u7b2c \\(3\\) \u4e2a\u4eba\uff0c\u6240\u4ee5\u6211\u4eec\u7ed9 \\(2\\) \u548c \\(4\\) \u3002</p> <p>... \u540e\u9762\u57fa\u672c\u540c\u7406\u4e86\uff0c\\(1\\) \u5f53\u8239\u957f\u7ed9\u8c01\u94b1\uff0c\u6211\u4eec\u5c31\u7ed9\u5176\u4ed6\u4eba\u94b1\u3002</p> <p>\u53d1\u73b0 \\(1\\) \u4f1a\u7ed9\u6240\u6709\u5947\u6570\u7684\u4eba\u94b1\uff0c\u6240\u4ee5\u6211\u4eec\u7ed9\u6240\u6709\u7684\u5076\u6570\u7684\u4eba\u3002</p> <pre><code>constexpr int mod = 1e9 + 7;\n\nvoid solve()\n{\n    // n=1 \u80af\u5b9a\u6ca1\u5fc5\u8981\u7ed9\n    // n=2 \u7ed9\u7b2c2\u4e2a\u4eba\u4e0d\u7ed9\u7b2c1\u4e2a\u4eba\uff0c\u56e0\u4e3a\u7b2c2\u4e2a\u4eba\u628a\u6211\u6c99\u4e86\u5c31\u62ff\u4e0d\u5230\u4e86\n\n    // n=3 \u7ed9\u7b2c\u4e8c\u4e2a\u7b2c\u4e09\u4e2a\uff0c\u56e0\u4e3a\u5982\u679c\u4e3b\u4eba\u53d8\u62101 \uff0c\u90a3\u4e48\u80af\u5b9a\u4f1a\u7ed93\u9001\u91d1\u5e01\n    // \u6240\u4ee52\u53f7\u4f1a\u652f\u6301\u6211\u5982\u679c\u6211\u7ed9\u4ed6\u94b1\uff0c\n    // \u6240\u4ee5\u53ea\u7528\u7ed92\n\n    // n=4 \u7b2c\u4e00\u4e2a\u4eba\u5f53\u4e3b\u4eba\u4f1a\u53d8\u6210 (1,3)\u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u4ed6\u53ea\u4f1a\u7ed93\u94b1\n    // \u6240\u4ee5\u5982\u679c\u7ed9\u94b1\u7ed92 4\uff0c\u5b83\u4eec\u4f1a\u652f\u6301\u6211 \u6211\u6b63\u597d\u4e5f\u9700\u89812\u4e2a\u4eba\n\n    // n=5 (1,4)\n    // 3\uff0c5 \uff0c\n    // \u5b83\u4eec\u80af\u5b9a\u53cd\u5bf9\u6211 1\u4e5f\u53cd\u5bf9\u6211\n\n    // \u6240\u4ee5\u6211\u4eec\u7ee7\u7eed\u7ed92 4\n\n    // n=6 135\u53cd\u5bf9\u6211\n    // \u628a\u94b1\u7ed9246\n\n    auto get = [&amp;](int l, int r) {\n        if (l &gt; r)\n            return 0LL;\n        return 1LL * (r - l + 2) / 2 * (l + r) / 2 % mod;\n    };\n    int n;\n    cin &gt;&gt; n;\n    cout &lt;&lt; get(2, n - (n &amp; 1)) &lt;&lt; '\\n';\n}\n</code></pre> <p>\u76f4\u63a5\u6c42\u548c\u5c31\u884c\u3002</p>"},{"location":"cp_solving/2025hdu-spring/03/","title":"\u7b2c\u4e09\u573a","text":""},{"location":"cp_solving/2025hdu-spring/03/#20253","title":"2025\u201c\u9489\u8019\u7f16\u7a0b\u201d\u4e2d\u56fd\u5927\u5b66\u751f\u7b97\u6cd5\u8bbe\u8ba1\u6625\u5b63\u8054\u8d5b\uff083\uff09","text":""},{"location":"cp_solving/2025hdu-spring/03/#1001","title":"1001","text":"<p>\u660e\u5929\u8865\u3002</p> <p>\u770b\u4e86\u597d\u4e45\u7684\u3002\u3002\u5e78\u597d\u6709\u9898\u89e3\u4e14\u80fd\u770b\u522b\u4eba\u4ee3\u7801\u5e2e\u52a9\u6211\u7406\u89e3\u3002</p> <p>Lucas\u5b9a\u7406: https://oi-wiki.org/math/number-theory/lucas/ $$ \\tbinom{x}{y}\\equiv\\tbinom{\\lfloor x/p\\rfloor}{\\lfloor y/p\\rfloor}\\tbinom{x\\%p}{y\\%p}\\mod p $$ \u9898\u76ee\u8981\u6c42\u51fa\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u7684\u65b9\u6848\u6570 $$ \\prod_{i=1}^{n} \\binom{a_i}{b_i} \\mod 2 = 1 $$ \u6240\u4ee5\u6211\u4eec\u9700\u8981\u6bcf\u4e2a \\(\\binom {a_i}{b_i}=1\\) \uff0c\u5373 \\(a_i\\) \u548c \\(b_i\\) \u7684\u4e8c\u8fdb\u5236\u7684\u6bcf\u4e00\u4f4d\u7684\u7ec4\u5408\u6570\u90fd\u4e3a \\(1\\) \uff0c\u4e5f\u5c31\u662f \\(a_i\\) \u53d6 \\(0\\) \u7684\u4f4d\uff0c \\(b_i\\) \u4e0d\u80fd\u4e3a \\(1\\) \uff0c\u5176\u4ed6\u7684\u90fd\u53ef\u4ee5\u3002</p> <p>\u4f46\u662f\u6709 \\(b_i\\le Li\\) \u7684\u6761\u4ef6\uff0c\u5c31\u5f88\u70e6\u3002</p> <p>\u5982\u679c \\(Li&gt;=a_i\\) \u663e\u7136\u6240\u6709\u65b9\u6848\u90fd\u80fd\u6ee1\u8db3\u3002</p> <p>\u5426\u5219\u6211\u4eec\u770b \\(a_i\\) \u548c \\(L_i\\) \u7684\u4e8c\u8fdb\u5236\u4f4d</p> <p>\u82e5 \\(L_i\\) \u7684\u8fd9\u4e00\u4f4d\u4e3a \\(1\\) \uff0c\\(a_i\\) \u7684\u8fd9\u4e00\u4f4d\u4e5f\u4e3a \\(1\\) \u90a3\u4e48\u53ef\u4ee5\u8ba9 \\(a_i\\) \u7684\u8fd9\u4e00\u4f4d\u4e3a \\(0\\) \uff0c\u540e\u9762\u5219\u53ef\u4ee5\u81ea\u7531\u7684\u9009\u62e9\u6240\u6709\u65b9\u6848\u3002</p> <p>\u82e5 \\(L_i\\) \u7684\u8fd9\u4e00\u4f4d\u4e3a \\(1\\) \uff0c\\(a_i\\) \u7684\u8fd9\u4e00\u4f4d\u4e3a \\(0\\) \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u53d6\u5f97\u540e\u9762\u7684\u6240\u6709\u6570\u5b57\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5\u8df3\u51fa\u5faa\u73af\u4e86\u3002</p> <p>\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u8df3\u51fa\u5faa\u73af\u5462\uff1f\u56e0\u4e3a\u6211\u4eec\u5b9e\u9645\u4e0a\uff0c\u679a\u4e3e\u5230\u6bcf\u4e00\u4e2a\u4f4d\uff0c\u6211\u4eec\u52a0\u7684\u65b9\u6848\u6570\u90fd\u662f\uff0c\\(b_i\\) \u7684\u524d\u9762\u7684\u4f4d\u548c \\(L_i\\) \u7684\u524d\u9762\u662f\u4e00\u6a21\u4e00\u6837\u7684\uff0c\u800c\u8fd9\u4e00\u4f4d\u7b49\u4e8e \\(0\\) \uff0c\u5c31\u53ef\u4ee5\u6ee1\u8db3 \\(b_i\\le L_i\\) \u7684\u6761\u4ef6\u3002\u800c\u540e\u9762\u7684\u4f4d\u5c31\u53ef\u4ee5\u968f\u4fbf\u53d6\u4e86\u3002\u82e5 \\(a_i\\) \u7684\u8fd9\u4e00\u4f4d\u7b49\u4e8e \\(0\\) \uff0c\u5219\u6211\u4eec\u4e4b\u540e\u4e0d\u80fd\u4fdd\u8bc1\u524d\u9762\u5168\u90e8\u76f8\u7b49\u4e86\uff0c\u6240\u4ee5\u9700\u8981\u9000\u51fa\u5faa\u73af\u3002</p> <p>\u4f46\u662f\u7531\u4e8e\u6bcf\u6b21\u6211\u4eec\u90fd\u8bbe\u7f6e\u4e00\u4f4d\u7b49\u4e8e \\(0\\) \uff0c \u82e5\u6211\u4eec\u9047\u5230\u7684\u6240\u6709 \\(L_i\\) \u4e3a \\(1\\) \u7684\u4f4d\uff0c \\(a_i\\) \u4e5f\u4e3a \\(1\\) \uff0c\u5219\u5b9e\u9645\u4e0a\u4f1a\u5c11\u8003\u8651 \\(b_i=L_i\\) \u7684\u65b9\u6848\uff0c\u6240\u4ee5\u9700\u8981\u7ed9\u65b9\u6848\u6570 +\\(1\\) \u3002</p> <p>\u6700\u7ec8\u7b54\u6848\u5373\u4e3a\u6bcf\u4e00\u4e2a \\(b_i\\) \u7684\u65b9\u6848\u6570\u7684\u4e58\u79ef\u3002</p> <pre><code>constexpr int mod = 998244353;\n\nvoid ChatGptDeepSeek()\n{\n    /*\n    101\n    101\n\n    2+1\n    */\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;int&gt; a(n + 1);\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; a[i];\n    ll ans = 1;\n    for (int i = 1; i &lt;= n; i++)\n    {\n        int L;\n        cin &gt;&gt; L;\n        if (L &gt;= a[i])\n        {\n            int x = 0;\n            for (int j = 30; j &gt;= 0; j--)\n                x += (a[i] &gt;&gt; j &amp; 1);\n            ans = ans * (1 &lt;&lt; x) % mod;\n            continue;\n        }\n        int cnt = 0, ok = 1;\n        for (int j = 30; j &gt;= 0; j--)\n        {\n            int x = a[i] &gt;&gt; j &amp; 1;\n            int y = L &gt;&gt; j &amp; 1;\n            if (y)\n            {\n                int bit = 0;\n                for (int k = j - 1; k &gt;= 0; k--)\n                    bit += (a[i] &gt;&gt; k &amp; 1);\n                cnt = (cnt + (1 &lt;&lt; bit)) % mod;\n                if (x == 0)\n                {\n                    ok = 0;\n                    break;\n                }\n            }\n        }\n        if (ok)\n            cnt++;\n        ans = ans * cnt % mod;\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/2025hdu-spring/03/#1003","title":"1003","text":"<p>\u770b\u9898\u89e3\u8fd8\u6ca1\u592a\u770b\u660e\u767d\u3002\u3002\u539f\u6765\u8fd9\u4e48\u5999\u7684\u3002\u3002</p> <p>\u7edf\u8ba1\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u516c\u53f8\uff0c\u4e0d\u6ee1\u8db3\u7684\u80fd\u529b\u7684\u6570\u91cf\uff0c\u82e5\u5168\u90e8\u6ee1\u8db3\uff0c\u5219\u662f\u53ef\u4ee5\u4e0b\u4e00\u6b21\u9762\u8bd5\u7684\u516c\u53f8\u3002\u628a\u6240\u6709\u7684\u4e0d\u6ee1\u8db3\u7684\u80fd\u529b\u7684\u516c\u53f8\uff0c\u653e\u8fdb \\(m\\) \u7ef4\u7684\u4f18\u5148\u961f\u5217\uff0c\u5f53\u6211\u4eec\u6bcf\u6b21\u80fd\u529b\u66f4\u65b0\u65f6\uff0c\u53bb\u68c0\u67e5\u5bf9\u5e94\u7684\u80fd\u529b\u662f\u5426\u6ee1\u8db3\u3002</p> <pre><code>using pii = pair&lt;int, int&gt;;\nusing ll = long long;\n\nvoid ChatGptDeepSeek()\n{\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    vector&lt;ll&gt; a(m + 1);\n    for (int i = 1; i &lt;= m; i++)\n        cin &gt;&gt; a[i];\n    vector&lt;vector&lt;int&gt;&gt; c(n + 1, vector&lt;int&gt;(m + 1)), w(n + 1, vector&lt;int&gt;(m + 1));\n    for (int i = 1; i &lt;= n; i++)\n    {\n        for (int j = 1; j &lt;= m; j++)\n            cin &gt;&gt; c[i][j];\n        for (int j = 1; j &lt;= m; j++)\n            cin &gt;&gt; w[i][j];\n    }\n    vector&lt;priority_queue&lt;pii, vector&lt;pii&gt;, greater&lt;&gt;&gt;&gt; pq(m + 1);\n    queue&lt;int&gt; q;\n    vector&lt;int&gt; cnt(n + 1);\n    for (int i = 1; i &lt;= n; i++)\n    {\n        for (int j = 1; j &lt;= m; j++)\n        {\n            if (c[i][j] &gt; a[j])\n            {\n                pq[j].push({c[i][j], i});\n                cnt[i]++;\n            }\n        }\n        if (!cnt[i])\n            q.push(i);\n    }\n    int ans = 0;\n    while (!q.empty())\n    {\n        ans++;\n        int k = q.front();\n        q.pop();\n        for (int i = 1; i &lt;= m; i++)\n        {\n            a[i] += w[k][i];\n            while (!pq[i].empty() &amp;&amp; a[i] &gt;= pq[i].top().first)\n            {\n                auto [_, j] = pq[i].top();\n                pq[i].pop();\n                cnt[j]--;\n                if (!cnt[j])\n                    q.push(j);\n            }\n        }\n    }\n    cout &lt;&lt; (ans == n ? \"YES\\n\" : \"NO\\n\");\n}\n</code></pre> <p>\u600e\u4e48\u8bf4\u5462\uff1f\u6211\u672c\u6765\u8fd8\u5728\u60f3\uff0c\u4ed6\u662f\u600e\u4e48\u7528\u5230\u4f18\u5148\u961f\u5217\uff0c\u600e\u4e48\u66f4\u65b0\u80fd\u529b\u503c\u7684\u3002\u3002\u3002\u975e\u5e38\u7684\u725b\u3002</p>"},{"location":"cp_solving/2025hdu-spring/03/#1005","title":"1005","text":"<p>\u7531\u4e8e\u57ce\u5e02\u95f4\u662f\u4e92\u76f8\u53ef\u4ee5\u5230\u8fbe\u7684\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u6c42\u8054\u901a\u5757\u7684\u6570\u91cf\u3002</p> <p>\u53ef\u4ee5\u7528 DFS \u6216 \u5e76\u67e5\u96c6\u3002</p> <pre><code>constexpr int N = 3e5 + 10;\nint f[N + 1];\n\nint find(int x)\n{\n    // cerr &lt;&lt; x &lt;&lt; \" \" &lt;&lt; f[x] &lt;&lt; '\\n';\n    return f[x] == x ? x : f[x] = find(f[x]);\n}\n\nvoid ChatGptDeepSeek()\n{\n    int n;\n    cin &gt;&gt; n;\n    for (int i = 1; i &lt;= n; i++)\n        f[i] = i;\n    vector&lt;int&gt; a(n + 1);\n    for (int i = 1; i &lt;= n; i++) {\n        cin &gt;&gt; a[i];\n        // cerr &lt;&lt; i &lt;&lt; \"\\n\";\n        if (i - a[i] &gt;= 1) {\n            // cerr &lt;&lt; i - a[i] &lt;&lt; \" \" &lt;&lt; find(i - a[i]) &lt;&lt; '\\n';\n\n            f[find(i)] = find(i - a[i]);\n            // f[i] = f[find(f[i - a[i]])];\n        }\n        if (i + a[i] &lt;= n) {\n            // cerr &lt;&lt; i + a[i] &lt;&lt; \" \" &lt;&lt; find(i + a[i]) &lt;&lt; '\\n';\n            f[find(i + a[i])] = find(f[i]);\n            // f[i] = f[find(f[i + a[i]])];\n        }\n\n        // for (int j = 1; j &lt;= n; j++)\n        //     cerr &lt;&lt; f[j] &lt;&lt; \" \\n\"[j == n];\n    }\n    int ans = 0;\n    for (int i = 1; i &lt;= n; i++) {\n        if (find(f[i]) == i)\n            ans++;\n        // cerr &lt;&lt; f[i] &lt;&lt; '\\n';\n    }\n    cout &lt;&lt; ans - 1 &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/2025hdu-spring/03/#1010","title":"1010","text":"<p>\\(\\mid x_0-x_1\\mid+\\mid y_0-y_1\\mid=max(x_0-x_1+y_0-y_1,\\)</p> <p>\\(x_1-x_0+y_0-y_1,x_0-x_1+y_1-y_0,x_1-x_0+y_1-y_0)\\) </p> <p>\u6240\u4ee5\u5230 \\(x_0,y_0\\) \u66fc\u54c8\u987f\u8ddd\u79bb\u6700\u5927\u7684\u70b9\uff0c\u4e00\u5b9a\u662f\u4f7f\u5f97\u5bf9\u5e94\u7684 \\(x_1+y_1\\) \u6216 \\(x_1-y_1\\) \u66f4\u5927/\u66f4\u5c0f\u3002</p> <pre><code>void ChatGptDeepSeek()\n{\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    vector&lt;int&gt; x(n), y(n);\n    vector&lt;int&gt; a(4);\n    a[1] = a[3] = 2e9;\n    a[0] = a[2] = -2e9;\n    for (int i = 0; i &lt; n; i++)\n    {\n        cin &gt;&gt; x[i] &gt;&gt; y[i];\n        a[0] = max(a[0], x[i] + y[i]);\n        a[1] = min(a[1], x[i] + y[i]);\n        a[2] = max(a[2], x[i] - y[i]);\n        a[3] = min(a[3], x[i] - y[i]);\n    }\n    long long ans = 4e9;\n    for (int i = 0; i &lt; m; i++)\n    {\n        int X, Y;\n        cin &gt;&gt; X &gt;&gt; Y;\n        long long c = X + Y, d = X - Y;\n        long long now = max({c - a[1], a[0] - c, a[2] - d, d - a[3]});\n        ans = min(ans, now);\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/2025hdu-spring/04/","title":"2025\u201c\u9489\u8019\u7f16\u7a0b\u201d\u4e2d\u56fd\u5927\u5b66\u751f\u7b97\u6cd5\u8bbe\u8ba1\u6625\u5b63\u8054\u8d5b\uff084\uff09","text":"<p>2025-03-28 \u6253\u5f97\u8fd8\u884c\u7684\u4e00\u96c6\uff0c\u8d5b\u65f6\u5199\u4e86\u56db\u9898\uff0c\u4f46\u662f\u5168\u662f\u5f88\u7b80\u5355\u7684\u9898\u554a\u3002\u4e0b\u4e00\u9898\u6211\u5c31\u521a\u624d\u770b\u9898\u89e3\u90fd\u770b\u5f97\u5f88\u96be\u53d7\u3002\u770b\u5927\u4f6c\u4ee3\u7801\u5f3a\u884c\u7406\u89e3\u4e00\u4e0b</p> <p>\u4eca\u5929\u662f\u5468\u4e00\uff0c03-31\uff0c\u4e0d\u4ec5\u521a\u8865\u8fd9\u7bc7\u9898\u89e3\uff0c\u8fd8\u6709VP\u7684\u533a\u57df\u8d5b\u7684\u4e5f\u7b49\u7740\u6211\u3002\u5148\u628a\u8fd9\u7bc7\u6574\u4e86\uff0c\u56de\u53bb\u5b66\u4e2a\u7b97\u6cd5\uff0c\u7136\u540eVP\u4e00\u573aEDU\u3002</p> <p>\u611f\u89c9\u50cf\u8fd9\u79cd\u8fd8\u662f\u5e72\u8106\u5c31\u5728Vscode\u5199\u53ef\u80fd\u8fd8\u6bd4\u8f83\u8212\u670d\uff0c\u4e0d\u7136\u6709\u70b9\u9ebb\u70e6\uff0c\u5c31\u5f97\u7528\u4e24\u4e2a\u8f6f\u4ef6\uff0c\u5207\u6587\u4ef6\u8fd8\u4e0d\u65b9\u4fbf\uff0c\u800c\u4e14Vscode\u8fd8\u66f4\u6d41\u7545\u4e00\u4e9b\u3002</p>"},{"location":"cp_solving/2025hdu-spring/04/#1001","title":"1001","text":"<p>\u6bd4\u8f83\u7b80\u5355\u7684\u6a21\u62df\u9898\uff0c\u4f46\u662f\u6211\u628a\u9898\u76ee\u770b\u9519\u4e86\u3002\u3002\u3002\u5f18\u6587\u4e86\u3002\u9898\u76ee\u8bf4\u7684\u662f\u7b2c\u4e8c\u6b21\u53ca\u4ee5\u540e\u6536\u5230\u7684\u4f24\u5bb3\u662f \\(\\frac{u}{2}\\) \uff0c\u4f46\u662f\u6211\u4ee5\u4e3a\u6bcf\u6b21\u53d7\u5230\u7684\u4f24\u5bb3\u662f\u4e0a\u4e00\u6b21\u53d7\u5230\u7684\u4f24\u5bb3\u9664\u4ee52\u3002\u3002\u3002\u540e\u6765\u91cd\u65b0\u770b\u4e86\u4e00\u4e0b\u53d1\u73b0\u4e86\u3002</p> <pre><code>void ChatGptDeepSeek()\n{\n    long long n, u, k, hq;\n    cin &gt;&gt; n &gt;&gt; u &gt;&gt; k &gt;&gt; hq;\n    vector&lt;int&gt; cnt(n + 1);\n    priority_queue&lt;array&lt;int, 3&gt;, vector&lt;array&lt;int, 3&gt;&gt;, greater&lt;&gt;&gt; pq;\n    vector&lt;int&gt; time(n + 1), lst(n + 1, 2 * u);\n    multiset&lt;int&gt; st;\n    for (int i = 1; i &lt;= n; i++)\n    {\n        int a, h;\n        cin &gt;&gt; a &gt;&gt; h; // \u653b\u51fb \u8840\u91cf\n        //  \u8840\u91cf \u653b\u51fb \u4e0b\u6807\n        pq.push({h, a, i});\n        st.insert(a);\n    }\n    int ans = 0;\n    while (!pq.empty())\n    {\n        auto [h, a, i] = pq.top();\n        // assert(h &gt;= 0 &amp;&amp; time[i] &lt;= k);\n        pq.pop();\n        // assert(i &lt;= n);\n\n        if (time[i] == 0)\n        {\n            h -= u;\n            lst[i] = u;\n        }\n        else\n        {\n\n            h -= u / 2;\n        }\n        if (h &lt;= 0)\n        {\n            ans++;\n            st.erase(st.lower_bound(a));\n        }\n        if (st.empty())\n            break;\n        int hurt = *st.rbegin();\n\n        time[i]++;\n\n        hq -= hurt;\n        if (hq &lt;= 0)\n        {\n            break;\n        }\n        if (time[i] &lt; k &amp;&amp; h &gt; 0)\n        {\n            pq.push({h, a, i});\n        }\n    }\n    cout &lt;&lt; n - st.size() &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/2025hdu-spring/04/#1003","title":"1003","text":"<p>\u521a\u8865\uff08\u6284\uff09\u7684\uff0c\u611f\u89c9\u80fd\u770b\u61c2\u4e00\u70b9\u7684\u3002\u3002\u5927\u6982\u5f3a\u884c\u7406\u89e3\u5427\u3002</p> <p>\u6211\u53ea\u80fd\u8bf4\u8fd8\u662f\u4e0d\u592a\u61c2\uff0c\u5df2\u7ecf\u770b\u4e86\u5f88\u4e45\u4e86\u3002\u6216\u8bb8\u4ee5\u540e\u518d\u56de\u6765\u770b\u770b\u5427\u3002</p> <pre><code>void ChatGptDeepSeek()\n{\n    ll k, b, c, v;\n    cin &gt;&gt; k &gt;&gt; b &gt;&gt; c &gt;&gt; v;\n    ll led = 0;\n    // p^c &lt;=v\n    ll ans = 0;\n    for (int i = 60; i &gt;= 0; i--)\n    {\n        if (v &gt;&gt; i &amp; 1)\n        {\n            ll u = (led ^ c) &amp; ((1LL &lt;&lt; 61) - (1LL &lt;&lt; i));\n            ll L = u - 1, R = u + (1LL &lt;&lt; i) - 1;\n            // [u,R] \u662f i\u5168\u4e3a0\u7684\u533a\u95f4\uff0c\u5728\u8fd9\u4e4b\u540e i \u8fd9\u4e2a\u5730\u65b9\u5168\u4f1a\u4e3a1\u4e86\n            // \u90a3\u4e48\u6211\u4eec\u540e\u9762\u5176\u5b9e\u4f1a\u6f0f\u6389 p=v \u7684\u60c5\u51b5\n            if (R &gt;= b)\n                ans += (R - b) / k + 1;\n            if (L &gt;= b)\n                ans -= (L - b) / k + 1;\n            led |= 1LL &lt;&lt; i;\n        }\n    }\n    if ((v ^ c) &gt;= b &amp;&amp; ((v ^ c) - b) % k == 0)\n        ans++;\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/2025hdu-spring/04/#1005","title":"1005","text":"<p>\u6c34\u9898\u3002\u3002</p> <pre><code>void ChatGptDeepSeek()\n{\n    int P, n, k;\n    cin &gt;&gt; P &gt;&gt; n &gt;&gt; k;\n    vector&lt;double&gt; p1(1, 1);\n    vector&lt;int&gt; p2(1, 0);\n    // priority_queue&lt;int, vector&lt;int&gt;, greater&lt;&gt;&gt; p1;\n    // priority_queue&lt;int&gt; p2;\n    for (int i = 1; i &lt;= n; i++)\n    {\n        int t, p;\n        cin &gt;&gt; t &gt;&gt; p;\n        if (!t)\n            p1.push_back(p / 10.0);\n        else\n            p2.push_back(p);\n    }\n    sort(p1.begin() + 1, p1.end());\n    sort(p2.begin() + 1, p2.end(), greater&lt;&gt;());\n    for (int i = 1; i &lt; p1.size(); i++)\n        p1[i] = p1[i - 1] * p1[i];\n    //  cerr &lt;&lt; p1[i] &lt;&lt; \" \\n\"[i + 1 == p1.size()];\n    for (int i = 1; i &lt; p2.size(); i++)\n        p2[i] = p2[i - 1] + p2[i];\n    //  cerr &lt;&lt; p2[i] &lt;&lt; \" \\n\"[i + 1 == p2.size()];\n\n    double ans = P;\n\n    int s1 = p1.size() - 1, s2 = p2.size() - 1;\n    for (int i = max(0, k - s2); i &lt;= min(k, s1); i++)\n    {\n        if (k - i &gt; s2)\n            ans = min(ans, P * p1[i]);\n        else\n            ans = min(ans, P * p1[i] - p2[k - i]);\n        // cerr &lt;&lt; \"P*p1 :\" &lt;&lt; P * p1[i] &lt;&lt; \" p2[k-i]: \" &lt;&lt; p2[k - i] &lt;&lt; '\\n';\n        // cerr &lt;&lt; i &lt;&lt; \" \" &lt;&lt; k - i &lt;&lt; \" \" &lt;&lt; ans &lt;&lt; '\\n';\n    }\n    ans = max(ans, 0.0);\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/2025hdu-spring/04/#1006","title":"1006","text":"<p>\u6811\u72b6\u6570\u7ec4\u6a21\u677f\u9898\u3002</p> <pre><code>struct Fenwick\n{\n    vector&lt;ll&gt; b;\n    Fenwick(int n)\n    {\n        b = vector&lt;ll&gt;(n + 1);\n    }\n    int lowbit(int x) { return (x) &amp; (-x); }\n    void add(int i, int x)\n    {\n        while (i &amp;&amp; i &lt; b.size())\n        {\n            b[i] += x;\n            i += lowbit(i);\n        }\n    }\n    ll query(int i)\n    {\n        ll res = 0;\n        while (i)\n        {\n            res += b[i];\n            i -= lowbit(i);\n        }\n        return res;\n    }\n};\nvoid ChatGptDeepSeek()\n{\n    int n, q;\n    cin &gt;&gt; n &gt;&gt; q;\n    vector&lt;int&gt; a(n + 1);\n    Fenwick C(n + 1);\n    for (int i = 1; i &lt;= n; i++)\n    {\n        cin &gt;&gt; a[i];\n        C.add(i, a[i]);\n    }\n    int tot = 1;\n    ll ans = 0;\n    while (q--)\n    {\n        int op, x, y;\n        cin &gt;&gt; op &gt;&gt; x &gt;&gt; y;\n        if (op == 1)\n        {\n            C.add(x, y - a[x]);\n            a[x] = y;\n        }\n        else\n        {\n            ll res = C.query(y) / 100 - C.query(x - 1) / 100;\n            ans = ans ^ (res * tot);\n            tot++;\n        }\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/2025hdu-spring/04/#1008","title":"1008","text":"<p>\u57fa\u7840\u7684\u4e00\u4e2aDP\uff0c\u4f46\u662f\u611f\u89c9\u6211\u5199\u5f97\u4e0d\u591f\u6d41\u7545\uff0c\u8fd8\u662f\u5199\u4e86\u4e00\u4f1a\u624d\u5199\u51fa\u6765\u7684\u3002</p> <pre><code>void ChatGptDeepSeek()\n{\n    int n, k;\n    cin &gt;&gt; n &gt;&gt; k;\n    vector&lt;vector&lt;int&gt;&gt; dp(n + 1, vector&lt;int&gt;(k + 1)), a(n + 1, vector&lt;int&gt;(k + 1));\n    /* \u5230i \u5206\u4e86j\u6bb5 */\n    for (int i = 1; i &lt;= n; i++)\n        for (int j = 1; j &lt;= k; j++)\n            cin &gt;&gt; a[i][j];\n    for (int i = 1; i &lt;= n; i++)\n    {\n        for (int j = 1; j &lt;= k; j++)\n        {\n            dp[i][j] = max(dp[i][j], dp[i - 1][j] + a[i][j]);\n            dp[i][j] = max(dp[i][j], dp[i][j - 1]);\n            // cerr &lt;&lt; dp[i][j] &lt;&lt; \" \\n\"[j == k];\n        }\n    }\n    cout &lt;&lt; dp[n][k] &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/AtCoder/ABC395/","title":"Atcoder Beginner Contest 395","text":"<p>\u6bd4\u8d5b\u65f6\u95f4: 2025-03-01</p>"},{"location":"cp_solving/AtCoder/ABC395/#atcoder-beginner-contest-395","title":"AtCoder Beginner Contest 395","text":"<p>\u8d5b\u65f6\u53ea\u51fa\u4e86ABCD\uff0cE\u5176\u5b9e\u4e5f\u53ea\u662f\u4e2a\u7eff\u9898\uff0c\u521a\u624d\u8865\u7684\u65f6\u5019\u5012\u662f\u5f88\u5feb\u5c31A\u4e86\uff0c\u8d5b\u65f6\u5199\u5f97\u65f6\u5019\u6ca1\u591a\u5c11\u65f6\u95f4\u4e86\uff0c\u4e14\u65b9\u6cd5\u9519\u4e86\uff0c\u6211\u600e\u4e48\u4e0a\u6765\u76f4\u63a5\u5199dfs\uff0c\u60f3\u5403TLE\u4e86\u3002</p>"},{"location":"cp_solving/AtCoder/ABC395/#a","title":"A","text":"<p>\u76f4\u63a5\u5224\u65ad\u5c31\u884c\u4e86\u3002\u6211\u6ca1\u6ce8\u610f\u8fd8\u4e0d\u80fd\u76f8\u7b49\uff0c\u7136\u540e\u7528\u4e86is_sorted()\uff0c\u4e14\u53ea\u6d4b\u4e86\u524d\u4e24\u4e2a\u6837\u4f8b\u559c\u63d0WA\u3002</p> <pre><code>void solve()\n{\n    int n;\n    cin&gt;&gt;n;\n    vector&lt;int&gt;a(n);\n    for(int i=0;i&lt;n;i++)\n        cin&gt;&gt;a[i];\n    for(int i=1;i&lt;n;i++){\n        if(a[i]&lt;=a[i-1]){\n            cout&lt;&lt;\"No\\n\";\n            return;\n        }\n    }\n    cout&lt;&lt;\"Yes\\n\";\n}\n</code></pre>"},{"location":"cp_solving/AtCoder/ABC395/#b","title":"B","text":"<p>\u76f4\u63a5\u6a21\u62df\u5c31\u884c\u4e86\u3002</p> <pre><code>void solve()\n{\n    int n;\n    cin&gt;&gt;n;\n    vector&lt;vector&lt;char&gt;&gt;s(n+1,vector&lt;char&gt;(n+1));\n    for(int i=1;i&lt;=n;i++){\n        int j=n-i+1;\n        if(j&lt;i) continue;\n        for(int k=i;k&lt;=j;k++)\n            for(int l=i;l&lt;=j;l++){\n                if(i&amp;1) s[k][l]='#';\n                else s[k][l]='.'; \n            }\n    }\n    for(int i=1;i&lt;=n;i++){\n        for(int j=1;j&lt;=n;j++){\n            cout&lt;&lt;s[i][j];\n        }\n        cout&lt;&lt;'\\n';\n    }\n}\n</code></pre>"},{"location":"cp_solving/AtCoder/ABC395/#c","title":"C","text":"<p>\u8bb0\u4e00\u4e0b\u4e0a\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u6bcf\u6b21\u9047\u5230\u5c31\u66f4\u65b0\u5c31\u884c\u4e86\u3002</p> <pre><code>constexpr int N = 1e6;\n\nint lst[N+1];\n\nvoid solve()\n{\n    int n;\n    cin&gt;&gt;n;\n    vector&lt;int&gt;a(n+1);\n    int ans=n+1;\n    for(int i=1;i&lt;=n;i++){\n        int x;\n        cin&gt;&gt;x;\n        if(lst[x]){\n            ans=min(ans,i-lst[x]+1);\n        }\n        lst[x]=i;\n    }\n    cout&lt;&lt;(ans==n+1?-1:ans)&lt;&lt;'\\n';\n}\n</code></pre>"},{"location":"cp_solving/AtCoder/ABC395/#d","title":"D","text":"<p>\u7a0d\u5fae\u6709\u70b9\u64cd\u4f5c\u554a\uff0c\u63a7\u4e86\u6211\u4e00\u4e2a\u5c0f\u65f6\u3002</p> <p>\u5176\u5b9e\u4e3b\u8981\u5c31\u662f\u601d\u8def\u6ca1\u60f3\u660e\u767d\uff0c\u975e\u5e38\u7684\u6df7\u4e71\uff0c\u73b0\u5728\u6765\u7a0d\u5fae\u6574\u7406\u4e00\u4e0b\u3002</p> <p>\u8fd9\u4e2a\u64cd\u4f5c \\(2\\) \u9700\u8981\u4ea4\u6362 \\(a\\) \u548c \\(b\\) \u91cc\u9762\u88c5\u7684\u9e1f\u3002\u6211\u4eec\u80af\u5b9a\u4e0d\u80fd\u771f\u7684\u53bb\u6362\uff0c\u56e0\u4e3a\u66f4\u65b0\u6bcf\u4e2a\u9e1f\u7684\u5bb6\u590d\u6742\u5ea6\u975e\u5e38\u9ad8\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u53ea\u6539\u53d8\u5b83\u4eec\u4ee3\u8868\u7684\u503c\uff0c\u6bd4\u5982\u8bf4\u539f\u672c\u6bcf\u4e2a\u4eba\u7684\u5bb6\u5c31\u662f \\(i\\) \uff0c\u90a3\u6211\u73b0\u5728\u4ea4\u6362 \\(1\\) \u548c \\(2\\) \uff0c\u600e\u4e48\u80fd\u4f7f\u5f97\u4e0d\u7528\u6539\u6bcf\u4e00\u4e2a\u6210\u5458\u7684\u5bb6\u5462\uff1f</p> <p>\u6211\u4eec\u5176\u5b9e\u76f8\u5f53\u4e8e\u53ef\u4ee5\u53ea\u7528\u6539\u8fd9\u4e24\u4e2a\u5de2\u7684\u7f16\u53f7\uff0c\u6bd4\u5982\u8bf4\u6211\u4eec\u8981\u4ea4\u6362 \\(a\\) \u548c \\(b\\) \u8fd9\u4e24\u4e2a\u5de2\u7684\u5185\u5bb9\uff0c\u90a3\u5176\u5b9e\u4e5f\u76f8\u5f53\u4e8e\u628a \\(a\\) \u7684\u7f16\u53f7\u6539\u6210 \\(b\\) \uff0c\\(b\\) \u6539\u6210 \\(a\\) \u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u5148\u8bbe \\(home_i\\) \u4ee3\u8868\u7684\u662f\u7b2c \\(i\\) \u53ea\u9e1f\u7684\u5bb6\u3002\u5047\u8bbe\u6211\u4eec\u9700\u8981\u4ea4\u6362 \\(1\\) \u548c \\(2\\) \uff0c\u6211\u4eec\u53ef\u4ee5\u60f3\u529e\u6cd5\u4fee\u6539\u5b83\u4eec\u6620\u5c04\u7684\u503c\u3002\u5373\u7528\u4e00\u4e2a\u6570\u7ec4\u8868\u793a\u539f\u59cb\u7684\u7b2c \\(i\\) \u4e2a\u5de2\u7a74\u73b0\u5728\u5b83\u7684\u4f4d\u7f6e\u662f\u591a\u5c11\u3002\u6bd4\u5982 \\(p_i\\) \u4ee3\u8868\u7b2c \\(i\\) \u4e2a\u5de2\u7a74\u7684\u4f4d\u7f6e\u3002</p> <p>\u90a3\u4e48\u6211\u4eec\u8981\u8f93\u51fa \\(i\\) \u7684\u5bb6\u9700\u8981\u8f93\u51fa \\(p_{home_i}\\) \uff0c\\(home_i\\) \u4ee3\u8868\u7b2c \\(i\\) \u53ea\u9e1f\uff0c\u5b83\u73b0\u5728\u7684\u5bb6\u7684\u6700\u5f00\u59cb\u7684\u4f4d\u7f6e\u3002\u7136\u540e \\(p_i\\) \u5c31\u53ef\u4ee5\u8868\u793a\u5f53\u521d\u7b2c \\(i\\) \u4e2a\u4f4d\u7f6e\u7684\u5de2\u73b0\u5728\u6240\u5728\u7684\u4f4d\u7f6e\u3002</p> <p>\u90a3\u4e48\u6211\u4eec\u5982\u679c\u8981\u4ea4\u6362\u4e24\u4e2a\u5de2\uff0c\u53ea\u9700\u8981\u4ea4\u6362\u5b83\u4eec\u5bf9\u5e94\u7684 \\(p\\) \u503c\u3002</p> <p>\u4f46\u662f\u6211\u4eec\u9700\u8981\u4ea4\u6362\u5de2 \\(a\\) \u548c \\(b\\) \u65f6\uff0c\u8fd9\u91cc\u7ed9\u7684\u662f\u5de2\u7684\u4f4d\u7f6e\uff0c\u6211\u4eec\u7684 \\(p\\) \u8bb0\u7684\u662f\u6700\u5f00\u59cb\u7684\u4f4d\u7f6e\u7684\u5de2\u7684\u73b0\u5728\u7684\u4f4d\u7f6e\u3002\u6240\u4ee5\u6211\u4eec\u8fd8\u9700\u8981\u8bb0\u4e00\u4e0b\u6bcf\u4e2a\u4f4d\u7f6e\u5f53\u524d\u653e\u7684\u662f\u54ea\u4e00\u4e2a\u5de2\u3002</p> <p>\u8fd9\u4e2a\u66f4\u7b80\u5355\u5b9e\u73b0\uff0c\u76f4\u63a5\u7528\u4e00\u4e2a \\(pos\\) \u6570\u7ec4\u5b9e\u73b0\uff0c\u53ea\u6709\u64cd\u4f5c \\(2\\) \u4f1a\u79fb\u52a8\u9e1f\u5de2\u3002\u90a3\u4e48\u6211\u4eec\u5c31\u4ea4\u6362 \\(pos_a\\) \u548c \\(pos_b\\) \u4ee3\u8868\u5c31\u6362 \\(a\\) \u548c \\(b\\) \u4f4d\u7f6e\u4e0a\u7684\u9e1f\u5de2\u3002</p> <p>\u7136\u540e\u518d\u4ea4\u6362 \\(home_{pos_a}\\) \u548c \\(home_{pos_b}\\) \uff0c\u5373\u4ea4\u6362\u4e24\u4e2a\u5b9e\u9645\u7684\u9e1f\u5de2\u7684\u5bf9\u5e94\u7684\u503c\u3002</p> <pre><code>void solve()\n{\n    int n,q;\n    cin&gt;&gt;n&gt;&gt;q;\n    vector&lt;int&gt;home(n+1);\n    vector&lt;int&gt;p(n+1),pos(n+1);\n    for(int i=1;i&lt;=n;i++)\n        home[i]=p[i]=pos[i]=i;\n    while(q--){\n        int op;\n        cin&gt;&gt;op;\n        if(op==1){\n            int a,b;\n            cin&gt;&gt;a&gt;&gt;b;\n            home[a]=pos[b];\n            //\u6211\u4eec\u8fd8\u5f97\u77e5\u9053 \u54ea\u4e2api \u7b49\u4e8e b...\n            //\u8fd9\u6837\u597d\u50cf\u4e5f\u4e0d\u5bf9\uff0c\u7eaf\u4e71\u5199\u4e86\u4e00\u5768\u3002\u3002\u3002\n        }else if(op==2){\n            int a,b;\n            cin&gt;&gt;a&gt;&gt;b;\n            //p[30]\u4e0d\u5c31\u662f8\u5417\uff1f\n            swap(p[pos[a]],p[pos[b]]);\n            //p[rev[b]] p[xx]=b\n            swap(pos[a],pos[b]);\n            // cerr&lt;&lt;p[a]&lt;&lt;\" \"&lt;&lt;p[b]&lt;&lt;'\\n';\n            // rev[p[p[a]]]=p[a],p[p[b]]=p[b];\n        }else{\n            int a;\n            cin&gt;&gt;a;\n            cout&lt;&lt;p[home[a]]&lt;&lt;'\\n';\n        }\n        // for(int i=1;i&lt;=n;i++)\n        //     cerr&lt;&lt;p[i]&lt;&lt;\" \\n\"[i==n];\n        // for(int i=1;i&lt;=n;i++)\n        //     cerr&lt;&lt;rev[i]&lt;&lt;\" \\n\"[i==n];\n    }\n    // cerr&lt;&lt;rev[7]&lt;&lt;\" \"&lt;&lt;rev[8]&lt;&lt;\" \"&lt;&lt;rev[30]&lt;&lt;'\\n';\n}\n</code></pre>"},{"location":"cp_solving/AtCoder/ABC395/#e","title":"E","text":"<p>\u611f\u89c9\u786e\u5b9e dijkstra \u677f\u9898\u3002\u53ea\u662f\u7a0d\u5fae\u8bb0\u4e00\u4e0b\u6bcf\u4e00\u4e2a\u70b9\u7684\u72b6\u6001\u5c31\u884c\u4e86\u3002</p> <pre><code>void solve()\n{\n    int n, m, x;\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; x;\n    set&lt;pair&lt;int, int&gt;&gt; edges;\n    vector&lt;vector&lt;int&gt;&gt; adj(n + 1, vector&lt;int&gt;());\n    for (int i = 1; i &lt;= m; i++) {\n        int u, v;\n        cin &gt;&gt; u &gt;&gt; v;\n        edges.insert({ u, v });\n        adj[u].push_back(v);\n        adj[v].push_back(u);\n    }\n    vector&lt;long long&gt; cost(n + 1, 1e18);\n    vector&lt;vector&lt;long long&gt;&gt; dis(n + 1, vector&lt;long long&gt;(2, 1e18));\n    dis[1][0] = 0;\n    auto dijkstra = [&amp;]() {\n        priority_queue&lt;array&lt;long long, 3&gt;, vector&lt;array&lt;long long, 3&gt;&gt;, greater&lt;&gt;&gt; pq;\n        pq.push({ 0, 1, 0 }); // \u8ddd\u79bb \u7f16\u53f7 \u72b6\u6001\n        while (!pq.empty()) {\n            auto [d, u, rev] = pq.top();\n            pq.pop();\n            if (d &gt; dis[u][rev])\n                continue;\n            for (auto v : adj[u]) {\n                if (rev) {\n                    if (edges.contains({ v, u })) {\n                        if (dis[u][rev] + 1 &lt; dis[v][rev]) {\n                            dis[v][rev] = dis[u][rev] + 1;\n                            pq.push({ dis[v][rev], v, rev });\n                        }\n                    } else {\n                        if (dis[u][rev] + x + 1 &lt; dis[v][rev ^ 1]) {\n                            dis[v][rev ^ 1] = dis[u][rev] + x + 1;\n                            pq.push({ dis[v][rev ^ 1], v, rev ^ 1 });\n                        }\n                    }\n                } else {\n                    if (edges.contains({ u, v })) {\n                        if (dis[u][rev] + 1 &lt; dis[v][rev]) {\n                            dis[v][rev] = dis[u][rev] + 1;\n                            pq.push({ dis[v][rev], v, rev });\n                        }\n                    } else {\n                        if (dis[u][rev] + x + 1 &lt; dis[v][rev ^ 1]) {\n                            dis[v][rev ^ 1] = dis[u][rev] + x + 1;\n                            pq.push({ dis[v][rev ^ 1], v, rev ^ 1 });\n                        }\n                    }\n                }\n            }\n        }\n    };\n    dijkstra();\n    cout &lt;&lt; min(dis[n][0], dis[n][1]) &lt;&lt; '\\n';\n}\n</code></pre> <p>\u660e\u5929\u518d\u628a F \u770b\u4e86\uff0c\u662f\u4e2a\u9752\u9898\u3002</p>"},{"location":"cp_solving/AtCoder/ABC395/#f","title":"F","text":"<p>\u770b\u51fa\u6765\u4e86\u662f\u4e8c\u5206\uff0c\u4f46\u662fcheck\u4e0d\u592a\u4f1a\u5199\u3002</p> <p>\u6211\u672c\u6765\u8bb0\u6bcf\u4e2a\u7684 [l,r] \uff0c\u7136\u540e\u770b\u6bcf\u4e2a\u76f8\u90bb\u7684\u80fd\u4e0d\u80fd\u76f8\u4ea4\uff0c\u4f46\u6211\u5224\u7684 [l,r] \u5c31\u662f\u7b80\u5355\u7684\u770b\u5b83\u81ea\u5df1\u7684\u9ad8\u5ea6\u3002\u5176\u5b9e\u53ef\u4ee5\u6574\u4f53\u8003\u8651\u3002</p> <p>\u7528\u4e00\u4e2a \\([L,R]\\) \u6765\u8bb0\u4e00\u4e0b\u5f53\u524d\u7684\u5408\u6cd5\u7684\u533a\u95f4\uff0c\u6bcf\u6b21\u53ef\u4ee5\u88ab\u6269\u5c55\u5230 \\([L-x,R+x]\\) , \u7136\u540e\u5f53\u524d\u7684 \\(u\\) \u7684\u8303\u56f4\u662f \\([max(0,H-d),U]\\) \u3002</p> <p>\u4e00\u76f4\u6269\u5c55\u533a\u95f4\u7136\u540e\u5224\u6709\u6ca1\u6709\u4ea4\u96c6\u5c31\u53ef\u4ee5\u4e86\u3002</p> <pre><code>void solve()\n{\n    int n, x;\n    cin &gt;&gt; n &gt;&gt; x;\n    vector&lt;int&gt; u(n), d(n);\n    for (int i = 0; i &lt; n; i++)\n        cin &gt;&gt; u[i] &gt;&gt; d[i];\n    long long lo = 0, hi = 2e9 + 1;\n    auto check = [&amp;](long long H) {\n        long long L = 0, R = H;\n        for (int i = 0; i &lt; n; i++) {\n            //:\u4e4b\u524d\u7684\u533a\u95f4 [L-X,R+X]\n            //:\u5f53\u524d\u7684\u533a\u95f4 [max(0,H-D),U]\n            L = max({L-x,H-d[i],0LL});\n            R = min(R + x, 1LL*u[i]);\n            if(L&gt;R) return false;\n        }\n        return true;\n    };\n    while (lo &lt; hi - 1) {\n        long long mid = (lo + hi) &gt;&gt; 1;\n        if (check(mid))\n            lo = mid;\n        else\n            hi = mid;\n    }\n    // cout&lt;&lt;check(2)&lt;&lt;'\\n';\n    long long ans = 0;\n    for (int i = 0; i &lt; n; i++) {\n        ans += u[i] + d[i] - lo;\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/AtCoder/ABC397/","title":"AtCoder Beginner Contest 397","text":""},{"location":"cp_solving/AtCoder/ABC397/#d","title":"D","text":"<p>\\(x^3-y^3=N\\) </p> <p>\\(d=x-y\\) </p> <p>\u5219 \\(x^3-y^3=(y+d)^3-y^3=y^3+3d^2y+3dy^2+d^3-y^3\\)</p> <p>\\(N=3d^2+3dy+3y^2\\) </p> <p>\u679a\u4e3e \\(d\\) \u7136\u540e\u4e8c\u5206\u627e\u51fa \\(y\\) \u3002</p> <pre><code>void ChatGptDeepSeek()\n{\n    ll n;\n    cin &gt;&gt; n;\n    /*\n    (y+d)*(y+d)*(y+d)-y*y*y=n\n    (yyy+3dyy+3ddy+ddd)-yyy=n\n    3dyy+3ddy+ddd=n\n    3yy+3dy+dd=n/d\n    */\n    auto calc = [&amp;](ll d) {\n        ll lo = 0, hi = 1e9 + 1;\n        while (lo &lt; hi - 1) {\n            ll mid = (lo + hi) &gt;&gt; 1;\n            if (3 * mid * mid + 3 * mid * d + d * d &lt;= n / d)\n                lo = mid;\n            else\n                hi = mid;\n        }\n        // cerr &lt;&lt; d &lt;&lt; \" \" &lt;&lt; hi &lt;&lt; '\\n';\n\n        if (3 * lo * lo + 3 * lo * d + d * d == n / d)\n            return lo;\n        return 0LL;\n    };\n    for (ll d = 1; d * d * d &lt;= n; d++) {\n        if (n % d == 0) {\n            ll res = calc(d);\n            if (res) {\n                cout &lt;&lt; res + d &lt;&lt; \" \" &lt;&lt; res &lt;&lt; '\\n';\n                return;\n            }\n        }\n    }\n    cout &lt;&lt; \"-1\\n\";\n} // 100 100 100\n</code></pre>"},{"location":"cp_solving/AtCoder/ABC398/","title":"AtCoder Beginner Contest 398","text":"<p>2025-03-22</p> <p>\u8d5b\u65f6\u53ea\u51fa\u4e86 ABCD \u3002</p> <p>\u6700\u96be\u53d7\u7684\u4e00\u96c6\uff0cF\u4e00\u76f4WA\u53ea\u6709\u4e00\u4e2a\u70b9\u3002\u3002\u6211\u4ee5\u4e3a\u6211\u5c31\u5dee\u4e00\u70b9\u5c31\u5bf9\u4e86\u3002\u4f46\u5b9e\u9645\u53ef\u80fd\u5dee\u5f97\u5f88\u8fdc\u3002\u521a\u624d\u5bf9\u62cd\u4e86\u4e0b\u624d\u53d1\u73b0\uff0c\u800c\u4e14\u662f\u975e\u5e38\u5e38\u89c1\u7684\u6570\u636e\u3002</p>"},{"location":"cp_solving/AtCoder/ABC398/#e","title":"E","text":"<p>\u4e0d\u662f\u54e5\u4eec\uff0c\u600e\u4e48\u8fd9\u4e48\u7b80\u5355\u7684\u3002\u90fd\u4e0d\u592a\u6562\u76f8\u4fe1\uff08\uff09\u3002</p> <p>\\(n\\) \u5f88\u5c0f\uff0c\u6211\u4eec\u53ea\u9700\u8981\u53bb\u628a\u6bcf\u4e00\u5bf9\u8ddd\u79bb\u4e3a\u5947\u6570\u7684\u4e14\u8ddd\u79bb\u5927\u4e8e1\u70b9\u7ed9\u627e\u51fa\u6765\uff0c\u6211\u4eec\u53ea\u80fd\u5728\u8fd9\u4e9b\u70b9\u4e0a\u64cd\u4f5c\u3002</p> <p>\u4e14\u4e00\u4e2a\u64cd\u4f5c\u662f\u4e0d\u4f1a\u5bf9\u5176\u4ed6\u64cd\u4f5c\u4ea7\u751f\u5f71\u54cd\u7684\u3002\u6240\u4ee5\u770b\u603b\u7684\u53ef\u64cd\u4f5c\u6b21\u6570\u662f\u5947\u6570\u8fd8\u662f\u5076\u6570\uff0c\u51b3\u5b9a\u5148\u64cd\u4f5c\u8fd8\u662f\u540e\u64cd\u4f5c\u3002</p> <pre><code>void ChatGptDeepSeek()\n{\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;vector&lt;int&gt;&gt; adj(n + 1, vector&lt;int&gt;());\n    for (int i = 1; i &lt; n; i++)\n    {\n        int u, v;\n        cin &gt;&gt; u &gt;&gt; v;\n        adj[u].push_back(v);\n        adj[v].push_back(u);\n    }\n    vector&lt;int&gt; dep(n + 1);\n    auto dfs = [&amp;](auto &amp;&amp;self, int u, int pre) -&gt; void\n    {\n        for (auto v : adj[u])\n        {\n            if (v == pre)\n                continue;\n            dep[v] = dep[u] + 1;\n            self(self, v, u);\n        }\n    };\n    set&lt;pii&gt; st;\n    for (int i = 1; i &lt;= n; i++)\n    {\n        dep = vector&lt;int&gt;(n + 1);\n        dfs(dfs, i, 0);\n        for (int j = 1; j &lt;= n; j++)\n        {\n            if ((dep[j] &amp; 1) &amp;&amp; (dep[j] &gt; 1))\n            {\n                if (i &gt; j)\n                    st.insert({j, i});\n                else\n                    st.insert({i, j});\n            }\n        }\n    }\n    if (st.size() % 2 == 1)\n    {\n        cout &lt;&lt; \"First\" &lt;&lt; endl;\n        auto [x, y] = *st.begin();\n        st.erase(st.begin());\n        cout &lt;&lt; x &lt;&lt; \" \" &lt;&lt; y &lt;&lt; endl;\n    }\n    else\n        cout &lt;&lt; \"Second\" &lt;&lt; endl;\n    for (;;)\n    {\n        int x, y;\n        cin &gt;&gt; x &gt;&gt; y;\n        if (x == -1)\n        {\n            return;\n        }\n        if (x &gt; y)\n            swap(x, y);\n        assert(st.size());\n        st.erase({x, y});\n        assert(st.size());\n        x = (*st.begin()).first;\n        y = (*st.begin()).second;\n        cout &lt;&lt; x &lt;&lt; \" \" &lt;&lt; y &lt;&lt; endl;\n        st.erase(st.begin());\n    }\n}\n</code></pre>"},{"location":"cp_solving/AtCoder/ABC398/#f","title":"F","text":"<p>\u5148\u6765\u8bf4\u4e0b\u6211\u7684\u79bb\u8c31\u60f3\u6cd5\u3002\u6b63\u786e\u7684\u660e\u5929\u518d\u53bb\u601d\u8003\u3002</p> <p>\u6700\u5f00\u59cb\u6211\u662f\u60f3\u80fd\u4e0d\u80fd\u4e8c\u5206\u90a3\u4e2a\u957f\u5ea6\u7684\u3002\u3002\u7136\u540e\u6837\u4f8b\u6ca1\u8fc7\u624d\u53d1\u89c9\u4e0d\u884c\u3002</p> <p>\u7136\u540e\u53c8\u60f3\uff0c\u6211\u5148\u5339\u914d \\(s_1\\) \u548c \\(s_n\\) \u561b\uff0c\u5982\u679c\u4e0d\u5339\u914d\uff0c\u90a3\u4e48\u5c31\u52a0\u4e00\u4e2a\u5b57\u7b26\u5230\u672b\u5c3e\u53bb\uff0c\u8fd9\u6837 \\(s_2\\) \u53bb\u5339\u914d \\(s_n\\) \uff0c\u4e0d\u884c\u5c31\u518d\u52a0\u4e00\u4e2a\u5728\u540e\u9762\u3002\u3002\u5c31\u662f\u5982\u679c\u5339\u914d\u4e0d\u4e0a\uff0c\u5c31\u628a\u4e0a\u51e0\u6b21\u5339\u914d\u4e0a\u7684\u5168\u5f53\u6210\u4e0d\u53ef\u5339\u914d\u3002\u3002\u3002</p> <p>\u4f46\u662f\u521a\u624d\u53d1\u73b0 \\(GGVG\\) \u8fd9\u79cd\u5c31\u662f\u5f88\u660e\u663e\u4e0d\u884c\uff0c\u6211\u7684\u65b9\u6cd5\u4f1a\u6700\u5f00\u59cb\u80fd\u5339\u914d\uff0c\u4e2d\u95f4\u4e0d\u884c\uff0c\u7136\u540e\u957f\u5ea6 \\(+3\\) \u3002\u3002\u3002</p> <pre><code>void ChatGptDeepSeek()\n{\n    string s;\n    cin &gt;&gt; s;\n    int len = s.size(), lst = -1;\n    for (int i = 0; i &lt; len - i - 1 &amp;&amp; i &lt; s.size() &amp;&amp; len - i - 1 &lt; s.size(); i++)\n    {\n        if (s[i] != s[len - i - 1])\n        {\n            len += i - lst;\n            lst = i;\n        }\n    }\n    string t = s;\n    while (t.size() &lt; len)\n        t += \"a\";\n    for (int i = 0; i &lt; len - i - 1; i++)\n    {\n        if (t[i] != t[len - i - 1])\n            t[len - i - 1] = t[i];\n    }\n    cout &lt;&lt; t &lt;&lt; '\\n';\n}\n</code></pre> <p>\u8d77\u7801\u77e5\u9053\u4e86\u81ea\u5df1\u4e3a\u4ec0\u4e48\u9519\u54c8\u3002\u3002\u3002\u6b63\u89e3 KMP \u6216 Manacher \u3002</p> <p>KMP\u4e0d\u592a\u8bb0\u5f97\u4e86\uff0c\u6ca1\u7528\u8fc7\u51e0\u6b21\u3002\u7b49\u4f1a\u770b\u770b\u3002</p> <p>\u597d\u597d\u597d\uff0c\u5b9e\u9645\u4e0a\u6211\u4eec\u53ef\u4ee5\u628a\u95ee\u9898\u8f6c\u6362\u6210\u5bfb\u627e \\(s\\) \u7684\u6700\u957f\u56de\u6587\u540e\u7f00\u7684\u957f\u5ea6\u3002\u8fd9\u4e2a\u95ee\u9898\u53ef\u4ee5\u7528 KMP \u6c42\u89e3\u3002</p> <p>\u5982\u4f55\u6c42\u5462\uff1f</p> <p>\u6211\u4eec\u6784\u9020 \\(s=s+'\\#'+s\\) \uff0c \u90a3\u4e48 \\(s\\) \u7684\u6700\u957f\u56de\u6587\u540e\u7f00\u5373\u4e3a\u6700\u540e\u4e00\u4e2a \\(border\\) \u7684\u503c\u3002</p> <pre><code>void ChatGptDeepSeek()\n{\n    string s;\n    cin &gt;&gt; s;\n    string t = s;\n    int n = s.size();\n    s = s + \"#\" + s;\n    reverse(s.begin(), s.begin() + n);\n    vector&lt;int&gt; p(2 * n + 1);\n    for (int i = 1; i &lt;= 2 * n; i++)\n    {\n        int j = p[i - 1];\n        while (j &gt; 0 &amp;&amp; s[i] != s[j])\n            j = p[j - 1];\n        p[i] = j;\n        if (s[i] == s[j])\n        {\n            p[i]++;\n        }\n    }\n    n += n - p.back();\n    while (t.size() &lt; n)\n        t.push_back('@');\n    for (int i = 0; i &lt; n - i - 1; i++)\n        if (t[i] != t[n - i - 1])\n            t[n - i - 1] = t[i];\n    cout &lt;&lt; t &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/AtCoder/ABC402/","title":"AtCoder Beginner Contest 402","text":"<p>2025-04-19</p> <p>\u8fd9\u573a\u4e0a\u7eff\u4e86\u3002\u8bc4\u4ef7\u4e3a\u624b\u901f\u573a\uff0cE\u9898\u96be\u300223\u5206\u949f\u4e4b\u540e\u5c31\u5199\u4e0d\u4e86\u4e86\uff0c\u4f46\u662f\u8d77\u7801\u4e0d\u4f1a\u8ba9\u81ea\u5df1\u592a\u5750\u7262\u3002</p>"},{"location":"cp_solving/AtCoder/ABC402/#a","title":"A","text":"<p>\u5199\u6210\u4e86 <code>&lt;=</code> \uff0c\u7f5a\u4e86\u4e00\u53d1\uff0c\u4e0b\u6b21\u4e5f\u4e0d\u8981\u6025\u6210\u8fd9\u6837\u4e86\uff0c\u4f60\u770b\uff0c\u53c8\u6025\u3002</p> <pre><code>void ChatGptDeepSeek() // Date: 2025-04-19\n{                      // Time: 20:00:30 \n    string s;\n    cin&gt;&gt;s;\n    for(auto x:s){\n        if(x&lt;'a') cout&lt;&lt;x;\n    }\n}\n</code></pre>"},{"location":"cp_solving/AtCoder/ABC402/#b","title":"B","text":"<pre><code>void ChatGptDeepSeek() // Date: 2025-04-19\n{                      // Time: 20:05:15 \n    int n;\n    cin&gt;&gt;n;\n    queue&lt;int&gt;q;\n    for(int i=1;i&lt;=n;i++){\n        int op;\n        cin&gt;&gt;op;\n        if(op==1){\n            int x;\n            cin&gt;&gt;x;\n            q.push(x);\n        }else{\n            cout&lt;&lt;q.front()&lt;&lt;'\\n';\n            q.pop();\n        }\n    }\n}\n</code></pre>"},{"location":"cp_solving/AtCoder/ABC402/#c","title":"C","text":"<p>\u76f4\u63a5\u6309\u6bcf\u79cd\u6210\u5206\u66f4\u65b0\u503c\u5c31\u884c\u3002</p> <pre><code>void ChatGptDeepSeek() // Date: 2025-04-19\n{                      // Time: 20:09:18 \n    int n,m;\n    cin&gt;&gt;n&gt;&gt;m;\n    vector&lt;vi&gt;v(n+1);\n    vi cnt(m+1);\n    int ans=0;\n    for(int i=1;i&lt;=m;i++){\n        int k;\n        cin&gt;&gt;k;\n        for(int j=1;j&lt;=k;j++){\n            int x;\n            cin&gt;&gt;x;\n            v[x].push_back(i);\n        }\n        cnt[i]=k;\n    }\n    for(int i=1;i&lt;=n;i++){\n        int B;\n        cin&gt;&gt;B;\n        for(auto x:v[B]){\n            if(--cnt[x]==0) ans++;\n        }\n        cout&lt;&lt;ans&lt;&lt;'\\n';\n    }\n}\n</code></pre>"},{"location":"cp_solving/AtCoder/ABC402/#d","title":"D","text":"<p>\u6c34\u9898\u3002\u53ea\u7528\u627e\u5bf9\u4e8e\u6bcf\u6839\u7ebf\u548c\u5b83\u4e0d\u5e73\u884c\u7684\u6570\u91cf\uff0c\u89c2\u5bdf\u7ed9\u7684\u56fe\uff0c\u53d1\u73b0 \\(x+y\\) \u76f8\u540c\u7684\u4e00\u5b9a\u662f\u5e73\u884c\uff0c\u5426\u5219\u4e00\u5b9a\u4e0d\u5e73\u884c\u3002\u8fd9\u9898\u5c5e\u4e8e\u662f\uff0c\u4e0d\u7ed9\u56fe\u7684\u8bdd\u96be\u5ea6\u4f1a\u9ad8\u4e00\u4e2a\u6863\u6b21\u611f\u89c9\u3002</p> <pre><code>void ChatGptDeepSeek() // Date: 2025-04-19\n{                      // Time: 20:20:08 \n    int n,m;\n    cin&gt;&gt;n&gt;&gt;m;\n    vi cnt(n);\n    for(int i=1;i&lt;=m;i++){\n        int x,y;\n        cin&gt;&gt;x&gt;&gt;y;\n        cnt[(x+y)%n]++;\n    }\n    ll ans=0;\n    for(int i=0;i&lt;n;i++){\n        ans+=1LL*(m-cnt[i])*cnt[i];\n    }\n    cout&lt;&lt;ans/2&lt;&lt;'\\n';\n}\n</code></pre>"},{"location":"cp_solving/AtCoder/ABC402/#e","title":"E","text":"<p>\u660e\u5929\u5b66\u4e60\u3002</p>"},{"location":"cp_solving/AtCoder/ABC402/#_1","title":"\u9898\u610f","text":"<p>\u6709 \\(n\\) \u4e2a\u9898\u76ee\uff0c\u6bcf\u4e2a\u9898\u76ee\u7684\u5206\u6570\u4e3a \\(s_i\\) \uff0c\u6bcf\u9898\u6bcf\u6b21\u63d0\u4ea4\u82b1\u8d39 \\(c_i\\) \u5143\uff0c\u6bcf\u6b21\u63d0\u4ea4\u8fd9\u9898\u7684\u6b63\u786e\u7684\u6982\u7387\u662f \\(p_i\\) % \u3002\u6bcf\u9053\u9898\u53ea\u80fd\u5f97\u4e00\u6b21\u5206\uff0c\u6c42\u6700\u5927\u7684\u5f97\u5206\u7684\u671f\u671b\u3002</p>"},{"location":"cp_solving/AtCoder/ABC402/#code","title":"Code","text":"<p>\u7531\u4e8e \\(n\\le 8\\) \uff0c\u5e94\u8be5\u5f97\u770b\u51fa\u6765\u53ef\u4ee5\u679a\u4e3e \\(2^n\\) \u7684\u72b6\u6001\u7684\u3002\u4f46\u662f\u6ca1\u60f3\u5230\u4e5f\u5f88\u6b63\u5e38\u3002\u53ef\u4ee5\u679a\u4e3e\u5f53\u524d\u5904\u7406\u8fc7\u7684\u9898\u76ee\u548c\u82b1\u8d39\u7684\u94b1\u6570\uff0c\\(dp_{i,j}\\) \u4e3a \\(i\\) \u72b6\u6001\u4e0b\uff0c\u82b1\u8d39 \\(j\\) \u5143\u7684\u6700\u5927\u5f97\u5206\u7684\u671f\u671b\u3002</p> <p>\u4ee3\u7801\u91cc\u7684\u72b6\u6001 \\(j\\) \u8868\u793a\uff0c\u4e3a \\(1\\) \u7684\u4f4d\u90fd\u662f\u5df2\u5904\u7406\u8fc7\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u679a\u4e3e\u5f53\u524d\u53bb\u5904\u7406\u54ea\u4e00\u9898\u3002\u4f46\u662f\u8981\u6ce8\u610f\uff0c\u4e00\u9898\u662f\u53ef\u4ee5\u63d0\u4ea4\u591a\u6b21\u7684\uff0c\u800c\u4e14\u4e00\u9898\u662f\u4e0d\u4f1a\u6709\u91cd\u590d\u5f97\u5206\u3002</p> <p>\u597d\u5427\uff0c\u5176\u5b9e\u8fd9\u9898\u8fd8\u662f\u61c2\u5f97\u4e0d\u662f\u7279\u522b\u900f\uff0c\u4f46\u662f\u4e5f\u5dee\u4e0d\u591a\u4e86\uff08\uff09</p> <pre><code>void ChatGptDeepSeek() // Date: 2025-04-20\n{                      // Time: 14:46:23\n    int n, X;\n    cin &gt;&gt; n &gt;&gt; X;\n    vi s(n + 1), c(n + 1);\n    vector&lt;double&gt; p(n + 1);\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; s[i] &gt;&gt; c[i] &gt;&gt; p[i], p[i] /= 100;\n    vector&lt;vector&lt;double&gt;&gt; dp(1 &lt;&lt; n, vector&lt;double&gt;(X + 1));\n    for (int j = 0; j &lt; (1 &lt;&lt; n); j++)\n    {\n        for (int k = 0; k &lt;= X; k++)\n        {\n            for (int i = 1; i &lt;= n; i++)\n            {\n                if (k &lt; c[i])\n                    continue;\n                if (j &gt;&gt; (i - 1) &amp; 1)\n                {\n                    int last = j ^ (1 &lt;&lt; (i - 1));\n                    dp[j][k] = max(dp[j][k], (dp[last][k - c[i]] + s[i]) * p[i] + max(dp[j][k - c[i]], dp[last][k - c[i]]) * (1 - p[i]));\n                }\n            }\n        }\n    }\n    cout &lt;&lt; fixset(16) &lt;&lt; dp[(1 &lt;&lt; n) - 1][X] &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/1837/","title":"Educational Codeforces Round 149 (Rated for Div. 2)","text":"<p>2025-03-25</p> <p>\u8fd9\u573a\u592a\u62bd\u8c61 ABCD 800-900-1000-1400</p> <p>\u76f8\u5f53\u4e8e\u5199\u4e86\u4e00\u70b9\u5e2e\u52a9\u6ca1\u6709\uff0cEF\u96be\u5ea6\u6709\u70b9\u592a\u9ad8\uff0c\u6682\u65f6\u4e0d\u6253\u7b97\u8865</p> <p>\u6bd4\u8d5b\u94fe\u63a5: https://codeforces.com/contest/1837</p>"},{"location":"cp_solving/Codeforces/1837/#a","title":"A","text":"<pre><code>void ChatGptDeepSeek()\n{\n    int x,k;\n    cin&gt;&gt;x&gt;&gt;k;\n    if(x%k==0){\n        cout&lt;&lt;\"2\\n\";\n        cout&lt;&lt;\"1 \"&lt;&lt;x-1&lt;&lt;'\\n';\n    }else cout&lt;&lt;\"1\\n\"&lt;&lt;x&lt;&lt;'\\n';\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/1837/#b","title":"B","text":"<pre><code>void ChatGptDeepSeek()\n{\n    int n;\n    cin &gt;&gt; n;\n    string s;\n    cin &gt;&gt; s;\n    int ans = 0, cnt = 1;\n    for (int i = 1; i &lt; s.size(); i++)\n    {\n        if (s[i] != s[i - 1])\n        {\n            ans = max(ans, cnt + 1);\n            cnt = 1;\n        }\n        else\n            cnt++;\n    }\n    ans = max(cnt + 1, ans);\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/1837/#c","title":"C","text":"<pre><code>void ChatGptDeepSeek()\n{\n    string s;\n    cin &gt;&gt; s;\n    for (int i = 0; i &lt; s.size(); i++)\n    {\n        if (s[i] != '?')\n        {\n            int j = i - 1;\n            while (j &gt;= 0)\n            {\n                s[j] = s[i];\n                j--;\n            }\n            break;\n        }\n    }\n    if (s[0] == '?')\n    {\n        string t(s.size(), '0');\n        cout &lt;&lt; t &lt;&lt; '\\n';\n        return;\n    }\n    for (int i = 0; i &lt; s.size(); i++)\n    {\n        if (s[i] == '?')\n            s[i] = s[i - 1];\n    }\n    cout &lt;&lt; s &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/1837/#d","title":"D","text":"<pre><code>void ChatGptDeepSeek()\n{\n    int n;\n    cin &gt;&gt; n;\n    string s;\n    cin &gt;&gt; s;\n    int cnt = 0, color = 0;\n    char lst = s[0];\n    vector&lt;int&gt; ans;\n    for (int i = 0; i &lt; n; i++)\n    {\n        if (s[i] == '(')\n            cnt++;\n        else\n            cnt--;\n        if (cnt &gt; 0 &amp;&amp; lst != '(')\n            color ^= 1, lst = '(';\n        else if (cnt &lt; 0 &amp;&amp; lst != ')')\n            color ^= 1, lst = ')';\n        ans.push_back(1 + color);\n    }\n    if (cnt != 0)\n    {\n        cout &lt;&lt; \"-1\\n\";\n        return;\n    }\n    cout &lt;&lt; *max_element(ans.begin(), ans.end()) &lt;&lt; '\\n';\n    for (auto x : ans)\n        cout &lt;&lt; x &lt;&lt; \" \";\n    cout &lt;&lt; '\\n';\n    /*\n     */\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/1841/","title":"Educational Codeforces Round 150 (Rated for Div. 2)","text":"<p>\u6bd4\u8d5b\u94fe\u63a5: https://codeforces.com/contest/1841</p> <p>2025-03-19</p> <p>VP \u8d5b\u65f6\u53ea\u8fc7\u4e86AB\uff0cC\u9898\u82b1\u4e86\u597d\u957f\u65f6\u95f4\u624d\u5f04\u51fa\u6765\u3002</p> <p>\u5b66\u4e60\u4e00\u4e0bC\u7684\u7b80\u5355\u7684\u5199\u6cd5\uff0c\u7136\u540e\u770b\u770bDE\u3002\u8bd5\u4e0b\u80fd\u4e0d\u80fd\u5c3d\u91cf\u628a\u4eba\u6570\u5927\u4e8e2000\u7684\u9898\u90fd\u5b66\u4e60\u4e00\u4e0b\u3002\u3002</p>"},{"location":"cp_solving/Codeforces/1841/#a","title":"A","text":"<p>\u4e00\u5b9a\u8981\u8bfb\u597d\u9898\u76ee\u554a\uff0c\u6211A\u9519\u4e86\u4e00\u53d1\u3002\u3002</p> <p>\u6025\u4e86\uff0c\u9898\u90fd\u6ca1\u8bfb\u660e\u767d\u5c31\u4ea4\u4e86\u3002</p> <pre><code>void ChatGptDeepSeek()\n{\n    int n;\n    cin&gt;&gt;n;\n    if(n&lt;=4) cout&lt;&lt;\"Bob\\n\";\n    else cout&lt;&lt;\"Alice\\n\";\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/1841/#b","title":"B","text":"<p>\u6ca1\u5565\u8bf4\u7684\uff0c\u867d\u7136\u4ee3\u7801\u4e00\u5f00\u59cb\u5199\u4e5f\u662f\u9519\u7684\u3002\u3002<code>cin&gt;&gt;x[i]</code> \u5199\u6210\u4e86 <code>cin&gt;&gt;x[q]</code> \uff0c\u5c31\u5f88\u641e\u7b11\u4e86\uff0c\u627e\u4e86\u534a\u5929\u3002\u3002</p> <pre><code>void ChatGptDeepSeek()\n{\n    int q;\n    cin &gt;&gt; q;\n    vector&lt;int&gt; x(q);\n    for (int i = 0; i &lt; q; i++)\n        cin &gt;&gt; x[i];\n    int lst = 0;\n    bool ok = true;\n    for (int i = 0; i &lt; q; i++) {\n        // cerr &lt;&lt; \"lst:\" &lt;&lt; lst &lt;&lt; \" \\n\";\n        if (!ok) {\n            if (x[i] &lt;= x[0] &amp;&amp; x[i] &gt;= lst) {\n                cout &lt;&lt; \"1\";\n                lst = x[i];\n            } else\n                cout &lt;&lt; \"0\";\n            continue;\n        }\n        if (x[i] &gt;= lst) {\n            cout &lt;&lt; \"1\";\n            lst = x[i];\n        } else if (ok &amp;&amp; x[i] &lt;= x[0]) {\n            cout &lt;&lt; \"1\";\n            ok = false;\n            lst = x[i];\n        } else\n            cout &lt;&lt; \"0\";\n    }\n    cout &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/1841/#c","title":"C","text":""},{"location":"cp_solving/Codeforces/1841/#_1","title":"\u6211\u7684\u601d\u8def","text":"<p>\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e\u628a\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u6539\u6210\u6bcf\u4e00\u79cd\u5b57\u7b26\u7684\u7b54\u6848\uff0c\u9996\u5148\u6211\u4eec\u8ba1\u7b97\u53bb\u6389\u8fd9\u4e2a\u4f4d\u7f6e\u65f6\u7684\u7b54\u6848\u3002\u80af\u5b9a\u53bb\u6389\u81ea\u5df1\u672c\u8eab\u7684\u8d21\u732e\u3002</p> <p>\u4f46\u662f\u53ef\u80fd\u53bb\u6389\u8fd9\u4e00\u4f4d\uff0c\u524d\u9762\u6709\u7684\u4f4d\u7684\u8d21\u732e\u4f1a\u4ece\u8d1f\u53d8\u4e3a\u6b63\u3002\u8fd9\u79cd\u60c5\u51b5\u53ea\u51fa\u73b0\u5728\u6682\u65f6\u6ca1\u6709\u9047\u5230\u6bd4\u81ea\u5df1\u5927\u7684\u4f4d\u7684\u4f4d\u4e0a\uff0c\u4e14\u53bb\u6389\u7684\u8fd9\u4e2a\u6570\u5b57\u5fc5\u987b\u662f\u540e\u7f00\u7684\u552f\u4e00\u6700\u5927\u503c\u3002\u5982\u679c\u5b58\u5728\u8fd9\u79cd\u60c5\u51b5\uff0c\u5219\u9700\u66f4\u65b0\u5f53\u524d\u7684\u540e\u7f00\u6700\u5927\u503c\u3002</p> <p>\u7136\u540e\u53ef\u4ee5\u8ba1\u7b97\u5f53\u524d\u8fd9\u4e00\u4f4d\u66ff\u6362\u4e3a\u5176\u4ed6\u5b57\u7b26\u7684\u8d21\u732e\u3002\u5982\u679c\u6539\u7684\u6bd4\u5f53\u524d\u7684\u540e\u7f00\u6700\u5927\u503c\u5c0f\uff0c\u6216\u8005\u76f8\u7b49\uff0c\u90a3\u4e48\u4e0d\u4f1a\u5f71\u54cd\u524d\u9762\u7684\u7b54\u6848\uff0c\u53ea\u9700\u589e\u52a0\u5f53\u524d\u4f4d\u7684\u8d21\u732e\u3002</p> <p>\u82e5\u66f4\u65b0\u5f97\u66f4\u5927\u4e86\uff0c\u5047\u8bbe\u66f4\u65b0\u4e3a \\(j\\) \uff0c\u5219\u524d\u9762\u7684\u5728 \\([suf_{now},j-1]\\) \u7684\u4f4d\u7684\u8d21\u732e\u4f1a\u7531\u6b63\u53d8\u6210\u8d1f\u3002</p> <p>\u7136\u540e\u5c31\u6a21\u62df\u5c31\u884c\u4e86\u3002\u3002</p> <pre><code>void ChatGptDeepSeek()\n{\n    string s;\n    cin &gt;&gt; s;\n    s = \" \" + s;\n    int n = s.size() - 1;\n    vector&lt;vector&lt;int&gt;&gt; pre(n + 1, vector&lt;int&gt;(5));\n    for (int i = 1; i &lt;= n; i++) {\n        pre[i] = pre[i - 1];\n        pre[i][s[i] - 'A']++;\n    }\n    vector&lt;int&gt; suf(n + 1);\n    suf[n] = s[n] - 'A';\n    for (int i = n - 1; i &gt;= 1; i--) {\n        suf[i] = max(suf[i + 1], s[i] - 'A');\n    }\n    vector&lt;int&gt; val { 1, 10, 100, 1000, 10000 };\n    ll ans = 0;\n    for (int i = 1; i &lt;= n; i++) {\n        if (s[i] - 'A' &gt;= suf[i])\n            ans += val[s[i] - 'A'];\n        else\n            ans -= val[s[i] - 'A'];\n    }\n    ll res = ans;\n    vector&lt;int&gt; cnt(5); // \u6bcf\u4e00\u79cd\u4f1a\u88ab\u5f71\u54cd\u7684 \u6709\u591a\u5c11\u4e2a\n    for (int i = 1; i &lt;= n; i++) {\n        ll now = ans;\n        if (s[i] - 'A' == suf[i])\n            now -= val[s[i] - 'A'];\n        else\n            now += val[s[i] - 'A'];\n        int now_suf = suf[i];\n        if (s[i] - 'A' == suf[i]) {\n            if (pre[n][s[i] - 'A'] - pre[i - 1][s[i] - 'A'] == 1) {\n                int sec = 0;\n                for (int j = s[i] - 'A' - 1; j &gt;= 0; j--) {\n                    if (pre[n][j] - pre[i - 1][j]) {\n                        sec = j;\n                        break;\n                    }\n                }\n                now_suf = sec;\n                for (int j = sec; j &lt; suf[i]; j++) {\n                    now += cnt[j] * 2 * val[j];\n                }\n            }\n        }\n        for (int j = 0; j &lt; 5; j++) {\n            if (j == s[i] - 'A')\n                continue;\n            if (j == now_suf) {\n                res = max(res, now + val[j]);\n            } else if (j &gt; now_suf) {\n                // now_suf,j-1 \u4e4b\u95f4\u7684 ,\u51cf\u53bb\n                ll sub = 0;\n                for (int k = now_suf; k &lt; j; k++) {\n                    sub += 2LL * cnt[k] * val[k];\n                }\n                res = max(res, now + val[j] - sub);\n            } else if (j &lt; now_suf) {\n                res = max(res, now - val[j]);\n            }\n        }\n        for (int j = 0; j &lt; s[i] - 'A'; j++)\n            cnt[j] = 0;\n        cnt[s[i] - 'A']++;\n    }\n    cout &lt;&lt; res &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/1841/#dp","title":"DP","text":"<p>\u7ffb\u8f6c\u5b57\u7b26\u4e32\u3002\u3002\u8fd9\u6837\u5c31\u662f\u770b\u524d\u9762\u6709\u6ca1\u6709\u66f4\u5927\u7684\u5b57\u7b26\u4e86\u3002\u3002\u4f1a\u7b80\u5355\u5f88\u591a\u3002</p> <p>\u597d\u597d\u597d\uff0c\u770b\u4e86\u9898\u89e3\u5c31\u5f88\u723d\u4e86\u3002\u3002</p> <p>\\(dp_{0/1,i}\\) \u8868\u793a\u5f53\u524d\u662f\u5426\u4fee\u6539\uff0c\u6700\u5927\u503c\u662f \\(i\\) \uff0c\u53ea\u9700\u8981\u5148\u7ffb\u8f6c\u5b57\u7b26\u4e32\uff0c\u5c31\u53d8\u6210\u4e86\u9700\u8981\u770b\u524d\u9762\u7684\u6700\u5927\u7684\u5b57\u7b26\u3002</p> <pre><code>constexpr int val[] { 1, 10, 100, 1000, 10000 };\nvoid ChatGptDeepSeek()\n{\n    string s;\n    cin &gt;&gt; s;\n    vector&lt;vector&lt;int&gt;&gt; dp(2, vector&lt;int&gt;(5, -1e9 + 1));\n    dp[0][0] = 0;\n    reverse(s.begin(), s.end());\n    for (int i = 0; i &lt; s.size(); i++) {\n        vector ndp = vector&lt;vector&lt;int&gt;&gt;(2, vector&lt;int&gt;(5, -1e9 + 1));\n        int x = s[i] - 'A';\n        for (int j = 0; j &lt; 5; j++) {\n            for (int k = 0; k &lt; 5; k++) {\n                ndp[1][max(k, j)] = max(ndp[1][max(k, j)], dp[0][j] + (k &lt; j ? -1 : 1) * val[k]);\n            }\n            ndp[0][max(x, j)] = max(ndp[0][max(x, j)], dp[0][j] + (x &lt; j ? -1 : 1) * val[x]);\n            ndp[1][max(x, j)] = max(ndp[1][max(x, j)], dp[1][j] + (x &lt; j ? -1 : 1) * val[x]);\n        }\n        dp = ndp;\n    }\n    cout &lt;&lt; max(*max_element(dp[0].begin(), dp[0].end()), *max_element(dp[1].begin(), dp[1].end())) &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/1841/#d","title":"D","text":"<p>\u611f\u89c9\u6211\u8fd9\u56de\u5199\u7684DP\u5f88\u5bf9\u554a\u3002\u3002\u3002</p> <p>\u9898\u89e3\u5f88\u5bf9\uff0c\u5f88\u7b80\u5355\uff0c\u4f46\u6211\u7684\u54ea\u91cc\u9519\u4e86\u5462\uff1f</p> <p>\u9898\u89e3\u7684\u601d\u8def\u662f</p> <p>\u5148\u628a\u6240\u6709\u76f8\u4ea4\u7684\u7ebf\u6bb5\u7ed9\u5408\u6210\u4e00\u4e2a\u7ebf\u6bb5\uff0c\u7136\u540e\u6700\u540e\u7684\u7b54\u6848\u5176\u5b9e\u5c31\u662f\u4ece\u8fd9\u91cc\u9009\u82e5\u5e72\u4e2a\u4e0d\u76f8\u4ea4\u7684\u7ebf\u6bb5\u51fa\u6765\u3002\u6240\u4ee5\u53ef\u4ee5\u6309 r \u6392\u5e8f\uff0c\u80fd\u62ff\u5c31\u62ff\u3002</p> <pre><code>void ChatGptDeepSeek()\n{\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;int&gt; l(n), r(n);\n    for (int i = 0; i &lt; n; i++)\n        cin &gt;&gt; l[i] &gt;&gt; r[i];\n    vector&lt;pair&lt;int, int&gt;&gt; res;\n    for (int i = 0; i &lt; n; i++)\n        for (int j = 0; j &lt; i; j++) {\n            if (l[i] &gt; r[j] || l[j] &gt; r[i])\n                continue;\n            res.push_back({ min(l[i], l[j]), max(r[i], r[j]) });\n        }\n    sort(res.begin(), res.end(), [](pair&lt;int, int&gt; x, pair&lt;int, int&gt; y) { return x.second &lt; y.second; });\n    int R = -1, ans = 0;\n    for (auto [l, r] : res) {\n        if (l &gt; R) {\n            ans++;\n            R = r;\n        }\n    }\n    cout &lt;&lt; n - 2 * ans &lt;&lt; '\\n';\n}\n</code></pre> <p>\u6539\u5bf9\u4e86\u3002\u3002\u867d\u7136\u6ca1\u5565\u7528\u3002\u3002\u5bf9\u62cd\u5927\u6cd5\u597d\u554a\u3002</p> <pre><code>void ChatGptDeepSeek()\n{\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;pair&lt;int, int&gt;&gt; a(n + 1);\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; a[i].first &gt;&gt; a[i].second;\n    sort(a.begin() + 1, a.end());\n    vector&lt;vector&lt;int&gt;&gt; dp(n + 1, vector&lt;int&gt;(n + 1, 1e9 + 1));\n    vector&lt;int&gt; ans(n + 1, 0);\n    ans[0] = 0;\n    dp[0][0] = -1;\n    // dp[i][j]\u8868\u793a\u7b54\u6848\u662fj \u7684\u6700\u5c0f\u7684 r\n    for (int i = 1; i &lt;= n; i++) {\n        dp[i] = dp[i - 1];\n        ans[i] = max(ans[i - 1], ans[i]);\n        // if (a[i].second &lt; a[i + 1].first)\n        //     continue;\n        /* \u53bb\u524d\u9762\u627e\u548c\u81ea\u5df1\u76f8\u4ea4\u7684 */\n        for (int j = 1; j &lt; i; j++) {\n            assert(ans[i] &gt;= ans[j]);\n\n            if (a[j].second &lt; a[i].first)\n                continue;\n            for (int k = 0; k &lt;= ans[j]; k++) {\n                if (dp[j][k] &lt; a[j].first) {\n                    dp[i][k + 1] = min(dp[i][k + 1], max(a[i].second, a[j].second));\n                    ans[i] = max(ans[i], k + 1);\n                }\n            }\n        }\n\n        for (int j = 1; j &lt;= ans[i]; j++)\n            assert(dp[i][j] &lt;= dp[i][j + 1]);\n    }\n    cout &lt;&lt; n - ans[n] * 2 &lt;&lt; '\\n';\n    // cout &lt;&lt; n &lt;&lt; '\\n';\n}\n</code></pre> <p>\u53c8\u662f\u4e24\u5c0f\u65f6\u5199\u4e00\u4e2a\u9898\u76ee\u3002</p>"},{"location":"cp_solving/Codeforces/1841/#e","title":"E","text":"<p>\u516d\u767e\u516d\u5341\u516d\uff0c\u6211\u8981\u76f4\u63a5\u6284\u9898\u89e3\u4e86\u3002\u3002\u3002\u6284\u5b8c\u8fd9\u9898\u5c31\u5148\u4e0d\u770b\u4e86\u3002\u3002</p> <p>\u8981\u6c42\u51fa\u6bcf\u4e00\u4e2a\u957f\u5ea6\u7684\u6bb5\u7684\u6570\u91cf\u3002</p> <p>.... \u7b11\u6b7b\u4e86\uff0c\u6284\u9898\u89e3\u90fd\u8d85\u4e0d\u660e\u767d\u3002\u3002\u3002\u8fd8\u662f\u65e9\u70b9\u4f11\u606f\u5427\u3002\u518d\u4e5f\u4e0d\u60f3\u8fd9\u6837\u6284\u9898\u89e3\u4e86\u3002\u3002</p> <pre><code>using ll = long long;\nstruct seg{\n    int l, r;\n};\n\nbool operator &lt;(const seg &amp;a, const seg &amp;b){\n    return a.l &lt; b.l;\n}\n\nvoid ChatGptDeepSeek()\n{\n    map&lt;seg, int&gt; mp;\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;int&gt; a(n);\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; a[i];\n    }\n    ll m;\n    cin &gt;&gt; m;\n    mp[{ 0, n }] = n;\n    vector&lt;int&gt; ord(n);\n    iota(ord.begin(), ord.end(), 0);\n    sort(ord.begin(), ord.end(), [&amp;a](int x, int y) {\n        return a[x] &gt; a[y];\n    });\n    vector&lt;ll&gt; cnt(n + 2);\n    int j = 0;\n    for (int i = n; i &gt;= 0; i--) {\n        while (j &lt; n &amp;&amp; a[ord[j]] &gt;= i) {\n            auto it = mp.upper_bound({ ord[j], -1 });\n            --it;\n            auto tmp = it-&gt;first;\n\n            cnt[tmp.r - tmp.l] += it-&gt;second - i;\n            mp.erase(it);\n\n            if (tmp.l != ord[j])\n                mp[{ tmp.l, ord[j] }] = i;\n            if (ord[j] + 1 != tmp.r)\n                mp[{ ord[j] + 1, tmp.r }] = i;\n            j++;\n        }\n    }\n    ll ans = 0;\n    for (int i = n; i &gt; 0; --i) {\n        long long t = min(cnt[i], m / i);\n        ans += t * 1ll * (i - 1);\n        m -= t * 1ll * i;\n        if (t != cnt[i] &amp;&amp; m &gt; 0) {\n            ans += m - 1;\n            m = 0;\n        }\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2064/","title":"Codeforces Round 1005 (Div. 2)","text":"<p>2025-02-16 Codeforces Round 1005 (Div. 2)</p>"},{"location":"cp_solving/Codeforces/2064/#codeforces-round-1005-div-2","title":"Codeforces Round 1005 (Div. 2)","text":"<p>\u6bd4\u8d5b\u94fe\u63a5: Codeforces Round 1005 (Div. 2)</p> <p>\u5f88\u62bd\u8c61\u7684\u4e00\u96c6\u3002\u7b97\u624b\u901f\u573a\u5427\uff0c\u8fd9C\u6709\u70b9\u641e\u7b11\u3002\u3002\u3002</p> <p>\u4f46\u662fB\u6211\u53c8\u7a81\u7136\u611f\u89c9\u6709\u70b9\u6ca1\u60f3\u660e\u767d\u4e86\u3002\u7136\u540eD\u611f\u89c9\u5f88\u96be\u641e\u4e86\uff0c\u57fa\u672c\u4e0d\u7528\u770b\u4e86\u3002\u3002\u3002</p> <p></p>"},{"location":"cp_solving/Codeforces/2064/#a","title":"A","text":"<p>\u8981\u4f7f\u5f97s\u91cc\u9762\u53ea\u67090\uff0ct\u91cc\u9762\u53ea\u67091\u3002</p> <p>\u6240\u4ee5\u6211\u4eec\u6709\u4e00\u79cd\u64cd\u4f5c\u65b9\u5f0f\u5c31\u662f\uff0c\u628a\u6700\u524d\u9762\u76841\u4e4b\u540e\u7684\u5b57\u7b26\u4e32\u603b\u4f53\u79fb\u52a8\u5230t\u91cc\u9762\uff0c\u7136\u540e\u518d\u627et\u91cc\u9762\u6700\u524d\u9762\u7684\u4e00\u4e2a0\uff0c\u518d\u628a\u8fd9\u4e2a\u5f00\u59cb\u7684\u540e\u7f00\u6574\u4f53\u79fb\u5230s\u91cc\u9762\u3002</p> <p>\u6240\u4ee5\u6211\u4eec\u4ece1\u5f00\u59cb\u627e\uff0c\u7136\u540e\u627e0\u3002\u5b9e\u9645\u4e0a\u91cd\u590d\u768400\uff0c11\u8fd9\u79cd\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u5b83\u770b\u505a1\u4e2a\u5b57\u7b26\u3002</p> <p>\u6240\u4ee5\u5b57\u7b26\u4e32\u6700\u540e\u5927\u6982\u662f01010101...\u8fd9\u79cd\uff0c\u6211\u4eec\u5b9e\u9645\u4e0a\u5c31\u662f\u8f93\u51fa\u8fd9\u73a9\u610f\u7684\u957f\u5ea6\uff0c\u5982\u679c\u5f00\u5934\u4e3a0\u5c31-1\u3002</p> <pre><code>void solve()\n{\n    //10101 \u6709\u591a\u5c11\u4e2a \u5c31\u662f\u591a\u5c11\n    int n;\n    cin&gt;&gt;n;\n    string s;\n    cin&gt;&gt;s;\n    int lst=1;\n    s=\" \"+s;\n    int ans=0;\n    for(int i=1;i&lt;=n;i++){\n        if(s[i]!=s[i-1]&amp;&amp;s[i]-'0'==lst){\n            ans++;\n            lst^=1;\n        }\n    }\n    cout&lt;&lt;ans&lt;&lt;'\\n';\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2064/#b","title":"B","text":"<p>\u5f53\u65f6\u5199\u51fa\u6765\u597d\u6162\u554a\uff0c\u751a\u81f3\u8fd8\u611f\u89c9\u6709\u70b9\u96be\u6765\u7740\u3002\u3002\u3002\u73b0\u5728\u770b\u6765\u6709\u70b9\u5510\u3002\u3002\u3002</p> <p>\u6570\u7ec4\u7684\u5f97\u5206\u4e3a\u6570\u7ec4\u7684\u957f\u5ea6\u51cf\u53bb\u6570\u7ec4\u4e2d\u4e0d\u540c\u5143\u7d20\u7684\u4e2a\u6570\u3002\u8fd9\u4e2a\u7684\u672c\u8d28\u662f\u4ec0\u4e48\u5462\uff1f\u5c31\u662f\u91cd\u590d\u5143\u7d20\u7684\u4e2a\u6570\u3002\u5c31\u5dee\u4e0d\u591a\u8fd9\u4e2a\u610f\u601d\u5427\u3002</p> <p>\u6bd4\u5982\u8bf4\u67093\u4e2a1\uff0c2\u4e2a2\uff0c\u90a3\u4e48\u5f97\u5206\u5c31\u662f2+1\uff0c\u91cd\u590d\u7684\u5143\u7d20\u7684\u6570\u91cf\u3002</p> <p>\u54b1\u4eec\u9700\u8981\u5220\u9664\u4e2d\u95f4\u7684\u4e00\u6bb5\u5b50\u6bb5\uff0c\u4f7f\u5f97\u5f97\u5206\u6700\u5927\u3002\u5982\u679c\u6709\u591a\u4e2a\uff0c\u5219\u8f93\u51fa\u4f7f\u5f97\u6570\u7ec4\u957f\u5ea6\u6700\u77ed\u7684\u65b9\u6848\u3002</p> <p>\u56e0\u4e3a\u5f97\u5206\u662f\u91cd\u590d\u5143\u7d20\u7684\u4e2a\u6570\uff0c\u6240\u4ee5\u4e00\u4e2a\u5143\u7d20\u90fd\u4e0d\u5220\uff0c\u5f97\u5206\u4e00\u5b9a\u4e5f\u662f\u6700\u5927\u7684\u3002\u6240\u4ee5\u54b1\u4eec\u5c31\u662f\u5220\u9664\u6700\u957f\u7684\u4ec5\u7531\u51fa\u73b0\u6b21\u6570\u4e3a1\u7684\u5143\u7d20\u7ec4\u6210\u7684\u5b50\u6bb5\uff0c\u8fd9\u6837\u4e0d\u4f1a\u4f7f\u5f97\u5206\u53d8\u5c0f\uff0c\u4e14\u80fd\u5220\u9664\u5c3d\u91cf\u591a\u7684\u5143\u7d20\u3002</p> <pre><code>void solve()\n{\n    int n;\n    cin &gt;&gt; n;\n    vi a(n + 1);\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; a[i];\n    vi cnt(n + 1);\n    for (int i = 1; i &lt;= n; i++)\n        cnt[a[i]]++;\n    int l = 0, mx = 0;\n    for (int i = 1; i &lt;= n; i++) {\n        if (cnt[a[i]] == 1) {\n            int j = i;\n            while (j &lt;= n &amp;&amp; cnt[a[j]] == 1)\n                j++;\n            cmax(mx, j - i);\n            if (j - i == mx)\n                l = i;\n            i = j;\n        }\n    }\n    if (mx)\n        cout &lt;&lt; l &lt;&lt; \" \" &lt;&lt; l + mx - 1 &lt;&lt; '\\n';\n    else\n        cout &lt;&lt; \"0\\n\";\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2064/#c","title":"C","text":"<p>\u52a0\u4e86\u6b63\u6570\u7684\u8bdd\uff0c\u90a3\u4e48\u53ea\u5269\u4e0b\u540e\u534a\u90e8\u5206\u4e86\uff0c\u52a0\u4e86\u8d1f\u6570\u7684\u8bdd\u53ea\u5269\u4e0b\u524d\u534a\u90e8\u5206\u4e86\u3002</p> <p>\u4f46\u662f\u4f60\u5168\u52a0\u6b63\u6570\u6216\u5168\u52a0\u8d1f\u6570\uff0c\u663e\u7136\u90fd\u662f\u53ef\u4ee5\u7684\u3002</p> <p>\u5f88\u5bb9\u6613\u60f3\u5230\u5c31\u5982\u679c\u8981\u52a0\u6b63\u6570\uff0c\u90a3\u4e48\u53ea\u80fd\u662f\u6b63\u6570\u5728\u8d1f\u6570\u524d\u9762\u3002\u6240\u4ee5\u7528\u4e24\u4e2a\u524d\u7f00\u548c\u5c31\u884c\u4e86\u3002</p> <pre><code>void solve()\n{\n    int n;\n    cin&gt;&gt;n;\n    ll ans=0;\n    vi a(n+1);\n    vl p1(n+1),p2(n+1);\n    for(int i=1;i&lt;=n;i++){\n        cin&gt;&gt;a[i];\n        p1[i]=p1[i-1],p2[i]=p2[i-1];\n        if(a[i]&lt;0)\n            p1[i]-=a[i];\n        else\n            p2[i]+=a[i];\n    }\n    ans=p1[n];\n    for(int i=1;i&lt;=n;i++){\n        cmax(ans,p2[i]+p1[n]-p1[i]);\n    }\n    cout&lt;&lt;ans&lt;&lt;'\\n';\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2064/#d","title":"D","text":"<p>\u6700\u9ad8\u4f4d\u6bd4 \\(x\\) \u4f4e\u7684\u6570\u5b57\u5fc5\u7136\u4e0d\u4f1a\u4f7f\u5f97 \\(x\\) \u7684\u6700\u9ad8\u4f4d\u964d\u4f4e\uff0c\u6240\u4ee5\u5b83\u53ef\u4ee5\u5403\u6389\u6240\u6709\u6700\u9ad8\u4f4d\u6bd4\u5b83\u4f4e\u7684\u3002</p> <p>\u54b1\u4eec\u53ea\u9700\u8981\u627e\u5230\u5b83\u524d\u9762\u7684\u79bb\u5f97\u6700\u8fd1\u7684\u6700\u9ad8\u4f4d\u5927\u4e8e\u7b49\u4e8e\u5b83\u7684\uff0c\u5982\u679c\u80fd\u7ee7\u7eed\u5403\uff0c\u90a3\u4e48 \\(x\\) \u7684\u6700\u9ad8\u4f4d\u5fc5\u7136\u4f1a\u964d\u4f4e\uff0c\u6240\u4ee5\u64cd\u4f5c\u6b21\u6570\u6700\u591a\u53ea\u4f1a\u6709 \\(\\log x\\) \u6b21\uff0c\u76f4\u5230\u4e0d\u80fd\u8fdb\u884c\u64cd\u4f5c\u3002</p> <p>\u7528\u4e00\u4e2a\u6570\u7ec4 \\(lst_{i,j}\\) \u8868\u793a\u524d \\(i\\) \u4e2a\u6570\u5b57\u91cc\u9762\u6700\u540e\u9762\u7684\u6700\u9ad8\u4f4d\u5927\u4e8e\u7b49\u4e8e \\(j\\) \u7684\u4e0b\u6807\u3002\u7136\u540e\u6bcf\u6b21\u8df3\u8f6c\u5230 \\(lst_{idx,\\log x}\\) \uff0c\u518d\u770b\u80fd\u4e0d\u80fd\u7ee7\u7eed\u5403\u3002</p> <pre><code>void solve()\n{\n    int n, q;\n    cin &gt;&gt; n &gt;&gt; q;\n    vi w(n + 1);\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; w[i];\n    // \u627e\u5230\u4e0b\u4e00\u4e2a\u6700\u9ad8\u4f4d\u5927\u4e8e\u7b49\u4e8ex\u7684\n    vector&lt;vi&gt; lst(n + 1, vi(32, 0));\n    for (int i = 1; i &lt;= n; i++) {\n        lst[i] = lst[i - 1];\n        for (int j = __lg(w[i]); j &gt;= 0; j--)\n            lst[i][j] = i;\n    }\n    vi pre(n + 1);\n    for (int i = 1; i &lt;= n; i++)\n        pre[i] = pre[i - 1] ^ w[i];\n    // lst[i][j]\u6307 [1,i]\u4e4b\u95f4\u79bbi\u6700\u8fd1\u7684\u6700\u9ad8\u4f4d\u5927\u4e8e\u7b49\u4e8ej\u7684\u6570\u5b57\n    while (q--) {\n        int x;\n        cin &gt;&gt; x;\n        int idx = n;\n        while (idx &gt; 0 &amp;&amp; x) {\n            int nxt = lst[idx][__lg(x)];\n            x ^= pre[nxt] ^ pre[idx];\n            // cerr&lt;&lt;x&lt;&lt;\" \"&lt;&lt;nxt&lt;&lt;\" \"&lt;&lt;idx&lt;&lt;\"\\n\";\n            idx = nxt;\n            if (x &lt; w[nxt] || idx == 0)\n                break;\n            x ^= w[nxt];\n            idx--;\n            // cerr&lt;&lt;nxt&lt;&lt;'\\n';\n        }\n        cout &lt;&lt; n - idx &lt;&lt; ' ';\n    }\n    cout &lt;&lt; '\\n';\n}\n</code></pre> <p>\u611f\u89c9\u5bf9\u6211\u6765\u8bf4\u8fd8\u662f\u5f88\u96be\u60f3\u51fa\u6765\u7684\u3002</p>"},{"location":"cp_solving/Codeforces/2069/","title":"Educational Codeforces Round 174","text":""},{"location":"cp_solving/Codeforces/2069/#2025219","title":"2025\u5e742\u670819\u65e5","text":""},{"location":"cp_solving/Codeforces/2069/#educational-codeforces-round-174-rated-for-div-2","title":"Educational Codeforces Round 174 (Rated for Div. 2)","text":"<p>\u6bd4\u8d5b\u94fe\u63a5\uff1ahttps://codeforces.com/contest/2069</p> <p>\u8fd9\u573a\u611f\u89c9\u7b97\u6b63\u5e38\u53d1\u6325\u5427\u3002D\u98981800\u4ebaAC\uff0c\u6211\u505a\u4e0d\u51fa\u6765\u5012\u662f\u6b63\u5e38\u3002</p> <p>\u81f3\u4e8e\u8fd9B\u548cC\uff0c\u8fc7\u7684\u4eba\u90fd\u4e0d\u5c11\uff0c\u5199\u51fa\u6765\u7684\u901f\u5ea6\u6709\u70b9\u6162\u4e86\u3002\u8fd9\u4e2aC\u6211\u600e\u4e48\u60f3\u5f97\u6709\u70b9\u70e7\u8111\u3002\u3002\u3002\u7136\u540e\u778e\u641e\u5bf9\u4e86\u3002</p> <p>B\u5199\u5f97\u4e5f\u6709\u70b9\u70c2\u3002</p>"},{"location":"cp_solving/Codeforces/2069/#a","title":"A","text":"<p>\u5f53 \\(b_i\\) \u4e3a \\(1\\) \u65f6\uff0c\\(b_{i-1}=b_i=b_{i+1}\\) \uff0c\u53ea\u6709\u51fa\u73b0 \\(101\\) \u65f6\u4f1a\u6709\u51b2\u7a81\uff0c\u5176\u4ed6\u7684\u90fd\u53ef\u4ee5\u6210\u7acb\u3002</p> <pre><code>void solve()\n{\n    int n;\n    cin&gt;&gt;n;\n    vi a(n+1);\n    for(int i=2;i&lt;n;i++)\n        cin&gt;&gt;a[i];\n    for(int i=3;i+1&lt;=n-1;i++){\n        if(a[i-1]==1&amp;&amp;a[i+1]==1&amp;&amp;a[i]==0){\n            cout&lt;&lt;\"NO\\n\";\n            return;\n        }\n    }\n    cout&lt;&lt;\"YES\\n\";\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2069/#b","title":"B","text":"<p>\u672c\u6765\u611f\u89c9\u8fd9\u9898\u53ef\u80fd\u4e5f\u4e0d\u597d\u505a\u7684\u3002\u3002</p> <p>\u6bcf\u6b21\u9700\u8981\u90091\u79cd\u989c\u8272\uff0c\u4e14\u4e0d\u80fd\u6709\u76f8\u90bb\u7684\uff0c\u90a3\u4e48\u6bcf\u79cd\u989c\u8272\u9700\u8981\u51e0\u6b21\u64cd\u4f5c\u5462\uff1f\u6211\u4eec\u6709\u5fc5\u8981DFS\u5417\uff1f\u6ca1\u6709\u3002\u5176\u5b9e\u4e00\u79cd\u989c\u8272\uff0c\u64cd\u4f5c\u6b21\u6570\u53ea\u4f1a\u662f1\u6b21\u6216\u80052\u6b21\u3002</p> <p>\u76f4\u63a5\u679a\u4e3e\u5c31\u884c\u4e86\uff0c\u5982\u679c\u4e00\u79cd\u989c\u8272\uff0c\u5b83\u6709\u76f8\u90bb\u7684\u5757\uff0c\u90a3\u4e48\u9700\u8981\u4e24\u6b21\u64cd\u4f5c\uff0c\u5426\u5219\u90fd\u662f1\u6b21\u64cd\u4f5c\u3002</p> <pre><code>void solve()\n{\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    vector&lt;vi&gt; a(n + 1, vi(m + 1));\n    vi cnt(n * m + 1);\n    set&lt;int&gt; st;\n    int mx = 0;\n    for (int i = 1; i &lt;= n; i++)\n        for (int j = 1; j &lt;= m; j++) {\n            cin &gt;&gt; a[i][j];\n            cnt[a[i][j]]++;\n            cmax(mx, cnt[a[i][j]]);\n            st.insert(a[i][j]);\n        }\n    vector&lt;bool&gt; ok(n * m + 1);\n    auto check = [&amp;](int x, int y) {\n        vector&lt;pii&gt; dirs { { 0, 1 }, { 0, -1 }, { 1, 0 }, { -1, 0 } };\n        for (auto [xx, yy] : dirs) {\n            int nx = xx + x, ny = yy + y;\n            if (nx &lt; 1 || nx &gt; n || ny &lt; 1 || ny &gt; m)\n                continue;\n            if (a[nx][ny] == a[x][y])\n                return true;\n        }\n        return false;\n    };\n    for (int i = 1; i &lt;= n; i++) {\n        for (int j = 1; j &lt;= m; j++) {\n            if (check(i, j))\n                ok[a[i][j]] = true;\n        }\n    }\n    int ans = 0;\n    for (auto x : st)\n        ans += (ok[x] ? 2 : 1);\n    if (ans != sz(st))\n        ans -= 2;\n    else\n        ans -= 1;\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2069/#c","title":"C","text":"<p>\u9996\u5148\u4e00\u5b9a\u8981\u77e5\u9053\u54ea\u4e9b\u60c5\u51b5\u662f\u7b26\u5408\u7684\uff0c\u624d\u597d\u601d\u8003\u3002\u3002</p> <p>\u6211\u672c\u6765\u4ee5\u4e3a\u662f\u53ea\u6709 123 \u662f\u53ef\u4ee5\u7684\uff0c\uff0c\u7136\u540e\u6d4b\u4e86\u6837\u4f8b\u53d1\u73b0\u4e0d\u5bf9\uff0c\u5b83\u5176\u5b9e\u8fd8\u6709\u89e3\u91ca\u3002\u90a3\u6211\u4eec\u53d1\u73b0\u53ea\u9700\u8981\u9996\u5c3e\u662f1\u548c3\uff0c\u4e2d\u95f42\u7684\u6570\u91cf\u65e0\u6240\u8c13\u3002\u3002\u90a3\u4e48\u5c31\u6709\u70b9\u4e0d\u597d\u5199\u3002\u3002</p> <p>\u4f46\u662f\u8003\u8651DP\u5c31\u53d1\u73b0\u5f88\u7b80\u5355\uff0c\u8bbe\\(dp_{0/1}\\) \u4ee3\u8868\u4ee5 \\(1\\) \u548c \\(2\\) \u7ed3\u5c3e\u7684\u5408\u6cd5\u5b50\u5e8f\u5217\u7684\u6570\u91cf\u3002\u90a3\u4e48\u53ea\u6709\u9047\u5230 \\(3\\) \u65f6\uff0c\u7b54\u6848\u5c31\u53ef\u4ee5\u52a0\u4e0a \\(dp_{i-1}\\) \u3002</p> <p>\u5982\u679c \\(a_i\\) \u662f \\(1\\) \uff0c\u90a3\u4e48\u663e\u7136 \\(dp_{i,0}=dp_{i-1}+1\\) \uff0c\u5982\u679c \\(a_i\\) \u662f \\(2\\) , \\(dp_{i,1}=2dp_{i-1,1}+dp_{i-1,0}\\) \u3002</p> <pre><code>void solve()\n{\n    int n;\n    cin &gt;&gt; n;\n    vi a(n + 1);\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; a[i];\n    vector&lt;vl&gt; dp(n + 1, vl(3));\n    ll ans = 0;\n    for (int i = 1; i &lt;= n; i++) {\n        dp[i] = dp[i - 1];\n        if (a[i] == 1)\n            dp[i][0]++;\n        else if (a[i] == 2) {\n            dp[i][1] = (dp[i][1] + dp[i - 1][0] + dp[i][1]) % mod;\n        } else\n            ans += dp[i][1], ans %= mod;\n        // if (a[i] == 3)\n        // cerr &lt;&lt; dp[i][0] &lt;&lt; \" \" &lt;&lt; dp[i][1] &lt;&lt; '\\n';\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre> <p>\u8fd9\u91cc\u597d\u5510\uff0c\u60f3\u4e86\u5f88\u4e45\u624d\u60f3\u660e\u767d\u3002\u3002\u3002</p> <p>\u7136\u540e\u5c31\u6218\u6597\u7ed3\u675f\u4e86\u3002D\u611f\u89c9\u786e\u5b9e\u5f88\u96be\u4e0d\u770b\u9898\u89e3\u5199\u51fa\u6765\u3002</p>"},{"location":"cp_solving/Codeforces/2069/#d","title":"D","text":"<p>use binary search \uff0c\u5982\u679c\u5f53\u524d\u5b57\u7b26\u4e32\u9996\u5c3e\u76f8\u540c\uff0c\u90a3\u663e\u7136\u6211\u4eec\u4e0d\u9700\u8981\u8fdb\u884c\u4efb\u4f55\u64cd\u4f5c\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5148\u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u9996\u5c3e\u4e0d\u540c\u7684\u72b6\u6001\uff0c\u7136\u540e\u6211\u4eec\u4e8c\u5206\u68c0\u67e5\u7684\u957f\u5ea6\u3002\u7531\u4e8e\u9996\u5c3e\u4e0d\u540c\uff0c\u90a3\u4e48\u80af\u5b9a\u8981\u4e48\u662f\u4ece\u5f00\u5934\u5f00\u59cb\uff0c\u8981\u4e48\u662f\u5728\u672b\u5c3e\u7ed3\u675f\u3002</p> <p>\u5bf9\u4e8e\u5728\u672b\u5c3e\u7ed3\u675f\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u53cd\u8f6c\u540e\u7684\u5b57\u7b26\u4e32\u6765\u8ba1\u7b97\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u7528\u8003\u8651\u7b2c\u4e00\u79cd\u60c5\u51b5\u3002\u7528\u524d\u7f00\u548c\u5b58\u4e00\u4e0b\uff0c\u5c31\u53ef\u4ee5\u68c0\u67e5\u662f\u5426\u80fd\u6784\u6210\u56de\u6587\u4e32\u4e86\u3002</p> <pre><code>void solve()\n{\n    string s;\n    cin &gt;&gt; s;\n    int n = sz(s);\n    for (int i = 0; i &lt; n - i - 1; i++) {\n        if (s[i] != s[n - i - 1]) {\n            s = s.substr(i, n - i - 1 - i + 1);\n            break;\n        }\n    }\n    if (sz(s) == n &amp;&amp; s.front() == s.back()) {\n        cout &lt;&lt; \"0\\n\";\n        return;\n    }\n    cerr &lt;&lt; s &lt;&lt; \"\\n\";\n    n = sz(s);\n    s = \" \" + s;\n\n    vector&lt;vi&gt; pre(n + 1, vi(26));\n    auto check = [&amp;](int len) {\n        if (len &lt; n / 2) {\n            for (int i = len + 1; i &lt;= n / 2; i++) {\n                if (s[i] != s[n - i + 1])\n                    return false;\n            }\n        }\n        for (int i = 0; i &lt; 26; i++) {\n            if (len &gt;= n / 2) {\n                if (pre[len][i] &lt; pre[n][i] - pre[len][i])\n                    return false;\n            } else {\n                if (pre[len][i] &gt; pre[n][i] - pre[len][i])\n                    return false;\n            }\n        }\n        return true;\n    };\n    int ans = n;\n    for (int i = 1; i &lt;= n; i++)\n        pre[i] = pre[i - 1], pre[i][s[i] - 'a']++;\n    int lo = 1, hi = n;\n\n    while (lo &lt; hi - 1) {\n        int mid = (lo + hi) &gt;&gt; 1;\n        if (check(mid))\n            hi = mid;\n        else\n            lo = mid;\n    }\n    cmin(ans, hi);\n    reverse(ALL(s));\n    for (int i = 1; i &lt;= n; i++)\n        pre[i] = pre[i - 1], pre[i][s[i] - 'a']++;\n    lo = 1, hi = n;\n\n    while (lo &lt; hi - 1) {\n        int mid = (lo + hi) &gt;&gt; 1;\n        if (check(mid))\n            hi = mid;\n        else\n            lo = mid;\n    }\n    cmin(ans, hi);\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2070/","title":"Educational Codeforces Round 175","text":"<p>\u6bd4\u8d5b\u65e5\u671f: 2025-02-27</p>"},{"location":"cp_solving/Codeforces/2070/#educational-codeforces-round-175-rated-for-div-2","title":"Educational Codeforces Round 175 (Rated for Div. 2)","text":"<p>\u6bd4\u8d5b\u94fe\u63a5: https://codeforces.com/contest/2070</p> <p>\u7cd6\u4e38\u7684\u4e00\u628a\u3002\u3002\u3002D\u53ea\u662f\u4e2a\u57fa\u7840\u7684bfs\u6216\u8005\u89c2\u5bdf\u4e00\u4e0b\u5c31\u597d\u4e86\uff0c\u4f46\u662f\u6ca1\u5199\u51fa\u6765\u3002</p> <p>\u8ddf\u72b6\u6001\u6709\u5173\u7cfb\u5427\uff0c\u4e5f\u662f\u57fa\u672c\u6ca1\u548b\u5199\u8fc7bfs\u4e86\uff0c\u4e5f\u662f\u83dc\u4e86\u3002\u4f46\u662f\u65e0\u6240\u8c13\uff0c\u65e0\u8bba\u5982\u4f55\uff0c\u90fd\u8981\u6253\u6bd4\u8d5b\uff0c\u6389\u5206\u6ca1\u6709\u4efb\u4f55\u5f71\u54cd\uff0c\u505a\u9898\u6c38\u8fdc\u662f\u6bd4 rating \u548c\u5176\u4ed6\u4e1c\u897f\u91cd\u8981\u7684\u3002\u611f\u89c9\u8fd9\u79cd\u5b9e\u65f6\u7684\u6bd4\u8d5b\uff0c\u786e\u5b9e\u5f88\u4e0d\u4e00\u6837\u554a\u3002</p> <p>\u9898\u5199\u591a\u4e86\uff0c\u53d8\u5f3a\u662f\u5fc5\u7136\u4e8b\u4ef6\u3002\u53ea\u8981\u5199\u9898\u5199\u5f97\u591f\u591a\uff0c\u79ef\u7d2f\u591f\u591a\uff0c\u90a3\u4e48\u4e0a\u5206\u3001\u6bd4\u8d5b\u4f53\u9a8c\u53d8\u597d\uff0c\u8fd9\u4e9b\u90fd\u662f\u81ea\u7136\u800c\u7136\u7684\u4e8b\u60c5\u3002</p>"},{"location":"cp_solving/Codeforces/2070/#a","title":"A","text":"<p>\u6ca1\u5565\u597d\u8bf4\u7684\uff0c\u89c2\u5bdf\u4e00\u4e0b\uff0c\u53d1\u73b0\u6bcf15\u4e2a\u6570\u5b57\u4f1a\u51fa\u73b03\u4e2a\u6ee1\u8db3\u7684\u3002</p> <pre><code>void solve()\n{\n    //0 1 2,15 16 17,30 31 32\n    int n;\n    cin&gt;&gt;n;\n    int ans=n/15*3;\n    for(int i=0;i&lt;=min(2,n%15);i++)\n        ans++;\n    cout&lt;&lt;ans&lt;&lt;'\\n';\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2070/#b","title":"B","text":"<p>\u8fd9\u4e2a\u5c31\u5f88\u660e\u663e\u5427\uff0c\u663e\u7136\u5224\u5f00\u59cb\u80fd\u4e0d\u80fd\u52300\uff0c\u5982\u679c\u80fd\u5230\uff0c\u770b\u540e\u9762\u4e00\u6b21\u56de\u52300\u8981\u591a\u957f\u65f6\u95f4\u3002</p> <pre><code>void solve()\n{\n    int n, x;\n    long long k;\n    cin &gt;&gt; n &gt;&gt; x &gt;&gt; k;\n    // \u770b-x\u6709\u6ca1\u6709\u51fa\u73b0\u8fc7\n    // \u7136\u540e\u518d\u770b 0 \u51fa\u73b0\u4e00\u6b21\u8981\u591a\u4e45\n    string s;\n    cin &gt;&gt; s;\n    vector&lt;int&gt; pre(n + 1);\n    for (int i = 1; i &lt;= n; i++) {\n        pre[i] = pre[i - 1];\n        if (s[i - 1] == 'L')\n            pre[i]--;\n        else\n            pre[i]++;\n    }\n    long long ans = 0;\n    for (int i = 1; i &lt;= n; i++) {\n        if (pre[i] == -x &amp;&amp; i &lt;= k) {\n            ans++;\n            k -= i;\n            break;\n        }\n    }\n    if(!ans){\n        cout&lt;&lt;\"0\\n\";\n        return;\n    }\n    for (int i = 1; i &lt;= n; i++) {\n        if(pre[i]==0){\n            ans+=k/i;\n            break;\n        }\n    }\n    cout&lt;&lt;ans&lt;&lt;'\\n';\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2070/#c","title":"C","text":"<p>\u53ef\u4ee5\u8003\u8651\u4e8c\u5206\u3002\u56e0\u4e3a\u8fd9\u4e2a\u80af\u5b9a\u662f\u4e00\u4e2a\u5355\u8c03\u7684\u3002</p> <p>\u68c0\u67e5\u7684\u65f6\u5019\uff0c\u5982\u679c\u662f\u84dd\u8272\u4e14\u503c\u5927\u4e8e\u6211\u4eec\u68c0\u67e5\u7684\u503c \\(x\\) \uff0c\u90a3\u4e48\u80af\u5b9a\u9700\u8981\u7528\u4e00\u6b21\u673a\u4f1a\u3002\u5982\u679c\u662f\u7ea2\u8272\uff0c\u5982\u679c\u6211\u4eec\u524d\u4e00\u4e2a\u662f\u5305\u542b\u5728\u6211\u4eec\u9009\u7684\u6bb5\u91cc\u9762\uff0c\u6211\u4eec\u80af\u5b9a\u5e0c\u671b\u8fd9\u4e2a\u6bb5\u80fd\u5c3d\u91cf\u7684\u957f\u3002</p> <pre><code>void solve()\n{\n    int n, k;\n    cin &gt;&gt; n &gt;&gt; k;\n    vi a(n + 1);\n    string s;\n    cin &gt;&gt; s;\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; a[i];\n    s = \" \" + s;\n    int cnt = 0;\n    for (int i = 1; i &lt;= n; i++) {\n        if (s[i] == 'B' &amp;&amp; s[i] != s[i - 1]){\n            cnt++;\n        }\n    }\n    if (cnt &lt;= k) {\n        cout &lt;&lt; \"0\\n\";\n        return;\n    }\n    auto check=[&amp;](int val){\n        int res=0;\n        bool use=false;\n        for(int i=1;i&lt;=n;i++){\n            if(s[i]=='B'){\n                if(use){\n                    continue;\n                }else{\n                    if(a[i]&gt;val){\n                        res++;\n                        use=true;\n                    }\n                }\n            }else{\n                if(a[i]&gt;val) use=false;\n            }\n        }\n        return res&lt;=k;\n    };\n    int lo = 0, hi = INF+1;\n    while(lo&lt;hi-1){\n        int mid=(lo+hi)&gt;&gt;1;\n        if(check(mid)) hi=mid;\n        else lo=mid;\n    }\n    cout&lt;&lt;hi&lt;&lt;'\\n';\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2070/#d","title":"D","text":"<p>...\u6700\u65e0\u8bed\u7684\u4e00\u96c6\u3002\u5509\u5509\uff0c\u8d77\u7801\u505a\u51fa\u6765\u4e86\u3002\u3002\u3002</p> <p>\u6700\u5f00\u59cb\u4e00\u76f4wa\uff0c\u4f46\u662f\u6ca1\u60f3\u5230\u54eawa\u4e86\uff0c\u72b6\u6001\u4e0d\u592a\u597d\u54c8\u3002\u3002\u3002</p> <p>\u800c\u4e14bfs\u76f4\u63a5\u628a\u76f8\u8fde\u7684\u5b50\u8282\u70b9\u52a0\u5165\u961f\u5217\u5c31\u884c\u554a\u3002\u6211\u592a\u5510\u4e86\u3002</p> <p>\u4e0d\u7528bfs\u4e5f\u53ef\u4ee5\u5199\uff0c\u56e0\u4e3a\u5176\u5b9e\u6bcf\u4e00\u5c42\u7684\u6bcf\u4e00\u4e2a\u70b9\uff0c\u5b83\u4eec\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u4e00\u5b9a\u662f\u76f8\u540c\u7684\u3002</p> <pre><code>constexpr int mod = 998244353; // 998244353\n\nvoid solve()\n{\n    int n;\n    cin &gt;&gt; n;\n    vi p(n + 1);\n    vector&lt;vi&gt; adj(n + 1, vi());\n    for (int i = 2; i &lt;= n; i++) {\n        cin &gt;&gt; p[i];\n        adj[p[i]].push_back(i);\n    }\n    vi d(n + 1);\n    // vector&lt;vi&gt; g(n + 1, vi());\n    vi cnt(n+1);\n    auto dfs1 = [&amp;](auto&amp;&amp; self, int u) -&gt; void {\n        // g[d[u]].push_back(u);\n        cnt[d[u]]++;\n        for (auto v : adj[u]) {\n            d[v] = d[u] + 1;\n            self(self, v);\n        }\n    };\n    dfs1(dfs1, 1);\n    vector&lt;ll&gt; res(n + 1);\n    ll ans = 1;\n    res[1] = 1;\n    // auto dfs = [&amp;](auto&amp;&amp; self, int u) -&gt; void {\n    //     for (auto v : g[d[u] + 1]) {\n    //         if ((u != 1) &amp;&amp; (p[v] == u))\n    //             continue;\n    //         // ans=(ans+res[u])%mod;\n    //         res[v] = (res[v] + res[u]) % mod;\n    //         // self(self, v);\n\n    //     }\n    // };\n    // dfs(dfs, 1);\n    // for(int i=0;i&lt;n;i++){\n    //     if(g[i].empty()) break;\n    //     for(auto v:g[i])\n    //         dfs(dfs,v);\n    // }\n\n    //\u6bcf\u4e00\u5c42\u5176\u5b9e\u90fd\u662f\u56fa\u5b9a\u7684 \u53ea\u8981\u6df1\u5ea6\u76f8\u540c \u90a3\u4e48\u8d21\u732e\u4e00\u5b9a\u76f8\u540c\n\n    //\n    ans+=cnt[1];\n    res[2]=1;\n    for(int i=2;i&lt;=n;i++){\n        //\u6bcf\u4e00\u4e2a\u6df1\u5ea6\u4e3ai\u7684\u70b9 \u5230\u8fbe\u7684\u65b9\u5f0f\u6570\u90fd\u4e3a cnt[i-1]*res[i-1]\n        res[i]=(cnt[i-1]-1)*res[i-1]%mod;\n        ans=(ans+res[i]*cnt[i]%mod)%mod;\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre> <p>\u6ca1\u4e8b\uff0c\u5199\u51fa\u6765\u5c31\u597d\u3002</p>"},{"location":"cp_solving/Codeforces/2071/","title":"Codeforces Round 1007 (Div. 2)","text":"<p>\u6bd4\u8d5b\u65f6\u95f4\uff1a2025-03-01</p>"},{"location":"cp_solving/Codeforces/2071/#codeforces-round-1007-div-2","title":"Codeforces Round 1007 (Div. 2)","text":"<p>\u6bd4\u8d5b\u94fe\u63a5: https://codeforces.com/contest/2071</p> <p>\u6700\u4e22\u4eba\u7684\u4e00\u96c6\uff0c\u518d\u6b21 div2 \u53ea\u5199\u51fa\u4e24\u9898\u3002\u4f46\u662f\u6709\u4e00\u8bf4\u4e00\uff0c\u611f\u89c9\u8fd9\u573aC\u662f\u6bd4\u4e0a\u573aD\u96be\u7684\uff0c\u6216\u8005\u8bf4\u5dee\u4e0d\u591a\u3002\u3002\u3002</p> <p>\u8d5b\u65f6\u5dee\u4e0d\u591a\u4e5f\u662f\u4e09\u5343\u591a\u4eba\u8fc7\u4e86C\uff0c\u8d5b\u65f6\u6211\u597d\u50cf\u6ca1\u600e\u4e48\u5199\u51fa\u8fc7\u901a\u8fc7\u8fd9\u4e2a\u4eba\u6570\u7684\u9898\u3002\u3002\u300210\u5206\u949f\u628aAB\u5199\u4e86\uff0c\u7136\u540e\u540e\u9762\u60f3\u4e86\u4e00\u5c0f\u65f6C\uff0c\u4e00\u70b9\u601d\u8def\u6ca1\u6709\u3002\u770b\u4e86\u9898\u89e3\u7684\u60f3\u6cd5\uff0c\u600e\u4e48\u8fd9\u4e48\u7b80\u5355\u3002\u4e14\u6709\u9053\u7406\u3002\u3002</p> <p>D\u6211\u540e\u9762\u81ea\u5df1\u770b\u770b\u5148\u3002</p>"},{"location":"cp_solving/Codeforces/2071/#a","title":"A","text":"<p>\u81ea\u5df1\u63a8\u4e00\u4e0b\u7136\u540e\u770b\u770b\u6837\u4f8b\u731c\u4e00\u4e0b\uff0c\u6bd4\u5982\u7b2c\u4e00\u573a\u80af\u5b9a\u4e0d\u884c\uff0c\u7b2c\u4e09\u573a\u4e5f\u4e0d\u884c\uff0c\u56e0\u4e3a\u5982\u679c\u7b2c\u4e00\u573a\u4f11\u606f\u7684\u4eba\u7b2c\u4e09\u573a\u4f11\u606f\uff0c\u90a3\u4e48\u5c31\u4f1a\u6709\u4e00\u4e2a\u4eba\u8d62\u4e86\u4e09\u573a\u3002\u770b\u770b\u6837\u4f8b\uff0c\u5927\u6982\u4e5f\u662f\u53ea\u6709\u6a21\u4e09\u7b49\u4e8e\u4e00\u7684\u65f6\u5019\u662fYES\u3002</p> <pre><code>void solve()\n{\n    int n;\n    cin&gt;&gt;n;\n    cout&lt;&lt;(n%3==1?\"YES\\n\":\"NO\\n\");\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2071/#b","title":"B","text":"<p>\u770b\u7740\u6709\u70b9\u5413\u4eba\uff0c\u4f46\u5176\u5b9e\u601d\u8def\u5f88\u7b80\u5355\u3002\u53ea\u8981\u6c42\u6bcf\u4e2a\u524d\u7f00\u7684\u548c\u4e0d\u4e3a\u5b8c\u5168\u5e73\u65b9\u6570\uff0c\u90a3\u4e48\u6211\u4eec\u5176\u5b9e\u987a\u7740\u653e\u5c31\u884c\u4e86\uff0c\u5982\u679c\u52a0\u4e0a\u4e0b\u4e00\u4e2a\u6570\u4f1a\u53d8\u6210\u5b8c\u5168\u5e73\u65b9\u6570\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u8df3\u4e00\u4e2a\u52a0\u5457\u3002\u6240\u4ee5\u76f4\u63a5\u7528\u4e2a\u6570\u7ec4\u6216\u8005\u961f\u5217\u64cd\u4f5c\u4e00\u4e0b\u5c31\u884c\u3002\u5982\u679c\u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u4e86\uff0c\u90a3\u4e48\u8bf4\u660en\u4e2a\u6570\u5b57\u52a0\u8d77\u6765\u6070\u597d\u662f\u5b8c\u5168\u5e73\u65b9\u6570\uff0c\u90a3\u4e48\u5c31\u80af\u5b9a\u4e0d\u884c\u3002</p> <pre><code>void solve()\n{\n    int n;\n    cin&gt;&gt;n;\n    long long sum=0;\n    priority_queue&lt;int&gt;q;\n    for(int i=n;i&gt;=1;i--)\n        q.push(i);\n    auto check=[](long long x){\n        long long y=(long long)sqrt(x);\n        return x!=y*y;\n    };\n    vector&lt;int&gt;ans;\n    while(!q.empty()){\n        if(check(sum+q.top())){\n            ans.push_back(q.top());\n            sum+=q.top();\n            q.pop();\n        }else{\n            int x=q.top();\n            q.pop();\n            if(q.empty()){\n                cout&lt;&lt;\"-1\\n\";\n                return;\n            }\n            ans.push_back(q.top());\n            sum+=q.top();\n            q.pop();\n            q.push(x);\n\n        }\n    }\n    for(auto x:ans)\n        cout&lt;&lt;x&lt;&lt;\" \";\n    cout&lt;&lt;'\\n';\n}\n</code></pre> <p>\u7528\u6570\u7ec4\u5565\u7684\u90fd\u884c\u3002\u5176\u5b9e\u6211\u5224\u5f97\u662f\u4e0d\u662f\u4e5f\u4e0d\u591f\u4e25\u683c\uff0c\u6709\u6ca1\u6709\u53ef\u80fd\u52a0\u4e0a\u4e0b\u4e00\u4e2a\u6570\uff0c\u4ecd\u662f\u5b8c\u5168\u5e73\u65b9\u6570\uff0c\u4f46\u662f\u5e94\u8be5\u5f88\u5c11\u5f88\u5c11\u7684\u53ef\u80fd\u6027\u3002</p>"},{"location":"cp_solving/Codeforces/2071/#c","title":"C","text":"<p>\u81ea\u5df1\u770b\u611f\u89c9\u975e\u5e38\u7684\u96be\u53d7\uff0c\u770b\u5b8c\u9898\u89e3\u600e\u4e48\u8fd9\u4e48\u723d\u3002\u3002</p> <p>\u4ee5 \\(en\\) \u4e3a\u6839\u8282\u70b9\uff0c\u7136\u540e\u6bcf\u6b21\u6211\u4eec\u4f7f\u7528\u6df1\u5ea6\u6700\u6df1\u7684\u70b9\u3002\u628a\u8fd9\u4e2a\u6df1\u5ea6\u7684\u70b9\u7528\u5b8c\u4e4b\u540e\uff0c\u8001\u9f20\u6240\u5728\u7684\u70b9\u5c31\u4e0d\u53ef\u80fd\u4f1a\u5c0f\u4e8e\u8fd9\u4e2a\u6df1\u5ea6\u3002\u6240\u4ee5\u6211\u4eec\u53ea\u8981\u4e00\u5c42\u4e00\u5c42\u7684\u4f7f\u7528\uff0c\u5c31\u4e00\u5b9a\u4f1a\u8ba9\u5b83\u79fb\u52a8\u5230\u6839\u8282\u70b9\u3002</p> <pre><code>void solve()\n{\n    int n, st, en;\n    cin &gt;&gt; n &gt;&gt; st &gt;&gt; en;\n    vector&lt;vector&lt;int&gt;&gt; adj(n + 1, vector&lt;int&gt;());\n    for (int i = 1; i &lt; n; i++) {\n        int u, v;\n        cin &gt;&gt; u &gt;&gt; v;\n        adj[u].push_back(v);\n        adj[v].push_back(u);\n    }\n    vector&lt;int&gt; dep(n + 1);\n    vector&lt;vector&lt;int&gt;&gt; g(n + 1, vector&lt;int&gt;());\n    auto dfs1 = [&amp;](auto&amp;&amp; self, int u, int pre) -&gt; void {\n        g[dep[u]].push_back(u);\n        for (auto v : adj[u]) {\n            if (v == pre)\n                continue;\n            dep[v] = dep[u] + 1;\n            self(self, v, u);\n        }\n    };\n    dfs1(dfs1, en, -1);\n    vector&lt;int&gt; ans;\n    for (int i = n; i &gt;= 0; i--) {\n        for (auto v : g[i])\n            ans.push_back(v);\n    }\n    for (auto x : ans)\n        cout &lt;&lt; x &lt;&lt; \" \";\n    cout &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2071/#d","title":"D","text":"<p>\u6211\u771f\u50bb\u771f\u7684\uff0c\u6211\u53ea\u6ce8\u610f\u5230\u65b0\u52a0\u5165\u7684\u6570\u5b57\uff0c\u4e00\u5b9a\u7b2c\u5947\u6570\u4f4d\u662f\u548c\u524d\u4e00\u4f4d\u76f8\u540c\u3002\u4f46\u6211\u6ca1\u6709\u60f3\u5230\u8fd9\u610f\u5473\u7740\u4e2d\u95f4\u7684 $a_{n+1}\\oplus a_{n+2}=0 $ , $a_{n+3}\\oplus a_{n+4}=0 $  ,$a_{n+5}\\oplus a_{n+6}=0 $  ... \u5927\u90e8\u5206\u90fd\u4f1a\u88ab\u6d88\u6389\u7684\u3002</p> <p>\u800c\u4e14\u6211\u8fd8\u6ca1\u6ce8\u610f\u5230\u8fd9\u9898\u91cc \\(l=r\\) \uff0c\u6211\u4e00\u76f4\u60f3\u600e\u4e48\u6c42\u548c\u5462\u3002\u3002\u3002</p> <p>\u5148\u8ba9 \\(n\\) \u4e3a\u5947\u6570\uff0c\u82e5\u4e0d\u662f\u5947\u6570\u52a0\u4e00\u9879\u5c31\u884c\u3002\u8fd9\u6837\u540e\u9762\u6bcf\u6b21\u90fd\u662f\u8fde\u7740\u51fa\u73b0\u4e24\u4e2a\u4e00\u6837\u7684\u3002\u8bbe \\(pre\\) \u4e3a\u524d\u7f00\u5f02\u6216\u548c\u6570\u7ec4\u3002</p> <p>$a_{2m}=a_{2m+1}=pre_{m} $ \uff0c\u82e5 \\(m\\) \u4e3a\u5947\u6570\uff0c\u663e\u7136 \\(pre_m=pre_n\\) .</p> <p>\u5426\u5219 $pre_m=pre_n \\oplus a_m $ , \u56e0\u4e3a\u4e2d\u95f4\u7684\u9879\u5168\u88ab\u6d88\u4e86\u3002</p> <p>\u6240\u4ee5\u9012\u5f52\u6c42\u5c31\u884c\u3002\u56e0\u4e3a\u8003\u8651\u7684\u662f \\(\\frac{m}{2}\\) \u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u6211\u4eec\u5148\u628a \\(2n\\) \u7684\u60c5\u51b5\u9884\u5148\u5904\u7406\u51fa\u6765\u3002</p> <pre><code>constexpr int N = 2e5+1;\nint a[N&lt;&lt;1], pre[N&lt;&lt;1];\n\nvoid solve()\n{\n    // n\u4e3a\u5947\u6570\u65f6\n    // a[n+1]=a[n+2]\n    // a[n+3]=a[n+4]\n    // a[2m]=a[2m+1] \u8bbe p = xor[1,n]\n    // \u90a3\u4e48\u5982\u679c m&amp;1 ,res=p\n    // \u53ef\u4ee5\u5f04\u5230 m&lt;=2*n\n    int n;\n    long long l, r;\n    cin &gt;&gt; n &gt;&gt; l &gt;&gt; r;\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; a[i], pre[i] = pre[i - 1] ^ a[i];\n    if (n % 2 == 0) {\n        n++;\n        a[n] = pre[n &gt;&gt; 1];\n        pre[n] = pre[n - 1] ^ a[n];\n    }\n    for (int i = n + 1; i &lt;= 2 * n; i++) {\n        a[i] = pre[i &gt;&gt; 1];\n        pre[i] = pre[i - 1] ^ a[i];\n    }\n    // \u521a\u521a\u8fd8\u5728\u60f3 \u4e0d\u662f\u6c42\u548c\u5417\u3002\u3002\u3002\n    // \u539f\u6765\u5728\u8fd9\u4e2a\u9898\u91cc l=r\u3002\u3002\u3002\u624d\u53d1\u73b0\u554a\u00b7\u00b7\n    //  n]\n    auto query = [&amp;](auto self, long long i) -&gt; int {\n        if (i &lt;= 2 * n)\n            return a[i];\n        if (i &gt;&gt; 1 &amp; 1)\n            return pre[n];\n        return pre[n] ^ self(self, i / 2);\n    };\n    cout &lt;&lt; query(query, l) &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2072/","title":"Codeforces Round 1006 (Div. 3)","text":"<p>2025\u5e742\u670826\u65e5</p> <p>VP \uff0c\u6628\u665a\u6ca1\u6253\u3002</p>"},{"location":"cp_solving/Codeforces/2072/#codeforces-round-1006-div-3","title":"Codeforces Round 1006 (Div. 3)","text":"<p>\u6bd4\u8d5b\u94fe\u63a5: https://codeforces.com/contest/2072</p> <p>\u5509\u5509\uff0c\u6709\u70b9\u83dc\u4e86\u3002</p> <p>\u4e0a\u8bfevp\u7684\uff0cF vp\u7ed3\u675f\u534a\u5c0f\u65f6\u624dac\u3002\u6bcf\u9898\u90fd\u5199\u592a\u6162\u4e86\u3002\u3002\u3002</p>"},{"location":"cp_solving/Codeforces/2072/#a","title":"A","text":"<p>\\(k\\) \u662f\u6b63\u6570\u6216\u8005\u8d1f\u6570\u662f\u6ca1\u6709\u4ec0\u4e48\u4e0d\u4e00\u6837\u7684\uff0c\u6240\u4ee5\u76f4\u63a5\u8ba9 \\(k\\) \u4e00\u76f4\u4e3a\u6b63\u6570\u5c31\u597d\u4e86\u3002\u7136\u540e\u5176\u5b9e\u5c31\u662f\u76f4\u63a5\u8f93\u51fa \\(\\frac{k}{p}\\) \u5411\u4e0a\u53d6\u6574\u5c31\u597d\u4e86\u3002</p> <pre><code>void solve() {\n    int n,k,p;\n    cin&gt;&gt;n&gt;&gt;k&gt;&gt;p;\n    k=abs(k);\n    int ans=(k-1)/p+1;\n    if(k==0) ans=0;\n    cout&lt;&lt;(ans&gt;n?-1:ans)&lt;&lt;'\\n'; \n}\n</code></pre> <p>\u6211\u8d5b\u65f6\u5199\u7684\u6709\u70b9\u5510\u3002</p> <pre><code>void solve() {\n    int n,k,p;\n    cin&gt;&gt;n&gt;&gt;k&gt;&gt;p;\n    if(!k) {\n        cout&lt;&lt;\"0\\n\";\n        return;\n    }\n    int sum=0;\n    for(int i=1; i&lt;=n; i++) {\n        for(int j=1; j&lt;=p; j++) {\n            if(sum&lt;=k) break;\n            sum--;\n        }\n        for(int j=1; j&lt;=p; j++) {\n            if(sum&gt;=k) break;\n            sum++;\n        }\n        if(sum==k){\n            cout&lt;&lt;i&lt;&lt;\"\\n\";\n            return;\n        }\n    }\n    cout&lt;&lt;\"-1\\n\";\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2072/#b","title":"B","text":"<p>\u5bf9\u4e8e\u6bcf\u4e00\u4e2a <code>_</code> \uff0c\u5b83\u7684\u8d21\u732e\u662f \u5b83\u524d\u9762\u7684 <code>_</code> \u7684\u6570\u91cf\u4e58 \u5b83\u540e\u9762\u7684 <code>_</code> \u7684\u6570\u91cf\u3002\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u7684\u60f3\u5230\uff0c\u628a\u4e00\u4e2a\u6570\u62c6\u6210\u4e24\u4e2a\u6570\uff0c\u4f7f\u5f97\u5b83\u4eec\u7684\u4e58\u79ef\u6700\u5927\uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u6570\u4e00\u5b9a\u662f\u8981\u5c3d\u91cf\u76f8\u7b49\u3002</p> <p>\u6240\u4ee5\u6211\u4eec\u91cd\u65b0\u6392\u5217\u7684\u5b57\u7b26\u4e32\uff0c\u80af\u5b9a\u662f <code>_</code> \u5168\u90e8\u653e\u4e2d\u95f4\uff0c\u524d\u9762\u540e\u9762\u7684 <code>-</code> \u5404\u653e\u4e00\u534a\u3002</p> <pre><code>void solve()\n{\n    int n;\n    string s;\n    cin&gt;&gt;n&gt;&gt;s;\n    int x=count(s.begin(),s.end(),'_');\n    if((n-x)&amp;1){\n        cout&lt;&lt;1LL*(n-x)/2*((n-x)/2+1)*x&lt;&lt;'\\n';\n    }else{\n        cout&lt;&lt;1LL*(n-x)/2*(n-x)/2*x&lt;&lt;'\\n';\n    }\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2072/#c","title":"C","text":"<p>\u6570\u7ec4\u7684 \\(MEX\\) \u5982\u679c\u8981\u8fbe\u5230 \\(x\\) \u90a3\u4e48\u4e00\u5b9a\u4f1a\u6709 \\([0,x-1]\\) \u4e4b\u95f4\u7684\u6bcf\u4e00\u4e2a\u6570\u5b57\u3002\u7531\u4e8e\u6570\u7ec4 \\(a\\) \u6309\u4f4d\u6216\u8981\u7b49\u4e8e \\(x\\) \uff0c\u6bcf\u4e2a\u6570\u5b57\u6bcf\u4e00\u4f4d\u53ea\u6709\u5728 \\(x\\) \u4e3a \\(1\\) \u7684\u4f4d\u624d\u80fd\u4e3a \\(1\\) \u3002</p> <p>\u6211\u4eec\u76f4\u63a5\u4ece \\([0,n]\\) \u5f00\u59cb\u5c1d\u8bd5\u80fd\u4e0d\u80fd\u628a \\(i\\) \u52a0\u5165\u6570\u7ec4\uff0c\u5982\u679c\u4e0d\u884c\uff0c\u90a3\u4e48\u53ef\u4ee5\u76f4\u63a5\u4e0d\u7528\u770b\u540e\u9762\u7684\u6570\u4e86\uff0c\u56e0\u4e3a\u6570\u7ec4\u91cc\u4e0d\u53ef\u80fd\u6709 \\(i\\) \u4e86\uff0c\\(MEX\\) \u53ea\u80fd\u4e3a \\(i\\) \uff0c\u5c31\u6ca1\u5fc5\u8981\u770b\u5176\u4ed6\u7684\u6570\u5b57\u4e86\uff0c\u5982\u679c\u53ef\u4ee5\u5c31\u52a0\u5165\u7b54\u6848\u4e2d\u3002</p> <p>\u5728\u4e0a\u4e00\u6b65\u5faa\u73af\u7ed3\u675f\u540e\uff0c\u6211\u4eec\u6dfb\u52a0\u7684\u6570\u5b57\u4e2a\u6570\u4e00\u5b9a\u5c0f\u4e8e\u7b49\u4e8e \\(n\\) \u3002\u5982\u679c\u5c0f\u4e8e \\(n\\) \uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5f80\u91cc\u9762\u653e \\(x\\) \uff0c\u8fd9\u6837\u5b83\u4eec\u6309\u4f4d\u6216\u4e00\u5b9a\u4f1a\u7b49\u4e8e \\(x\\) \u3002\u5982\u679c\u7b49\u4e8e \\(n\\) \uff0c\u90a3\u4e48\u9700\u8981\u68c0\u67e5\u5b83\u4eec\u6309\u4f4d\u6216\u80fd\u4e0d\u80fd\u7b49\u4e8e \\(x\\) \uff0c\u4e0d\u884c\u5219\u628a\u6700\u5927\u7684\u4e00\u4e2a\u6570\u5b57\u6362\u6210 \\(x\\) \u3002</p> <pre><code>void solve() {\n    int n,x;\n    cin&gt;&gt;n&gt;&gt;x;\n    vector&lt;int&gt;ans;\n    int now=0;\n    for(int i=0; i&lt;n; i++) {\n        if((i|x)==x) ans.push_back(i);\n        else break;\n        now|=i;\n    }\n    while(ans.size()==n&amp;&amp;now!=x)\n        ans.pop_back();\n    if(ans.size()&lt;n){\n        while(ans.size()&lt;n)\n            ans.push_back(x);\n        now|=x;\n    }\n    //assert(now==x);\n    for(auto y:ans)\n        cout&lt;&lt;y&lt;&lt;' ';\n    cout&lt;&lt;'\\n';\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2072/#d","title":"D","text":"<p>\u53ea\u80fd\u505a\u4e00\u6b21\u64cd\u4f5c\uff0c\u53ef\u4ee5\u628a\u4e00\u4e2a\u6570\u5b57 \\(a_l\\) \u79fb\u52a8\u5230 \\(a_r\\) \u7684\u540e\u9762\uff0c\u8981\u4f7f\u5f97\u64cd\u4f5c\u4e4b\u540e\uff0c\u6570\u7ec4\u4e2d\u7684\u9006\u5e8f\u5bf9\u6700\u5c11\u3002</p> <p>\u8ba1\u7b97 \\(i\\) \u79fb\u52a8\u5230 \\(j\\) \u4f1a\u4f7f\u9006\u5e8f\u5bf9 \u589e\u52a0/\u51cf\u5c11 \u591a\u5c11\u3002\u7136\u540e \\(i\\) \u79fb\u52a8\u5230 \\(j+1\\) , \u662f\u53ef\u4ee5\u901a\u8fc7\u79fb\u52a8\u5230 \\(j\\) \u7684\u7b54\u6848\u7b97\u51fa\u6765\u7684\u3002</p> <p>\u8d34\u4e00\u4e0b <code>jiangly</code> \u7684\u4ee3\u7801\u3002\u975e\u5e38\u7684\u7b80\u6d01\u554a\uff0c\u6211\u786e\u5b9e\u6ca1\u60f3\u5230\u8fd9\u79cd\u6b63\u5e38\u7684\u505a\u6cd5...</p> <pre><code>void solve() {\n    int n;\n    std::cin &gt;&gt; n;\n\n    std::vector&lt;int&gt; a(n);\n    for (int i = 0; i &lt; n; i++) {\n        std::cin &gt;&gt; a[i];\n    }\n\n    int sum = 0;\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = 0; j &lt; i; j++) {\n            sum += (a[i] &lt; a[j]);\n        }\n    }\n\n    int ans = sum;\n    int l = 0, r = 0;\n    for (int i = 0; i &lt; n; i++) {\n        int cur = sum;\n        for (int j = i + 1; j &lt; n; j++) {\n            cur -= (a[i] &gt; a[j]);\n            cur += (a[i] &lt; a[j]);\n            if (cur &lt; ans) {\n                ans = cur;\n                l = i;\n                r = j;\n            }\n        }\n    }\n    std::cout &lt;&lt; l + 1 &lt;&lt; \" \" &lt;&lt; r + 1 &lt;&lt; \"\\n\";\n}\n</code></pre> <p>\u6211\u8fd9\u505a\u6cd5\u592a\u9ebb\u70e6\u4e86\u3002</p> <p>\u7531\u4e8e\u6570\u636e\u5f88\u5c0f\uff0c\u53ef\u4ee5\u76f4\u63a5\u679a\u4e3e\u6bcf\u4e00\u5bf9\u53ef\u80fd\u7684\u4ea4\u6362\uff0c\u7136\u540e\u8ba1\u7b97\u6700\u5927\u7684\u8d21\u732e\u3002\u628a \\(a_l\\) \u79fb\u52a8\u5230 \\(a_r\\) \u7684\u540e\u9762\uff0c\u4f1a\u8ba9\u7b54\u6848 \u51cf\u53bb \\([l+1,r]\\) \u4e4b\u95f4\u5c0f\u4e8e \\(a_l\\) \u7684\u6570\u5b57\u7684\u6570\u91cf\uff0c\u52a0\u4e0a \\([l+1,r]\\) \u4e4b\u95f4\u5927\u4e8e \\(a_l\\) \u7684\u6570\u5b57\u7684\u6570\u91cf\u3002</p> <p>\u8ba1\u7b97\u6bcf\u4e00\u4e2a\u533a\u95f4\u7684\u8d21\u732e\uff0c\u7136\u540e\u9009\u51fa\u4f7f\u7b54\u6848\u51cf\u5c11\u6700\u591a\u7684\u3002</p> <p>\u53ef\u4ee5\u7528\u524d\u7f00\u548c\u9884\u5904\u7406\u51fa\u6bcf\u4e2a\u524d\u7f00\u6bd4 \\(i\\) \u5c0f\u7684\u6570\u5b57\u7684\u6570\u91cf\u3002</p> <pre><code>constexpr int N = 2000;\n\nvoid solve() {\n    int n;\n    cin&gt;&gt;n;\n    vector&lt;int&gt;a(n+1);\n    vector&lt;vector&lt;int&gt;&gt;cnt(n+1,vector&lt;int&gt;(N+1)),tnc(n+1,vector&lt;int&gt;(N+1));\n    for(int i=1; i&lt;=n; i++) {\n        cin&gt;&gt;a[i];\n        cnt[i]=cnt[i-1];\n        tnc[i]=tnc[i-1];\n        for(int j=a[i]+1; j&lt;=N; j++)\n            cnt[i][j]++;//\u524d\u9762\u7684\u6bd4\u5b83\u5c0f\u7684\u6570\u5b57\n        for(int j=1; j&lt;a[i]; j++)\n            tnc[i][j]++;\n    }\n    auto calc=[&amp;](int i,int j) {\n        int res=0;\n        res+=tnc[j][a[i]]-tnc[i][a[i]];//[i,j]\u4e4b\u95f4\u7684\u6bd4a[i]\u5927\u7684\u6570\u5b57\n        res-=cnt[j][a[i]]-cnt[i][a[i]];\n        return res;\n    };\n    vector&lt;array&lt;int,3&gt;&gt;ans;\n    for(int i=1; i&lt;=n; i++) {\n        for(int j=i+1; j&lt;=n; j++) {\n            ans.push_back({i,j,calc(i,j)});\n        }\n    }\n    sort(ans.begin(),ans.end(),[](array&lt;int,3&gt;x,array&lt;int,3&gt;y) {\n        return x[2]&lt;y[2];\n    });\n    if(ans.empty()||ans[0][2]&gt;0)\n        cout&lt;&lt;\"1 1\\n\";\n    else\n        cout&lt;&lt;ans[0][0]&lt;&lt;\" \"&lt;&lt;ans[0][1]&lt;&lt;'\\n';\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2072/#e","title":"E","text":"<p>\u7a0d\u5fae\u63a8\u4e00\u4e0b\u6216\u8005\u60f3\u4e00\u4e0b\u5c31\u80fd\u53d1\u73b0\uff0c\u6ee1\u8db3\u6761\u4ef6\u7684\u70b9\u5bf9\u4e00\u5b9a\u662f \\(x\\) \u76f8\u540c\u6216\u8005 \\(y\\) \u76f8\u540c\u3002\u4f46\u662f\u6ce8\u610f \\(n\\) \u662f\u6709\u9650\u5236\u7684\uff0c\u4e14\u6bd4\u8f83\u5c0f\u3002</p> <p>\u6240\u4ee5\u6211\u4eec\u9700\u8981\u8ba9\u6709\u7684\u6c34\u5e73\u7684\u7ebf\u4e0a\u70b9\u5c3d\u91cf\u7684\u591a\u3002</p> <p>\u4f46\u662f\u4e4b\u540e\u7684\u4e5f\u8981\u8003\u8651\u4e0d\u8981\u548c\u5b83\u4eec\u6a2a\u5750\u6807\u6216\u7eb5\u5750\u6807\u76f8\u540c\u3002</p> <p>\u5176\u5b9e\u53ef\u4ee5\u9012\u5f52\uff0c\u611f\u89c9\u4f1a\u6bd4\u8f83\u597d\u770b\u3002</p> <pre><code>void solve()\n{\n    int k;\n    cin&gt;&gt;k;\n    if(!k){\n        cout&lt;&lt;\"0\\n\";\n        return;\n    }\n    int X=1,Y=1;\n    vector&lt;pair&lt;int,int&gt;&gt;ans;\n    auto work=[&amp;](int cnt){\n        int sum=1;\n        int x=2;\n        ans.push_back({X,++Y});\n        ans.push_back({X,++Y});\n        while(sum+x&lt;cnt){\n            sum+=x;\n            x++;\n            ans.push_back({X,++Y});\n        }\n        ++X,Y+=2;\n        return sum;\n    };\n    int now=0;\n    while(now&lt;k){\n        now+=work(k-now);\n    }\n    cout&lt;&lt;ans.size()&lt;&lt;'\\n';\n    for(auto it:ans)\n        cout&lt;&lt;it.first&lt;&lt;\" \"&lt;&lt;it.second&lt;&lt;'\\n';\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2072/#f","title":"F","text":"<p>\u76f4\u63a5\u6253\u8868\u627e\u89c4\u5f8b\uff0c\u53d1\u73b0\u5927\u5c0f\u4e3a2\uff0c4\uff0c8\uff0c16\u8fd9\u4e9b\u7684\u4e09\u89d2\u5f62\uff0c\u90fd\u662f\u7531\u4e09\u4e2a\u5927\u5c0f\u4e3a\u5b83\u4eec\u4e8c\u5206\u4e4b\u4e00\u7684\u4e09\u89d2\u5f62\u62fc\u6210\u7684\uff0c\u4e2d\u95f4\u90e8\u5206\u90fd\u662f0\u3002</p> <p>\u7136\u540e\u5c31\u53ef\u4ee5\u76f4\u63a5DFS\u4e86\uff0c\u5f53\u7136\u8fd8\u6709\u5176\u4ed6\u5f88\u7b80\u5355\u7684\u65b9\u6cd5\uff0c\u4f46\u662fDFS\u4e5f\u633a\u597d\u5199\u7684\u3002</p> <pre><code>int val;\nvector&lt;int&gt;dfs(int k)\n{\n    if(k==1){\n        return {0,val};\n    }\n    vector&lt;int&gt;res(k+1);\n    int x=k-(1&lt;&lt;__lg(k));\n    if(!x) x=k&gt;&gt;1;\n    vector&lt;int&gt;nxt=dfs(x);\n    for(int i=1;i&lt;=x;i++)\n        res[i]=nxt[i];\n    auto it=nxt.rbegin();\n    for(int i=k,j=x;i&gt;=k-x+1;i--,j--)\n        res[i]=nxt[j];\n    return res;\n}\nvoid solve()\n{\n//  vector&lt;vector&lt;char&gt;&gt;a(100,vector&lt;char&gt;(100));\n//  for(int i=1;i&lt;=99;i++)\n//      for(int j=1;j&lt;=i;j++){\n//          if(j==1||j==i) a[i][j]='k';\n//          else{\n//              if(a[i-1][j-1]==a[i-1][j])\n//                  a[i][j]='0';\n//              else\n//                  a[i][j]='k';\n//          }\n//          cout&lt;&lt;a[i][j]&lt;&lt;\" \\n\"[j==i];\n//      }\n    //every triangle consists of 3 small one ,and the center part are all 0\n    //for example,if n=7:\n    //size 8 triangle consists of 3 4-size triangle\n    //so the problem is to find 3-size trangle\n    //*\n    //** so k0k k0k 0 k0k\n    int k;\n    cin&gt;&gt;k&gt;&gt;val;\n    vector&lt;int&gt;res=dfs(k);\n    for(int i=1;i&lt;=k;i++)\n        cout&lt;&lt;res[i]&lt;&lt;\" \\n\"[i==k];\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2072/#g","title":"G","text":"<p>\u5bf9\u4e8e \\(p\\le \\sqrt n\\) \u7684\u90e8\u5206\uff0c\u76f4\u63a5\u6c42\u89e3\u3002</p> <p>\u5bf9\u4e8e \\(\\sqrt n &lt; p \\le n\\) \u7684\u90e8\u5206\uff0c \\(n\\) \u7684 \\(p\\) \u8fdb\u5236\u6709\u4e14\u4ec5\u67092\u4f4d\u6570\u5b57\u3002</p> <p>\u4f4e\u4f4d\u662f \\(n\\) mod \\(p\\) = $n-p \\cdot \\lfloor \\frac{n}{p} \\rfloor   $  , \u9ad8\u4f4d\u662f \\(\\lfloor\\frac{n}{p}\\rfloor\\) .</p> <p>\u6b64\u65f6 $rev(n,p) = $ \\(p(n-p\\cdot \\lfloor \\frac{n}{p} \\rfloor)+\\lfloor\\frac{n}{p}\\rfloor=pn-p^2\\lfloor\\frac{n}{p}\\rfloor+\\lfloor\\frac{n}{p}\\rfloor\\) </p> <p>\u5bf9\u4e8e \\(i\\) \uff0c\u6700\u540e\u4e00\u4e2a\u6ee1\u8db3 $\\lfloor\\frac{n}{j}\\rfloor= $ \\(\\lfloor\\frac{n}{i}\\rfloor\\) \u7684 \\(j\\) \u662f \\(\\lfloor \\frac{n}{\\lfloor\\frac{n}{i}\\rfloor} \\rfloor\\) .</p> <p>\u56e0\u4e3a \u5f53 \\(\\lfloor\\frac{n}{i}\\rfloor=k\\) \u65f6\uff0c $k \\le \\lfloor\\frac{n}{i}\\rfloor &lt; k+1 $ \uff0c \u53ef\u4ee5\u53d8\u5f62\u4e3a \\(\\frac {n}{k+1} &lt; i \\le \\frac{n}{k}\\) \uff0c\u6240\u4ee5\u6ee1\u8db3\u6761\u4ef6\u7684\u6700\u5927\u6574\u6570\u5373\u4e3a \\(\\lfloor \\frac{n}{k} \\rfloor\\) .</p> <p>\u90a3\u4e48 \\([i,j]\\) \u8fd9\u4e00\u6bb5\u7684  \\(\\lfloor\\frac{n}{p}\\rfloor\\) \u90fd\u662f\u76f8\u7b49\u7684 \u3002</p> <p>\u6574\u4e86\u597d\u4e45\u6837\u4f8b\u90fd\u4e0d\u5bf9\uff0c\u7136\u540e\u770b\u4e86\u773c\u9898\u76ee\u53d1\u73b0mod\u53d6\u9519\u4e86\u3002\u3002\u3002\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\n// #define int long long\nconstexpr int N = 3e5;\n// constexpr int mod = 998244353;\nconstexpr int mod = 1e9 + 7;\n//\u516d\u767e\u516d\u5341\u516d mod \u53d6\u9519\u4e86\u3002\u3002\u3002\n\nvector&lt;long long&gt; s1(N + 1);\n\nvoid solve()\n{\n    int n;\n    long long k;\n    cin &gt;&gt; n &gt;&gt; k;\n    // pn-p*p*(n/p)+n/p\n    long long ans = 0;\n    if (k &gt; n) {\n        ans += ((k - n) % mod) * n % mod;\n        k = n;\n    }\n    for (int i = 2; i &lt;= k; i++) {\n        if (1LL * i * i &lt;= n) {\n            vector&lt;int&gt; v;\n            int x = n;\n            while (x) {\n                v.push_back(x % i);\n                x /= i;\n            }\n            for (auto j : v)\n                x = x * i + j;\n            ans = (ans + x) % mod;\n        } else {\n            int L = i;\n            auto calc = [](int l, int r) {\n                return 1LL * (r - l + 1) * (l + r) / 2 % mod;\n            };\n            while (L &lt;= k) {\n                int R = n / (n / L);\n                if (R &gt; k)\n                    R = k;\n                ans = (ans - ((s1[R] - s1[L - 1]) % mod) * (n / L) % mod) % mod;\n                ans = (ans + 1LL * calc(L, R) * n % mod) % mod;\n                ans = (ans + 1LL * (R - L + 1) * (n / L) % mod) % mod;\n                ans = (ans + mod) % mod;\n\n                L = R + 1;\n            }\n            break;\n        }\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.tie(nullptr);\n    for (int i = 1; i &lt;= N; i++)\n        s1[i] = (s1[i - 1] + 1LL * i * i % mod) % mod;\n    int t;\n    cin &gt;&gt; t;\n    while (t--)\n        solve();\n    return 0;\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2074/","title":"Codeforces Round 1009 (Div. 3)","text":"<p>\u6bd4\u8d5b\u65f6\u95f4: 2025-03-11</p> <p>\u6bd4\u8d5b\u94fe\u63a5: https://codeforces.com/contest/2074</p> <p>\u672c\u6765 <code>carrot</code> \u9884\u6d4b\u7684\u662f\u5dee\u4e0d\u591a\u52a0\u5230\u6211\u5dee\u51e0\u5206\u4e0a\u7eff\u3002\u4f46\u662f\u4e00\u65e9\u4e0a\u9192\u6765\u53d1\u73b0\u6211\u524d\u9762\u597d\u591a\u4eba\u88ab <code>hack</code> \u4e86\uff0c\u4e2d\u5348\u7684\u65f6\u5019\u6211\u6392\u540d\u5347\u4e86 50\u540d\u3002\u7136\u540e\u665a\u4e0a\u91cd\u6d4b\u5b8c\u4e4b\u540e\uff0c\u6392\u540d\u6709\u4e0a\u5347\u4e86\u4e00\u767e\u591a\uff0c\u603b\u5171\u5347\u4e86150\u591a... \u592a\u591a\u4eba FST \u4e86\u5427\u3002</p> <p>\u4e8e\u662f\u6211\u5e78\u8fd0\u7684\u518d\u6b21\u56de\u5230\u4e86\u84dd\u540d\u3002</p> <p>\u8d5b\u65f6\u5176\u5b9e D \u9898\u5f88\u4e45\u90fd\u6ca1\u601d\u8def\uff0c\u7136\u540e\u6211\u4ee5\u4e3a\u6211 div. 3 \u4f1a\u548c div. 2 \u4e00\u6837\u7684\u9898\u6570\uff0c\u6709\u70b9\u96be\u53d7\u4e86\u3002\u4e8e\u662f\u6ca1\u62b1\u5f88\u5927\u5e0c\u671b\u53bb\u770b\u4e00\u4e0b E \u9898\uff0c\u7136\u540e\u4ee5\u4e3a\u5c31\u76f4\u63a5\u6a21\u62df\u5c31\u884c\uff0c\u4e8e\u662f\u968f\u4fbf\u4ea4\u4e00\u53d1\uff0c TLE \uff0c\u7136\u540e\u6539\u4e86\u53c8 TLE \uff0c\u4e4b\u540e\u60f3\u7740\u770b\u80fd\u4e0d\u80fd\u6df7\u8fc7\u53bb\u7528\u4e86 rand( ) \uff0c\u6beb\u65e0\u7591\u95ee\u8fc7\u4e86\uff0c\u800c\u4e14\u8fd9\u8fd8\u771f\u5c31\u662f\u6b63\u89e3\u3002\u3002\u3002</p> <p>\u6700\u540e\u770b\u5230 D \u9898\u7684\u5c0f\u63d0\u793a\uff0c\u4e5f\u6210\u529f AC \u4e86\u3002\u5c31\u662f\u6162\u4e86\u70b9\u3002\u4e0d\u8fc7\u5c3d\u7ba1\u5982\u6b64\uff0c\u8fd9\u573a\u6bd4\u8d5b\u662f\u6211 CF \u6253\u8fc7\u7684 rank \u6700\u597d\u7684\u4e00\u573a\u6bd4\u8d5b\uff0crated\u91cc\u7684 550 \u540d\u3002\u7ee7\u7eed\u52a0\u6cb9\u5427\u3002\u800c\u4e14\u5199\u5b8c\u8fd9\u7bc7\u535a\u5ba2\uff0c\u6700\u8fd1\u7684\u57fa\u672c\u5c31\u8865\u5f97\u5dee\u4e0d\u591a\u4e86\u3002\u3002\u3002\u8fd8\u6709AtCoder\u7684\uff0c\uff0c\uff0c\u611f\u89c9\u771f\u662f\u5199\u4e0d\u5b8c\u7684\u535a\u5ba2\uff0c\u8865\u4e0d\u5b8c\u7684\u9898\u76ee\u554a\u3002</p> <p>\u524d\u4e09\u9898\u6bd4\u8f83\u57fa\u7840\u5c31\u4e0d\u8be6\u7ec6\u89e3\u91ca\u4e86\u3002</p>"},{"location":"cp_solving/Codeforces/2074/#a","title":"A","text":"<pre><code>void ChatGptDeepSeek()\n{\n    array&lt;int, 4&gt;a;\n    for(int i=0;i&lt;4;i++)\n        cin&gt;&gt;a[i],a[i]=abs(a[i]);\n    sort(a.begin(),a.end());\n    if(a[0]==a[3])\n        cout&lt;&lt;\"YES\\n\";\n    else\n        cout&lt;&lt;\"NO\\n\";\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2074/#b","title":"B","text":"<pre><code>void ChatGptDeepSeek()\n{\n    int n;\n    cin&gt;&gt;n;\n    int sum=0;\n    for(int i=1;i&lt;=n;i++){\n        int x;\n        cin&gt;&gt;x;\n        sum+=x;\n    }\n    cout&lt;&lt;sum-(n-1)&lt;&lt;'\\n';\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2074/#c","title":"C","text":"<pre><code>void ChatGptDeepSeek()\n{\n    int x;\n    cin &gt;&gt; x;\n    // x+y&gt;=x^y\n    // 111\n    // 101\n    // 010\n    for (int i = 30; i &gt;= 1; i--) {\n        if (x &gt;&gt; i &amp; 1) {\n            int y = (1 &lt;&lt; i) - 1;\n            int z = x ^ y;\n            if ((x != y) &amp;&amp; z &lt; x + y &amp;&amp; x + z &gt; y &amp;&amp; y + z &gt; x) {\n                cout &lt;&lt; y &lt;&lt; '\\n';\n                return;\n            }\n        }\n    } // 11\n    // 01\n    // 10\n    cout &lt;&lt; \"-1\\n\";\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2074/#d","title":"D","text":"<p>\u672c\u4ee5\u4e3a\u8fd9\u573a div. 3 \u5c06\u4f1a\u803b\u8fb1\u5730\u53ea\u5199\u51fa 3 \u9898\uff0c\u8fd9\u4e2a D \u9898\u7ed9\u6211\u770b\u50bb\u4e86\u3002</p> <p>\u6700\u540e\u5199\u5b8c E \u9898\u56de\u6765\u770b\uff0c\u6ce8\u610f\u4e86\u4e00\u53e5\u4e4b\u524d\u6ca1\u600e\u4e48\u6ce8\u610f\u7684\u8bdd\u3002\u3002\u3002</p> <p>\u2217Is this information really useful? Don't ask me; I don't really know.</p> <p>\u56e0\u4e3a\u611f\u89c9\u8fd9\u4e2a\u6709\u70b9\u610f\u601d\uff0c\u6240\u4ee5\u5c31\u591a\u770b\u4e86\u4e24\u773c\uff0c\u53d1\u73b0\u539f\u6765\u8fd9\u4e2a\u8fd9\u4e48\u6709\u7528\u3002\u3002\u3002</p> <p>\\(\\sum  r=m\\) \u610f\u5473\u7740\u6240\u6709\u7684\u6a2a\u5750\u6807\uff0c\u6700\u591a\u53ea\u4f1a\u6709 \\(2m\\) \u4e2a\uff0c\u6240\u4ee5\u76f4\u63a5\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u6a2a\u5750\u6807\u679a\u4e3e\u5373\u53ef\u3002</p> <pre><code>void ChatGptDeepSeek()\n{\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    vector&lt;int&gt; l(m * 2 + 1), x(n + 1), r(n + 1);\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; x[i];\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; r[i];\n    set&lt;pair&lt;int, int&gt;&gt; st;\n    auto Insert = [&amp;](int X, int Y) {\n        auto it = st.lower_bound({ X, 0 });\n        if (it == st.end() || it-&gt;first != X) {\n            st.insert({ X, Y });\n        } else {\n            if (Y &gt; it-&gt;second) {\n                st.erase(it);\n                st.insert({ X, Y });\n            }\n        }\n    };\n    for (int i = 1; i &lt;= n; i++) {\n        for (int j = x[i] - r[i]; j &lt;= x[i] + r[i]; j++) {\n            //(j-x[i])*(j-x[i])+y*y&lt;=r*r\n            // \u53ef\u4ee5\u77e5\u9053y\u7684\u8303\u56f4\n            int y = sqrt(1LL * r[i] * r[i] - 1LL * (j - x[i]) * (j - x[i]));\n            Insert(j, y);\n        }\n    }\n    long long sum = 0;\n    for (auto [X, Y] : st) {\n        sum += 2 * Y + 1;\n    }\n    cout &lt;&lt; sum &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2074/#e","title":"E","text":"<p>\u5982\u679c\u4e0d\u9650\u5236\u6b21\u6570\uff0c\u80af\u5b9a\u5c31\u662f\u4e00\u76f4\u95ee \\((1,2,x)\\) \u8fd9\u6837\uff0c\u4f46\u662f\u6709\u53ef\u80fd\u6700\u591a\u9700\u8981\u95ee \\(n\\) \u6b21\u3002</p> <p>\u7531\u4e8e\u8fd9\u9898\u4e0d\u5141\u8bb8 \\(hack\\) \uff0c\u6240\u4ee5\u5c1d\u8bd5\u7528\u968f\u673a\u6570\u6765\u6df7\u8fc7\u53bb\u3002\u3002\u3002</p> <p>\u4f46\u8fd9\u5c31\u662f\u6b63\u89e3\uff0c\u6bcf\u6b21\u5728\u4e2d\u5fc3\u6709\u70b9\u540e\uff0c\u968f\u673a\u4e24\u4e2a\u9876\u70b9\u548c\u8fd9\u4e2a\u70b9\u7ec4\u6210\u65b0\u7684\u4e09\u89d2\u5f62\u3002\u8fd9\u6837\u6bcf\u6b21\u70b9\u7684\u6570\u91cf\u5e73\u5747\u4f1a\u51cf\u5c11 \\(\\frac{2}{3}\\) \uff0c\u6240\u4ee5\u5176\u5b9e\u975e\u5e38\u975e\u5e38\u5927\u7684\u6982\u7387\u662f\u8be2\u95ee\u6b21\u6570\u5f88\u5c0f\u5c31\u884c\u4e86\u3002</p> <p>\u4e5f\u662f\u6211\u7b2c\u4e00\u6b21\u901a\u8fc7\u8ddf rand() \u6709\u5173\u7684\u9898\u76ee\u4e86\u3002</p> <pre><code>int ask(int a, int b, int c)\n{\n    cout &lt;&lt; \"? \" &lt;&lt; a &lt;&lt; \" \" &lt;&lt; b &lt;&lt; \" \" &lt;&lt; c &lt;&lt; endl;\n    int x;\n    cin &gt;&gt; x;\n    return x;\n}\nvoid ChatGptDeepSeek()\n{\n    int n;\n    cin &gt;&gt; n;\n    int x = 1, y = 2, z = 3;\n    for (int i = 1; i &lt;= 75; i++) {\n        int X=ask(x,y,z);\n        if(!X){\n            cout&lt;&lt;\"! \"&lt;&lt;x&lt;&lt;\" \"&lt;&lt;y&lt;&lt;\" \"&lt;&lt;z&lt;&lt;endl;\n            return;\n        }\n        int Y=rand();\n        if(Y%3==0) x=X;\n        else if(Y%3==1) y=X;\n        else z=X;\n    }\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2074/#f","title":"F","text":"<p>\u672c\u6765\u8fde\u9898\u76ee\u90fd\u6ca1\u770b\u61c2\u6765\u7740\uff0c\uff0c\u611f\u89c9\u770b\u7740\u6709\u4e00\u70b9\u96be\u53d7\u3002</p> <p>\u770b\u4e86\u4e24\u79cd\u601d\u8def\u3002</p>"},{"location":"cp_solving/Codeforces/2074/#codeforces","title":"\u695c\u6843\u6797\u7684 Codeforces \u9898\u89e3","text":"<p>\u5148\u7528\u5c0f\u7684\u6b63\u65b9\u5f62\u6765\u586b\u5145\uff0c\u82e5\u662f\u53ef\u4ee5\u7528\u66f4\u5927\u7684\u6b63\u65b9\u5f62\uff0c\u90a3\u4e48\u4e00\u5b9a\u53ef\u4ee5\u628a\u8fd9\u4e2a\u6b63\u65b9\u5f62\u66ff\u6362\u62104\u4e2a\u5c0f\u4e00\u53f7\u7684\u6b63\u65b9\u5f62\u3002</p> <p>\u6240\u4ee5\u53ef\u4ee5\u5148\u5168\u90e8\u7528\u5c0f\u7684\u6b63\u65b9\u5f62\uff0c\u82e5\u662f\u80fd\u7528\u5927\u7684\u6b63\u65b9\u5f62\uff0c\u5219\u7528\u7684\u6b63\u65b9\u5f62\u7684\u6570\u91cf\u53ef\u4ee5\u51cf\u5c113\u500d\u7684\u5927\u6b63\u65b9\u5f62\u7684\u6570\u91cf\u3002</p> <pre><code>void ChatGptDeepSeek()\n{\n    int l1, r1, l2, r2;\n    cin &gt;&gt; l1 &gt;&gt; r1 &gt;&gt; l2 &gt;&gt; r2;\n    long long ans = 1ll * (r1 - l1) * (r2 - l2);\n    for (int i = 1; i &lt; 30; i++)\n    {\n        int s = 1 &lt;&lt; i;\n        int L1 = (l1 + s - 1) / s * s;\n        int L2 = (l2 + s - 1) / s * s;\n        int R1 = r1 / s * s;\n        int R2 = r2 / s * s;\n        if (L1 &gt;= R1 || L2 &gt;= R2)\n            continue;\n        ans -= 3LL * (R1 - L1) / s * (R2 - L2) / s;\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2074/#ksun48","title":"ksun48\u7684\u601d\u8def","text":"<p>\u6bd4\u5982 \\(k=1\\) \u65f6\uff0c\u82e5 \\(l1 , r1,l2,r2\\) \u4e3a\u5947\u6570\uff0c\u5219\u5fc5\u987b\u4f7f\u7528 \\(k=0\\) \u7684\u6b63\u65b9\u5f62\u6765\u586b\u5145\u3002\u6211\u4eec\u53ef\u4ee5\u5148\u628a\u8fd9\u4e00\u90e8\u5206\u52a0\u4e0a\uff0c\u4e4b\u540e \\(l1,r1,l2,r2\\) \u4e00\u5b9a\u4f1a\u5168\u662f\u5076\u6570\u4e86\uff0c\u5e76\u4e14\u518d\u4e5f\u4e0d\u4f1a\u4f7f\u7528 \\(k=1\\) \u7684\u4e09\u89d2\u5f62\u4e86\u3002</p> <p>\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u56db\u4e2a\u6570\u5b57\u9664\u4ee5\u4e8c\uff0c\u4e8e\u662f\u53ef\u4ee5\u4e00\u76f4\u91cd\u590d\u4e4b\u524d\u7684\u64cd\u4f5c\u4e86\u3002</p> <pre><code>void solve(){\n    ll lx, rx, ly, ry;\n    cin &gt;&gt; lx &gt;&gt; rx &gt;&gt; ly &gt;&gt; ry;\n    ll ans = 0;\n    while(true){\n        if(lx == rx || ly == ry) break;\n        if(lx &amp; 1){\n            ans += (ry - ly);\n            lx += 1;\n        }\n        if(rx &amp; 1){\n            ans += (ry - ly);\n            rx -= 1;\n        }\n        if(ly &amp; 1){\n            ans += (rx - lx);\n            ly += 1;\n        }\n        if(ry &amp; 1){\n            ans += (rx - lx);\n            ry -= 1;\n        }\n        lx /= 2; rx /= 2; ly /= 2; ry /= 2;\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2074/#g","title":"G","text":"<p>tag: \u533a\u95f4DP</p> <p>\u597d\u597d\u597d\uff0c\u8fd9\u4e48\u4f1a\u533a\u95f4DP\u3002\u597d\u50cf\u8fd8\u771f\u662f\u6bd4\u8f83\u57fa\u7840\u7684\u533a\u95f4DP\uff0c\u7136\u800c\u6211\u662f\u770b\u9898\u89e3\u505a\u7684\u3002\u867d\u7136\u770b\u8d77\u6765\u8fd9\u4e2a\u662f\u4e00\u4e2a\u73af\uff0c\u4f46\u662f\u5176\u5b9e\u5e76\u4e0d\u9700\u8981\u7279\u522b\u5904\u7406\u3002</p> <p>\\(dp_{i,j}\\) \u8868\u793a\u533a\u95f4 \\([i,j]\\) \u7684\u6700\u5927\u7b54\u6848\u3002\u90a3\u4e48 \\(dp_{l,r}=max(dp_{l,r},dp_{l+1,m-1}+dp_{m+1,r-1}+a_la_ma_r)\\)</p> <p>\u4f46\u662f\u4e5f\u53ef\u80fd\u4e2d\u95f4\u5df2\u7ecf\u6709\u66f4\u597d\u7684\u65b9\u6848\uff0c\u6240\u4ee5\u518d\u52a0\u4e00\u4e2a \\(dp_{l,m}+dp_{m+1,r}\\) </p> <pre><code>void ChatGptDeepSeek()\n{\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;vector&lt;long long&gt;&gt; dp(n + 1, vector&lt;long long&gt;(n + 1));\n    vector&lt;int&gt; a(n + 1);\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; a[i];\n    for (int len = 3; len &lt;= n; len++)\n    {\n        for (int l = 1; l + len - 1 &lt;= n; l++)\n        {\n            int r = l + len - 1;\n            for (int m = l + 1; m &lt; r; m++)\n                dp[l][r] = max(dp[l][r], dp[l + 1][m - 1] + dp[m + 1][r - 1] + a[l] * a[m] * a[r]);\n\n            for (int m = l; m + 1 &lt;= r; m++)\n                dp[l][r] = max(dp[l][r], dp[l][m] + dp[m + 1][r]);\n        }\n    }\n    cout &lt;&lt; dp[1][n] &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2074/#end","title":"End","text":"<p>2025-03-25</p> <p>\u65f6\u9694\u4e24\u5468\uff0c\u7ec8\u4e8e\u628a\u8fd9\u573aDiv. 3\u8865\u5b8c\u4e86\u3002\u5e76\u4e14\u53ea\u6709FG\u9700\u8981\u8865\u4e14\u90fd\u662f\u4eca\u5929\u5199\u7684\u3002\u3002\u3002\u4e14\u90fd\u770b\u4e86\u9898\u89e3\u3002</p> <p>\u4f46\u662f\u65e0\u8bba\u5982\u4f55\u7ec8\u4e8e\u628a\u8fd9\u4e00\u5957\u7ed9\u7ed3\u675f\u4e86\uff0c\u9700\u8981\u8865\u7684\u9898\u603b\u662f\u5c11\u4e86\u4e00\u70b9\u7684\u3002\u4eca\u665a\u53c8\u6709\u4e00\u573aDiv. 3\uff0c\u800c\u4e14\u8fd9\u6b21\u6211\u53ef\u4ee5 <code>unrated</code> \u4e86\uff0c\u723d\u4e86\u3002</p> <p>\u597d\u50cf\u6211\u603b\u5171\u90fd\u6ca1\u6709 <code>unrated</code> \u6253\u8fc7\u51e0\u573a\u6bd4\u8d5b\u3002\u3002\u56e0\u4e3a\u6bd4\u8d5b\u5c11\u4e14\u6389\u5206\u6bd4\u8f83\u5feb\u3002\u3002\u3002\u6162\u6162\u6765\u5427\uff0c\u867d\u7136\u8981\u8865\u7684\u9898\u4e5f\u4f1a\u8d8a\u6765\u8d8a\u591a\u3002\u4f46\u662f\u65e0\u8bba\u5982\u4f55\u6211\u7684\u5199\u9898\u91cf\u4e5f\u4f1a\u8d8a\u6765\u8d8a\u591a\uff0c\u5b9e\u529b\u4e5f\u4f1a\u63d0\u9ad8\u7684\u3002</p> <p>\u63d0\u5347\u6c34\u5e73\u624d\u662f\u771f\u6b63\u7684\u76ee\u7684\u3002</p>"},{"location":"cp_solving/Codeforces/2075/","title":"Educational Codeforces Round 176 (Rated for Div. 2)","text":"<p>2025-03-17</p> <p>\u6bd4\u8d5b\u94fe\u63a5: https://codeforces.com/contest/2075</p> <p>\u8d5b\u65f6\u53ea\u901a\u8fc7\u4e86 ABC \uff0c D\u770b\u6570\u636e\u624d\u8865\u51fa\u6765\u3002\u3002\u3002</p> <p>\u5199\u9898\u89e3\u7684\u6c34\u5e73\u4f3c\u4e4e\u8fc7\u4e8e\u4f4e\u4e0b\u4e86\u4e00\u70b9\uff0c\u4e0d\u8fc7\u4e00\u822c\u662f\u4e3a\u4e86\u7ed9\u81ea\u5df1\u770b\u7684\u3002\u3002\u3002\u4f46\u662f\u4e5f\u5e0c\u671b\u5206\u4eab\u51fa\u6765\u770b\u80fd\u4e0d\u80fd\u8d77\u5230\u4e00\u70b9\u5e2e\u52a9\u6216\u8005\u5f97\u5230\u5927\u5bb6\u7684\u6307\u70b9\u3002</p> <p>\u867d\u7136\u5199\u4e1c\u897f\u7684\u6c34\u5e73\u4e00\u76f4\u5f88\u4f4e\uff0c\u4f46\u662f\u5199\u53f2\u82b1\u7684\u65f6\u95f4\u4e5f\u4e0d\u5c11\u7684\u3002\u3002\u3002</p>"},{"location":"cp_solving/Codeforces/2075/#a","title":"A","text":"<p>\u4e0d\u5fc5\u591a\u8bf4\u4e86\uff0c\u5076\u6570\u51cf\u53bb\u5076\u6570\u4e00\u76f4\u662f\u5076\u6570\uff0c\u5947\u6570\u51cf\u53bb\u5947\u6570\u4f1a\u53d8\u6210\u5076\u6570\u3002</p> <p>\u6240\u4ee5\u53ea\u7528\u7279\u5224\u521a\u5f00\u59cb \\(n\\) \u5947\u5076\uff0c\u7136\u540e k-- \uff0c\u76f4\u63a5\u9664\u5411\u4e0a\u53d6\u6574\u5c31\u597d\u3002</p> <pre><code>void ChatGptDeepSeek()\n{\n    int n, k;\n    cin &gt;&gt; n &gt;&gt; k;\n    int ans = 0;\n    if (n &amp; 1) {\n        n -= k;\n        ans++;\n    }\n    k--;\n    if (n)\n        ans += (n - 1) / k + 1;\n    cout&lt;&lt;ans&lt;&lt;'\\n';\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2075/#b","title":"B","text":"<p>\u5982\u679c \\(k\\) \u4e0d\u4e3a \\(1\\) \uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u628a\u6700\u5927\u7684 \\(k+1\\) \u4e2a\u6570\u5b57\u90fd\u62ff\u5230\u3002\u53ea\u9700\u8981\u628a\u6700\u540e\u4e00\u4e2a\u62ff\u7684\u6570\u5b57\u7559\u4e2d\u95f4\uff0c\u8fd9\u6837\u4f60\u53ef\u4ee5\u6700\u540e\u4e00\u4e2a\u518d\u62ff\u5b83\u3002</p> <p>\u90a3\u4e48\u53ea\u7528\u7279\u5224 \\(1\\) \u4e86\uff0c\u6700\u540e\u4e00\u4e2a\u62ff\u7684\u53ea\u80fd\u662f\u7b2c\u4e00\u4e2a\u6216\u8005\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u4e86\u3002</p> <pre><code>void ChatGptDeepSeek()\n{\n    int n, k;\n    cin &gt;&gt; n &gt;&gt; k;\n    vector&lt;int&gt; a(n + 1);\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; a[i];\n    if (k == 1 &amp;&amp; n &gt; 2) {\n        int mx = *max_element(a.begin() + 2, a.begin() + n);\n        cout &lt;&lt; max(mx + max(a[1], a[n]), a[1] + a[n]) &lt;&lt; '\\n';\n        return;\n    }\n    sort(a.begin() + 1, a.end(), greater&lt;&gt;());\n    ll sum = 0;\n    for (int i = 1; i &lt;= k + 1; i++)\n        sum += a[i];\n    cout &lt;&lt; sum &lt;&lt; '\\n';\n    // x x x x\n}\n</code></pre> <p>\u8d5b\u65f6 WA \u4e86\u4e24\u53d1\uff0c\u6709\u70b9\u4e0d\u8be5\u7684\u3002</p> <p>\u7b2c\u4e00\u53d1\u63d0\u4ea4\u662f\u6ca1\u6709\u7279\u5224 \\(k\\) \u4e3a \\(1\\) , \u8fd9\u5012\u662f\u6ca1\u5565\uff0c\u4e00\u4e2a\u7537\u4eba\u90fd\u4f1a\u72af\u7684\u9519\u8bef\uff08\uff09\u3002</p> <p>\u4f46\u662f\u7b2c\u4e8c\u53d1 WA \u662f\u7279\u5224\u4e86\uff0c\u4f46\u662f\u6211\u7279\u5224\u7684\u662f\u4e2d\u95f4\u7684\u6700\u5927\u7684\u6570\u52a0\u4e0a \\(max(a_1,a_n)\\) \u3002\u3002\u3002\u663e\u7136\u8fd8\u6709 \\(a1+a_n\\) \u4e5f\u662f\u4e00\u4e2a\u53ef\u884c\u7684\u7b54\u6848\u3002</p>"},{"location":"cp_solving/Codeforces/2075/#c","title":"C","text":"<p>\u6628\u665a\u6ca1\u60f3\u51fa\u5565\u597d\u505a\u7684\u65b9\u6cd5\u3002\u3002\u3002\u4e8e\u662f\u62ff\u7ebf\u6bb5\u6811\u778e\u641e\u8fc7\u4e86\u3002\u3002\u3002\u5e0c\u671b\u4e0d\u8981 FST \u3002</p> <p>\u6b63\u5e38\u5199\u6cd5\u4e0b\u5348\u4e0a\u8bfe\u518d\u770b\u770b\uff08\uff09\u3002</p> <p>\u56e0\u4e3a\u5bf9\u4e8e\u6570\u91cf\u4e3a \\(x\\) \u7684\u989c\u8272\uff0c\u6211\u4eec\u9700\u8981\u53e6\u4e00\u79cd\u989c\u8272\u7684\u6570\u91cf\u81f3\u5c11\u4e3a \\(n-x\\) \uff0c\u6240\u4ee5\u53e6\u4e00\u79cd\u989c\u8272\u53ea\u8981\u6570\u91cf\u6bcf\u6bd4 \\(n-x\\) \u591a \\(1\\) \uff0c\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u5c31\u591a \\(1\\) \u3002</p> <p>\u6240\u4ee5\u53ef\u4ee5\u8f6c\u6362\u6210\u6bcf\u79cd\u989c\u8272\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u7684\u8303\u56f4\u662f \\([1,a_i]\\) \uff0c \u800c \\([n-x,n-1]\\) \u7684\u548c\uff0c\u5c31\u662f\u8fd9\u4e00\u79cd\u989c\u8272\u7ed9\u7b54\u6848\u589e\u52a0\u7684\u8d21\u732e\u3002\u3002</p> <p>\u6240\u4ee5\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u5199\u4e2a\u533a\u95f4\u52a0\u3002\u3002\u597d\u50cf\u6709\u70b9\u592a\u5510\u3002\u3002</p> <pre><code>struct SegmentTree {\n#define ls p &lt;&lt; 1\n#define rs p &lt;&lt; 1 | 1\n#define mid ((l + r) &gt;&gt; 1)\n    vector&lt;ll&gt; tr, t;\n    SegmentTree(int n)\n    {\n        tr = t = vector&lt;ll&gt;(n &lt;&lt; 2, 0);\n    }\n    void push_down(int p, int l, int r)\n    {\n        if (t[p]) {\n            t[ls] += t[p];\n            t[rs] += t[p];\n            tr[ls] += t[p] * (mid - l + 1);\n            tr[rs] += t[p] * (r - (mid + 1) + 1);\n            t[p] = 0;\n        }\n    }\n    void upd(int p, int l, int r, int lx, int rx, int x)\n    {\n        if (l &gt;= lx &amp;&amp; r &lt;= rx) {\n            tr[p] += (r - l + 1) * x;\n            t[p] += x;\n            return;\n        }\n        push_down(p, l, r);\n        if (lx &lt;= mid)\n            upd(ls, l, mid, lx, rx, x);\n        if (rx &gt; mid)\n            upd(rs, mid + 1, r, lx, rx, x);\n        tr[p] = tr[ls] + tr[rs];\n    }\n    ll query(int p, int l, int r, int lx, int rx)\n    {\n        if (l &gt;= lx &amp;&amp; r &lt;= rx)\n            return tr[p];\n        push_down(p, l, r);\n        ll res = 0;\n        if (lx &lt;= mid)\n            res += query(ls, l, mid, lx, rx);\n        if (rx &gt; mid)\n            res += query(rs, mid + 1, r, lx, rx);\n        return res;\n    }\n};\n\nvoid ChatGptDeepSeek()\n{\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    vector&lt;int&gt; a(m + 1);\n    for (int i = 1; i &lt;= m; i++)\n        cin &gt;&gt; a[i];\n    //[1,a[i]]\u662f\u6709\u8d21\u732e\u7684\n    ll ans = 0;\n    SegmentTree C(n + 1);\n    for (int i = 1; i &lt;= m; i++) {\n        if (a[i] == n)\n            a[i]--;\n        ans += C.query(1, 1, n, n - a[i], n - 1);\n        C.upd(1, 1, n, 1, a[i], 1);\n    }\n    cout &lt;&lt; ans * 2 &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2075/#d","title":"D","text":"<p>\u8d5b\u65f6\u4e0d\u77e5\u9053\u81ea\u5df1\u5728\u5199\u9e21\u6bdb\u554a\uff0c\u6211\u662f\u6bcf\u6b21\u5199\u4e00\u4e2a dp \u3002\u3002\u3002\u8fd9\u4e48\u6ca1\u6709\u610f\u8bc6\u5230\u53ef\u4ee5\u9884\u5904\u7406\u51fa\u6765\u5462\u3002\u3002\u3002\u56e0\u4e3a\u6bcf\u6b21\u67e5\u7684\u4e1c\u897f\u5176\u5b9e\u90fd\u662f\u4e00\u6837\u7684\u3002</p> <p>\u867d\u7136\u4e4b\u540e\u4e5f\u662f\u80fd\u770b\u5230 wa on test 2 \u7684\u6570\u636e\u624d\u60f3\u5230\u65b0\u5199\u7684\u4e1c\u897f\u7684\u95ee\u9898\u5728\u54ea\u91cc\u3002\u3002\u3002</p> <p>\u8fd9\u9898\u5565\u601d\u8def\u5462\uff1f\u6211\u4eec\u89c2\u5bdf \\(x\\) \u548c \\(y\\) \u7684\u4e8c\u8fdb\u5236</p> <p>\u5148\u770b\u770b\u6837\u4f8b \\(x=13\\) \\(y=37\\) \u7684\u60c5\u51b5</p> <pre><code>x: 1101\ny: 100101\n</code></pre> <p>\u90a3\u4e48\u6211\u4eec\u80fd\u628a \\(x\\) \u548c \\(y\\) \u53d8\u6210\u4ec0\u4e48\u503c\u5462\uff1f</p> <p>\u663e\u7136\u53ea\u6709 \\(0\\) \u548c \\(1\\) \uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u53ea\u80fd\u628a \\(x\\) \u548c \\(y\\) \u53d8\u6210\u5b83\u4eec\u7684\u516c\u5171\u524d\u7f00\uff0c\u6216\u8005\u662f \\(0\\) \u3002\u90a3\u4e48\u8fd9\u4e2a\u95ee\u9898\u53ef\u4ee5\u8f6c\u6362\u6210\u4ec0\u4e48\u5462\uff1f\u7b2c\u4e00\u4e2a\u6570\u5b57\u9700\u8981\u5de6\u79fb \\(a\\) \u4f4d\uff0c\u53e6\u4e00\u4e2a\u6570\u5b57\u9700\u8981\u53f3\u79fb \\(b\\) \u4f4d\u3002\u6211\u4eec\u9700\u8981\u8ba9\u6784\u6210 \\(a\\) \\(b\\) \u7684\u6570\u5b57\u4e0d\u76f8\u540c\uff0c\u4e14\u82b1\u8d39\u6700\u5c0f\u3002</p> <p>\u5c31\u53ef\u4ee5\u8f6c\u6362\u6210\u4e00\u4e2a\u7ecf\u5178\u7684\u80cc\u5305\u95ee\u9898\u4e86\u3002\u4ee5 \\(dp_{i,j}\\) \u8868\u793a \\(x\\) \u53f3\u79fb \\(i\\) \u4f4d\uff0c\\(y\\) \u53f3\u79fb \\(j\\) \u4f4d\u7684\u5408\u6cd5\u7684\u6700\u5c0f\u82b1\u8d39\u7684\u65b9\u6848\u3002\u6211\u4eec\u53ea\u7528\u679a\u4e3e\u5408\u6cd5\u7684\u5212\u5206\u65b9\u6848\u5c31\u884c\u4e86\u3002</p> <p>\u5047\u8bbe \\(x\\) \u7684\u6700\u957f\u516c\u5171\u524d\u7f00\u662f \\(len\\) \uff0c\u90a3\u4e48\u6211\u4eec\u6700\u7ec8\u5fc5\u987b\u8981\u4f7f\u5f97 \\(x\\) \u548c \\(y\\) \u7684\u5269\u4f59\u90e8\u5206\u5c0f\u4e8e\u7b49\u4e8e \\(len\\) \u3002\u8fd9\u6837\u624d\u80fd\u4fdd\u8bc1\u76f8\u7b49\u3002</p> <pre><code>ans = min(ans, dp[b1.size() - i][b2.size() - i]);\n</code></pre> <p>\u679a\u4e3e\u5269\u4e0b\u7684\u4f4d\u6570\u4e3a \\(i\\) \uff0c\u8fd9\u91cc \\(b1, b2\\) \u6211\u5b58\u7684\u662f \\(x\\) \u548c \\(y\\) \u7684\u4e8c\u8fdb\u5236\u3002</p> <p>\u4f46\u662f\u76f4\u5230 wa \u4e86\u770b\u6570\u636e\u6211\u624d\u53d1\u73b0\uff0c\u6709\u65f6 dp[a][b] \u7684\u503c\u53ef\u80fd\u5e76\u4e0d\u662f\u4e00\u4e2a\u53ef\u4ee5\u5230\u8fbe\u7684\u72b6\u6001\u3002\u3002\u3002\u8fd9\u4e3b\u8981\u662f\u8fd9\u4e24\u4e2a\u503c\u76f8\u7b49\u4e14\u5f88\u5c0f\u7684\u60c5\u51b5\uff0c\u53ea\u6709\u4e00\u79cd\u6784\u6210\u65b9\u5f0f\u3002</p> <p>\u7531\u4e8e\u53ea\u6709\u5168\u53d8\u6210 \\(0\\) \u7684\u60c5\u51b5\u4f60\u53ef\u4ee5\u9664\u66f4\u5927\u7684\u6570\u5b57\uff0c\u4e00\u5b9a\u4e5f\u662f\u53ef\u4ee5\u5230\u8fbe\u7684\u72b6\u6001\u7684\u3002</p> <p>\u6240\u4ee5\u6211\u4eec\u53ea\u80fd \\(dp_{b1.size,b2.size}\\) \u7684\u65f6\u5019\uff0c\u9009\u62e9\u66f4\u5927\u7684\u4e0b\u6807\u3002</p> <p>\u800c\u4e14\u53ea\u6709\u5b83\u4eec\u6570\u5b57\u76f8\u540c\u4e14\u5f88\u5c0f\u624d\u4f1a\u4e0d\u53ef\u8fbe\u5230\u3002\u3002</p> <p>\u5176\u5b9e\u5927\u4e8e\u7b49\u4e8e \\(3\\) \u5c31\u4e00\u5b9a\u81f3\u5c11\u6709\u4e24\u79cd\u6784\u6210\u65b9\u5f0f\u4e86\uff0c \\(x\\) \u548c \\(1\\) + \\(x-1\\) \u3002</p> <p>\u6240\u4ee5\u53ea\u7528\u591a\u4e00\u4e2a \\(dp_{a+1,b}\\) \u5c31\u884c\uff0c\\(dp_{x,y}\\) \u662f\u7b49\u4e8e \\(dp_{y,x}\\) \u7684\u3002</p> <pre><code>// \u597d\u50cf\u76f4\u63a5\u5168\u90e8\u9884\u5904\u7406\u597d\u5c31\u884c\u3002\u3002\u3002\n//  Date: 2025-03-18\n//  Time: 11:53:03\n\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nusing ll = long long;\n\nvector&lt;vector&lt;ll&gt;&gt; dp(60, vector&lt;ll&gt;(60, 1e18 + 1));\n\nvoid ChatGptDeepSeek()\n{\n    ll x, y;\n    cin &gt;&gt; x &gt;&gt; y;\n    if (x == y) {\n        cout &lt;&lt; \"0\\n\";\n        return;\n    }\n    vector&lt;int&gt; b1, b2;\n    ll tmp = x;\n    while (tmp) {\n        b1.push_back(tmp % 2);\n        tmp /= 2;\n    }\n    reverse(b1.begin(), b1.end());\n    tmp = y;\n    while (tmp) {\n        b2.push_back(tmp % 2);\n        tmp /= 2;\n    }\n    reverse(b2.begin(), b2.end());\n    // if(b1.size()&gt;b2.size()) swap(b1,b2);\n    // while(b1.size()&lt;b2.size()) b1.push_back()\n    int len = 0;\n    for (int i = 0; i &lt; b1.size() &amp;&amp; i &lt; b2.size(); i++) {\n        if (b1[i] != b2[i]) {\n            assert(i &lt; b1.size() &amp;&amp; i &lt; b2.size());\n            // len = i;\n            break;\n        }\n        len++;\n    }\n    // cerr &lt;&lt; len &lt;&lt; '\\n';\n    ll ans = 1e18 + 1;\n    for (int i = 0; i &lt;= len; i++) {\n        assert(i &lt;= b1.size() &amp;&amp; i &lt;= b2.size()); // \u54e6 \u6ca1\u4e8b\u4e86 \u67090\n        // \u90a3\u662f\u54ea\u9519\u4e86\u5462\uff1f\n        // cerr &lt;&lt; b1.size() - i &lt;&lt; \" \" &lt;&lt; b2.size() - i &lt;&lt; \" \\n\";\n        ans = min(ans, dp[b1.size() - i][b2.size() - i]);\n    }\n    // for (int i = 1; i &lt;= 10; i++) {\n    //     if (i + b1.size() &lt; 60)\n    //         ans = min(ans, dp[b1.size() + i][b2.size()]);\n    //     if (i + b2.size() &lt; 60)\n    //         ans = min(ans, dp[b1.size()][b2.size() + i]);\n    //     if (i + b2.size() &lt; 60 &amp;&amp; i + b1.size() &lt; 60)\n    //         ans = min(ans, dp[b1.size() + i][b2.size() + i]);\n    // }\n    ans = min(ans, dp[b1.size() + 1][b2.size()]);\n    // cerr &lt;&lt; dp[2][2] &lt;&lt; \" \" &lt;&lt; dp[1][1] &lt;&lt; '\\n';\n    // \u54e6\u54e6 \u6ca1\u4e8b\u4e86 \u53ea\u6709\u6709\u4e00\u4e2a\u88ab\u9664\u62100 \u624d\u80fd\u9664\u66f4\u591a\u4f4d\u7684\n    // \u6240\u4ee5\u5982\u679c dp[b1.size()][b2.size()] \u4e0d\u884c\n    // \u90a3\u5c31\u8bd5\u4e00\u4e0b\u5b83\u4eec\u9644\u8fd1\u7684\u66f4\u5927\u4e00\u4e9b\u7684\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n    // 10 11\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.tie(nullptr);\n    dp[0][0] = 0;\n    for (int i = 1; i &lt; 60; i++) {\n        vector ndp = dp;\n        // for (int x = 59; x &gt;= 0; x--)\n        //     for (int y = 59; y &gt;= 0; y--)\n        for (int x = 0; x &lt; 60; x++)\n            for (int y = 0; y &lt; 60; y++) {\n                // \u597d\u597d\u597d \u548b\u8bf4\u5462 \u5c31\u662f\u5982\u679c\u5230\u4e0d\u4e86 \u90a3\u4e48\u5c31\u53ef\u4ee5\u76f4\u63a5\u7528\u66f4\u5927\u7684\u6570\u5b57\u6765\u9664\u554a\n                // @@@@@@@@@@@@\n                // \u5e76\u4e0d\u884c\u3002\u3002\u3002\n                if (x &gt;= i)\n                    ndp[x][y] = min(ndp[x][y], dp[x - i][y] + (1LL &lt;&lt; i));\n                if (y &gt;= i)\n                    ndp[x][y] = min(ndp[x][y], dp[x][y - i] + (1LL &lt;&lt; i));\n            }\n        dp = ndp;\n    }\n    int T = 1;\n    cin &gt;&gt; T;\n    while (T--)\n        ChatGptDeepSeek();\n    return 0;\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2075/#f","title":"F","text":"<p>\u600e\u4e48\u8bf4\u3002\u3002\u770b\u9898\u76ee\u6bd4\u8f83\u77ed\u52a0\u4e0a\u6709\u4eba\u8bf4\u4e0d\u662f\u5f88\u96be\uff0c\u4e8e\u662f\u770b\u4e86\u4e00\u4e0b\u3002</p> <p>\u679c\u7136\u4e0d\u4f1a\u505a\uff0c\u5f88\u6b63\u5e38\uff0c\u800c\u4e14\u6d6a\u8d39\u4e86\u5f88\u591a\u65f6\u95f4\u3002\u53ef\u80fd\u8fd8\u662f\u4e0d\u662f\u5f88\u7406\u89e3\u5427\uff0c\u4f46\u662f\u4e5f\u7406\u89e3\u5f97\u5dee\u4e0d\u591a\u4e86\u3002</p> <p>\u6709\u4e00\u4e2a\u4e1c\u897f\u662f\u6bd4\u8f83\u5bb9\u6613\u60f3\u51fa\u6765\u7684\uff0c\u6bd4\u5982\u6211\u4eec\u9009\u62e9\u7684\u6700\u4f18\u7684\u7b54\u6848\u7684\u5de6\u7aef\u70b9\uff0c\u5b83\u7684\u5de6\u4fa7\u662f\u4e0d\u4f1a\u6709\u6bd4\u5b83\u5c0f\u7684\u6570\u5b57\u7684\uff0c\u4e0d\u7136\u4f60\u80af\u5b9a\u9009\u66f4\u9760\u524d\u66f4\u5c0f\u7684\uff0c\u540c\u7406\u53f3\u7aef\u70b9\u53f3\u8fb9\u4e5f\u4e0d\u4f1a\u6709\u6bd4\u5b83\u66f4\u5927\u7684\u6570\u5b57\u3002</p> <p>\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u7684\u5de6\u7aef\u70b9\u5b9e\u9645\u4e0a\u53ea\u80fd\u662f\u524d\u7f00\u7684\u6700\u5c0f\u503c\uff0c\u53f3\u7aef\u70b9\u53ea\u80fd\u662f\u540e\u7f00\u7684\u6700\u5927\u503c\u3002\u4f46\u662f\u5982\u679c\u76f4\u63a5\u8fd9\u6837\u5339\u914d\u7684\u8bdd\uff0c\u53ef\u80fd\u4e5f\u4f1a\u662f \\(O(n^2)\\) \u3002\u600e\u4e48\u4f18\u5316\u5462\uff1f\u6211\u4eec\u5148\u628a\u53ef\u9009\u7684\u5de6\u7aef\u70b9\u7684\u4e0b\u6807\u90fd\u653e\u5230\u6570\u7ec4 \\(l\\) , \u53f3\u7aef\u70b9\u653e \\(r\\) \u3002</p> <p>\u5b9e\u9645\u4e0a\u662f\u8ba1\u7b97\u6bcf\u4e00\u4e2a\u70b9\u7684\u8d21\u732e\uff0c\u6bd4\u5982 \\(a_i\\) \uff0c\u6211\u4eec\u5bfb\u627e\u7b2c\u4e00\u4e2a\u6bd4\u5b83\u5c0f\u7684 \\(xl\\) \uff0c\u90a3\u4e48 \\(xl\\) \u540e\u9762\u7684\u6570\u5b57\u80af\u5b9a\u90fd\u4f1a\u662f\u6bd4 \\(xl\\) \u66f4\u5c0f\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u4ee4 \\(xr\\) \u4e3a\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8e \\(i\\) \u7684\u4e0b\u6807\uff0c\u4e8e\u662f\u6211\u4eec\u7684\u5de6\u7aef\u70b9\u53ea\u80fd\u4ece \\([xl,xr)\\) \u4e4b\u95f4\u8fdb\u884c\u9009\u62e9\u3002</p> <p>\u5bf9\u4e8e\u53f3\u7aef\u70b9\uff0c\u6211\u4eec\u540c\u6837\u627e\u5230 \\(yl\\) \u548c \\(yr\\) \u5206\u522b\u4e3a\u7b2c\u4e00\u4e2a\u5927\u4e8e \\(a_i\\) \u7684\u53f3\u7aef\u70b9\uff0c\\(yr\\) \u4e3a\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8e \\(a_i\\) \u7684\u53f3\u7aef\u70b9\u3002\u4e8e\u662f\u53f3\u7aef\u70b9\u53ea\u80fd\u4ece \\([yl,yr)\\) \u8fdb\u884c\u9009\u62e9\u3002</p> <p>\u4e8e\u662f\u95ee\u9898\u53ef\u4ee5\u8f6c\u6362\u6210\uff0c\\(a_i\\) \u8ba9 \\([xl,xr)\\) \u53ef\u4ee5\u5bf9 \\([yl,yr)\\) \u4ea7\u751f \\(1\\) \u7684\u8d21\u732e\uff0c\u6211\u4eec\u7ef4\u62a4\u4e00\u4e2a\u6700\u5927\u503c\u7684\u5e8f\u5217\uff0c\u5728\u6bcf\u4e2a\u5730\u65b9\u53bb\u67e5\u8be2\u5f53\u524d\u7684\u6700\u5927\u503c\u3002\u53ef\u4ee5\u7528\u626b\u63cf\u7ebf\uff0c\u7ebf\u6bb5\u6811\u67e5\u8be2\u548c\u7ef4\u62a4\u6700\u5927\u503c\u4fe1\u606f\u3002</p> <pre><code>using ll = long long;\n\nstruct SegmentTree {\n#define ls p &lt;&lt; 1\n#define rs p &lt;&lt; 1 | 1\n#define mid ((l + r) &gt;&gt; 1)\n    vector&lt;int&gt; tr, t;\n    SegmentTree(int n)\n    {\n        tr = t = vector&lt;int&gt;((n + 2) &lt;&lt; 2, 0);\n    }\n    void push_down(int p, int l, int r)\n    {\n        if (t[p]) {\n            t[ls] += t[p];\n            t[rs] += t[p];\n            tr[ls] += t[p];\n            tr[rs] += t[p];\n            t[p] = 0;\n        }\n    }\n    void upd(int p, int l, int r, int lx, int rx, int x)\n    {\n        if (l &gt;= lx &amp;&amp; r &lt;= rx) {\n            tr[p] += x;\n            t[p] += x;\n            return;\n        }\n        push_down(p, l, r);\n        if (lx &lt;= mid)\n            upd(ls, l, mid, lx, rx, x);\n        if (rx &gt; mid)\n            upd(rs, mid + 1, r, lx, rx, x);\n        tr[p] = max(tr[ls], tr[rs]);\n    }\n    int query(int p, int l, int r, int lx, int rx)\n    {\n        if (l &gt;= lx &amp;&amp; r &lt;= rx)\n            return tr[p];\n        push_down(p, l, r);\n        int res = 0;\n        if (lx &lt;= mid)\n            res = max(res, query(ls, l, mid, lx, rx));\n        if (rx &gt; mid)\n            res = max(res, query(rs, mid + 1, r, lx, rx));\n        return res;\n    }\n};\nvoid ChatGptDeepSeek()\n{\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;int&gt; a(n + 1), l, r;\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; a[i];\n    int ans = 1;\n\n    for (int i = 1; i &lt;= n; i++) {\n        if (l.empty() || a[l.back()] &gt; a[i])\n            l.push_back(i);\n        if (!l.empty() &amp;&amp; a[l.back()] &lt; a[i])\n            ans = 2;\n    }\n    if (ans == 1) {\n        cout &lt;&lt; \"1\\n\";\n        return;\n    }\n    for (int i = n; i &gt;= 1; i--) {\n        if (r.empty() || a[r.back()] &lt; a[i])\n            r.push_back(i);\n    }\n\n    // vector&lt;array&lt;int, 4&gt;&gt; q;\n    priority_queue&lt;array&lt;int, 4&gt;, vector&lt;array&lt;int, 4&gt;&gt;, greater&lt;&gt;&gt; q;\n    reverse(r.begin(), r.end());\n    for (int i = 1; i &lt;= n; i++) {\n        int xl = upper_bound(l.begin(), l.end(), i, [&amp;](int x, int y) {\n            return a[x] &gt; a[y];\n        }) - l.begin(); // \u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e a[i]\u7684\n        int xr = lower_bound(l.begin(), l.end(), i) - l.begin();\n        int yl = upper_bound(r.begin(), r.end(), i) - r.begin();\n        int yr = lower_bound(r.begin(), r.end(), i, [&amp;](int x, int y) {\n            return a[x] &gt; a[y];\n        }) - r.begin(); // \u627e\u5230\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8ea[i]\u7684\n        if (xl &lt; xr &amp;&amp; yl &lt; yr) {\n            q.push({ xl, 1, yl + 1, yr });\n            q.push({ xr, -1, yl + 1, yr });\n            // q.push_back({ xl, 1, yl + 1, yr });\n            // q.push_back({ xr, -1, yl + 1, yr });\n        }\n    }\n    SegmentTree C(n);\n    // sort(q.begin(), q.end());\n    for (int i = 0; i &lt;= n; i++) {\n        while (!q.empty() &amp;&amp; q.top()[0] == i) {\n            auto [_, x, l, r] = q.top();\n            q.pop();\n            C.upd(1, 1, n, l, r, x);\n        }\n        ans = max(ans, 2 + C.query(1, 1, n, 1, n));\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2078/","title":"Codeforces Round 1008 (Div. 2)","text":"<p>\u53c8\u662f\u4e00\u6b21\u6389\u5206\uff0c\u6700\u8fd1\u6253CF\u603b\u662f\u597d\u96be\u53d7\u554a\u3002\u8fd8\u662f\u5b9e\u529b\u592a\u5f31\u592a\u5f31\u5bfc\u81f4\u7684\u3002\u611f\u89c9\u975e\u5e38\u7684\u96be\u53d7\u554a\u3002\u4e0d\u8fc7\u4e5f\u5408\u7406\uff0c\u6211\u53c8\u4ed8\u51fa\u4e86\u4ec0\u4e48\u5462\uff1f\u771f\u6b63\u81ea\u5df1\u601d\u8003\u7684\u9898\u80fd\u6709\u51e0\u4e2a\u5462\uff1f\ud83d\ude2d\ud83d\ude2d\ud83d\ude2d</p> <p>\u771f\u7684\u8fd8\u662f\u5f88\u5931\u843d\u7684\uff0c\u597d\u4e45\u6ca1\u4e0a\u5206\u4e86\uff0c\u751a\u81f3\u4e00\u76f4\u5361\u5728\u9752\u540d\uff0c\u597d\u4e45\u6ca1\u6709\u4f53\u4f1a\u5230\u4e0a\u5206\u7684\u5feb\u4e50\u4e86\u3002\u5509\u5509\u3002</p> <p>\u6bd4\u8d5b\u94fe\u63a5: https://codeforces.com/contest/2078</p> <p>\u4e0a\u4e0d\u4e86\u5206\u5c31\u8981\u52a0\u8bad\uff0c\u6211\u4e00\u5b9a\u8981\u4e0a\u5206\u3002</p>"},{"location":"cp_solving/Codeforces/2078/#a","title":"A","text":"<p>\u6b63\u5e38\u7684 A \u9898\uff0c\u76f4\u63a5\u89c2\u5bdf\u53d1\u73b0\u6b63\u597d\u5e73\u5747\u503c\u7b49\u4e8e X \u7684\u90fd\u662f YES \uff0c\u7136\u540e\u5c31\u731c\u4e00\u53d1\u76f4\u63a5\u4ea4\uff0c\u540e\u9762\u518d\u60f3\u60f3\u5427\u3002</p> <pre><code>void ChatGptDeepSeek()\n{\n    int n,x;\n    cin&gt;&gt;n&gt;&gt;x;\n    vector&lt;int&gt;a(n+1);\n    for(int i=1;i&lt;=n;i++)\n        cin&gt;&gt;a[i];\n    int sum=0;\n    for(int i=1;i&lt;=n;i++)\n        sum+=a[i];\n    //\u5982\u679c\u9009\u4e86\u4e00\u4e2a\u56e0\u5b50 \u90a3\u4e48\uff1f\n    //3\uff1f\n    if(sum==n*x) cout&lt;&lt;\"YES\\n\";\n    else cout&lt;&lt;\"NO\\n\";\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2078/#b","title":"B","text":"<p>\u80af\u5b9a\u4e0d\u53ef\u80fd\u6240\u6709\u4eba\u90fd\u80fd\u5230 \\(n\\) \uff0c\u56e0\u4e3a \\(a_i\\ne i\\) \uff0c\u4f46\u662f\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u505a\u5230\u53ea\u6709\u4e00\u4e2a\u4e0d\u7b49\u4e8e \\(n\\) \u3002</p> <p>\u5206\u4e0b\u5947\u5076\u8ba8\u8bba\u4e00\u4e0b.</p> <p>\\(k\\) \u4e3a\u5947\u6570\uff0c\u5219\u6211\u4eec\u9700\u8981\u7b2c\u4e00\u6b21\u5c31\u80fd\u76f4\u63a5\u5230 \\(n\\) \uff0c\u6240\u4ee5\u5c31\u5168\u7b49\u4e8e \\(n\\) \u3002</p> <p>\\(k\\) \u4e3a\u5076\u6570\uff0c\u5219\u7b2c\u4e00\u6b21\u4e0d\u8981\u5230 \\(n\\) \uff0c\u90a3\u5c31\u5230 \\(n-1\\) \u5457\uff0c\u7136\u540e \\(n-1\\) \u5230 \\(n\\) \u3002</p> <pre><code>void ChatGptDeepSeek()\n{\n    int n,k;\n    cin&gt;&gt;n&gt;&gt;k;\n    //k\u4e3a\u5947\u6570\uff1f\n    //\u5168\u4e3a n \uff0c\u9664\u4e86\u6700\u540e\u4e00\u4e2a\n    //k\u4e3a\u5076\u6570\uff1f\n    //\u7b2c\u4e00\u6b21\u5168\u90e8\u53bbn-1 \uff0c\u7136\u540en-1\u53bbn\n\n\n    //2 2?\n    //2 1\n    if(k&amp;1){\n        for(int i=1;i&lt;=n-1;i++){\n            cout&lt;&lt;n&lt;&lt;' ';\n        }\n        cout&lt;&lt;n-1&lt;&lt;'\\n';\n    }else{\n        for(int i=1;i&lt;n-1;i++)\n            cout&lt;&lt;n-1&lt;&lt;' ';\n        cout&lt;&lt;n&lt;&lt;\" \"&lt;&lt;n-1&lt;&lt;'\\n';\n    }\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2078/#c","title":"C","text":"<p>\u5176\u5b9e\u633a easy \u7684 \uff0c\u4f46\u662f\u4e3a\u4ec0\u4e48\u4e00\u76f4\u6ca1\u770b\u51fa\u6765\u5462\u3002\u3002\u3002</p> <p>\u592a\u6162\u4e86\uff0c\u8fd9\u628a\u6253\u5f97\u4e0d\u597d\u7684\u5f88\u5927\u4e00\u90e8\u5206\u539f\u56e0\u5c31\u662f C \u5199\u5f97\u592a\u6162\u4e86\u3002\u867d\u7136\u4e4b\u540e\u8fd8\u662f\u4e0d\u4e00\u5b9a\u80fd AC D\u9898\u3002</p> <p>\u7531\u4e8e\u6bcf\u4e2a\u6570\u5b57\u90fd\u4e0d\u540c\uff0c\u6240\u4ee5\u6211\u4eec\u901a\u8fc7\u7ec4\u5408\uff0c\u80af\u5b9a\u53ef\u4ee5\u4f7f\u5f97\u90a3\u4e2a\u8868\u8fbe\u5f0f\u662f\u5927\u4e8e0\u6216\u8005\u5c0f\u4e8e0\u3002</p> <p>\u90a3\u4e48\u6211\u4eec\u5982\u679c\u628a \\(b\\) \u91cc\u6700\u5927\u7684\u503c\u5f53\u4f5c \\(a_1\\) \uff0c\u90a3\u4e48\u80af\u5b9a\u53ef\u4ee5\u4f7f\u5f97 \\(a_2\\) \u540e\u9762\u51cf\u7684\u662f\u4e00\u4e2a\u6b63\u6570\uff0c\u8fd9\u6837 \\(a_2\\) \u5c31\u662f\u6211\u4eec\u6784\u9020\u51fa\u7684\u65b0\u6570\u5b57\uff0c\u5b83\u6bd4\u539f\u6570\u7ec4\u4e2d\u6bcf\u4e00\u4e2a\u6570\u5b57\u90fd\u5927\u3002</p> <p>\u6784\u9020\u4e00\u4e2a\u6bd4\u6700\u5c0f\u503c\u5c0f\u7684\u6570\u5b57\u4e5f\u662f\u53ef\u4ee5\u505a\u5230\u7684\uff0c\u4f46\u662f\u53ef\u80fd\u4f1a\u4e0d\u662f\u4e00\u4e2a\u6b63\u6574\u6570\u3002</p> <p>\u8fd9\u4e2a\u601d\u8def\u597d\u50cf\u8fd8\u771f\u4e0d\u662f\u5f88\u597d\u60f3\u3002</p> <pre><code>void ChatGptDeepSeek()\n{\n    //+b0 -b1\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;int&gt; b(n * 2 + 1);\n    for (int i = 1; i &lt;= n * 2; i++) {\n        cin &gt;&gt; b[i];\n    }\n    sort(b.begin() + 1, b.end());\n\n    // set&lt;int&gt; st1, st2;\n    // ll s1 = 0, s2 = 0;\n    // for (int i = 1; i &lt;= n; i++)\n    //     st1.insert(b[i]), s1 += b[i];\n    // for (int i = n + 1; i &lt;= n * 2; i++)\n    //     st2.insert(b[i]), s2 += b[i];\n\n    //\u5982\u679c\u8bf4\u5927\u7684n \u4e2a \u51cf\u53bb\u5c0f\u7684 n\u4e2a\n    //\u6b63\u597d\u7b49\u4e8e\u4e86\u67d0\u4e00\u4e2a\u503c\n\n    //- + - + -\n    //\u9009\u4e00\u4e2a\u5f88\u5927\u7684\u6570\u5b57\uff0c\u7136\u540e\u51cf\u4e86\u4e4b\u540e\u6b63\u597d\u7b49\u4e8ean?\u53ef\u884c\u5417\n\n    //4\n    //1 2 3 4\n    //6-1+2-3\n    ll s=b[2*n];\n    //s-x=a[2n]\n    for(int i=1;i&lt;2*n;i++){\n        if(i&amp;1) s+=b[i];\n        else s-=b[i];\n    }\n    cout&lt;&lt;b[2*n]&lt;&lt;\" \"&lt;&lt;s&lt;&lt;' ';\n    for(int i=1;i&lt;2*n;i++)\n        cout&lt;&lt;b[i]&lt;&lt;\" \\n\"[i+1==2*n];\n}\n</code></pre> <p>\u5176\u5b9e\u80fd\u5199\u51fa\u6765 C \u4e5f\u662f\u6709\u70b9\u4e0d\u5bb9\u6613\u4e86\u3002\u3002\u3002</p>"},{"location":"cp_solving/Codeforces/2078/#d","title":"D","text":"<p>\u4e0d\u5f97\u4e0d\u8bf4\u8fd9D\u786e\u5b9e\u4e0d\u96be\u7684\uff0c\u4f46\u662f\u786e\u5b9e\u662f\u4e00\u76f4\u6ca1\u60f3\u5230\u3002\u3002\u3002</p> <p>\u6211\u5355\u60f3\u5230\u4e86\u54ea\u4e2a\u4e58\u7684\u79bb\u5f97\u8fd1\u5c31\u7ed9\u54ea\u4e2a\uff0c\u4f46\u662f\u6211\u6ca1\u60f3\u5230\u5982\u679c\u5927\u5c0f\u76f8\u540c\uff0c\u53ef\u4ee5\u5148\u628a\u591a\u51fa\u6765\u7684\u7559\u7740\uff0c\u4e4b\u540e\u518d\u51b3\u5b9a\u600e\u4e48\u5206\u914d\u3002\u3002</p> <p>\u597d\u725b\u554a\u3002</p> <pre><code>using ll = long long;\n\nvoid ChatGptDeepSeek()\n{\n    int n;\n    cin &gt;&gt; n;\n    ll x = 0, L = 1, R = 1;\n    while (n--) {\n        char o1, o2;\n        int x1, x2;\n        cin &gt;&gt; o1 &gt;&gt; x1 &gt;&gt; o2 &gt;&gt; x2;\n        if (o1 == 'x' &amp;&amp; o2 == 'x') {\n            if (x1 &gt; x2) {\n                L += x;\n                x = L * (x1 - 1) + R * (x2 - 1);\n            } else if (x1 &lt; x2) {\n                R += x;\n                x = L * (x1 - 1) + R * (x2 - 1);\n            } else {\n                x = x * x1 + L * (x1 - 1) + R * (x2 - 1);\n            }\n        } else if (o1 == 'x') {\n            L += x;\n            x = L * (x1 - 1) + x2;\n        } else if (o2 == 'x') {\n            R += x;\n            x = R * (x2 - 1) + x1;\n        } else {\n            x += x1 + x2;\n        }\n    }\n    cout &lt;&lt; L + R + x &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2078/#e","title":"E","text":"<p>\u672c\u6765\u662f\u4e00\u70b9\u601d\u8def\u90fd\u6ca1\u7684\uff0c\u770b\u4e86\u8bc4\u8bba\u533a\u6709\u4eba\u8bf4\u7528 <code>01010101</code> \u548c <code>10101010</code> \u95ee\uff0c\u4e5f\u6709\u8bf4\u62ff <code>0</code> \u548c <code>101010101</code> \uff0c\u6211\u5f53\u65f6\u6ca1\u592a\u7406\u89e3\u7b2c\u4e00\u79cd\u3002</p> <p>\u6211\u672c\u6765\u81ea\u5df1\u60f3\u7684\u662f\uff0c\u5148\u95ee\u4e00\u6b21 <code>0</code> \uff0c\u8fd9\u6837\u5c31\u77e5\u9053 \\(x+y\\) \u7684\u503c\u4e86\u3002\u7b2c\u4e8c\u6b21\u6211\u60f3\u7684\u662f\u95ee\u4e00\u4e2a\u5168 \\(1\\) \u7684\u6570\u5b57\u6765\u7740\u3002\u8fd9\u6837\u6211\u53ef\u4ee5\u77e5\u9053 \\(x\\) \u548c \\(y\\) \u6bcf\u4e00\u4f4d\u4e0a\u7684 \\(1\\) \u7684\u6570\u91cf\u3002</p> <p>\u4f46\u662f\u4e8b\u5b9e\u4e0a\u5e76\u4e0d\u884c\uff0c\u56e0\u4e3a\u6709\u7684\u5730\u65b9\u90a3\u4e00\u4f4d0\u4e2a1\uff0c\u7b54\u6848\u4f1a\u662f \\(2\\) \u500d\u7684\u8fd9\u4e00\u4f4d\u7684\u503c\uff0c\u4e5f\u53ef\u80fd\u662f \\(1\\) \u4f4d\u7684\u9ad8\u4e00\u4f4d\u7684\u503c\u3002\u3002\u3002\u5e76\u4e0d\u80fd\u786e\u5b9a\u5177\u4f53\u662f\u90a3\u4e00\u4f4d\u7ed9\u7684\u8d21\u732e\u3002</p> <p>\u6240\u4ee5\u6211\u4eec\u95ee <code>0</code> \u548c <code>1010101010</code> \u5c31\u80fd\u786e\u5b9a\u5947\u6570\u6216\u8005\u5076\u6570\u4f4d\u4e0a\u7684 <code>1</code> \u7684\u6570\u91cf\uff0c\u7136\u540e\u7528 \\(x+y\\) \u51cf\u53bb\u8fd9\u4e2a\u503c\uff0c\u5c31\u5f97\u5230\u4e86 \\(x\\) \u548c \\(y\\) \u7684\u5076\u6570\u4f4d\u7684\u548c\uff0c\u5c31\u53ef\u4ee5\u77e5\u9053\u5076\u6570\u4f4d\u7684\u6bcf\u4e00\u4f4d\u4e0a\u7684 \\(1\\) \u7684\u6570\u91cf\u3002\u4e8e\u662f\u5c31\u77e5\u9053\u4e86\u6bcf\u4e00\u4f4d\u7684\u60c5\u51b5\u3002</p> <p>\u5176\u5b9e <code>10101010</code> \u548c <code>01010101</code> \u8fd9\u4e24\u4e2a\u4e00\u8d77\u95ee\uff0c\u4e5f\u662f\u5dee\u4e0d\u591a\u540c\u7406\u7684\u3002</p> <p>\u4ee4\u5947\u6570\u4f4d\u4e0a\u5168\u4e3a \\(1\\) \u7684 \\(101010101 = n\\) \uff0c\u90a3\u4e48 \\((x|n)+(y|n)-2n\\) \u5b9e\u9645\u4e0a\u5c31\u7b49\u4e8e \\(x+y\\) \u5728\u5947\u6570\u4f4d\u4e0a\u7684\u548c\uff0c\u5c31\u53ef\u4ee5\u6c42\u51fa\u5b83\u4eec\u5947\u6570\u4f4d\u7684\u5f02\u6216\u7684\u503c\u3002\u7136\u540e\u518d\u53e6\u4e00\u4e2a\u6570\u5b57\u53ef\u4ee5\u6c42\u51fa\u5076\u6570\u4f4d\u7684\u5f02\u6216\u7684\u503c\uff0c\u5c31\u8fbe\u5230\u4e86\u548c\u53e6\u4e00\u79cd\u95ee\u6cd5\u7684\u76f8\u540c\u7684\u6548\u679c\u3002</p> <p>\u8fd8\u662f\u6bd4\u8f83\u4e0d\u5bb9\u6613\u60f3\u5230\u7684\u3002\u3002\u4f46\u611f\u89c9\u96be\u5ea6\u4e0d\u592a\u9ad8\u7684\uff0c\u8d77\u7801\u53ea\u77e5\u9053\u95ee\u4ec0\u4e48\u6570\u5b57\u5c31\u5f88\u5bb9\u6613\u5199\u4e86\u3002</p> <pre><code>constexpr int val = 715827882;\n\nint ask(int n)\n{\n    cout &lt;&lt; n &lt;&lt; endl;\n    int res;\n    cin &gt;&gt; res;\n    return res;\n}\nvoid ChatGptDeepSeek()\n{\n    // \u95ee01010101\u975e\u5e38\u6709\u9053\u7406\u554a\n    // \u56e0\u4e3a\u8fd9\u4e00\u4f4d\u76841\uff0c\u4e00\u5b9a\u4f1a\u6bd4\u540e\u9762\u6240\u6709\u7684\u548c\u8981\u5927\n\n    // \u4e0d\u5bf9\uff0c\uff0c\uff0c\u4f46\u662f\u600e\u4e48\u548c10101010\u7ed3\u5408\u8d77\u6765\u5462\uff1f\n    // \u76f4\u63a5\u95ee 0 \u548c 0101010101\u5427\n    //\n    int sum = ask(0);\n    int res = ask(val);\n    vector&lt;int&gt; b(30);\n    int x = res - sum, y = 0;\n    for (int i = 29; i &gt;= 0; i -= 2) {\n        if (x &gt;= (1 &lt;&lt; (i + 1))) {\n            // b[i] = 2;\n            x -= 1 &lt;&lt; (i + 1);\n        } else if (x &gt;= (1 &lt;&lt; i)) {\n            b[i] = 1;\n            x -= 1 &lt;&lt; i;\n            y += 1 &lt;&lt; i;\n        } else {\n            y += 1 &lt;&lt; (i + 1);\n            b[i] = 2;\n        }\n    }\n    assert(x == 0);\n    x = sum - y;\n    for (int i = 28; i &gt;= 0; i -= 2) {\n        if (x &gt;= (1 &lt;&lt; (i + 1))) {\n            x -= 1 &lt;&lt; (i + 1);\n            b[i] = 2;\n        } else if (x &gt;= (1 &lt;&lt; i)) {\n            x -= 1 &lt;&lt; i;\n            b[i] = 1;\n        }\n    }\n    cout &lt;&lt; \"!\" &lt;&lt; endl;\n    int m;\n    cin &gt;&gt; m;\n    for (int i = 29; i &gt;= 0; i--) {\n        // cerr &lt;&lt; b[i] &lt;&lt; \" \\n\";\n        if (m &gt;&gt; i &amp; 1) {\n            sum += (2 - b[i]) * (1 &lt;&lt; i);\n        }\n    }\n    cout &lt;&lt; sum &lt;&lt; endl;\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.tie(nullptr);\n    // int sum=0;\n    // for(int i=29;i&gt;=0;i--){\n    //     if(i&amp;1) sum|=1&lt;&lt;i;\n    // }\n    // cerr&lt;&lt;sum&lt;&lt;'\\n';\n    int T = 1;\n    cin &gt;&gt; T;\n    while (T--)\n        ChatGptDeepSeek();\n    return 0;\n}\n</code></pre> <p>\u8fd9\u91cc\u53ea\u5199\u4e86\u7b2c\u4e00\u79cd\uff0c\u53e6\u4e00\u79cd\u540c\u7406\u7684\u3002</p>"},{"location":"cp_solving/Codeforces/2082/","title":"Codeforces Round 1010 (Div. 2, Unrated)","text":"<p>\u6bd4\u8d5b\u94fe\u63a5: https://codeforces.com/contest/2082</p>"},{"location":"cp_solving/Codeforces/2082/#b","title":"B","text":"<p>\u54ce\u54ce\uff0c\u8fd9\u4e2a\u770b\u7740\u7a0d\u5fae\u6709\u70b9\u96be\u53d7\u554a\uff0c\u56e0\u4e3a\u6211\u778e\u641e\u4e5f\u5bf9\u4e86\u3002</p> <p>\u5982\u679c\u60f3\u8981\u7ed3\u679c\u66f4\u5927\uff0c\u90a3\u5148\u7528\u5411\u4e0b\u53d6\u6574\u518d\u7528\u5411\u4e0a\u53d6\u6574\u662f\u66f4\u597d\u7684\u3002\u7ed3\u679c\u66f4\u5c0f\u5148\u7528\u5411\u4e0a\u53d6\u6574\u3002\u3002</p> <pre><code>void ChatGptDeepSeek()\n{\n    int x, n, m;\n    cin &gt;&gt; x &gt;&gt; n &gt;&gt; m;\n    n = min(35, n), m = min(35, m);\n    vector&lt;vector&lt;int&gt;&gt; dp1(n + 1, vector&lt;int&gt;(m + 1, 0));\n    vector&lt;vector&lt;int&gt;&gt; dp2(n + 1, vector&lt;int&gt;(m + 1, 1e9 + 1));\n    dp1[0][0] = x, dp2[0][0] = x;\n    for (int i = 0; i &lt;= n; i++)\n        for (int j = 0; j &lt;= m; j++) {\n            if (i) {\n                dp1[i][j] = max(dp1[i][j], dp1[i - 1][j] / 2);\n                dp2[i][j] = min(dp2[i][j], dp2[i - 1][j] / 2);\n            }\n            if (j) {\n                dp1[i][j] = max(dp1[i][j], (dp1[i][j - 1] &amp; 1) + dp1[i][j - 1] / 2);\n                dp2[i][j] = min(dp2[i][j], (dp2[i][j - 1] &amp; 1) + dp2[i][j - 1] / 2);\n            }\n            // cerr &lt;&lt; dp1[i][j] &lt;&lt; '\\n';\n        }\n    // for (int i = 0; i &lt;= n; i++)\n    //     for (int j = 0; j &lt;= m; j++)\n    //         cerr &lt;&lt; dp1[i][j] &lt;&lt; \" \\n\"[j == m];\n    // cerr &lt;&lt; '\\n';\n    cout &lt;&lt; dp2[n][m] &lt;&lt; \" \" &lt;&lt; dp1[n][m] &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2082/#c","title":"C","text":"<p>\u53ea\u6709\u6700\u9ad8\u4f4d\u7684\u4e0b\u4e00\u4f4d\u53ef\u4ee5\u8fdb\u4f4d\u7684\u65f6\u5019\uff0c\u624d\u4f1a\u591a\u7528\u4e00\u6b21\u64cd\u4f5c\u3002</p> <pre><code>using ll = long long;\nconstexpr int mod = 1e9 + 7;\n\nll ksm(ll a, ll b)\n{\n    ll res = 1;\n    while (b) {\n        if (b &amp; 1)\n            res = res * a % mod;\n        a = a * a % mod;\n        b &gt;&gt;= 1;\n    }\n    return res;\n}\nll inv = ksm(2, mod - 2);\nvoid ChatGptDeepSeek()\n{\n    int n;\n    cin &gt;&gt; n;\n    string s;\n    cin &gt;&gt; s;\n    if (n == 1) {\n        cout &lt;&lt; \"0\\n\";\n        return;\n    }\n    vector&lt;ll&gt; f(n);\n    reverse(s.begin(), s.end());\n    if (s[0] == '1')\n        f[0] = inv;\n    for (int i = 1; i &lt; n; i++) {\n        if (s[i] == '1')\n            f[i] = (1 - f[i - 1]) * inv % mod + f[i - 1];\n        else\n            f[i] = inv * f[i - 1] % mod;\n        f[i] = (f[i] + mod) % mod;\n    }\n    cout &lt;&lt; (n - 1 + f[n - 2]) % mod &lt;&lt; '\\n';\n}\n</code></pre> <p>\u6240\u4ee5\u5176\u5b9e\u5411\u4e0b\u53d6\u6574\u64cd\u4f5c\uff0c\u53ea\u6709\u5728\u524d\u9762\u5168\u4e3a1\u65f6\uff0c\u624d\u4f1a\u4f7f\u4f4d\u4e0d\u53d8\uff0c\u4f46\u662f\u8fd9\u6837\u4f1a\u4f7f\u9664\u6700\u9ad8\u4f4d\u5168\u4e3a0\uff0c\u8fd9\u6837\u6c38\u8fdc\u4e0d\u4f1a\u518d\u89e6\u53d1\u7b2c\u4e8c\u6b21\u4e86\u3002</p> <p>\u6240\u4ee5\u60f3\u8981\u591a\u4e00\u6b21\u64cd\u4f5c\uff0c\u90a3\u5fc5\u7136\u5c31\u662f\u7b2c\u4e8c\u4f4d\u80fd\u4ea7\u751f\u8fdb\u4f4d\u7684\u6982\u7387\u3002</p> <pre><code>11111\n10000\n1000\n100\n10\n1\n</code></pre>"},{"location":"cp_solving/Codeforces/2084/","title":"Teza Round 1 (Codeforces Round 1015, Div. 1 + Div. 2)","text":"<p>2025-04-05</p> <p>\u6253\u5f97\u4e0d\u662f\u5f88\u597d\u7684\u4e00\u628a\uff0c\u505a\u51faC\u9898\u7684\u4eba\u4e00\u5927\u534a\u90fd\u505a\u51fa\u4e86D\uff0c\u6211\u6ca1\u5199\u51fa\u6765\u3002\u8fd9\u4e2aD\u786e\u5b9e\u633a\u7b80\u5355\u7684\u3002</p> <p>\u6bd4\u8d5b\u94fe\u63a5: https://codeforces.com/contest/2084</p>"},{"location":"cp_solving/Codeforces/2084/#a","title":"A","text":"<p>\u76f4\u63a5\u731c\u5c31\u884c\uff0c \\(n\\) \u4e3a\u5076\u6570\u65f6\u4e00\u5b9a\u4e0d\u884c\uff0c\u4e3a\u5947\u6570\u65f6\u53ef\u4ee5\u3002</p> <pre><code>void ChatGptDeepSeek()\n{\n    int n;\n    cin &gt;&gt; n;\n    if (n &amp; 1)\n    {\n        // n 1 2\n        cout &lt;&lt; n &lt;&lt; \" \";\n        for (int i = 1; i &lt;= n - 1; i++)\n            cout &lt;&lt; i &lt;&lt; \" \";\n        cout &lt;&lt; '\\n';\n    }\n    else\n        cout &lt;&lt; \"-1\\n\";\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2084/#b","title":"B","text":"<p>\\(gcd([a_{i+1},a_{i+2},...,a_n]\\le min([a_{i+1},a_{i+2},...,a_n])\\) , \u6240\u4ee5\u6574\u4e2a\u6570\u7ec4\u7684\u6700\u5c0f\u503c\u53ea\u80fd\u653e\u5728\u524d\u534a\u90e8\u5206\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u53d6\u6240\u6709\u7684\u6700\u5c0f\u503c\u7684\u500d\u6570\u7684 \\(gcd\\) \uff0c\u82e5\u4e0d\u7b49\u4e8e\u6700\u5c0f\u503c\uff0c\u5219\u4e0d\u53ef\u80fd\u5b58\u5728\u5408\u6cd5\u7684\u65b9\u6848\u3002</p> <pre><code>void ChatGptDeepSeek()\n{\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;ll&gt; a(n + 1);\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; a[i];\n    sort(a.begin() + 1, a.end());\n    ll g = 0;\n    for (int i = 2; i &lt;= n; i++)\n        if (a[i] % a[1] == 0)\n            g = __gcd(g, a[i]);\n    if (g == a[1])\n        cout &lt;&lt; \"Yes\\n\";\n    else\n        cout &lt;&lt; \"No\\n\";\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2084/#c","title":"C","text":"<p>\u53d1\u73b0\u5982\u679c\u6709 $a_i=x $ , \\(b_i=y\\) \uff0c\u5219\u5fc5\u987b\u5b58\u5728 \\(a_j=y\\) \uff0c \\(b_j=x\\) \uff0c\u6211\u4eec\u628a\u8fd9\u6837\u5bf9\u79f0\u7684\u70b9\u653e\u5230\u5bf9\u79f0\u7684\u4f4d\u7f6e\u5373\u53ef\u3002</p> <p>\u53ea\u6709 \\(n\\) \u4e3a\u5947\u6570\u65f6\uff0c\u5fc5\u987b\u51fa\u73b0\u4e00\u4e2a \\(a_i=b_i\\) \u7684\u4f4d\u7f6e\u3002</p> <pre><code>void ChatGptDeepSeek()\n{\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;int&gt; a(n + 1), b(n + 1);\n    for (int i = 1; i &lt;= n; i++)\n    {\n        cin &gt;&gt; a[i];\n    }\n    for (int i = 1; i &lt;= n; i++)\n    {\n        cin &gt;&gt; b[i];\n    }\n\n    /*\n    \u5fc5\u7136\u662f\u6709 x y\n    \u5c31\u6703\u6709 y x \u4e0d\u7136\u5c31\u4e0d\u884c\n    \u82e5n\u70ba\u5947\u6578 \u5247\u80af\u5b9a\u6703\u6709\u4e00\u500b\u4f4d\u7f6e\u5169\u908a\u662f\u76f8\u540c\u7684 \u9019\u500b\u4e00\u5b9a\u8981\u653e\u5728\u4e2d\u9593\n    */\n    vector&lt;int&gt; p1(n + 1), p2(n + 1);\n    for (int i = 1; i &lt;= n; i++)\n    {\n        p1[a[i]] = i;\n        p2[b[i]] = i;\n    }\n    {\n        int cnt = 0;\n        for (int i = 1; i &lt;= n; i++)\n        {\n            if (a[i] == b[i])\n                cnt++;\n            if (p1[b[i]] != p2[a[i]])\n            {\n                cout &lt;&lt; \"-1\\n\";\n                return;\n            }\n        }\n        if ((n &amp; 1) &amp;&amp; cnt &gt; 1)\n        {\n            cout &lt;&lt; \"-1\\n\";\n            return;\n        }\n        if ((n % 2 == 0) &amp;&amp; cnt)\n        {\n            cout &lt;&lt; \"-1\\n\";\n            return;\n        }\n    }\n    vector&lt;pair&lt;int, int&gt;&gt; ans;\n    if (n &amp; 1)\n    {\n        for (int i = 1; i &lt;= n; i++)\n        {\n            if (a[i] == b[i])\n            {\n                if (i != (n + 1) / 2)\n                {\n                    ans.push_back({i, (n + 1) / 2});\n\n                    swap(a[i], a[(n + 1) / 2]);\n                    swap(b[i], b[(n + 1) / 2]);\n                    p1[a[i]] = i;\n                    p2[b[i]] = i;\n                    break;\n                }\n            }\n        }\n    }\n    for (int i = 1; i &lt;= n / 2; i++)\n    {\n        int j = n - i + 1;\n        if (b[j] != a[i])\n        {\n            int k = p1[b[i]];\n            // swap(k,j)\n            swap(a[j], a[k]);\n            swap(b[j], b[k]);\n            ans.push_back({k, j});\n            p1[a[k]] = k;\n            p2[b[k]] = k;\n        }\n        // for (int j = 1; j &lt;= n; j++)\n        //     cerr &lt;&lt; a[j] &lt;&lt; \" \\n\"[j == n];\n        // for (int j = 1; j &lt;= n; j++)\n        //     cerr &lt;&lt; b[j] &lt;&lt; \" \\n\"[j == n];\n    }\n    // {\n    //     vector c = a;\n    //     reverse(c.begin() + 1, c.end());\n    //     assert(c == b);\n    // }\n    cout &lt;&lt; ans.size() &lt;&lt; '\\n';\n    for (auto [l, r] : ans)\n        cout &lt;&lt; l &lt;&lt; \" \" &lt;&lt; r &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2084/#d","title":"D","text":"<p>\u6211\u4eec\u5982\u679c\u80fd\u5c06\u6570\u7ec4\u5206\u6210 \\(m+1\\) \u6bb5\uff0c\u4e14\u6bcf\u4e00\u6bb5\u7684\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e \\(k\\) \uff0c\u90a3\u4e48\u7b54\u6848\u5c31\u4f1a\u662f\u6bcf\u4e00\u6bb5\u7684\u957f\u5ea6\u3002\u5426\u5219\u7b54\u6848\u4e0d\u53ef\u80fd\u5927\u4e8e \\(n-mk&lt;k\\) \uff0c\u53ef\u4ee5\u6784\u9020\u6210\u6bcf\u6bb5\u90fd\u662f \\([0,k-1]\\) \uff0c\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u7b54\u6848\u53d6\u5230 \\(n-mk\\) \u3002</p> <pre><code>void ChatGptDeepSeek()\n{\n    int n, m, k;\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;\n\n    for (int i = 0; i &lt; n; i++)\n        cout &lt;&lt; i % (n - m * k &lt; k ? k : n / (m + 1)) &lt;&lt; \" \\n\"[i + 1 == n];\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2085/","title":"Codeforces Round 1011 (Div. 2)","text":"<p>2025-03-22</p> <p>\u8fd9\u573a\u539f\u672c\u6709\u70b9\u7a83\u559c\uff0c\u4e0a\u4e8665\u5206\uff0c\u4f46\u662f\u4eca\u5929\u4e2d\u5348\u76f4\u63a5\u6389\u5feb\u4e00\u767e\u5206\u3002\u3002\u8be5\u52a0\u8bad\u4e86\u5b69\u5b50\u4eec\u3002\u5468\u672b\u6253\u4e86\u4e24\u5929 <code>wzry</code> \u3002\u3002\u3002</p> <p>\u6bd4\u8d5b\u94fe\u63a5: https://codeforces.com/contest/2085</p> <p>\u6bd4\u8f83\u7b80\u5355\u7684\u4e00\u96c6\uff0c\u8d5b\u65f6\u5199\u51fa\u4e86ABCD\uff0cofficial rank 742\u3002</p> <p>E \u4f3c\u4e4e\u8fc7\u9898\u4eba\u6570\u6ca1\u6709\u6bd4 D \u5c11\u5f88\u591a\uff0c\u4e4b\u540e\u518d\u770b\u770b\u5427\u3002</p>"},{"location":"cp_solving/Codeforces/2085/#a","title":"A","text":"<p>\u7ffb\u8f6c\u540e\u5982\u679c\u4e0d\u76f8\u7b49\uff0c\u90a3\u4e48\u4f60\u4e00\u5b9a\u53ef\u4ee5\u901a\u8fc7\u4e00\u6b21\u64cd\u4f5c\uff0c\u4f7f\u5f97\u5b83\u4eec\u7684\u5927\u5c0f\u5173\u7cfb\u53cd\u8fc7\u6765\u3002</p> <p>\u82e5\u76f8\u7b49\uff0c\u5219\u4e3a\u56de\u6587\u4e32\uff0c\u5982\u679c\u4e0d\u662f\u5168\u4e3a\u4e00\u6837\u7684\u5b57\u7b26\uff0c\u5219\u4e00\u6b21\u64cd\u4f5c\u4e5f\u662f\u591f\u7684\u3002</p> <pre><code>void ChatGptDeepSeek()\n{\n    int n, k;\n    cin &gt;&gt; n &gt;&gt; k;\n    string s;\n    cin &gt;&gt; s;\n    vector&lt;int&gt; cnt(25 + 1);\n    for (auto c : s)\n        cnt[c - 'a']++;\n    if (*max_element(cnt.begin(), cnt.end()) == n)\n    {\n        cout &lt;&lt; \"NO\\n\";\n    }\n    else\n    {\n        string t = s;\n        reverse(t.begin(), t.end());\n        if (k)\n            cout &lt;&lt; \"YES\\n\";\n        else if (s &lt; t)\n            cout &lt;&lt; \"YES\\n\";\n        else\n            cout &lt;&lt; \"No\\n\";\n    }\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2085/#b","title":"B","text":"<p>\u6709\u70b9\u96be\u53d7\u4e86\u3002\u6211B\u600e\u4e48\u5199\u4e86\u534a\u5c0f\u65f6\u3002\u3002\u3002</p> <p>\u5176\u5b9e\u6709\u4e2a\u7b80\u5355\u7684\u601d\u8def\u5c31\u662f\uff0c\u4e0d\u7ba1\u548b\u6837\uff0c\u90fd\u628a\u6570\u7ec4\u5408\u5e76\u6210\u957f\u5ea6\u4e3a 4 \u7684\uff0c\u5373\u628a \\([4,n]\\) \u7ed9\u5408\u5e76\uff0c\u5c31\u4f1a\u597d\u8ba8\u8bba\u5f88\u591a\u4e86\u3002</p> <p>\u6211\u7684\u7565\u5fae\u6709\u70b9\u9ebb\u70e6\u3002\u3002\u3002</p> <pre><code>void ChatGptDeepSeek()\n{\n    /*\n    \u8981\u6ee1\u8db3\u6700\u540e\u4e00\u6b21\u64cd\u4f5c\u4e3a0\n    \u90a3\u4e48\u5728\u8fd9\u524d\u4e00\u6b21 \u91cc\u9762\u4e0d\u80fd\u67090\n    \u5728\u8fd9\u524d\u4e24\u6b21 \u5c31\u5fc5\u987b\u8981\u67090\n\n    0 0 -&gt; 1\n    0 1 -&gt; 2\n\n    \u5b9e\u9645\u4e0a\u5c31\u662f\u628a\u6570\u7ec4\u91cc\u76840\u53d8\u6ca1\n\n    \u5982\u679c\u67090 \u5c31\u5408\u5e76\u4ed6\u4eec\n\n\n    */\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;int&gt; a(n);\n    for (int i = 0; i &lt; n; i++)\n        cin &gt;&gt; a[i];\n    if (count(a.begin(), a.end(), 0) == n)\n    {\n        cout &lt;&lt; \"3\\n\";\n        cout &lt;&lt; \"3 \" &lt;&lt; n &lt;&lt; '\\n';\n        cout &lt;&lt; \"1 2\\n\";\n        cout &lt;&lt; \"1 2\\n\";\n        return;\n    }\n    vector&lt;pair&lt;int, int&gt;&gt; ans;\n    int l = 0;\n    vector&lt;int&gt; b;\n    for (int i = 0; i &lt; a.size(); i++)\n    {\n        if (a[i] == 0)\n        {\n            int j = i + 1, cnt = 1;\n            while (j &lt; a.size() &amp;&amp; a[j] == 0)\n            {\n                j++;\n                cnt++;\n            }\n            if (b.empty())\n            {\n                if (j == a.size())\n                {\n                    ans.push_back({1, n - 1});\n                    ans.push_back({1, 2});\n                    b.push_back(1);\n                    break;\n                }\n                else\n                {\n                    if (cnt == 1)\n                    {\n                        ans.push_back({1, 2});\n                    }\n                    else\n                    {\n                        ans.push_back({i + 1, i + cnt});\n                        b.push_back(1);\n                    }\n                }\n            }\n            else\n            {\n                if (cnt == 1)\n                {\n                    ans.push_back({b.size(), b.size() + cnt});\n                }\n                else\n                {\n                    ans.push_back({b.size() + 1, b.size() + cnt});\n                    b.push_back(1);\n                }\n            }\n            i = j - 1;\n        }\n        else\n            b.push_back(1);\n    }\n    // if (ans.empty())\n    //     ans.push_back({1, n});\n    if (b.size() &gt; 1)\n        ans.push_back({1, b.size()});\n    cout &lt;&lt; ans.size() &lt;&lt; '\\n';\n    for (auto [x, y] : ans)\n        cout &lt;&lt; x &lt;&lt; \" \" &lt;&lt; y &lt;&lt; '\\n';\n    // cout &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2085/#c","title":"C","text":"<p>\\((x+k)+(y+k)=(x+k)\\oplus (y+k)\\) </p> <p>\u5bf9\u4e8e \\(x+y=x\\oplus y\\)  \uff0c\u90a3\u4e48 \\(x\\) \u548c \\(y\\) \u5fc5\u5b9a\u4e0d\u80fd\u6709\u540c\u4e3a \\(1\\) \u7684\u4f4d \u3002\u6240\u4ee5 \\(x\\ne y\\) \u65f6\u663e\u7136\u4e0d\u80fd\u6210\u7acb\u3002</p> <p>\u6240\u4ee5\u6709\u4e00\u79cd\u5f88\u7b80\u5355\u7684\u6784\u9020\u65b9\u5f0f\u5c31\u662f\uff0c\u4f7f\u5f97 \\(x\\) , \\(y\\) \u4e2d\u8f83\u5927\u7684\u4e00\u4e2a\u6570\u5b57\u5148\u8fbe\u5230 \\(100000\\) \u7684\u5f62\u5f0f\uff0c\u8fd9\u6837\u5b83\u7684\u6700\u9ad8\u4f4d\u4e3a \\(1\\) \uff0c \u800c\u53e6\u4e00\u4e2a\u6570\u5b57\u53ea\u4f1a\u5c0f\u4e8e\u5b83\u3002</p> <pre><code>void ChatGptDeepSeek()\n{\n    /*\n    (x+k) + (y+k) = (x+k)^(y+k)\n\n\n    */\n    int x, y;\n    cin &gt;&gt; x &gt;&gt; y;\n    if (x == y)\n    {\n        cout &lt;&lt; \"-1\\n\";\n        return;\n    }\n    if (x &lt; y)\n        swap(x, y);\n    long long n = 1LL &lt;&lt; (__lg(x) + 1);\n    long long k = n - x;\n    assert((x + k) + (y + k) == ((x + k) ^ (y + k)));\n    cout &lt;&lt; k &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2085/#d","title":"D","text":"<p>\u5982\u679c\u5012\u7740\u770b\u5462\uff1f\u5c31\u662f\u4f60\u6bcf\u6b21\u9009\u7684\u65f6\u5019\uff0c\u6570\u91cf\u5fc5\u987b\u6ee1\u8db3 \\(cnt(k+1)\\le i\\) \uff0c\u53ea\u8981\u4f60\u80fd\u4e00\u76f4\u6ee1\u8db3\u8fd9\u4e2a\u6761\u4ef6\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u4e00\u76f4\u968f\u4fbf\u62ff\u3002</p> <p>\u4e5f\u5c31\u662f\u5728 \\(k+1\\) \u4e4b\u540e\u53ef\u4ee5\u62ff\u7b2c\u4e00\u4e2a\uff0c\u5728 \\(2k+2\\) \u4e4b\u540e\u53ef\u4ee5\u62ff\u7b2c\u4e8c\u4e2a\u3002</p> <p>\u5176\u5b9e\u5c31\u53ef\u4ee5\u76f4\u63a5\u8d2a\u5fc3\u4e86\uff0c\u82e5\u5f53\u524d\u4f4d\u7f6e\u53ef\u4ee5\u591a\u62ff\u4e00\u4e2a\uff0c\u5219\u76f4\u63a5\u628a\u8fd9\u4e2a\u62ff\u8d70\u3002\u5426\u5219\u6bd4\u8f83\u4e00\u4e0b\u4e4b\u524d\u62ff\u4e86\u7684\uff0c\u5982\u679c\u5f53\u524d\u7684\u503c\u662f\u6bd4\u62ff\u4e86\u7684\u6700\u5c0f\u503c\u5927\u7684\u8bdd\uff0c\u90a3\u4e48\u53ef\u4ee5\u628a\u90a3\u4e2a\u6254\u6389\u6362\u6210\u8fd9\u4e2a\u3002</p> <pre><code>void ChatGptDeepSeek()\n{\n    int n, k;\n    cin &gt;&gt; n &gt;&gt; k;\n    vector&lt;int&gt; d(n + 1);\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; d[i];\n    reverse(d.begin() + 1, d.end());\n    priority_queue&lt;int, vector&lt;int&gt;, greater&lt;&gt;&gt; pq;\n    for (int i = k + 1; i &lt;= n; i++)\n    {\n        // cerr&lt;&lt;d[i]&lt;&lt;'\\n';\n        if (1LL * ((int)pq.size() + 1) * (k + 1) &lt;= i)\n            pq.push(d[i]);\n        else\n        {\n            pq.push(d[i]);\n            // cerr &lt;&lt; pq.top() &lt;&lt; '\\n';\n            pq.pop();\n        }\n    }\n    // cerr&lt;&lt;'\\n';\n    long long ans = 0;\n    while (!pq.empty())\n    {\n        ans += pq.top();\n        // cerr&lt;&lt;ans&lt;&lt;'\\n';\n        pq.pop();\n    }\n    // cerr&lt;&lt;'\\n';\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2085/#e","title":"E","text":"<p>\u516d\u767e\u516d\u5341\u516d\u554a\uff0c\u600e\u4e48\u4e0d\u770b\u9898\u89e3\u80fd\u5199\u51fa\u6765\u7684\u554a\u3002\u800c\u4e14\u6ca1\u6709\u5f88\u4e45\u3002\u5927\u6982\u4e09\u5341\u591a\u5206\u949f\u3002\u800c\u4e14\u524d\u9762\u53c8\u662f\u5728\u8fdb\u884c\u65e0\u6548\u601d\u8003\u3002\u3002</p> <p>\u901f\u5ea6\u8fd8\u662f\u6700\u91cd\u8981\u7684\u56e0\u7d20\u4e4b\u4e00\uff0c\u53ea\u6709\u7b80\u5355\u9898\u901f\u5ea6\u8db3\u591f\u5feb\u4e14\u4fdd\u8bc1\u6b63\u786e\u7387\uff0c\u624d\u80fd\u7559\u4e0b\u66f4\u591a\u7a7a\u95f4\u53bb\u601d\u8003\u540e\u9762\u7684\u9898\uff0c\u624d\u80fd\u6709\u673a\u4f1a\u5199\u51fa\u66f4\u591a\u7684\u9898\u76ee\u3002</p> <p>\u5b9e\u9645\u4e0a\u5982\u679c\u8fd9\u9898\u80fd\u60f3\u5230\u8003\u8651 \\(\\sum a\\) \u548c \\(\\sum b\\) \u7684\u503c\u7684\u5173\u7cfb\uff0c\u5c31\u5f88\u597d\u505a\u4e86\u3002\u7531\u4e8e\u662f\u5bf9\u540c\u4e00\u4e2a\u6570\u5b57\u53d6\u6a21\uff0c\u6240\u4ee5 \\(sum_a \\equiv sum_b \\pmod{k}\\) \u3002</p> <p>\u6240\u4ee5 \\(k \\mid sum_a-sum_b\\) \uff0c\u4e8e\u662f\u6211\u4eec\u7684 \\(k\\) \u4e00\u5b9a\u662f \\(sum_a-sum_b\\) \u7684\u4e00\u4e2a\u56e0\u5b50\uff0c\u76f4\u63a5\u8fdb\u884c\u679a\u4e3e\u5373\u53ef\u3002\u679a\u4e3e\u56e0\u5b50\u7684\u590d\u6742\u5ea6\u662f \\(\\sqrt{sum_a-sum_b}\\) \uff0c\\(sum_a-sum_b\\) \u7684\u6700\u5927\u503c\u5927\u6982\u662f \\(10^{10}\\) \uff0c\u4f46\u662f\u4e00\u4e2a\u6570\u5b57\u7684\u56e0\u5b50\u7684\u6570\u91cf\u5b9e\u9645\u4e0a\u662f\u5f88\u5c11\u7684\uff0c\u76f8\u6bd4\u5b83\u81ea\u8eab\u7684\u8303\u56f4\u3002\u5e94\u8be5\u5927\u6982\u662f \\(\\log n\\) \u4e2a\u56e0\u5b50\u5427\u3002\u8fd9\u4e2a\u4e0d\u9700\u8981\u8bc1\u660e\uff0c\u4f60\u53ea\u9700\u8981\u611f\u89c9\u5c31\u884c\uff0c\u663e\u7136\u6bd4   \\(n\\) \u5c11\u5f88\u591a\u5427\u3002</p> <pre><code>void ChatGptDeepSeek()\n{\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;int&gt; a(n + 1), b(n + 1);\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; a[i];\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; b[i];\n    sort(a.begin() + 1, a.end());\n    sort(b.begin() + 1, b.end());\n    if (a == b)\n    {\n        cout &lt;&lt; \"998244353\\n\";\n        return;\n    }\n    /*\n    k\u7684\u6700\u5c0f\u7684\u53ef\u80fd\u7684\u503c\u662f b\u4e2d\u6700\u5927\u503c+1\n    \u4f46\u8fd9\u8fdc\u8fdc\u4e0d\u591f\u7684\n\n    \u5982\u679cb\u4e2d\u6ca1\u6709\u5bf9\u5e94\u7684a \u90a3\u4e48\u5fc5\u7136\u8981\u6a21\u4e86\n    \u5e76\u4e14\u6a21\u4e86\u4e4b\u540e \u5bf9\u5e94\u7684\u503c\u7684\u6570\u91cf\u8fd8\u4e0d\u80fd\u53d8\u7684\n\n    \u90a3\u4e48\u6bd4k\u6700\u5c0f\u503c\u8fd8\u5c0f\u7684\u6570\u5b57 \u81ea\u7136\u4e0d\u53ef\u80fd\u4f1a\u53d8\u4e86\n    \u4f46\u8fd9\u4e2a\u6839\u672c\u4e0d\u591f\n\n    x%k=A\n    suma%k = sumb%k\n    k | suma - sumb\n    \u4e5f\u5c31\u662f\u8bf4 \u53ef\u884c\u7684 k \u7684\u6570\u91cf\u662f\u6709\u9650\u7684\n\n    \u503c\u662f 1e10 \u679a\u4e3e\u56e0\u5b50\u8303\u56f4 1e5\n    \u56e0\u5b50\u6570\u91cf\u5e94\u8be5\u53ea\u6709log\u4e2a\n    */\n    long long s = 0;\n    for (int i = 1; i &lt;= n; i++)\n    {\n        s += a[i] - b[i];\n    }\n    if (s &lt; 0)\n    {\n        cout &lt;&lt; \"-1\\n\";\n        return;\n    }\n    auto check = [&amp;](long long x)\n    {\n        if (x &lt;= b[n] || x &gt; 1000000000)\n            return false;\n        vector&lt;int&gt; c = a;\n        for (int i = 1; i &lt;= n; i++)\n            c[i] %= x;\n        sort(c.begin() + 1, c.end());\n        return c == b;\n    };\n    for (long long i = 1; i * i &lt;= s; i++)\n    {\n        if (s % i == 0)\n        {\n            if (check(i))\n            {\n                cout &lt;&lt; i &lt;&lt; '\\n';\n                return;\n            }\n            if (check(s / i))\n            {\n                cout &lt;&lt; s / i &lt;&lt; '\\n';\n                return;\n            }\n        }\n    }\n    cout &lt;&lt; \"-1\\n\";\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2086/","title":"Educational Codeforces Round 177 (Rated for Div. 2)","text":"<p>2025-04-04</p> <p>\u6bd4\u8d5b\u94fe\u63a5: https://codeforces.com/contest/2086</p>"},{"location":"cp_solving/Codeforces/2086/#a","title":"A","text":"<p>\u9898\u76ee\u95ee\u7684\u662f\u9020 \\(3n\\) kg \u9700\u8981\u591a\u5c11\uff0c\u635f\u8017\u4e3a \\(\\frac{1}{4}\\) \uff0c\u6240\u4ee5\u9700\u8981 \\(4n\\) kg\u7684\u6750\u6599\uff0c\u4e5f\u5c31\u662f\u6bcf\u79cd\u539f\u6599 \\(2n\\) kg\u3002</p> <pre><code>void ChatGptDeepSeek()\n{\n    int n;\n    cin&gt;&gt;n;\n    //3n 2n?\n    cout&lt;&lt;n*2&lt;&lt;'\\n';\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2086/#b","title":"B","text":"<p>\u8d5b\u65f6\u9898\u770b\u9519\u4e86\u803d\u8bef\u5f88\u4e45\uff0c\u8fd9\u9898\u53ea\u9700\u8981\u6c42\u6ee1\u8db3\u6761\u4ef6\u7684 \\(l\\) \u7684\u6570\u91cf\u3002\u6211\u4eec\u53ef\u4ee5\u627e\u5230\u6700\u540e\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684 \\(l\\) \u8f93\u51fa\u5c31\u884c\uff0c\u56e0\u4e3a\u5b83\u524d\u9762\u7684\u80af\u5b9a\u90fd\u662f\u6ee1\u8db3\u7684\u3002</p> <p>\u4e8c\u5206\u4e5f\u884c\u3002</p> <pre><code>void ChatGptDeepSeek()\n{\n    int n, k;\n    ll x;\n    cin &gt;&gt; n &gt;&gt; k &gt;&gt; x;\n    vector&lt;int&gt; a(n + 1);\n    vector&lt;ll&gt; pre(n + 1), nxt(n + 1);\n    for (int i = 1; i &lt;= n; i++)\n    {\n        cin &gt;&gt; a[i];\n        pre[i] = pre[i - 1] + a[i];\n    }\n    auto ask = [&amp;](ll i)\n    {\n        return pre[n] * (i / n) + pre[i % n];\n    };\n    auto calc = [&amp;](ll l, ll r)\n    {\n        return ask(r) - ask(l - 1);\n    };\n\n    ll lo=0,hi=1LL*n*k+1;\n    while(lo&lt;hi-1){\n        ll mid=(lo+hi)&gt;&gt;1;\n        if(calc(mid,1LL*n*k)&gt;=x)\n            lo=mid;\n        else hi=mid;\n    }\n    cout&lt;&lt;lo&lt;&lt;'\\n';\n}\n</code></pre> <pre><code>void ChatGptDeepSeek()\n{\n    int n, k;\n    ll x;\n    cin &gt;&gt; n &gt;&gt; k &gt;&gt; x;\n    vector&lt;int&gt; a(n + 1);\n    ll sum = 0;\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; a[i], sum += a[i];\n    if (x &gt; k * sum)\n    {\n        cout &lt;&lt; \"0\\n\";\n        return;\n    }\n    ll ned = x / sum * sum;\n    // \u5b8c\u6574\u7684\u5340\u9593\u9700\u8981\u6e1b\u53bb x/sum \u500b\uff0c\u9019\u90e8\u5206\u7684 sum \u662f ned\n    // \u4e5f\u8a31\u525b\u597d\u6574\u9664\u4e86 \u90a3\u9ebd\u7b54\u6848\u5c31\u662f\n\n    if (x % sum == 0)\n    {\n        cout &lt;&lt; (k - x / sum) * n + 1 &lt;&lt; '\\n';\n        return;\n    }\n\n    ll idx = 1LL * n * k - x / sum * n;\n\n    // \u6211\u5011\u627e\u4e00\u500b\u5f8c\u7db4 \u4f7f\u5f97\u9019\u500b\u5f8c\u7db4\u7684 sum \u5c0f\u65bc x\n    // \u5e76\u4e14\u9019\u500b\u5f8c\u7db4 \u518d\u591a\u52a0\u4e00\u500b\u6578\u5b57 \u5c31\u6703\u4f7f\u5f97 sum \u5927\u65bc\u7b49\u65bc x\n\n\n    for (int i = n; i &gt;= 1; i--)\n    {\n        if (ned + a[i] &gt;= x)\n        {\n            cout &lt;&lt; idx &lt;&lt; '\\n';\n            return;\n        }\n        ned += a[i];\n        idx--;\n    }\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2086/#c","title":"C","text":"<p>\u9700\u8981\u5bf9\u5e94\u7684\u4f4d\u7f6e\u90fd\u4fee\u6539\u3002</p> <pre><code>void ChatGptDeepSeek()\n{\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;int&gt; p(n + 1), d(n + 1), r(n + 1);\n    for (int i = 1; i &lt;= n; i++)\n    {\n        cin &gt;&gt; p[i];\n        r[p[i]] = i;\n    }\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; d[i];\n    int ans = 0;\n    for (int i = 1; i &lt;= n; i++)\n    {\n        // we can only change p[d[i]] to d[i]\n        // so we should check d[i]\n        // r[p[d[i]]] = 0;\n        int x = p[d[i]];\n        while (r[x])\n        {\n            ans++;\n            r[x] = 0;\n            x = p[x];\n        }\n        x = d[i];\n        while (r[x])\n        {\n            ans++;\n            r[x] = 0;\n            x = p[x];\n        }\n        cout &lt;&lt; ans &lt;&lt; \" \\n\"[i == n];\n    }\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2086/#d","title":"D","text":"<p>\u6c42\u4e24\u4e2a\u7ec4\u5408\u6982\u7387\u7684\u4e58\u79ef\uff0c\u8fd9\u4e2a\u503c\u662f\u4e00\u76f4\u4e0d\u4f1a\u53d8\u7684\u3002\u6240\u4ee5\u6211\u4eec\u9700\u8981\u6c42\u51fa\u548c\u4e3a \\(\\frac{n}{2}\\) \u7684\u5b50\u96c6\u7684\u6570\u91cf\uff0c\u53ef\u4ee5\u5f88\u7b80\u5355\u5730\u7528 DP \u6c42\u51fa\u3002\u867d\u7136\u8d5b\u65f6\u6ca1\u60f3\u5230\u3002</p> <p>\u90a3\u4e2a\u6982\u7387\u516c\u5f0f\uff0c\u4e4b\u524d\u9047\u8fc7\u4e00\u6b21\u3002\u3002\u7406\u89e3\u4e86\u5f88\u4e45\u624d\u52c9\u5f3a\u7406\u89e3\uff0c\uff0c\u867d\u7136\u73b0\u5728\u611f\u89c9\u53ea\u8981\u80fd\u8bb0\u4f4f\u516c\u5f0f\u5c31\u597d\u3002\u5177\u4f53\u53eb\u5565\u6211\u5fd8\u4e86\uff0c\u5c31\u662f\u6bcf\u79cd\u6570\u5b57\u53ef\u80fd\u6709\u591a\u4e2a\uff0c\u7136\u540e\u6c42\u6392\u5217\u6570\u3002</p> <pre><code>constexpr int mod = 998244353;\nconstexpr int N = 5e5 + 114;\nint f[N];\n\nll ksm(ll a, ll b)\n{\n    ll res = 1;\n    while (b)\n    {\n        if (b &amp; 1)\n            res = res * a % mod;\n        a = a * a % mod;\n        b &gt;&gt;= 1;\n    }\n    return res;\n}\nll inv(ll x) { return ksm(x, mod - 2); }\nvoid ChatGptDeepSeek()\n{\n    array&lt;int, 26&gt; c;\n    int n = 0;\n    for (int i = 0; i &lt; 26; i++)\n        cin &gt;&gt; c[i], n += c[i];\n    vector&lt;int&gt; dp(n + 1);\n    dp[0] = 1;\n    for (int i = 0; i &lt; 26; i++)\n    {\n        if (!c[i])\n            continue;\n        for (int j = n; j &gt;= c[i]; j--)\n            dp[j] = (dp[j] + dp[j - c[i]]) % mod;\n    }\n    ll ans = (dp[n / 2] * f[n / 2] % mod) * f[(n + 1) / 2] % mod;\n    for (int i = 0; i &lt; 26; i++)\n        ans = ans * inv(f[c[i]]) % mod;\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.tie(nullptr);\n    f[0] = 1;\n    for (int i = 1; i &lt; N; i++)\n        f[i] = 1LL * f[i - 1] * i % mod;\n    int T = 1;\n    cin &gt;&gt; T;\n    while (T--)\n        ChatGptDeepSeek();\n    return 0;\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2090/","title":"Codeforces Round 1012 (Div. 2)","text":"<p>2025-03-23</p> <p>\u6bd4\u8d5b\u94fe\u63a5: https://codeforces.com/contest/2090</p> <p>\u8fd9\u6b21\u72b6\u6001\u6709\u70b9\u5dee\u4e86\uff0c\u8d5b\u65f6\u53ea\u5199\u51fa\u4e86AB\u3002\u81f3\u5c11C\u5e94\u8be5\u4e0d\u7b97\u5f88\u96be\u7684\u3002\u3002</p> <p>\u597d\u597d\u770b\u770b\u5427\u3002</p>"},{"location":"cp_solving/Codeforces/2090/#a","title":"A","text":"<p>\u6ca1\u5565\u597d\u8bf4\u7684\uff0c\u4f46\u662f\u6211\u6ca1\u6ce8\u610f\u8f93\u5165\u987a\u5e8f\u548c\u4eba\u7269\u7684\u987a\u5e8f\u3002\u3002WA\u4e86\u4e00\u53d1\uff0c\u9ebb\u4e86\u3002</p> <pre><code>void ChatGptDeepSeek()\n{\n    int a, x, y;\n    cin &gt;&gt; x &gt;&gt; y &gt;&gt; a;\n    a++;\n    a %= (x + y);\n    if (a == 0)\n    {\n        cout &lt;&lt; \"YES\\n\";\n    }\n    else if (a &lt;= x)\n    {\n        cout &lt;&lt; \"NO\\n\";\n    }\n    else\n    {\n        cout &lt;&lt; \"YES\\n\";\n    }\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2090/#b","title":"B","text":"<p>\u5982\u679c\u4e00\u4e2a\u683c\u5b50\u6709\u6570\u5b57\uff0c\u90a3\u4e48\u5b83\u7684\u5de6\u8fb9\u6216\u8005\u5b83\u7684\u4e0a\u9762\uff0c\u4e00\u5b9a\u9700\u8981\u81f3\u5c11\u6709\u4e00\u8fb9\u662f\u5168\u6709\u6570\u5b57\u7684\u3002</p> <pre><code>void ChatGptDeepSeek()\n{\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    vector&lt;string&gt; s(n);\n    for (int i = 0; i &lt; n; i++)\n        cin &gt;&gt; s[i];\n    for (int i = 1; i &lt; n; i++)\n        for (int j = 1; j &lt; m; j++)\n        {\n            if (s[i][j] != '0')\n            {\n                int ok = 0, cnt = 0;\n                for (int k = 0; k &lt; i; k++)\n                {\n                    if (s[k][j] != '0')\n                        cnt++;\n                }\n                ok |= (cnt == i);\n                cnt = 0;\n                for (int k = 0; k &lt; j; k++)\n                {\n                    if (s[i][k] != '0')\n                        cnt++;\n                }\n                ok |= (cnt == j);\n                if (!ok)\n                {\n                    cout &lt;&lt; \"NO\\n\";\n                    return;\n                }\n            }\n        }\n    cout &lt;&lt; \"YES\\n\";\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2090/#c","title":"C","text":"<p><code>clist</code> \u9884\u6d4b\u7684\u96be\u5ea6\u662f 1600\uff0c\u611f\u89c9\u786e\u5b9e\u4e0d\u96be\u7684\u3002\u3002\u751a\u81f3\u53ef\u4ee5\u4f4e\u4e00\u70b9\u3002\u3002</p> <p>\u4e0d\u662f\u54e5\u4eec\uff0c\u8fd9\u600e\u4e48\u968f\u4fbf\u5c31\u80fd\u8fc7\u7684\u554a\u3002</p> <p>\u5c31\u76f4\u63a5\u89c2\u5bdf\u5230\u6bcf\u4e2a\u70b9\u8ddd\u79bb\u662f\u591a\u5c11\uff0c\u7136\u540e\u62ff\u4f18\u5148\u961f\u5217\u6a21\u62df\u4e00\u4e0b\u3002</p> <p>\u8fd9\u5206\u6389\u5f97\u597d\u4e8f\u554a\u3002\u8fd9\u5c31\u662f\u4e0d\u8010\u5fc3\u5199\u9898\u60f3\u9898\u7684\u4e0b\u573a\u3002</p> <pre><code>struct node\n{\n    int dis, x, y;\n    friend bool operator&lt;(const node a, const node b)\n    {\n        if (a.dis == b.dis)\n        {\n            if (a.x == b.x)\n                return a.y &lt; b.y;\n            return a.x &lt; b.x;\n        }\n        return a.dis &lt; b.dis;\n    };\n    friend bool operator&gt;(const node a, const node b)\n    {\n        if (a.dis == b.dis)\n        {\n            if (a.x == b.x)\n                return a.y &gt; b.y;\n            return a.x &gt; b.x;\n        }\n        return a.dis &gt; b.dis;\n    };\n};\nvoid ChatGptDeepSeek()\n{\n    int n;\n    cin &gt;&gt; n;\n\n    priority_queue&lt;node, vector&lt;node&gt;, greater&lt;&gt;&gt; q1; // \u65e0\u4eba\u7684\n    priority_queue&lt;node, vector&lt;node&gt;, greater&lt;&gt;&gt; q2; // \u6709\u4eba\u7684\n\n    int m = 2 * sqrt(n);\n    for (int i = 0; i &lt;= m; i++)\n        for (int j = 0; j &lt;= m; j++)\n        {\n            q1.push({3 * i + 3 * j + 2, 3 * i + 1, 3 * j + 1});\n        }\n    for (int i = 0; i &lt; n; i++)\n    {\n        int t;\n        cin &gt;&gt; t;\n        // cerr &lt;&lt; q1.top().dis &lt;&lt; \" \" &lt;&lt; q1.top().x &lt;&lt; \" \" &lt;&lt; q1.top().y &lt;&lt; '\\n';\n        // if (q2.size())\n        //     cerr &lt;&lt; \"q2 \" &lt;&lt; q2.top().dis &lt;&lt; \" \" &lt;&lt; q2.top().x &lt;&lt; \" \" &lt;&lt; q2.top().y &lt;&lt; '\\n';\n\n        if (q2.empty() || q2.top() &gt; q1.top() || t == 0)\n        {\n            auto [dis, x, y] = q1.top();\n            q1.pop();\n            cout &lt;&lt; x &lt;&lt; \" \" &lt;&lt; y &lt;&lt; '\\n';\n            q2.push({dis + 1, x + 1, y});\n            q2.push({dis + 1, x, y + 1});\n            q2.push({dis + 4, x + 1, y + 1});\n        }\n        else\n        {\n            cout &lt;&lt; q2.top().x &lt;&lt; \" \" &lt;&lt; q2.top().y &lt;&lt; '\\n';\n            q2.pop();\n        }\n    }\n    /*\n    3x+2,3y+2 \u9700\u8981\u591a\u8d70\u4e24\u6b65\n    \u5176\u4f59\u7684\u6b65\u6570\u5168\u662f\u6a2a\u5750\u6807+\u7eb5\u5750\u6807\u7684\n    */\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2090/#d","title":"D","text":"<p>\u5927\u69821700\uff0c\u5e94\u8be5\u80fd\u60f3\u51fa\u6765\u7684\u3002\u3002\u660e\u5929\u518d\u770b\u770b\u5427\u3002</p> <p>\u4e0d\u662f\uff0c\u600e\u4e48\u80fd\u8fd9\u4e48\u667a\u6167\uff1f\u600e\u4e48\u60f3\u51fa\u6765\u7684\uff1f</p> <p>\u6709\u79cd\u601d\u8def\u662f\uff0c\u627e\u4e00\u4e2a\u5728\u4e2d\u95f4\u7684\u8d28\u6570 \\(p\\) \uff0c\u7136\u540e\u6784\u9020 \\([p,p-1,p+1,p-2,p+2,...]\\) \u8fd9\u79cd\u3002\u3002\u3002\u7531\u4e8e\u8d28\u6570\u662f\u6bd4\u8f83\u5bc6\u96c6\u7684\uff0c\u6240\u4ee5\u5728\u4e2d\u95f4\u5176\u5b9e\u5f88\u5feb\u5c31\u80fd\u627e\u5230\u3002</p> <p>\u800c\u4e14\u7531\u4e8e\u662f\u5411\u4e0a\u53d6\u6574\u6240\u4ee5 \\(\\frac{2p-1}{2}, \\frac{4p-3}{4}\\) \u8fd9\u79cd\u5176\u5b9e\u4e5f\u662f\u8d28\u6570\u3002\u3002\u3002\u592a\u725b\u3002</p> <p>\u5f62\u4e0d\u6210\u5f62\uff0c\u610f\u4e0d\u5728\u610f\uff0c\u518d\u56de\u53bb\u7ec3\u7ec3\u5427\u3002</p> <pre><code>constexpr int N = 1e5;\nvector&lt;int&gt; minp(N + 1);\n\nvoid ChatGptDeepSeek()\n{\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;int&gt; ans;\n    int mid = n / 2;\n    for (int i = 0; i &lt; mid; i++)\n    {\n        if (minp[mid - i] == mid - i)\n        {\n            mid -= i;\n            break;\n        }\n        if (minp[mid + i] == mid + i)\n        {\n            mid += i;\n            break;\n        }\n    }\n    cout &lt;&lt; mid &lt;&lt; \" \";\n    int l = mid - 1, r = mid + 1;\n    while (l &gt;= 1 || r &lt;= n)\n    {\n        if (l &gt;= 1)\n        {\n            cout &lt;&lt; l &lt;&lt; ' ';\n            l--;\n        }\n        if (r &lt;= n)\n        {\n            cout &lt;&lt; r &lt;&lt; \" \";\n            r++;\n        }\n    }\n    cout&lt;&lt;'\\n';\n}\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.tie(nullptr);\n    for (int i = 2; i &lt;= N; i++)\n    {\n        if (minp[i])\n            continue;\n        minp[i] = i;\n        if (1LL * i * i &gt; N)\n            continue;\n        for (int j = i * i; j &lt;= N; j += i)\n            minp[j] = i;\n    }\n    int T = 1;\n    cin &gt;&gt; T;\n    while (T--)\n        ChatGptDeepSeek();\n    return 0;\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2091/","title":"Codeforces Round 1013 (Div. 3)","text":"<p>2025-03-25</p> <p>\u8d5b\u65f6\u6ca1\u6253\u3002\u3002\u867d\u7136unrated\uff0c\u4f46\u662f\u4ee5\u540e\u80fd\u6253\u7684\u5c3d\u91cf\u90fd\u6253\u5427\uff0c\u8d5b\u540e\u6253\u5176\u5b9e\u66f4\u803d\u8bef\u65f6\u95f4\uff0c\u72b6\u6001\u8fd8\u4e0d\u4e00\u5b9a\u597d\uff0c\u82b1\u7684\u65f6\u95f4\u53ef\u80fd\u66f4\u957f\uff0c\u65e9\u505a\u5b8c\u65e9\u7701\u4e8b\u3002</p> <p>\u6bd4\u8d5b\u94fe\u63a5: https://codeforces.com/contest/2091</p>"},{"location":"cp_solving/Codeforces/2091/#a","title":"A","text":"<pre><code>for _ in range(int(input())):\n    a=[0]*10\n    # print(a)\n    n = int(input())\n    b=list(map(int,input().split()))\n    for i in range(n):\n        a[b[i]]+=1\n        if a[0]&gt;=3 and a[1]&gt;=1 and a[2]&gt;=2 and a[3]&gt;=1 and a[5]&gt;=1:\n            print(i+1)\n            break\n    else:\n        print(0)\n</code></pre>"},{"location":"cp_solving/Codeforces/2091/#b","title":"B","text":"<pre><code>for _ in range(int(input())):\n    n,x=map(int,input().split())\n    a=list(map(int,input().split()))\n    a.sort(reverse=True)\n    ans=0\n    lst=-1\n    for i in range(n):\n        if (i-lst)*a[i]&gt;=x:\n            lst=i\n            ans+=1\n    print(ans)\n</code></pre>"},{"location":"cp_solving/Codeforces/2091/#c","title":"C","text":"<p>\u76f4\u63a5guess\u5c31\u884c\uff0c\u5076\u6570\u90fd\u6784\u9020\u4e0d\u51fa\u6765\u3002\u5947\u6570\u731c\u4e00\u4e0b\u3002</p> <pre><code>void ChatGptDeepSeek()\n{\n    int n;\n    cin&gt;&gt;n;\n    if(n%2==0){\n        cout&lt;&lt;\"-1\\n\";\n        return;\n    }\n    for(int i=1;i&lt;=n;i+=2)\n        cout&lt;&lt;i&lt;&lt;\" \";\n    for(int i=2;i&lt;=n;i+=2)\n        cout&lt;&lt;i&lt;&lt;\" \";\n    cout&lt;&lt;'\\n';\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2091/#d","title":"D","text":"<p>\u4e8c\u5206\uff0c\u6ce8\u610f\u5269\u4e0b\u7684\u957f\u5ea6\u53ef\u4ee5\u586b\u522b\u7684\u3002\u4e0d\u8981\u7206int\u3002</p> <pre><code>void ChatGptDeepSeek()\n{\n    int n, m, k;\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;\n    int lo = 0, hi = m + 1;\n    auto check = [&amp;](int len)\n    {\n        int num = (m + 1) / (len + 1) * len;\n        int rest = (m + 1) % (len + 1);\n\n        return 1LL * (num + max(0, rest - 1)) * n &gt;= k;\n    };\n    while (lo &lt; hi - 1)\n    {\n        int mid = (lo + hi) &gt;&gt; 1;\n        if (check(mid))\n            hi = mid;\n        else\n            lo = mid;\n    }\n    cout &lt;&lt; hi &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2091/#e","title":"E","text":"<p>\\(lcm(a,b)=\\frac{ab}{gcd(a,b)}\\)</p> <p>\u6240\u4ee5 \u8bbe $g=gcd(a,b) $ \uff0c \\(a\\) \u548c \\(b\\) \u53ef\u4ee5\u8868\u793a\u6210 \\(xg\\) \u548c \\(yg\\) \u7684\u5f62\u5f0f\uff0c\u5176\u4e2d \\(x\\) \u548c \\(y\\) \u4e92\u8d28\u3002</p> <p>\u4e5f\u5c31\u662f\u8bf4 \\(lcm(a,b)=\\frac{ab}{g}\\) , \\(\\frac{lcm(a,b)}{gcd(a,b)}=\\frac{ab}{g^2}=xy\\) \u82e5 \\(xy\\) \u4e3a\u7d20\u6570\uff0c\u5219 \\(x\\) \u548c \\(y\\) \u5fc5\u7136\u4e00\u4e2a\u662f\u7d20\u6570\uff0c\u53e6\u4e00\u4e2a\u662f \\(1\\) \u3002\u6240\u4ee5\u4e24\u4e2a\u6570\u5b57\u662f \\(g\\) \u548c \\(gx\\) \uff0c\u4e14 \\(x\\) \u662f\u7d20\u6570\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u679a\u4e3e\u6bcf\u4e00\u4e2a\u7d20\u6570\uff0c\u627e\u5b83\u4eec\u6709\u591a\u5c11\u4e2a\u500d\u6570\u5373\u53ef\u3002</p> <p>\u627e\u7d20\u6570\u9700\u8981\u5b66\u4e00\u4e0b\u7b5b\u6cd5\uff0c\u4e0d\u7136\u4f60\u5224\u65ad\u4e00\u4e2a\u7d20\u6570\u5c31\u9700\u8981 $\\sqrt{V} $ \u7684\u590d\u6742\u5ea6\u3002 \u8fd9\u4e2a\u7b5b\u7d20\u6570\u7684\u8fd8\u662f\u6bd4\u8f83\u597d\u7406\u89e3\u7684\uff0c\u800c\u4e14CF\u611f\u89c9\u633a\u5e38\u89c1\u7684\u3002</p> <pre><code>constexpr int N = 1e7;\nint minp[N + 1];\n\n/*\nab/gcd/gcd\nx*gcd*gcd*y /gcd*gcd\n\u4e5f\u5c31\u662f\u8bf4 y\u662f\u4e00\u4e2a\u8d28\u6570\nx\u662f1\n*/\nvoid ChatGptDeepSeek()\n{\n    int n;\n    cin &gt;&gt; n;\n    long long ans = 0;\n    for (int i = 2; i &lt;= n; i++)\n    {\n        if (minp[i] == i)\n        {\n            ans += n / i;\n        }\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n/*\n2 , 1 2, 2 4,\n3 , 1 3\n4 , 1 4\n5 , 1 5\n*/\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.tie(nullptr);\n    for (int i = 2; i &lt;= N; i++)\n    {\n        if (minp[i])\n            continue;\n        minp[i] = i;\n        if (i * i &gt; N)\n            continue;\n        if(1LL*i*i&gt;N) continue;\n        for (int j = i * i; j &lt;= N; j += i)\n            minp[j] = i;\n    }\n\n    int T = 1;\n    cin &gt;&gt; T;\n    while (T--)\n        ChatGptDeepSeek();\n    return 0;\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2091/#f","title":"F","text":"<p>\u9898\u89e3\u91cc\u5b66\u7684 DP \uff0c\u5176\u5b9e\u6211\u672c\u6765\u9898\u90fd\u6ca1\u592a\u8bfb\u660e\u767d\uff0c\u539f\u6765\u53ea\u80fd\u53bb\u4e0a\u4e00\u884c\u6216\u540c\u4e00\u884c\uff0c\u4e0d\u80fd\u8df3\u597d\u51e0\u6b21\u3002\u5f53\u7136\u611f\u89c9\u8fd9\u4e2aDP\u8fd8\u662f\u5f88\u590d\u6742\u7684\u3002\u3002\u770b\u9898\u89e3\u90fd\u5199\u4e86\u4e00\u4f1a\u3002</p> <pre><code>using ll = long long;\n\nconstexpr int mod = 998244353;\n\nll dp[2002][2002][2], pre[2002][2002][2];\n\nvoid ChatGptDeepSeek()\n{\n    int n, m, d;\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; d;\n    // vector&lt;vector&lt;int&gt;&gt; dp(n + 1, vector&lt;int&gt;(m + 1));\n    vector&lt;vector&lt;char&gt;&gt; s(n + 1, vector&lt;char&gt;(m + 1));\n    for (int i = 1; i &lt;= n; i++)\n        for (int j = 1; j &lt;= m; j++)\n            cin &gt;&gt; s[i][j];\n    /*\n    dp[i][j][0] i j\n    */\n    for (int i = 1; i &lt;= m; i++)\n    {\n        pre[n][i][0] = dp[n][i][0] = s[n][i] == 'X' ? 1 : 0;\n        pre[n][i][0] = (pre[n][i - 1][0] + pre[n][i][0]) % mod;\n        dp[n][i][1] = 0;\n    }\n    auto get0 = [&amp;](int i, int j, int di)\n    {\n        return (pre[i][min(m, j + di)][0] - pre[i][max(0, j - di - 1)][0] + mod) % mod;\n    };\n    auto get1 = [&amp;](int i, int j, int di)\n    {\n        return (pre[i][min(m, j + di)][1] - pre[i][max(0, j - di - 1)][1] + mod) % mod;\n    };\n    for (int j = 1; j &lt;= m; j++)\n    {\n        pre[n][j][1] = pre[n][j - 1][1];\n        if (s[n][j] != 'X')\n            continue;\n        dp[n][j][1] = (get0(n, j, d) - dp[n][j][0] + mod) % mod;\n        pre[n][j][1] = (pre[n][j][1] + dp[n][j][1]) % mod;\n    }\n    int d1 = d;\n    while (d1 * d1 + 1 &gt; d * d)\n        d1--;\n    // cerr &lt;&lt; d1 &lt;&lt; '\\n';\n    for (int i = n - 1; i &gt;= 1; i--)\n    {\n        for (int j = 1; j &lt;= m; j++)\n        {\n            /* x*x+1*1&lt;=d*d */\n            /* (d-1)*(d-1)+1&lt;=d*d */\n            pre[i][j][0] = pre[i][j - 1][0];\n            if (s[i][j] != 'X')\n            {\n                dp[i][j][0] = 0;\n                continue;\n            }\n            dp[i][j][0] = (get1(i + 1, j, d1) + get0(i + 1, j, d1)) % mod;\n            pre[i][j][0] = (pre[i][j][0] + dp[i][j][0]) % mod;\n        }\n        for (int j = 1; j &lt;= m; j++)\n        {\n            pre[i][j][1] = pre[i][j - 1][1];\n            if (s[i][j] != 'X')\n            {\n                dp[i][j][1] = 0;\n                continue;\n            }\n            dp[i][j][1] = (get0(i, j, d) - dp[i][j][0] + mod) % mod;\n            pre[i][j][1] = (pre[i][j][1] + dp[i][j][1]) % mod;\n        }\n    }\n    cout &lt;&lt; (pre[1][m][0] + pre[1][m][1]) % mod &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2092/","title":"Codeforces Round 1014 (Div. 2)","text":"<p>2025-03-30</p> <p>\u8d5b\u65f6\u51fa\u4e86ABCD\uff0c\u8fd9\u573a\u4e0a\u4e8687\u5206\uff0c\u6392\u540d691\uff0c\u53c8\u662f\u6253\u5f97\u8fd8\u4e0d\u9519\u7684\u4e00\u573a\u3002\u4f46\u662f\u5176\u5b9e\u540e\u9762\u8fd8\u6709\u56db\u5341\u5206\u949f\u5c31\u4e0d\u592a\u60f3\u770bE\u4e86\uff0c\u8fde\u9898\u90fd\u6ca1\u548b\u8bfb\uff0c\u7b49\u4f1a\u518d\u597d\u597d\u770b\u4e00\u770b\u5427\u3002</p> <p>\u6bd4\u8d5b\u94fe\u63a5: https://codeforces.com/contest/2092</p> <p>\u611f\u89c9\u8fd9\u573aC\u662f\u975e\u5e38\u7b80\u5355\u7684\u4e00\u96c6\uff0cD\u4e5f\u504f\u7b80\u5355\u7684\uff0c\u7eaf\u6a21\u62df\u6ca1\u6709\u4efb\u4f55\u7b97\u6cd5\u3002\u6216\u8bb8\u653e\u5230\u51e0\u5929\u4e4b\u524d\uff0c\u6211\u53ef\u80fd\u5c31\u4e0d\u592a\u60f3\u5199\u5173\u7535\u8111\u4e86\uff0c\u867d\u7136\u4e5f\u4e0d\u4e00\u5b9a\u80fd\u5199\u51fa\u6765\u3002</p>"},{"location":"cp_solving/Codeforces/2092/#a","title":"A","text":"<p>\\(gcd(x,y)=gcd(x,y-x)\\)</p> <p>\\(gcd(x+k,y+k)=gcd(x+k,y-x)\\)</p> <p>\u6240\u4ee5\u6700\u5927\u7684\u53ef\u80fd\u7684\u6700\u5927\u516c\u56e0\u6570\u4e00\u5b9a\u662f \\(y-x\\) \uff0c\u4e14\u53ea\u8981\u8ba9 \\(x+k\\) \u662f \\(y-x\\) \u7684\u500d\u6570\uff0c\u5219\u4e00\u5b9a\u53ef\u4ee5\u6709\u8fd9\u79cd\u60c5\u51b5\u3002</p> <pre><code>void ChatGptDeepSeek()\n{\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;int&gt; a(n + 1);\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; a[i];\n    sort(a.begin() + 1, a.end());\n    cout &lt;&lt; a[n] - a[1] &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2092/#b","title":"B","text":"<p>\u7b2c\u4e00\u6392\u7684\u5947\u6570\u4f4d\u7684\u53ea\u80fd\u53bb\u7b2c\u4e8c\u6392\u7684\u5076\u6570\u4f4d\uff0c\u6240\u4ee5\u7b2c\u4e00\u6392\u7684\u5947\u6570\u4f4d\u7684\\(1\\) + \u7b2c\u4e8c\u6392\u7684\u5076\u6570\u4f4d\u7684 \\(1\\) \u6570\u91cf\u5fc5\u987b\u5c0f\u4e8e\u7b49\u4e8e\u7b2c\u4e8c\u6392\u7684\u5076\u6570\u4f4d\u7f6e\u7684\u6570\u91cf\u3002</p> <p>\u53e6\u4e00\u8fb9\u540c\u7406\u3002</p> <pre><code>void ChatGptDeepSeek()\n{\n    int n;\n    cin &gt;&gt; n;\n    string s1, s2;\n    cin &gt;&gt; s1 &gt;&gt; s2;\n    int cnt1 = 0, cnt2 = 0;\n    for (int i = 0; i &lt; n; i++)\n    {\n        if (s1[i] == '1')\n        {\n            if (i % 2 == 0)\n                cnt1++;\n            else\n                cnt2++;\n        }\n        if (s2[i] == '1')\n        {\n            if (i % 2 == 0)\n                cnt2++;\n            else\n                cnt1++;\n        }\n    }\n    int x = n / 2;\n    if (cnt1 &gt; x || cnt2 &gt; n - x)\n    {\n        cout &lt;&lt; \"NO\\n\";\n    }\n    else\n    {\n        cout &lt;&lt; \"YES\\n\";\n    }\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2092/#c","title":"C","text":"<p>\u6211\u4eec\u5047\u8bbe\u628a\u6240\u6709\u5947\u6570\u5168\u90fd\u7ed9\u52a0\u5230\u5076\u6570\u4e0a\uff0c\u90a3\u4e48\u6700\u540e\u6211\u4eec\u6570\u7ec4\u4f1a\u6709\u82e5\u5e72\u4e2a\u5947\u6570\u548c\u82e5\u5e72\u4e2a\u5076\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u6240\u6709\u7684\u5076\u6570\u90fd\u7ed9\u52a0\u52301\u4e2a \\(1\\) \u4e0a\u3002</p> <p>\u4e5f\u5c31\u662f\u8bf4\u7b54\u6848\u4f1a\u662f\u603b\u548c\u51cf\u53bb \u5947\u6570\u7684\u6570\u91cf-1 \u3002</p> <pre><code>void ChatGptDeepSeek()\n{\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;int&gt; a(n + 1), p, q;\n    for (int i = 1; i &lt;= n; i++)\n    {\n        cin &gt;&gt; a[i];\n        if (a[i] &amp; 1)\n            p.push_back(a[i]);\n        else\n            q.push_back(a[i]);\n    }\n    sort(a.begin(), a.end());\n    sort(p.begin(), p.end());\n    sort(q.begin(), q.end());\n    if (p.empty() || q.empty())\n    {\n        cout &lt;&lt; a[n] &lt;&lt; '\\n';\n        return;\n    }\n    long long ans = 0;\n    for (int i = 1; i &lt;= n; i++)\n        ans += a[i];\n    ans -= p.size() - 1;\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}//3 3 4 5 9\n</code></pre>"},{"location":"cp_solving/Codeforces/2092/#d","title":"D","text":"<p>\\(n\\) \u7684\u89c4\u6a21\u5f88\u5c0f\u5f88\u5c0f\uff0c\u624b\u63a8\u4e00\u4e0b\u53d1\u73b0\u5e76\u4e0d\u9700\u8981\u5f88\u591a\u6b21\u64cd\u4f5c\u5c31\u53ef\u4ee5\u5b8c\u6210\uff0c\u4e14\u4e0d\u5408\u6cd5\u60c5\u51b5\u5f88\u5c11\u3002</p> <p>\u4e8e\u662f\u76f4\u63a5\u6a21\u62df\uff0c\u6709\u9650\u653e\u6570\u91cf\u5c11\u7684\uff0c\u4e0d\u884c\u5219\u653e\u6570\u91cf\u7b2c\u4e8c\u5c11\u7684\uff0c\u5426\u5219\u653e\u6700\u591a\u7684\u3002\u82e5\u4e0d\u80fd\u64cd\u4f5c\uff0c\u5219\u76f4\u63a5\u9000\u51fa\u3002</p> <pre><code>void ChatGptDeepSeek()\n{\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;int&gt; cnt(130);\n    string s;\n    cin &gt;&gt; s;\n    for (int i = 0; i &lt; n; i++)\n    {\n        cnt[s[i]]++;\n    }\n    vector&lt;int&gt; a(3);\n    a[0] = cnt['L'], a[1] = cnt['I'], a[2] = cnt['T'];\n    sort(a.begin(), a.end());\n    vector&lt;int&gt; ans;\n    auto Ins = [&amp;](char ch)\n    {\n        for (int i = 0; i + 1 &lt; s.size(); i++)\n        {\n\n            if (s[i] != s[i + 1] &amp;&amp; s[i] != ch &amp;&amp; s[i + 1] != ch)\n            {\n                s.insert(s.begin() + i + 1, ch);\n                cnt[ch]++;\n                a[0] = cnt['L'], a[1] = cnt['I'], a[2] = cnt['T'];\n                sort(a.begin(), a.end());\n                ans.push_back(i + 1);\n                return true;\n            }\n        }\n        return false;\n    };\n    // Ins('T');\n    // cerr&lt;&lt;s&lt;&lt;'\\n';\n    while (1)\n    {\n        // break;\n        if (a[0] == a[2])\n            break;\n        if (cnt['L'] == a[0])\n        {\n            if (Ins('L'))\n                continue;\n            else\n            {\n                if (cnt['I'] == a[1])\n                {\n                    if (Ins('I'))\n                        continue;\n                    else if (Ins('T'))\n                        continue;\n                }\n                else\n                {\n                    if (Ins('T'))\n                        continue;\n                    else if (Ins('I'))\n                        continue;\n                }\n            }\n        }\n        else if (cnt['I'] == a[0])\n        {\n            if (Ins('I'))\n                continue;\n            else\n            {\n                if (cnt['L'] == a[1])\n                {\n                    if (Ins('L'))\n                        continue;\n                    else if (Ins('T'))\n                        continue;\n                }\n                else\n                {\n                    if (Ins('T'))\n                        continue;\n                    else if (Ins('L'))\n                        continue;\n                }\n            }\n        }\n        else\n        { // T\n            if (Ins('T'))\n                continue;\n            else\n            {\n                if (cnt['L'] == a[1])\n                {\n                    if (Ins('L'))\n                        continue;\n                    else if (Ins('I'))\n                        continue;\n                }\n                else\n                {\n                    if (Ins('I'))\n                        continue;\n                    else if (Ins('L'))\n                        continue;\n                }\n            }\n        }\n        cout &lt;&lt; \"-1\\n\";\n        return;\n    }\n    // cerr &lt;&lt; s &lt;&lt; '\\n';\n    cout &lt;&lt; ans.size() &lt;&lt; '\\n';\n    for (auto x : ans)\n        cout &lt;&lt; x &lt;&lt; '\\n';\n}\n</code></pre> <p>\u770b\u8d77\u6765\u4ee3\u7801\u5f88\u591a\uff0c\u4f46\u5b9e\u9645\u4e0a\u4e09\u4e2a\u5dee\u4e0d\u591a\uff0c\u4e3b\u8981\u662f\u5f97\u679a\u4e3e\u5b57\u7b26\u3002\u3002\u5f53\u7136\u8fd8\u6709\u66f4\u667a\u6167\u7684\u5199\u6cd5\u3002</p>"},{"location":"cp_solving/Codeforces/2093/","title":"Codeforces Round 1016 (Div. 3)","text":"<p>2025-04-09 \u8fd9\u628a\u6253\u5f97\u6709\u70b9\u70c2</p> <p>\u6bd4\u8d5b\u94fe\u63a5: https://codeforces.com/contest/2093</p> <p></p> <p>\u5148\u7b80\u5355\u8d34\u4e0b\u4ee3\u7801\u5427\uff0c\u524d\u9762\u7684\u9898\u611f\u89c9\u6ca1\u5565\u8981\u8bb0\u7684\u3002\u660e\u5929\u518d\u53bb\u770b\u770bFG\u3002</p>"},{"location":"cp_solving/Codeforces/2093/#a","title":"A","text":"<pre><code>for _ in range(int(input())):\n    n = int(input())\n    if n&amp;1:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n</code></pre>"},{"location":"cp_solving/Codeforces/2093/#b","title":"B","text":"<pre><code>for _ in range(int(input())):\n    n = input()\n    # n.sort()\n\n    cnt = 0\n    # x/len \u662f\u7b54\u6848\n    # \n    ans = 1000\n    res = len(n)-1\n    for i in range(len(n)):\n        if n[i]=='0':\n            cnt+=1\n        else:\n            ans = int(n[i])/(cnt+1)\n    cnt = 0\n    for i in range(len(n)):\n        if n[i]=='0':\n            cnt+=1\n        elif int(n[i])/(cnt+1)==ans:\n            res = min(res,len(n)-(cnt+1))\n    print(res)\n</code></pre>"},{"location":"cp_solving/Codeforces/2093/#c","title":"C","text":"<pre><code>def is_prime(x):\n    if x==1:\n        return False\n    i=2\n    while i*i&lt;=x:\n        if x%i==0:\n            return False\n        i+=1\n    return True\n\nfor _ in range(int(input())):\n    x,k=map(int,input().split())\n    if k!=1:\n        if x==1 and k==2:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        if is_prime(x):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n</code></pre>"},{"location":"cp_solving/Codeforces/2093/#d","title":"D","text":"<p>\u7ed9\u6211\u6574\u597d\u957f\u65f6\u95f4\u624d\u5199\u51fa\u6765\uff0c\u7d22\u6027\u76f4\u63a5\u5f00<code>unsigned long long</code> \u4e86\uff0c\u5176\u5b9e\u601d\u8def\u662f\u5bf9\u7684\u3002</p> <pre><code>#define int unsigned long long\nusing namespace std;\n\nint n,q;\nchar ch;\n\nint dfs1(int sz,int val,int x,int y)\n{\n    if(x==1&amp;&amp;y==1) return val;\n    int tt=sz/2;\n    if(x&gt;sz/2&amp;&amp;y&gt;sz/2)\n        return dfs1(sz&gt;&gt;1,val+(sz*sz/4),x-tt,y-tt);\n    else if(x&gt;sz/2)\n        return dfs1(sz&gt;&gt;1,val+2*(sz*sz/4),x-tt,y);\n    else if(y&gt;sz/2)\n        return dfs1(sz&gt;&gt;1,val+3*(sz*sz/4),x,y-tt);\n    return dfs1(sz&gt;&gt;1,val,x,y);\n}\n\npair&lt;int,int&gt;dfs2(int sz,int val,int x,int y,int find_val)\n{\n    if(val==find_val) return make_pair(x,y);\n    int tt=sz*sz/4;\n    if(find_val&gt;=3*tt+val)\n        return dfs2(sz&gt;&gt;1,val+3*tt,x,y+sz/2,find_val);\n    else if(find_val&gt;=2*tt+val)\n        return dfs2(sz&gt;&gt;1,val+2*tt,x+sz/2,y,find_val);\n    else if(find_val&gt;=tt+val)\n        return dfs2(sz&gt;&gt;1,val+tt,x+sz/2,y+sz/2,find_val);\n    return dfs2(sz&gt;&gt;1,val,x,y,find_val);\n}\n\nvoid solve()\n{\n    cin&gt;&gt;n&gt;&gt;q;\n    while(q--){\n        cin&gt;&gt;ch&gt;&gt;ch;\n        if(ch=='&gt;'){\n            int x,y;\n            cin&gt;&gt;x&gt;&gt;y;\n            assert(dfs1(1LL&lt;&lt;n,1,x,y)&lt;=(1LL&lt;&lt;(2*n)));\n            cout&lt;&lt;dfs1(1LL&lt;&lt;n,1,x,y)&lt;&lt;'\\n';\n        }\n        else{\n            int d;\n            cin&gt;&gt;d;\n            auto [l,r]=dfs2(1LL&lt;&lt;n,1,1,1,d);\n            assert(l&lt;=(1&lt;&lt;n)&amp;&amp;r&lt;=(1&lt;&lt;n));\n            assert(dfs1(1LL&lt;&lt;n,1,l,r)==d);\n            cout&lt;&lt;l&lt;&lt;\" \"&lt;&lt;r&lt;&lt;'\\n';\n        }\n    }\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2093/#e","title":"E","text":"<p>\u5c31\u76f4\u63a5\u4e8c\u5206\u5c31\u884c\uff0c\u8fd9\u4e2a\u8fd8\u633a\u57fa\u7840\u7684\u3002</p> <pre><code>for _ in range(int(input())):\n    n,k = map(int,input().split())\n    a = list(map(int,input().split()))\n    lo = 0\n    hi = n+1\n    def check(x):\n        st = set()\n        cnt=0\n        for i in range(n):\n            if a[i]&lt;x:\n                st.add(a[i])\n            if len(st)==x:\n                cnt+=1\n                st.clear()\n        return cnt&gt;=k\n\n    while lo&lt;hi-1:\n        mid = (lo+hi)&gt;&gt;1\n        if check(mid):\n            lo=mid\n        else:\n            hi=mid\n    print(lo)\n</code></pre>"},{"location":"cp_solving/Codeforces/2093/#f","title":"F","text":"<p>\u670d\u4e86\uff0c\u4ec0\u4e48\u6c34\u9898\uff0c\u867d\u7136\u611f\u89c9\u96be\u5ea6\u5e94\u8be5\u4e0d\u4f1a\u592a\u96be\uff0c\u4f46\u662f\u8fd9\u4e5f\u592a\u7b80\u5355\u4e86\u5427\uff0c\u611f\u89c9\u662f\u4e0d\u662f\u8be5 <code>*1300</code> \u3002</p> <pre><code>for _ in range(int(input())):\n    n , m = map(int,input().split())\n    a = list(input().split())\n    b = [[]] * m\n    cnt = [0]*n\n    for i in range(m):\n        b[i] = list(input().split())\n        for j in range(n):\n            if b[i][j]==a[j]:\n                cnt[j]+=1\n    ans = 1000000000\n    for i in range(m):\n        now = n\n        for j in range(n):\n            if b[i][j]!=a[j]:\n                # print(b[i][j],a[j])\n                if cnt[j]&gt;=1:\n                    now+=2\n                else:\n                    break\n        else:\n            ans=min(ans,now)\n    if ans==1000000000:\n        print(-1)\n    else:\n        print(ans)\n</code></pre>"},{"location":"cp_solving/Codeforces/2093/#g","title":"G","text":"<p>\u9700\u8981\u7528 trie \u4ee5\u53ca\u89c2\u5bdf\u4ee5\u4e0b\u4e8c\u8fdb\u5236\u3002</p> <p>\u6211\u4eec\u7528 trie \u53ef\u4ee5\u67e5\u51fa\u4e00\u4e2a\u6570\u5b57\u548c\u524d\u9762\u7684\u6570\u5b57\u7684\u6700\u5927\u7684\u5f02\u6216\u7ed3\u679c\uff0c\u4f46\u662f\u8fd9\u91cc\u662f\u770b\u662f\u5426\u80fd\u548c\u524d\u9762\u5f02\u6216\u5927\u4e8e\u7b49\u4e8e \\(k\\) \uff0c\u4e14\u8fd9\u4e2a\u957f\u5ea6\u8981\u662f\u6700\u77ed\u7684\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u4e8c\u8fdb\u5236\u4ece\u9ad8\u4f4d\u5f80\u4f4e\u4f4d\u770b\uff0c\u4e00\u76f4\u8ba9\u5f53\u524d\u5f02\u6216\u51fa\u6765\u7684\u503c\u7684\u524d\u7f00\u548c \\(k\\) \u7684\u524d\u7f00\u662f\u76f8\u7b49\u7684\uff0c\u90a3\u4e48\u5f53 \\(k\\) \u53d6 \\(0\\) \u7684\u4f4d\uff0c\u6211\u4eec\u5982\u679c\u80fd\u5f02\u6216\u5f97\u5230 \\(1\\) \uff0c\u5c31\u4e00\u5b9a\u4f1a\u5927\u4e8e \\(k\\) \u3002\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u5b58\u4e00\u4e0b\u6bcf\u4e00\u4f4d\u6709 \\(1\\) \u7684\u6700\u5927\u7684\u4e0b\u6807\uff0c\\(trie_{cur,x}\\) \u5b9e\u9645\u4e0a\u6bcf\u4e00\u4e2a\u503c\u90fd\u662f\u4e0d\u540c\u7684\uff0c\u53ef\u4ee5\u7528\u8fd9\u4e2a\u6765\u8bb0\u72b6\u6001\u3002</p> <pre><code>void ChatGptDeepSeek() // Date: 2025-04-10\n{                      // Time: 20:26:45\n    int n, k;\n    cin &gt;&gt; n &gt;&gt; k;\n    vector&lt;vi&gt; trie(n * 31, vi(2));\n    vi p(n * 32);\n    int tot = 0, ans = n + 1;\n    auto Insert = [&amp;](int Val, int idx)\n    {\n        int cur = 0;\n        for (int i = 30; i &gt;= 0; i--)\n        {\n            int x = Val &gt;&gt; i &amp; 1;\n            if (trie[cur][x] == 0)\n                trie[cur][x] = ++tot;\n            cur = trie[cur][x];\n            p[cur] = idx;\n        }\n    };\n    auto Find = [&amp;](int Val)\n    {\n        int cur = 0, now = 0, L = -1;\n        for (int i = 30; i &gt;= 0; i--)\n        {\n            int x = Val &gt;&gt; i &amp; 1;\n            int y = k &gt;&gt; i &amp; 1;\n            if (y)\n            {\n                if (!trie[cur][x ^ 1])\n                    return L;\n                cur = trie[cur][x ^ 1];\n            }\n            else\n            {\n                if (trie[cur][x ^ 1])\n                    cmax(L, p[trie[cur][x ^ 1]]);\n                if (trie[cur][x] == 0)\n                    return L;\n                cur = trie[cur][x];\n            }\n        }\n        cmax(L,p[cur]);\n        return L;\n    };\n    for (int i = 1; i &lt;= n; i++)\n    {\n        int x;\n        cin &gt;&gt; x;\n        int L=Find(x);\n        if(L&gt;0) ans=min(ans,i-L+1);\n        Insert(x, i);\n    }\n    if (k == 0)\n        cout &lt;&lt; \"1\\n\";\n    else if (ans == n + 1)\n        cout &lt;&lt; \"-1\\n\";\n    else\n        cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2096/","title":"Codeforces Round 1018, Div. 1 + Div. 2","text":"<p>2025-04-19</p> <p>\u6700\u4e0d\u4e13\u6ce8\u7684\u4e00\u96c6\uff0cC \u9898\u7684\u5f88\u91cd\u8981\u7684\u4e00\u53e5\u8bdd\u6ca1\u770b\u5230\u3002A\u9898\u4e5f\u662f\u9898\u90fd\u6ca1\u770b\u6e05\u695a\u5c31\u4ea4\uff0c\u803d\u8bef\u597d\u591a\u5206\u949f\u3002</p> <p>link: https://codeforces.com/contest/2096</p> <p></p>"},{"location":"cp_solving/Codeforces/2096/#a","title":"A","text":"<p>\u770b\u6837\u4f8b\u89e3\u91ca\u5c31\u80fd\u770b\u51fa\u6765\u554a\uff0c\u800c\u4e14\u9898\u76ee\u660e\u660e\u8bf4\u5f97\u5f88\u6e05\u695a\u4e86\u3002\\(s_i='&gt;'\\) \uff0c\u90a3\u4e48 \\(a_{i+1}\\) \u5fc5\u987b\u5927\u4e8e\u524d\u9762\u7684\u6240\u6709\u6570\u5b57\uff0c\u5426\u5219 \\(a_{i+1}\\) \u5c0f\u4e8e\u524d\u9762\u7684\u6240\u6709\u6570\u5b57\u3002</p> <pre><code>void ChatGptDeepSeek() // Date: 2025-04-19\n{                      // Time: 22:37:01 \n    int n;\n    cin&gt;&gt;n;\n    string s;\n    cin&gt;&gt;s;\n    vi a;\n    int L=1,R=n;\n    for(int i=sz(s)-1;i&gt;=0;i--){\n        if(s[i]=='&gt;') a.push_back(R--);\n        else a.push_back(L++);\n    }\n    a.push_back(L);\n    reverse(all(a));\n    for(auto x:a)\n        cout&lt;&lt;x&lt;&lt;\" \";\n    cout&lt;&lt;'\\n';\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2096/#b","title":"B","text":"<p>\u8fd9\u4e2a\u8fd8\u884c\u7684\uff0c\u9996\u5148 \\(n\\) \u4e2a \\(max(l_i,r_i)\\) \u80af\u5b9a\u662f\u90fd\u5f97\u52a0\u4e0a\u7684\u3002\u90a3\u4e48\u5269\u4e0b\u7684\uff0c\u6211\u4eec\u80af\u5b9a\u662f\u5148\u628a\u524d \\(k-1\\) \u4e2a\u5927\u7684 \\(min(l_i,r_i)\\) \u62ff\u4e86\uff0c\u7136\u540e\u518d\u65e0\u8bba\u5982\u4f55\u62ff\u4e00\u4e2a\u5c31\u62ff\u4e0d\u4e86\u4e86\u3002</p> <pre><code>void ChatGptDeepSeek() // Date: 2025-04-19\n{                      // Time: 22:53:39 \n    int n,k;\n    cin&gt;&gt;n&gt;&gt;k;\n    vi l(n),r(n);\n    for(int i=0;i&lt;n;i++) cin&gt;&gt;l[i];\n    for(int i=0;i&lt;n;i++) cin&gt;&gt;r[i];\n    ll ans=0;\n    vi c(n);\n    for(int i=0;i&lt;n;i++){\n        ans+=max(l[i],r[i]);\n        c[i]=min(l[i],r[i]);\n    }\n    sort(all(c),greater&lt;int&gt;());\n    for(int i=0;i+1&lt;k;i++)\n        ans+=c[i];\n    cout&lt;&lt;ans+1&lt;&lt;'\\n';\n\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2096/#c","title":"C","text":"<p>\u670d\u4e86\u81ea\u5df1\u4e86\u3002\u3002\u3002\u6bcf\u4e2a\u5de5\u4eba\u53ea\u80fd\u4f7f\u7528\u4e00\u6b21\uff01\uff01\uff01</p> <p>\u6240\u4ee5\u76f4\u63a5\u679a\u4e3e\u524d\u4e00\u4e2a\u6709\u6ca1\u6709\u52a0\u3002\u6211\u771f\u662f\uff0c\u60f3\u4e86\u4e00\u5c0f\u65f6\uff0c\u6211\u60f3\u7740\u6bcf\u884c\u6700\u591a\u52a0 \\(n\\) \u6b21\u5427\uff0c\u6240\u4ee5\u590d\u6742\u5ea6 \\(n^3\\) \u3002\u3002\u3002</p> <p>\u6bcf\u4e2a\u5de5\u4eba\u7528\u4e00\u6b21\u5c31\u5f88\u7b80\u5355\uff0c\u800c\u4e14\u884c\u548c\u5217\u8fd8\u662f\u72ec\u7acb\u7684\u3002</p> <pre><code>void ChatGptDeepSeek() // Date: 2025-04-20\n{                      // Time: 00:09:04 \n    int n;\n    cin&gt;&gt;n;\n\n    vector&lt;vi&gt;a(n+1,vi(n+1));\n    for(int i=1;i&lt;=n;i++)\n        for(int j=1;j&lt;=n;j++) cin&gt;&gt;a[i][j];\n    vi A(n+1),B(n+1);\n    for(int i=1;i&lt;=n;i++) cin&gt;&gt;A[i];\n    for(int i=1;i&lt;=n;i++) cin&gt;&gt;B[i];\n    vector&lt;vl&gt; c(n+1,vl(2,LNF));\n    c[1][0]=0;\n    c[1][1]=A[1];\n    for(int i=2;i&lt;=n;i++){\n        for(int x=0;x&lt;2;x++){\n            for(int y=0;y&lt;2;y++){\n                bool ok=true;\n                for(int j=1;j&lt;=n;j++){\n                    if(a[i-1][j]+x==a[i][j]+y){ok=false;break;}\n                }\n                if(ok) cmin(c[i][y],c[i-1][x]+(y?A[i]:0));\n            }\n        }\n    }\n    ll ans=min(c[n][0],c[n][1]);\n    if(ans==LNF){\n        cout&lt;&lt;\"-1\\n\";\n        return;\n    }\n    c=vector&lt;vl&gt;(n+1,vl(2,LNF));\n    c[1][1]=B[1],c[1][0]=0;\n    for(int i=2;i&lt;=n;i++){\n        for(int x=0;x&lt;2;x++){\n            for(int y=0;y&lt;2;y++){\n                bool ok=true;\n                for(int j=1;j&lt;=n;j++){\n                    if(a[j][i]+y==a[j][i-1]+x){ok=false;break;}\n                }\n                if(ok) cmin(c[i][y],c[i-1][x]+(y?B[i]:0));\n            }\n        }\n    }\n    if(min(c[n][1],c[n][0])==LNF){\n        cout&lt;&lt;\"-1\\n\";\n        return;\n    }\n    ans+=min(c[n][1],c[n][0]);\n    cout&lt;&lt;ans&lt;&lt;'\\n';\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2096/#d","title":"D","text":"<p>\u96be\u96be\uff0c\u4e0d\u4f1a\uff0c\u660e\u5929\u6211\u5c06\u8fdb\u884c\u4e00\u4e2a\u9898\u89e3\u5927\u5b66\u4e60\u3002</p> <p>\u516d\u767e\u516d\u5341\u516d\u554a\uff0c\u8fd9\u9898\u548c\u7b97\u6cd5\u6709\u5565\u5173\u7cfb\uff1f\uff1f\uff1f\u6bcf\u6b21\u64cd\u4f5c\uff0c\u6bcf\u884c\u7684\u706f\u6ce1\u7684\u6570\u91cf\u7684\u53d8\u5316\u4e00\u5b9a\u662f\u5076\u6570\uff0c\u7a0d\u5fae\u60f3\u4e00\u4e0b\u5c31\u80fd\u53d1\u73b0\u6ca1\u6709\u95ee\u9898\u3002\u4f46\u662f\u7eb5\u5750\u6807\u600e\u4e48\u627e\u5462\uff1f\u5982\u679c\u662f\u6b63\u65b9\u5f62\uff0c\u90a3\u4e48\u4f1a\u548c\u6a2a\u5750\u6807\u4e00\u6837\uff0c\u4f46\u8fd9\u9898\u7684\u5f62\u72b6\u4e0d\u592a\u4e00\u6837\u3002\u4f46\u662f \\(x+y\\) \u7684\u6570\u91cf\u7684\u53d8\u5316\u4e00\u5b9a\u4e5f\u662f\u5076\u6570\u3002</p> <pre><code>void ChatGptDeepSeek() // Date: 2025-04-20\n{                      // Time: 10:01:56 \n    int n;\n    cin&gt;&gt;n;\n    int X=0,Y=0;\n    while(n--){\n        int x,y; cin&gt;&gt;x&gt;&gt;y;\n        X^=x,Y^=(x+y);\n    }\n    cout&lt;&lt;X&lt;&lt;\" \"&lt;&lt;Y-X&lt;&lt;'\\n';\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2103/","title":"Codeforces Round 1019 (Div. 2)","text":"<p>2025-04-21</p> <p>link: https://codeforces.com/contest/2103</p> <p>\u6253\u5f97\u5f88\u70c2\u7684\u4e00\u96c6\uff0cB\u9898\u8fd9\u79cd\u7b80\u5355\u9898\u548b\u82b1\u8fd9\u4e48\u4e45\u3002C\u4e5f\u60f3\u597d\u4e45\u3002</p> <p></p>"},{"location":"cp_solving/Codeforces/2103/#a","title":"A","text":"<pre><code>for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int,input().split()))\n    st = set()\n    for i in a:\n        st.add(i)\n    print(len(st))\n</code></pre>"},{"location":"cp_solving/Codeforces/2103/#b","title":"B","text":"<p>\u5c31\u7b80\u5355\u5206\u7c7b\u8ba8\u8bba\u4e0b\uff0c\u8be5\u518d\u7ec6\u5fc3\u70b9\u7684\uff0c\u6bd4\u5982\u628a\u60c5\u51b5\u5148\u5217\u51fa\u6765\u3002</p> <pre><code>for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    cost = n\n    cur = 0\n    cnt = 0\n    cc = 0\n    for i in range(n):\n        if s[i]=='0':\n            cc+=1\n        if int(s[i])!=cur:\n            cur^=1\n            cost+=1\n            if s[i]=='1':\n                cnt+=1\n    # print(cost)\n    if s[0]=='0':\n        # print(s,cnt,s[n-1])\n        if cnt==1 and s[n-1]!='1':\n            cost-=1\n        elif cnt&gt;1:\n            cost-=2\n    else:\n        if cnt&gt;=2 and cc:\n            cost-=2\n        elif cc:\n            cost-=1\n    print(cost)\n</code></pre>"},{"location":"cp_solving/Codeforces/2103/#c","title":"C","text":"<p>\u6839\u636e\u4e2d\u4f4d\u6570\u7684\u6027\u8d28\uff0c\u6211\u4eec\u628a\u5c0f\u4e8e\u7b49\u4e8e \\(k\\) \u7684\u6570\u5b57\u7684\u8d21\u732e\u8bbe\u4e3a \\(1\\) \uff0c\u5927\u4e8e \\(k\\) \u7684\u6570\u5b57\u7684\u8d21\u732e\u8bbe\u4e3a \\(-1\\) \uff0c\u90a3\u4e48\u53ea\u6709\u4e00\u6bb5\u8d21\u732e\u503c\u5927\u4e8e\u7b49\u4e8e \\(0\\) \u7684\u5b50\u6570\u7ec4\uff0c\u5b83\u7684\u4e2d\u4f4d\u6570\u624d\u4f1a\u5c0f\u4e8e\u7b49\u4e8e \\(k\\) \u3002\u6240\u4ee5\u62ff set \u641e\u4e00\u4e0b\u5c31\u884c\u3002 </p> <pre><code>void solve()\n{\n    int n, k;\n    cin &gt;&gt; n &gt;&gt; k;\n    vector&lt;int&gt; a(n + 1);\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; a[i];\n    {\n        int cnt = 0, L = 0, R = 0;\n        for (int i = 1; i &lt; n; i++)\n        {\n            if (a[i] &lt;= k)\n                cnt++;\n            if (cnt * 2 &gt;= i)\n            {\n                L = i;\n                break;\n            }\n        }\n        cnt = 0;\n        for (int i = n; i &gt; 1; i--)\n        {\n            if (a[i] &lt;= k)\n                cnt++;\n            if (cnt * 2 &gt;= n - i + 1)\n            {\n                R = i;\n                break;\n            }\n        }\n        cnt = 0;\n        if (L &amp;&amp; R &amp;&amp; (L + 1 &lt; R))\n        {\n            cout &lt;&lt; \"YEs\\n\";\n            return;\n        }\n    }\n    auto check = [&amp;]()\n    {\n        vector&lt;int&gt; s(n + 1);\n        for (int i = 1; i &lt;= n; i++)\n        {\n            if (a[i] &gt; k)\n                s[i] = s[i - 1] - 1;\n            else\n                s[i] = s[i - 1] + 1;\n        }\n        multiset&lt;int&gt; st{s.begin() + 1, s.begin() + n};\n        for (int i = 1; i + 1 &lt; n; i++)\n        {\n            st.erase(st.find(s[i]));\n            if (s[i] &gt;= 0)\n            {\n                auto it = st.lower_bound(s[i]);\n                if (it != st.end())\n                    return true;\n            }\n        }\n        return false;\n    };\n    bool ans = false;\n    ans |= check();\n    reverse(a.begin() + 1, a.end());\n    ans |= check();\n    cout &lt;&lt; (ans ? \"YES\" : \"NO\") &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2108/","title":"Codeforces Round 1022 (Div. 2)","text":"<p>2025-05-01</p> <p>link: https://codeforces.com/contest/2108</p> <p>D\u9898\u76ee\u524d\u901a\u8fc7\u624d\u4e00\u4e24\u767e\uff0c \u9898\u76ee\u4e5f\u5927\u6982\u90fd\u8bfb\u4e86\u4e0b\uff0c \u611f\u89c9\u4e0d\u592a\u6709\u5fc5\u8981\u770b\u4e86\uff0c \u6765\u603b\u7ed3\u4e00\u4e0b\u3002\u3002\u3002</p> <p>\u8fd9\u573a\u603b\u7684\u6765\u8bf4\u7cd6\u4e38\u4e86\uff0c B \u53ea\u9700\u8981\u8ba8\u8bba\u5c31\u597d\uff0c C \u4ee3\u7801\u601d\u8def\u90fd\u7279\u522b\u7b80\u5355\u3002 \u4f46\u662f\u8fd9\u4e24\u9898\u52a0\u8d77\u6765 WA \u4e86\u4e09\u6b21\u3002</p> <p>\u5176\u4e2d\u4e24\u6b21\u90fd\u662f\u5f88\u4e0d\u5e94\u8be5\u9519\u7684\u5730\u65b9\uff0c \u518d\u600e\u4e48\u4e5f\u4e0d\u8be5\u9519\u7684\uff0c \u800c\u4e14\u4e5f\u803d\u8bef\u65f6\u95f4\u3002  \u603b\u4e4b\u8fd8\u662f\u5f97\u591a\u5199\u9898\uff0c \u624d\u80fd\u5c11\u9519\uff0c \u624d\u80fd\u901f\u5ea6\u66f4\u5feb\u3002</p>"},{"location":"cp_solving/Codeforces/2108/#a","title":"A","text":"<p>\u8fd9\u4e2a A \u7ed9\u6211\u7d27\u5f20\u5230\u4e86\uff0c \u5f88\u770b\u4e86\u4e00\u4f1a\u624d AC\uff0c \u731c\u4e86\u4e00\u4e0b\u3002 \u6211\u731c\u7684\u662f\u6700\u5927\u7684\u503c\u662f\u6570\u7ec4 \\(p\\) \u53d6 \\(p_{i} = n - i + 1\\) \uff0c \u662f\u6700\u5927\u7684\u4e00\u4e2a\u503c\uff0c \u7136\u540e\u6bcf\u4e2a\u503c\u95f4\u9694 2 \u3002 \u7136\u540e\u5c31 AC \u4e86\u3002</p> <pre><code>// Date: 2025-05-01\n// Time: 22:36:38\nvoid ChatGptDeepSeek()\n{\n    int n;\n    cin &gt;&gt; n;\n    /*\n    0\n    2 * (pi-pj)\n\n    */\n    int mx = 0;\n    for(int i = 1, j = n; i &lt;= n; i++, j--)\n        mx += abs(j - i);\n    cout &lt;&lt; mx / 2 + 1 &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2108/#b","title":"B","text":"<p>\u5176\u5b9e\u5c31\u5206\u7c7b\u8ba8\u8bba\u5c31\u884c\uff0c \u6211\u7b2c\u4e8c\u6b21 WA \u662f\u56e0\u4e3a\u5224\u65ad \\(x = 0\\) \u4e14 \\(n\\) \u4e3a\u5076\u6570\u65f6\uff0c \u8f93\u51fa \\(2\\) \uff0c \u5176\u5b9e\u60f3\u7684\u4e5f\u662f\u8f93\u51fa \\(n\\) \u7684\u3002\u3002\u3002</p> <p>\u4e5f\u662f\u803d\u8bef\u4e86 8 \u5206\u949f\u548c\u6263\u4e8650\u3002\u4e00\u5b9a\u5f97\u7ec6\u5fc3\u4e00\u70b9\u5427\uff0c \u8fd9\u79cd\u5206\u7c7b\u8ba8\u8bba\u7684\u9898\uff0c \u63d0\u4ea4\u4e4b\u524d\uff0c \u4e00\u5b9a\u518d\u628a\u6bcf\u79cd\u60c5\u51b5\u53bb\u7b80\u5355\u60f3\u4e00\u4e0b\u3002</p> <p>\\(x = 0\\) \u65f6: \\(n = 1\\) \u80af\u5b9a\u4e0d\u884c\uff1b \u663e\u7136\u5982\u679c \\(n\\) \u4e3a\u5076\u6570\uff0c \u90a3\u4e48\u7b54\u6848\u80af\u5b9a\u662f \\(n\\) \uff0c \u56e0\u4e3a \\(n\\) \u4e2a\u6570\u5168\u53d6 \\(1\\) \u80af\u5b9a\u7b54\u6848\u662f\u6700\u5c0f\u7684; \\(n\\) \u5982\u679c\u662f\u5947\u6570\uff0c \u90a3\u4e48\u6211\u4eec\u5fc5\u987b\u627e\u51fa\u4e09\u4e2a\u6570\u5b57\uff0c \u4f7f\u5f97\u5b83\u4eec\u5f02\u6216\u548c\u4e3a \\(0\\) \uff0c \u7136\u540e\u5176\u4ed6\u6570\u5b57\u5168\u90e8\u53d6 \\(1\\) \uff0c \u90a3\u4e48\u6211\u4eec\u7684\u7b54\u6848\u5c31\u662f $1, 2, 3, 1, 1, .... $ \u3002</p> <p>\u5426\u5219\uff0c \u6211\u4eec\u770b\u4e00\u4e0b \\(x\\) \u7684\u4e8c\u8fdb\u5236\u7684 \\(1\\) \u7684\u4e2a\u6570\uff0c \u8bbe\u4e3a \\(cnt\\) \u3002\u5982\u679c \\(cnt \\ge n\\) \uff0c \u90a3\u4e48\u6211\u4eec\u4e00\u5b9a\u53ef\u4ee5\u7ed9\u6bcf\u4e2a\u6570\u5b57\u4e8c\u8fdb\u5236\u4f4d\u5206\u914d\u6b63\u6574\u6570\u4e2a \\(1\\) \uff0c \u4f7f\u5f97\u5b83\u4eec\u7684\u548c\u6070\u597d\u7b49\u4e8e \\(x\\) \u3002</p> <p>\u5426\u5219\uff0c \u5982\u679c \\(n- cnt\\) \u662f\u5076\u6570\uff0c \u90a3\u4e48\u5269\u4e0b\u7684\u6570\u5b57\u662f\u4e0d\u4f1a\u5f71\u54cd\u7b54\u6848\u7684\uff0c \u6211\u4eec\u53ef\u4ee5\u8ba9 \\(cnt\\) \u4e2a\u6570\u5b57\u4e4b\u548c\u7b49\u4e8e \\(x\\) \u4e14\u5f02\u6216\u548c\u7b49\u4e8e \\(x\\) \uff08\u6bcf\u4e2a\u6570\u5b57\u53d6 \\(x\\) \u7684\u4e3a \\(1\\) \u7684 1 \u4e2a\u4f4d\uff09\uff1b \u5426\u5219\u5c31\u662f\u6211\u4eec\u9700\u8981\u8ba8\u8bba\u7684\u6700\u540e\u4e00\u79cd\u60c5\u51b5\u5566~ \u5982\u679c \\(cnt &gt; 1\\) \uff0c \u90a3\u4e48\u53ef\u4ee5\u5206\u4e00\u4e2a\u6570\u5b57\u8fc7\u53bb\uff0c \u4f7f\u5f97 \\(1\\) \u7684\u4e2a\u6570\u4e3a\u5076\u6570\uff0c \u5982\u679c \\(cnt = 1\\) \uff0c \u5c31\u4e0d\u80fd\u5206\u6570\u5b57\u8fc7\u53bb\uff0c \u5982\u679c \\(x = 1\\) \uff0c \u90a3\u4e48\u7b54\u6848\u662f \\(2, 3, 1, 1, 1 , ...\\) , \u5426\u5219\u7b54\u6848\u662f \\(x + 1, 1, 1, 1, ...\\)\u3002</p> <p>\u7136\u540e\u5230\u8fd9\u91cc\uff0c \u7b54\u6848\u5e94\u8be5\u5c31\u5206\u7c7b\u5b8c\u4e86\u3002</p> <pre><code>// Date: 2025-05-01\n// Time: 22:56:16\nvoid ChatGptDeepSeek()\n{\n    int n, x;\n    cin &gt;&gt; n &gt;&gt; x;\n    int cnt = 0, tmp = x;\n    while (tmp) {\n        cnt += tmp &amp; 1;\n        tmp &gt;&gt;= 1;\n    }\n    // cout &lt;&lt;cnt &lt;&lt;'\\n';\n\n    if (x == 0) {\n        if (n == 1)\n            cout &lt;&lt; \"-1\\n\";\n        else{\n            if(n % 2 == 0) cout &lt;&lt; n &lt;&lt; '\\n';\n            else{// 1 1 1 1, 2, 3\n                cout &lt;&lt; n + 3 &lt;&lt;'\\n';\n            }\n        }\n        return;\n    }\n    if (cnt &lt; n) {\n        if ((n - cnt) &amp; 1) {\n            if (cnt == 1) {\n                // 1 2 3, \n                if(x == 1){\n                    //2 3\uff0c \u5176\u4ed6\u5168\u53d61\n                    cout &lt;&lt; 3 + n &lt;&lt;'\\n';\n                }else{\n                    //x+1 1\n                    cout &lt;&lt; n + x &lt;&lt; '\\n';\n                }\n            }// 8, 9 ^ 1\n            else{\n                cout &lt;&lt; x + n - cnt + 1 &lt;&lt; '\\n';\n            }\n        }else {\n            cout &lt;&lt; x + n - cnt &lt;&lt; '\\n';\n        }\n    }else{\n        cout &lt;&lt; x &lt;&lt;'\\n';\n    }\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2108/#c","title":"C","text":"<p>\u611f\u89c9\u786e\u5b9e\u4e0d\u4e00\u5b9a\u6bd4 B \u96be\uff0c \u6392\u4e2a\u5e8f\u7136\u540e\u987a\u7740\u5f04\u5c31\u884c\u3002 \u53ef\u80fd\u8fd8\u662f\u8bfb\u9898\u6bd4\u8f83\u96be\u3002\u3002\u3002</p> <pre><code>// Date: 2025-05-01\n// Time: 23:35:57\nvoid ChatGptDeepSeek()\n{\n    int n;\n    cin &gt;&gt; n;\n    vi a(n + 1);\n    for(int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; a[i];\n    int now = a[1], cnt = 0;\n    vc&lt;array&lt;int, 3&gt;&gt; info;\n    for(int i = 1; i &lt;= n; i++){\n        if(a[i] == now)\n            cnt++;\n        else{\n            info.push_back({now, i - cnt, i - 1});\n            now = a[i], cnt = 1;\n        }\n    }\n    info.push_back({now, n - cnt + 1, n});\n    sort(all(info), greater&lt;&gt;());\n    vc&lt;bool&gt; vis(n + 1);\n    int ans = 0;\n    for(auto [val, l ,r] : info){\n        // cerr &lt;&lt; val &lt;&lt; \" \" &lt;&lt; l &lt;&lt; \" \" &lt;&lt; r &lt;&lt;'\\n';\n        if(l &amp;&amp; vis[l - 1]){\n            vis[r] = true;\n        }else if(r &lt; n &amp;&amp; vis[r + 1]){\n            vis[l] = true;\n        }else{\n            vis[l] = vis[r] = true;\n            ans++;\n        }\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2111/","title":"Educational Codeforces Round 179 (Rated for Div. 2)","text":"<p>2025-06-03</p> <p>\u597d\u4e45\u6ca1\u5199\u535a\u5ba2\u4e86\uff0c\u4f46\u662f\u9898\u8fd8\u662f\u5728\u5199\u5427\u3002\u6211\u9700\u8981\u6709\u66f4\u5145\u6c9b\u7684\u7cbe\u529b\uff0c\u5e73\u65f6\u8fd8\u662f\u65e9\u70b9\u7761\u5427\u3002\u3002\u3002</p> <p>\u8fd9\u573a\u662f\u6253\u5f97\u8fd8\u884c\u7684\u4e00\u573a\uff0c\u5982\u679c\u4e0d\u88abhack\u548cfst\uff0c\u90a3\u4e48\u8fd9\u5c06\u662f\u6211\u76ee\u524drank\u6700\u9ad8\u7684\u4e00\u573a\u3002</p> <p></p> <p>ABCD\u90fd\u5f88\u7b80\u5355\uff0c\u770b\u901a\u8fc7\u4eba\u6570\u4e5f\u662f\u8fd9\u6837\uff0cE\u4e0d\u7b97\u592a\u96be\uff0c\u4f46 1k \u901a\u8fc7\u4eba\u6570\u4e5f\u53ea\u662f\u6b63\u5e38\u96be\u5ea6\u5427\uff0c\u611f\u89c9\u5199\u51fa\u6765\u633a\u5e78\u8fd0\u7684\u3002C\u9898\u7206int\u9519\u4e86\u4e00\u53d1\u611f\u89c9\u6709\u70b9\u5510\uff0c\u4e0d\u8fc7\u5f71\u54cd\u4e0d\u5927\uff0c\u4e9b\u8bb8\u98ce\u971c\u7f62\u4e86\u3002</p>"},{"location":"cp_solving/Codeforces/2111/#a","title":"A","text":"<p>\u5176\u5b9e\u6211\u770b\u5230\u9898\u611f\u89c9\u6709\u70b9\u614c\u4e86\uff0c\u611f\u89c9\u7a0d\u5fae\u8981\u60f3\u4e00\u4f1a\u3002\u89c2\u5bdf\u4e86\u4e0b\u6837\u4f8b\uff0c\u7136\u540e\u60f3\u7740\u76f4\u63a5\u8f93\u51fa \\(2\\log{n} + 1\\) \u8bd5\u8bd5\uff0c\u7136\u540e\u5dee\u4e86 2\uff0c\u6539\u6210 \\(2(\\log{n} + 1) + 1\\) \u5c31\u8fc7\u4e86\u3002\u53d1\u73b0\u65e0 \\(n = 0\\) \u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u4ea4\u3002</p> <p>\u64cd\u4f5c\u7684\u8fc7\u7a0b\u53ef\u4ee5\u662f \\(0, 1, 3, 5, 7, ...., x\\)\uff0c\u5e76\u4e14\u6bcf\u4e2a\u6570\u5b57\u51fa\u73b0 2 \u6b21\uff0c\u8fd9\u6837\u4e00\u5b9a\u64cd\u4f5c\u6b21\u6570\u6700\u5c11\uff0c \\(x\\) \u591a\u51fa\u73b0\u4e00\u6b21\uff0c\u6240\u4ee5\u7b54\u6848\u5c31\u662f \\(x\\) \u7684\u6709\u6548\u4e8c\u8fdb\u5236\u4f4d\u6570 + 1\u3002</p> <pre><code>// Date: 2025-06-03\n// Time: 22:39:05\nvoid ChatGptDeepSeek()\n{\n    int x;\n    cin &gt;&gt; x;\n    cout &lt;&lt; 2 * (__lg(x) + 1) + 1 &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2111/#b","title":"B","text":"<p>\u7ed3\u8bba: \u53ea\u8981\u6700\u5927\u7684\u4e24\u4e2a\u65b9\u5757\u80fd\u653e\u5f97\u8fdb\u53bb\uff0c\u5176\u4ed6\u7684\u90fd\u80fd\u653e\u5f97\u8fdb\u53bb\u3002\u8bbe \\(cube_i\\) \u4e3a\u7b2c \\(i\\) \u4e2a\u65b9\u5757\uff0c\u90a3\u4e48 \\(cube_n\\) \u548c \\(cube_{n-1}\\) \u6328\u7740\u653e\uff0c\u4f1a\u591a\u51fa\u4e00\u5757\u7a7a\u95f4\uff0c\u8fd9\u90e8\u5206\u7a7a\u95f4\u4e00\u5b9a\u80fd\u628a \\(cube_{n-2}\\) \u548c \\(cube_{n-3}\\) \u90fd\u653e\u8fdb\u53bb\u3002\u56e0\u4e3a \\(f_{n-1} = f_{n-2} + f_{n-3}\\)\uff0c\u5e76\u4e14 \\(f_{n} = f_{n-1} + f_{n-2}\\)\uff0c\u6240\u4ee5 \\(cube_{n-1}\\) \u548c \\(cube_{n-2}\\) \u662f\u53ef\u4ee5\u5e76\u6392\u653e\u5728 \\(cube_{n}\\) \u4e0a\u9762\u7684\u3002</p> <p>\u5373\u82e5 \\(f_{n}\\) \u548c \\(f_{n-1}\\) \u80fd\u653e\u8fdb\u53bb\uff0c\u5219 \\(f_{n-2}\\) \u548c \\(f_{n-3}\\) \u5fc5\u80fd\u653e\u8fdb\u53bb\u3002\u90a3\u4e48\u95ee\u9898\u5176\u5b9e\u53ef\u4ee5\u8f6c\u6362\u6210\uff0c\\(f_{n-2}\\) \u548c \\(f_{n-3}\\) \u80fd\u653e\u8fdb\u53bb\uff0c\u5b83\u4eec\u90a3\u4e2a\u5c0f\u7a7a\u95f4\u8fd8\u80fd\u63a5\u7740\u53bb\u653e\u5176\u4ed6\u7684\u3002\u76f8\u5f53\u4e8e\u662f\u4e00\u4e2a\u9012\u5f52\u7684\u8fc7\u7a0b\u4e86\uff0c\u6240\u4ee5\u4e4b\u540e\u5176\u4ed6\u7684\u65b9\u5757\u4e5f\u5fc5\u5168\u90fd\u80fd\u653e\u5f97\u8fdb\u53bb\u3002</p> <pre><code>// Date: 2025-06-03\n// Time: 22:46:00\nvoid ChatGptDeepSeek()\n{\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    vi f(n + 1);\n    f[1] = 1, f[2] = 2;\n    for(int i = 3; i &lt;= n; i++)\n        f[i] = f[i - 1] + f[i - 2];\n    for(int i = 1; i &lt;= m; i++){\n        array&lt;int, 3&gt; w;\n        for(int j = 0; j &lt; 3; j++)\n            cin &gt;&gt; w[j];\n        sort(all(w));\n        if(w[0] &gt;= f[n] &amp;&amp; w[2] &gt;= f[n] + f[n - 1])\n            cout &lt;&lt; 1;\n        else cout &lt;&lt; 0;\n    }\n    cout &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2111/#c","title":"C","text":"<p>\u8fd9\u4e2a\u5c31\u5f88\u7b80\u5355\u4e0d\u9700\u8981\u5565\u8bc1\u660e\u4e86\uff0c\u4f60\u6700\u7ec8\u7684\u7b54\u6848\u5fc5\u7136\u662f\u4e2d\u95f4\u7559\u4e00\u6bb5\u4e0d\u64cd\u4f5c\uff0c\u7136\u540e\u628a\u5de6\u53f3\u5168\u90e8\u53d8\u6210\u4e2d\u95f4\u7684\u90a3\u4e2a\u503c\u3002\u6240\u4ee5\u904d\u5386\u4e00\u4e0b\u5c31\u884c\u3002</p> <p>\u56e0\u4e3a\u7206int\uff0cwa\u4e86\u4e00\u6b21\uff0c\u95ee\u9898\u4e0d\u5927\u3002</p> <pre><code>// Date: 2025-06-03\n// Time: 22:55:47\nvoid ChatGptDeepSeek()\n{\n    int n;\n    cin &gt;&gt; n;\n    vi a(n + 1);\n    for(int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; a[i];\n    vc&lt;array&lt;int, 3&gt;&gt; vec;\n    int l = 1;\n    for(int i = 2; i &lt;= n; i++){\n        if(a[i] != a[i - 1]){\n            vec.push_back({l, i - 1, a[i - 1]});\n            l = i;\n        }\n    }\n    vec.push_back({l, n, a[n]});\n    ll ans = LNF;\n    for(auto [l, r, val] : vec)\n        cmin(ans, 1LL * (l - 1) * val + 1LL * (n - r) * val);\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2111/#d","title":"D","text":"<p>\u80af\u5b9a\u9009\u51fa\u6765\u7684\u697c\u5c42\u5fc5\u987b\u662f\u82e5\u5e72\u4e2a\u6700\u5927\u548c\u6700\u5c0f\u503c\uff0c\u6bcf\u4e2a\u4eba\u53ef\u4ee5\u7528\u4e24\u4e2a\u697c\u5c42\u6765\u56de\u8dd1\u3002\u6211\u4eec\u5206\u914d\u7684\u987a\u5e8f\u5176\u5b9e\u4e0d\u592a\u91cd\u8981\uff0c\u56e0\u4e3a\u4f60\u4e0d\u7ba1\u548b\u6837\u90fd\u662f \\(n\\) \u4e2a\u6570\u5b57 - \\(n\\) \u4e2a\u6570\u5b57\uff0c\u53ea\u8981\u5206\u914d\u4e86\u503c\uff0c\u987a\u5e8f\u5c31\u4e0d\u4f1a\u5f71\u54cd\u7ed3\u679c\u7684\u3002</p> <pre><code>// Date: 2025-06-03\n// Time: 23:04:32\nvoid ChatGptDeepSeek()\n{\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    vi a(m + 1);\n    for(int i = 1; i &lt;= m; i++)\n        cin &gt;&gt; a[i];\n    sort(ALL(a));\n    for(int i = 1, j = 1; i &lt;= n; i += 2, j++){\n        vi ans(6);\n        for(int k = 0; k &lt; 6; k++)\n            ans[k] = (k &amp; 1) ? a[j] : a[m - j + 1];\n        for(auto x : ans)\n            cout &lt;&lt; x &lt;&lt; ' ';\n        cout &lt;&lt; '\\n';\n        reverse(all(ans));\n        if(i + 1 &lt;= n){\n            for(auto x : ans)\n                cout &lt;&lt; x &lt;&lt; ' ';\n             cout &lt;&lt; '\\n';\n        }\n    }\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2111/#e","title":"E","text":"<p>\u50cf\u8fd9\u79cd\u9898\uff0c\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u8d2a\u5fc3\uff0c\u6211\u4eec\u4e0d\u53ef\u80fd\u505a\u5230\u5728\u7ebf\u5904\u7406\u3002\u6240\u4ee5\u53ef\u4ee5\u62ff set \u5b58\u4e00\u4e0b\u64cd\u4f5c\uff0c\u5176\u5b9e\u6211\u521a\u5f00\u59cb\u662f\u5c1d\u8bd5 queue \u88c5\u7684\uff0c\u4f46\u662f\u4e0d\u592a\u884c\u3002</p> <p>\u8003\u8651\u4e00\u4e0b\u5982\u4f55\u64cd\u4f5c\uff0c\u6211\u4eec\u80af\u5b9a\u662f\u904d\u5386\u5b57\u7b26\u4e32\uff0c\u524d\u9762\u7684\u80fd\u6539\u5c0f\u90a3\u5c31\u4e00\u5b9a\u8981\u4fee\u6539\uff0c\u56e0\u4e3a\u6211\u4eec\u662f\u8981\u6700\u5c0f\u5b57\u5178\u5e8f\u3002</p> <p>\u5982\u679c \\(s_i \\ne a\\) \uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u770b\u6709\u6ca1\u6709\u8ba9 \\(s_i\\) \u53d8\u6210 \\(a\\) \u7684\u64cd\u4f5c\uff1b\u5982\u679c\u6ca1\u6709\uff0c\u90a3\u5c31\u770b\u6709\u6ca1\u6709\u8ba9 \\(s_i\\) \u53d8\u6210\u53e6\u4e00\u79cd\u5b57\u7b26\uff0c\u4e14\u53e6\u4e00\u79cd\u5b57\u7b26\u6709\u53d8\u6210 \\(a\\) \u7684\u64cd\u4f5c\uff0c\u5e76\u4e14\u9700\u8981\u6ee1\u8db3\u987a\u5e8f\u5173\u7cfb\uff0c\u5373\u5148\u6539\u6210\u522b\u7684\u518d\u6539\u6210 \\(a\\)\uff0c\u6240\u4ee5\u7b2c\u4e00\u79cd\u64cd\u4f5c\u80af\u5b9a\u5c3d\u91cf\u5728\u524d\u9762\u6bd4\u8f83\u597d\uff0c\u7b2c\u4e8c\u79cd\u64cd\u4f5c\u5e76\u975e\u8d8a\u5927\u8d8a\u597d\uff0c\u56e0\u4e3a\u53ef\u80fd\u5bfc\u81f4\u4e4b\u540e\u7528\u4e0d\u4e86\uff0c\u6240\u4ee5\u7528 set \u4e8c\u5206\u6765\u627e\u3002</p> <p>\u82e5\u4e24\u79cd\u64cd\u4f5c\u90fd\u65e0\u6cd5\u8fdb\u884c\uff0c\u5219\u5982\u679c \\(s_i\\) \u662f \\(c\\)\uff0c \u90a3\u6211\u4eec\u5c31\u770b\u80fd\u4e0d\u80fd\u628a\u5b83\u53d8\u6210 \\(b\\)\u3002</p> <p>\u7136\u540e\u4e5f\u5c31\u662f\u8bf4\u54b1\u4eec\u6709\u4e24\u79cd\u65b9\u5f0f\u628a\u4e0d\u7b49\u4e8e \\(a\\) \u7684\u5b57\u7b26\u4fee\u6539\u6210 \\(a\\)\uff0c\u6211\u672c\u6765\u5728\u60f3\u5b83\u4eec\u4f1a\u4e0d\u4f1a\u6ca1\u6709\u4f18\u5148\u7ea7\u7684\u5173\u7cfb\u3002\u4f46\u662f\u8fd9\u91cc\uff0c\u80af\u5b9a\u662f\u80fd\u7528\u7b2c\u4e00\u79cd\u65b9\u5f0f\u4fee\u6539\u5c31\u7528\u7b2c\u4e00\u79cd\u65b9\u5f0f\u4fee\u6539\uff0c\u56e0\u4e3a\u4f60\u7b2c\u4e00\u79cd\u4fee\u6539\u7684\u90a3\u4e2a\u64cd\u4f5c\uff0c\u4f60\u7559\u7740\u4e5f\u6ca1\u5565\u7528\uff0c\u5728\u524d\u9762\u7528\u4e86\u80af\u5b9a\u4e0d\u4f1a\u4e8f\u3002\u4f60\u7528\u7b2c\u4e8c\u79cd\u53ef\u80fd\u4f1a\u5bfc\u81f4\u53e6\u4e00\u79cd\u5b57\u7b26\u540e\u9762\u4e0d\u80fd\u53d8\u6210 \\(a\\)\u3002\u90a3\u4e48\u663e\u7136\u7b2c\u4e00\u79cd\u80af\u5b9a\u662f\u7528\u5c3d\u91cf\u540e\u9762\u7684\u64cd\u4f5c\u3002</p> <p>\u7136\u540e\u5f88\u7b80\u5355\u4e86\u5427\u3002</p> <pre><code>// Date: 2025-06-03\n// Time: 23:16:16\nvoid ChatGptDeepSeek()\n{\n    int n, q;\n    cin &gt;&gt; n &gt;&gt; q;\n    string s;\n    cin &gt;&gt; s;\n    vc&lt;vc&lt;set&lt;int&gt;&gt;&gt; op(3, vc&lt;set&lt;int&gt;&gt;(3));\n    for(int i = 1; i &lt;= q; i++) {\n        char x, y;\n        cin &gt;&gt; x &gt;&gt; y;\n        op[x - 'a'][y - 'a'].insert(i);\n    }\n    for(int i = 0; i &lt; n; i++){\n        if(s[i] == 'a'){\n            cout &lt;&lt; s[i];continue;\n        }\n        int x = s[i] - 'a'; \n        if(op[x][0].size()){\n            s[i] = 'a';\n            op[x][0].erase(op[x][0].begin());\n        }else{\n            if(op[x][3 - x].size() &amp;&amp; op[3 - x][0].size()){\n                int small = *op[x][3 - x].begin();\n                auto it = op[3 - x][0].upper_bound(small);\n                if(it != op[3 - x][0].end()){\n                    op[x][3 - x].erase(op[x][3 - x].begin());\n                    op[3 - x][0].erase(it);\n                    s[i] = 'a';\n                    cout &lt;&lt; s[i];continue;\n                }\n            }\n            if(3 - x &lt; x &amp;&amp; op[x][3 - x].size()){\n                op[x][3 - x].erase(prev(op[x][3 - x].end()));\n                s[i] = 'b';\n            }\n        }\n        cout &lt;&lt; s[i];\n    }\n    cout &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2112/","title":"Educational Codeforces Round 180 (Rated for Div. 2)","text":"<p>created: 2025-06-25 00:58:42</p> <p>25\u53f7\u4e0a\u5348\u8003\u6700\u540e\u4e00\u95e8\u6570\u636e\u5e93\uff0c\u8003\u5b8c\u5c31\u53ef\u4ee5\u5c3d\u60c5\u5199\u9898\u4e86\uff0c\u6700\u8fd1\u4e00\u4e2a\u6708\u90fd\u6ca1\u548b\u5199\u3002</p> <p>\u521a\u624d\u5927\u6982\u6570\u4e86\u4e00\u4e0b\uff0c\u76ee\u524d\u8fd9\u4e2a\u535a\u5ba2\u91cc\u7684CF\u535a\u5ba2\u6570\u91cf\u597d\u50cf\u662f24\u7bc7\uff0c\u6709\u70b9\u592a\u5c11\u963f\uff0c\u867d\u7136\u4e5f\u662f\u6709\u51e0\u573a\u8fd8\u6ca1\u6709\u5199\u535a\u5ba2\uff0c\u4f46\u662f\u4e5f\u5f88\u5c11\u3002</p> <p>\u4ee5\u540e\u5fc5\u987b\u6bcf\u573a\u6253\u5b8c\u5c31\u5f00\u59cb\u5199\uff0c\u56e0\u4e3a\u5f88\u591a\u65f6\u5019\u4e5f\u662f\u7b49st\uff0c\u4e0d\u5982\u65e9\u70b9\u628a\u535a\u5ba2\u5199\u4e86\u5462...</p> <p></p> <p>\u8fd9\u573a\u6253\u7684\u52c9\u5f3a\u8fd8\u884c\uff0c\u6392\u540d\u7a0d\u5fae\u50cf\u4eba\u7c7b\u4e00\u70b9\u4e86\u3002E\u6ca1\u6709\u601d\u8def\u554a\u3002\u660e\u5929\u5c31\u770b\u770b\u9898\u89e3\u5427\uff5e\uff08\u5e94\u8be5\u662f\u4eca\u5929\uff09\u3002</p>"},{"location":"cp_solving/Codeforces/2112/#a","title":"A","text":"<p>\u76f4\u63a5\u6bcf\u5c40\u5c31\u884c\u3002</p> <pre><code>// Date: 2025-06-23\n// Time: 22:34:41\nvoid ChatGptDeepSeek()\n{\n    int a, x, y;\n    cin &gt;&gt; a &gt;&gt; x &gt;&gt; y;\n    if(x &gt; y) swap(x, y);\n    for(int b = x; b &lt;= y; b++){\n        if(abs(b - x) &lt; abs(a - x) &amp;&amp; abs(b - y) &lt; abs(a - y)){\n            cout &lt;&lt; \"YES\\n\";\n            return;\n        }\n    }\n    cout &lt;&lt; \"NO\\n\";\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2112/#b","title":"B","text":"<p>\u53d1\u73b0\u6700\u591a\u53ea\u9700\u8981\u64cd\u4f5c\u4e00\u6b21\uff0c\u82e5\u4e0d\u4e3a\u5355\u8c03\u9012\u589e\u6216\u9012\u51cf\uff0c\u5219\u5fc5\u6700\u591a\u53ea\u9700\u8981\u64cd\u4f5c\u4e00\u6b21\u3002</p> <p>\u56e0\u4e3a\u8fd9\u6837\u60f3\uff0c\u5047\u5982\u5bf9\u4e8e \\(i\\)\uff0c \u6709 \\(a_{i - 1} &lt; a_i, a_i &gt; a_{i + 1}\\)\uff0c\u6240\u4ee5 a_i \u4e00\u5b9a\u53ef\u4ee5\u548c \\(min(a_{i-1},a_{i+1})\\) \u5408\u5e76\u53d8\u6210 \\(max(a_{i-1},a_{i+1})\\)\uff0c\u5c0f\u4e8e\u4e5f\u662f\u540c\u7406\uff0c\u6240\u4ee5\u82e5\u4e0d\u4e3a\u6709\u5e8f\u7684\uff0c\u5219\u5fc5\u53ea\u9700\u8981\u64cd\u4f5c\u4e00\u6b21\u3002</p> <pre><code>// Date: 2025-06-23\n// Time: 22:41:58\nvoid ChatGptDeepSeek()\n{\n    // x, \n    // 1 3 4 5 6 4 3\n    int n;\n    cin &gt;&gt; n;\n    vi a(n + 1);\n    for(int i = 1; i &lt;= n; i++){\n        cin &gt;&gt; a[i];\n\n    }\n    for(int i = 1; i &lt; n; i++){\n        if(abs(a[i] - a[i + 1]) &lt;= 1){\n            cout &lt;&lt; \"0\\n\";\n            return;\n        }\n    }\n    for(int i = 2; i &lt; n; i++){\n        if(a[i - 1] &lt; a[i] &amp;&amp; a[i + 1] &lt; a[i]){\n            cout &lt;&lt; \"1\\n\";\n            return;\n        }\n        if(a[i - 1] &gt; a[i] &amp;&amp; a[i + 1] &gt; a[i]){\n            cout &lt;&lt; \"1\\n\";\n            return;\n        }\n    }\n    // 1 4 5 1\n    cout &lt;&lt; \"-1\\n\";\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2112/#c","title":"C","text":"<p>\u5f53\u65f6\u60f3\u5f97\u7a0d\u5fae\u6709\u70b9\u590d\u6742\uff0c\u60f3\u5f97\u4e5f\u6709\u70b9\u6162\uff0c\u7528\u4e86\u6811\u72b6\u6570\u7ec4\uff0c\u7136\u540e\u6211\u5f88\u62c5\u5fc3\u4f1a fst\uff0c\u56e0\u4e3a 1000 * \\(10^5\\) \u7684\u6811\u72b6\u6570\u7ec4\uff0c\u611f\u89c9\u53ef\u80fd\u4f1a T \u5427\uff0c\u770b\u4ed6\u4eec\u90fd\u662f\u4e8c\u5206\u5199\u7684\u3002\u4e0d\u8fc7\u4e5f\u8fc7\u4e86\uff0c\u800c\u4e14\u65f6\u95f4\u633a\u5feb\u7684\u3002</p> <p>\u5c31\u662f\u5206\u6790\u9650\u5236\uff0c\u6211\u4eec\u5c31\u5047\u8bbe\u9009\u4e24\u4e2a\u5c0f\u7684\u6570\u662f \\(a_l\\), \\(a_r\\)\uff0c\u7b2c\u4e09\u4e2a\u6570\u5b57\u5047\u5982\u662f \\(x\\)\uff0c\u5219 \\(x &lt; a_l + a_r\\) \u4e14 \\(a_l + a_r + x &gt; a_n\\)\uff0c\u663e\u7136\u7b26\u5408\u6761\u4ef6\u7684 \\(x\\) \u5728\u4e00\u4e2a\u533a\u95f4\u91cc\uff0c\u5982\u679c\u4e8b\u5148\u7ed9 \\(a\\) \u6392\u597d\u5e8f\uff0c\u8fd9\u91cc \\(a\\) \u7684\u987a\u5e8f\u4e0d\u5f71\u54cd\u7b54\u6848\uff0c\u6240\u4ee5\u80af\u5b9a\u4e00\u5f00\u59cb\u6392\u4e2a\u5e8f\u597d\u641e\u70b9\u3002</p> <p>\u56e0\u4e3a \\(n \\le 5000\\)\uff0c \u6240\u4ee5\u53cc\u91cd\u5faa\u73af\u679a\u4e3e\u5c0f\u7684\u4e24\u4e2a\u6570\u5b57\u80af\u5b9a\u6ca1\u95ee\u9898\uff0c\u518d\u7528\u4e8c\u5206\u6765\u627e\u51fa\u5408\u6cd5\u7684\u7b2c\u4e09\u4e2a\u6570\u5b57\u7684\u533a\u95f4\uff0c\u5f53\u7136\u7528\u6811\u72b6\u6570\u7ec4\u4e5f\u884c\uff0c\u4e0d\u8fc7\u786e\u5b9e\u662f\u7a0d\u5fae\u9ebb\u70e6\u4e00\u70b9\u3002</p> <pre><code>// Date: 2025-06-23\n// Time: 22:49:48\nconstexpr int N = int(1e5);\nstruct Fenwick{\n    vector&lt;int&gt; b;\n    Fenwick (int n){\n        b.assign(n, 0);\n    }\n    int lowbit(int x){return (x) &amp; (-x);}\n    void add(int i, int x){\n        while(i &lt; b.size()){\n            b[i] += x;\n            i += lowbit(i);\n        }\n    }\n    int query(int i){\n        int res = 0;\n        while(i){\n            res += b[i];\n            i -= lowbit(i);\n        }\n        return res;\n    }\n    int get(int l, int r){\n        return query(r) - query(l - 1);\n    }\n};\nvoid ChatGptDeepSeek()\n{\n    int n;\n    cin &gt;&gt; n;\n    vi a(n + 1);\n    for(int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; a[i];\n    // vc&lt;vl&gt; dp(2, vl (N + 1));\n    sort(ALL(a));\n    // vl dp(3 * a[n] + 1);\n    /*\n    \u62ff\u7684\u8fd9\u4e09\u4e2a\u6570\n    \u5b83\u4eec\u7684\u548c\u8981\u5927\u4e8e\u6700\u5927\u7684\u6570\u5b57\n    \u4e14\u4e24\u4e2a\u5c0f\u7684\u6570\u5b57\u7684\u548c\u8981\u5927\u4e8e\u6700\u5927\u7684\u90a3\u4e2a\u6570\u5b57\n    */\n    // x + y &gt; z &amp;&amp; x + y + z &gt; mx\n    // z &lt; x + y, z &gt; mx - x - y\n    // z []\n    Fenwick tr(a[n] + 1);\n    // for(int i = 1; i &lt;= n; i++){\n    //     tr.add(a[i], 1);\n    // }\n    ll ans = 0;\n    // for(int l = 1; l &lt; n; l++){\n\n    //     for(int r = l + 1; r &lt;= n; r++){\n    //         int R = a[l] + a[r] - 1, L = a[n] - a[l] - a[r] + 1;\n    //         L = max(a[r], L);\n    //         if(L &gt; R) continue;\n    //         int cnt = \n    //         // cerr &lt;&lt; format(\"a[l] = {}, a[r] = {}, L = {}, R = {}, cnt = {}, l = {}, r = {}\\n\", a[l], a[r], L, R, cnt,l , r);\n\n    //         ans += cnt;\n    //     }\n    // }\n    for(int r = n; r &gt;= 1; r--){\n\n        for(int l = r - 1; l &gt;= 1; l--){\n            int R = a[l] + a[r] - 1, L = a[n] - a[l] - a[r] + 1;\n            L = max(a[r], L);\n            R = min(R, a[n]);\n            if(L &gt; R) continue;\n            ans += tr.get(L, R);\n        }\n        tr.add(a[r], 1);\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre> <p>\u7136\u540e\u521a\u624d\u7528\u4e8c\u5206\u91cd\u5199\u4e86\u4e00\u4e2a\uff0c<code>std::lower_bound</code> \u786e\u5b9e\u723d\u963f\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid solve()\n{\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;int&gt; a(n + 1);\n    for(int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; a[i];\n    sort(a.begin() + 1, a.end());\n    /*\n    a[l] + a[r] + x &gt; a[n], x &lt; a[l] + a[r]\n    x &gt; a[n] - a[l] - a[r]\n    */\n    long long ans = 0;\n    for(int l = 1; l &lt;= n; l++){\n        for(int r = l + 1; r &lt; n; r++){\n            auto L = upper_bound(a.begin() + r + 1, a.end(), a[n] - a[l] - a[r]) - a.begin();\n            auto R = lower_bound(a.begin() + r + 1, a.end(), a[l] + a[r]) - a.begin() - 1;\n            if(L &lt;= R)\n                ans += R - L + 1;\n        }\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\nint main()\n{\n    ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);\n    int t; cin &gt;&gt; t; while(t--)\n    solve(); return 0;\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2112/#d","title":"D","text":"<p>\u53c8\u662f\u4e00\u4e2a\u4e0d\u96be\u7684D\u9898\uff0c\u7a0d\u5fae\u60f3\u4e0b\u753b\u753b\u56fe\u5c31\u770b\u51fa\u6765\u5566\u3002</p> <p>\u9996\u5148\u5fc5\u987b\u5b58\u5728\u5ea6\u4e3a2\u7684\u70b9\uff0c\u5426\u5219\u65e0\u8bba\u5982\u4f55\uff0c\u4e0d\u53ef\u80fd\u5b58\u5728\u5408\u6cd5\u7684\u65b9\u6848\u3002</p> <p>\u90a3\u4e48\u5f88\u7b80\u5355\u4e86\uff0c\u5c31\u8ba9\u5176\u4ed6\u70b9\u90fd\u6070\u597d\u53ea\u6709\u4e00\u6761\u8def\u5f84\uff0c\u5ea6\u4e3a2\u7684\u90a3\u4e2a\u70b9\u7684\u5b50\u7ed3\u70b9\u7684\u8fb9\u53cd\u4e00\u4e0b\u5c31\u884c\u3002\u6ce8\u610f\u9009\u53d6\u7684\u5ea6\u4e3a2\u7684\u70b9\uff0c\u4e0d\u80fd\u662f dfs \u9009\u7684\u6839\u8282\u70b9\uff0c\u7136\u540e\u5c31\u6ca1\u5565\u8981\u6ce8\u610f\u7684\u4e86\uff0c\u76f4\u63a5\u5199\u5c31\u884c\u3002</p> <pre><code>// Date: 2025-06-23\n// Time: 23:34:39\nvoid ChatGptDeepSeek()\n{\n    int n;\n    cin &gt;&gt; n;\n    vc&lt;vi&gt; g(n + 1);\n    for(int i = 1; i &lt; n; i++){\n        int u, v;\n        cin &gt;&gt; u &gt;&gt; v;\n        g[u].push_back(v);\n        g[v].push_back(u);\n    }\n    int vertex = -1;\n    for(int i = 2; i &lt;= n; i++){\n        if(g[i].size() == 2){\n            vertex = i;\n            break;\n        }\n    }\n    int root = 1;\n    if(vertex == -1){\n        if(g[1].size() == 2){\n            root = 2;\n            vertex = 1;\n        }else{\n            cout &lt;&lt; \"NO\\n\";\n            return;\n        }\n    }\n    cout &lt;&lt; \"YES\\n\";\n    vc&lt;pii&gt; ans;\n    auto dfs = [&amp;](auto &amp;&amp;self, int u, int pre, int s) -&gt; void{\n        if(u == vertex) s ^= 1;\n        for(auto v : g[u]){\n            if(v == pre) continue;\n            if(s) ans.push_back({u, v});\n            else ans.push_back({v, u});\n            self(self, v, u, s ^ 1);\n        }\n    };\n\n    dfs(dfs, root, 0, 1);\n    for(auto [u, v] : ans)\n        cout &lt;&lt; u &lt;&lt; \" \" &lt;&lt; v &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2112/#e","title":"E","text":"<p>upd: \u8003\u5b8c\u4e86\uff0c\u4f46\u5e76\u6ca1\u6709\u5237\u9898\uff0c\u53ea\u662f\u628a\u8fd9\u4e2a E \u9898\u770b\u4e86\u4e00\u4e0b\uff0c\u76f4\u63a5\u542f\u52a8\u7684\u9898\u89e3\uff0c\u56e0\u4e3a\u8fc7\u7684\u4eba\u7b97\u633a\u5c11\u3002\u4f46\u662f\u8fd9\u9898\u633a\u6709\u610f\u601d\u7684\uff0c\u8981\u662f\u591a\u60f3\u4e00\u4e0b\u5c31\u597d\u4e86\uff0c\u867d\u7136\u4e0d\u4e00\u5b9a\u80fd\u60f3\u5f97\u51fa\u6765\u3002</p> <p>\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u4e0d\u662f\u7eff\u8272\uff0c\u90a3\u4e48\u8fd9\u9897\u5b50\u6811\u5fc5\u7136\u989c\u8272\u5168\u90fd\u76f8\u540c\uff0c\u5426\u5219\u5047\u5982\u8fd9\u91cc\u6709\u5176\u4ed6\u989c\u8272\uff0c\u5219\u5230\u6839\u8282\u70b9\u5fc5\u987b\u7ecf\u8fc7\u4e0d\u540c\u7684\u989c\u8272\u3002</p> <p>\u4f46\u5982\u679c\u81ea\u5df1\u60f3\uff0c\u5c31\u7b97\u60f3\u5230\u4e86\u8fd9\u4e2a\uff0c\u53ef\u80fd\u4e5f\u5f88\u96be\u5199\u3002\u7531\u4e8e\u6211\u662f\u770b\u4e86\u9898\u89e3\u7684\uff0c\u6240\u4ee5\u8981\u7528dp\uff0c\u8fd9\u8fd8\u771f\u6ca1\u60f3\u8fc7\u8981dp\u3002</p> <p>\u8ba9 \\(cnt_u\\) \u8868\u793a \\(u\\) \u4e3a\u7eff\u8272\u65f6\uff0c\u4ee5 \\(u\\) \u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u7684\u67d3\u8272\u65b9\u5f0f\uff0c\u5982\u679c \\(u\\) \u4e3a\u9ec4\u8272\u6216\u8005\u84dd\u8272\uff0c\u90fd\u53ea\u4f1a\u6709\u4e00\u79cd\u67d3\u8272\u65b9\u5f0f\u3002\u6240\u4ee5 \\(u\\) \u7684\u5b50\u6811\u7684\u67d3\u8272\u65b9\u5f0f\u662f \\(cnt_u + 2\\)\u3002</p> <p>\u56e0\u4e3a\u6bcf\u4e2a\u5b50\u6811\u90fd\u53ef\u4ee5\u88ab\u72ec\u7acb\u7684\u67d3\u8272\uff0c\u56e0\u6b64 $cnt_v = (cnt_{u1} + 2)(cnt_{u2} + 2) \\ldots (cnt_{uk} + 2) $\uff0c\u5176\u4e2d \\({u1, u2,\\ldots,uk}\\) \u662f \\(v\\) \u7684\u5b50\u8282\u70b9\u3002</p> <p>\u7136\u540e\u5c31\u53ef\u4ee5\u7528 \\(dp\\) \u6c42\u4e86\uff1a \u8ba9 \\(dp_m\\) \u662f \\(m\\) \u79cd\u67d3\u8272\u65b9\u6cd5\u7684\u6811\u7684\u6700\u5c0f\u8282\u70b9\u6570\uff0c\u6ce8\u610f\u5230\u6bcf\u4e2a\u8282\u70b9\u7684\u67d3\u8272\u6570\u662f\u5b83\u7684\u5b50\u8282\u70b9\u7684\u67d3\u8272\u6570\u7684\u4e58\u79ef\uff0c\u90a3\u4e48 \\(dp_m = min(dp_m, dp_{\\frac{m}{x}} + dp_{x - 2})\\)\uff0c\u5176\u4e2d \\(x\\) \u4e3a \\(m\\) \u7684\u56e0\u5b50\u3002</p> <p>\u8fd9\u91cc\u600e\u4e48\u7406\u89e3\u5462\uff1f\u76f8\u5f53\u4e8e\u662f\u6211\u4eec\u53bb\u627e\u4e00\u4e2a\u5df2\u7ecf\u67d3\u8272\u6570\u4e3a \\(\\frac{m}{x}\\) \u7684\u6811\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u8981\u518d\u52a0\u4e00\u4e2a\u67d3\u8272\u6811\u4e3a \\(x\\) \u7684\u6811\uff0c\u90a3\u4e48\u65b0\u7684\u6811\u7684\u67d3\u8272\u6811\u5c31\u4f1a\u6b63\u597d\u662f \\(m\\)\uff0c\u56e0\u4e3a\u591a\u4e00\u4e2a\u5b50\u8282\u70b9\uff0c\u5c31\u53ef\u4ee5\u4e58\u5b50\u8282\u70b9\u7684\u67d3\u8272\u6570\u3002\u90a3\u4e48\u4e3a\u4ec0\u4e48\u662f \\(x-2\\) \u5462\uff1f\u56e0\u4e3a\u6211\u4eec\u7684 \\(dp\\) \u8868\u793a\u7684\u662f\u6839\u8282\u70b9\u4e3a\u7eff\u8272\u7684\u67d3\u8272\u9700\u8981\u7684\u8282\u70b9\u6570\u91cf\uff0c\u5b83\u4f5c\u4e3a\u5b50\u8282\u70b9\u65f6\uff0c\u67d3\u8272\u6570\u91cf\u662f\u8981 \\(+2\\) \u7684\uff0c\u6240\u4ee5\u6211\u4eec\u8fd9\u91cc\u76f4\u63a5\u51cf\u3002</p> <p>\u76f4\u63a5\u679a\u4e3e \\(m\\) \u548c\u56e0\u5b50\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f \\(O(M\\sqrt{M})\\),\u4e5f\u53ef\u4ee5 \\(O(M\\log{M})\\)\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconstexpr int M = int(5e5);\nconstexpr int inf = int(1e9);\nint dp[M + 1];\n\nvoid solve(){\n    int m;\n    cin &gt;&gt; m;\n    cout &lt;&lt; (dp[m] != inf ? dp[m] : -1) &lt;&lt; '\\n';\n}\nint main(){\n    ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);\n    for(int i = 1; i &lt;= M; i++)\n        dp[i] = inf;\n    dp[1] = 1;\n    for(int m = 2; m &lt;= M; m++){\n        for(int p = 1; p * p &lt;= m; p++){\n            if(m % p) continue;\n            if(p &gt; 2) dp[m] = min(dp[m], dp[m / p] + dp[p - 2]);\n            if(m / p &gt; 2) dp[m] = min(dp[m], dp[p] + dp[m / p - 2]);\n        }\n    }\n    int t; cin &gt;&gt; t; while(t--)\n    solve(); return 0;\n}\n</code></pre> <p>\\(M\\log{M}\\) \u7684,\u54c7\u8fd9\u4e2a\u679a\u4e3e\u56e0\u5b50\u5f88\u5feb\u554a\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconstexpr int M = int(5e5);\nconstexpr int inf = int(1e9);\nint dp[M + 1];\n\nvoid solve(){\n    int m;\n    cin &gt;&gt; m;\n    cout &lt;&lt; (dp[m] != inf ? dp[m] : -1) &lt;&lt; '\\n';\n}\nint main(){\n    ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);\n    for(int i = 1; i &lt;= M; i++)\n        dp[i] = inf;\n    dp[1] = 1;\n    for(int a = 1; a &lt;= M; a++){\n        for(int b = 1; b * (a + 2) &lt;= M; b++)\n            dp[(a + 2) * b] = min(dp[(a + 2) * b], dp[a] + dp[b]);\n    }\n    int t; cin &gt;&gt; t; while(t--)\n    solve(); return 0;\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2116/","title":"Codeforces Round 1028 (Div. 2)","text":"<p>2025-05-31</p> <p></p>"},{"location":"cp_solving/Codeforces/2116/#a","title":"A","text":"<p>\u54c8\u54c8\u54c8\uff0c\u9519\u4e86\u4e00\u53d1\uff0c\u56e0\u4e3a\u6211\u4ee5\u4e3a ab \u90fd\u662f\u7b2c\u4e00\u4e2a\u4eba\u7684\u3002\u3002\u3002\u8bfb\u9898\u786e\u5b9e\u8981\u4ed4\u7ec6\u70b9</p> <pre><code>// Date: 2025-05-31\n// Time: 22:36:31\nvoid ChatGptDeepSeek()\n{\n    int a, b, c, d;\n    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d;\n    if(min(a, c) &gt;= min(b, d)) cout &lt;&lt; \"Gellyfish\\n\";\n    else cout &lt;&lt; \"Flower\\n\";\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2116/#b","title":"B","text":"<p>\u56e0\u4e3a\u662f\u6392\u5217\uff0c\u6240\u4ee5\u52a0\u7684\u4e24\u4e2a\u4f4d\u7f6e\uff0c\u5fc5\u7136\u81f3\u5c11\u6709\u4e00\u4e2a\u6570\u5b57\u662f\u524d\u7f00\u7684\u6700\u5927\u503c\u3002\u5176\u5b9e\u4e0d\u9700\u8981\u5feb\u901f\u5e42\uff0c\u62ff\u4e2a\u6570\u7ec4\u8bb0\u4e00\u4e0b\u5c31\u884c\u3002</p> <pre><code>// Date: 2025-05-31\n// Time: 22:43:12\nconstexpr int mod = 998244353;\n\nll ksm(ll a, ll b) {\n    ll res = 1;\n    while (b) {\n        if (b &amp; 1)\n            res = res * a % mod;\n        a = a * a % mod;\n        b &gt;&gt;= 1;\n    }\n    return res;\n}\nvoid ChatGptDeepSeek()\n{\n    int n;\n    cin &gt;&gt; n;\n    vi p(n), q(n), pos1(n), pos2(n), r(n), mx(n);\n    for(int i = 0; i &lt; n; i++){\n        cin &gt;&gt; p[i];\n        pos1[p[i]] = i;\n    }\n    for(int i = 0; i &lt; n; i++){\n        cin &gt;&gt; q[i];\n        pos2[q[i]] = i;\n    }\n    mx[0] = max(p[0], q[0]);\n    for(int i = 1; i &lt; n; i++){\n        mx[i] = max(mx[i - 1], max(p[i], q[i]));\n    }\n    for(int i = 0; i &lt; n; i++){\n        int x = 0;\n        if(pos1[mx[i]] &lt;= i)\n            cmax(x, q[i - pos1[mx[i]]]);\n        if(pos2[mx[i]] &lt;= i)\n            cmax(x, p[i - pos2[mx[i]]]);\n        r[i] = (ksm(2, mx[i]) + ksm(2, x)) % mod;\n        cout &lt;&lt; r[i] &lt;&lt; \" \\n\"[i + 1 == n];\n    }\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2116/#c","title":"C","text":"<p>\u62ff\u4e2a\u7b80\u5355\u7684dp\u6216\u8005bfs\u5c31\u884c\uff0c\u5176\u5b9e\u5c31\u662f\u8981\u7b97\u6700\u5c11\u591a\u5c11\u4e2a\u6570\u5b57\u7684gcd\u53ef\u4ee5\u7b49\u4e8e \\(g\\)\u3002\u7136\u540e\u5176\u4f59\u7684\u6570\u5b57\u53ea\u9700\u8981\u8ddf\u8fd9\u4e2a\u6570\u5b57\u4e00\u8d77\u64cd\u4f5c\u4e00\u6b21\u5c31\u4f1a\u53d8\u6210 \\(g\\)\u3002</p> <p>\u540e\u9762\u91cd\u4ea4\u53d1\u73b0 std::gcd \u6bd4 __gcd \u5feb\u597d\u591a\u3002\u7136\u540e\u53d6 gcd \u8fd8\u662f\u633a\u8d39\u65f6\u95f4\u7684\u3002</p> <pre><code>// Date: 2025-05-31\n// Time: 22:53:29\nvoid ChatGptDeepSeek()\n{\n    int n;\n    cin &gt;&gt; n;\n    vi dp(5000 + 1, INF), a(n + 1);\n    int g = 0;\n    for(int i = 1; i &lt;= n; i++){\n        cin &gt;&gt; a[i];\n        dp[a[i]] = 0;\n        g = gcd(g, a[i]);\n    }\n    if(*min_element(ALL(a)) == g){\n        cout &lt;&lt; n - count(ALL(a), g) &lt;&lt; '\\n';\n        return;\n    }\n    for(int i = 1; i &lt;= n; i++){\n        // vi ndp(dp);\n        for(int j = 1; j &lt;= 5000; j++){\n            if(dp[j] != INF)\n                cmin(dp[gcd(j, a[i])], dp[j] + 1);\n        }\n        // dp = ndp;\n    }\n    cout &lt;&lt; dp[g] + n - 1 &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2116/#d","title":"D","text":"<p>\u9006\u7740\u8003\u8651\u4f1a\u597d\u5f88\u591a\u3002\u5c31\u662f\u6211\u4eec\u5148\u770b\u540e\u8fdb\u884c\u7684\u64cd\u4f5c\u3002</p> <p>\u5148\u5f04\u4e00\u4e2a\u6570\u7ec4 \\(l\\) \u8868\u793a\u5bf9 \\(c_i\\) \u7684\u9650\u5236\uff0c\u521a\u5f00\u59cb \\(l = b\\)\u3002\u6bcf\u6b21\u4fee\u6539\u64cd\u4f5c\uff0c\u610f\u5473\u7740 \\(l_x \\ge l_z\\), \\(l_y \\ge l_z\\)\uff0c\u7136\u540e \\(l_z = 0\\)\u3002\u6211\u4eec\u5c31\u8ddf\u7740\u6539\u5c31\u884c\uff0c\u6700\u7ec8\u7684\u7b54\u6848\u5c31\u662f\u6570\u7ec4 \\(l\\)\u3002\u597d\u50cf\u5b8c\u5168\u6ca1\u6709\u95ee\u9898\uff0c\u4ee3\u7801\u5f88\u7b80\u5355\uff0c\u4f46\u662f\u81ea\u5df1\u60f3\u611f\u89c9\u6839\u672c\u4e0d\u77e5\u9053\u4ece\u54ea\u5f00\u59cb\u3002</p> <pre><code>// Date: 2025-06-06\n// Time: 08:05:35\nvoid ChatGptDeepSeek()\n{\n    int n, q;\n    cin &gt;&gt; n &gt;&gt; q;\n    vi b(n + 1), l(n + 1);\n    for(int i = 1; i &lt;= n; i++){\n        cin &gt;&gt; b[i];\n        l[i] = b[i];\n    }\n    vc&lt;array&lt;int, 3&gt;&gt; op(q);\n    for(int i = q - 1; i &gt;= 0; i--){\n        cin &gt;&gt; op[i][0] &gt;&gt; op[i][1] &gt;&gt; op[i][2];\n    }\n    for(auto [x, y, z] : op){\n        cmax(l[x], l[z]);\n        cmax(l[y], l[z]);\n        if(z != x &amp;&amp; z != y)\n            l[z] = 0;\n    }\n    vi c(l);\n    for(int i = q - 1; i &gt;= 0; i--){\n        auto [x, y, z] = op[i];\n        c[z] = min(c[x], c[y]);\n    }\n    if(b != c){\n        cout &lt;&lt; \"-1\\n\";\n        return;\n    }\n    for(int i = 1; i &lt;= n; i++){\n        cout &lt;&lt; (l[i] ? l[i] : 1) &lt;&lt; \" \\n\" [ i == n];\n    }\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2120/","title":"Codeforces Round 1033 (Div. 2) and CodeNite 2025","text":"<p>created: 2025-06-23 02:07:32</p> <p>\u8fd9\u573a\u6253\u7684\u5f88\u70c2\uff0c\u53c8\u5feb\u56db\u5343\u540d\u4e86\uff0c-76\u3002\u6700\u8fd1\u597d\u591a\u9898\u76ee\u6ca1\u8865\uff0c\u535a\u5ba2\u4e5f\u6ca1\u548b\u5199\uff0c\u5148\u628a\u8fd9\u7bc7\u5199\u4e86\u5427\u3002\u6700\u8fd1\u5728\u8003\u8bd5\uff0c\u4f46\u662f\u9a6c\u4e0a\u5c31\u8003\u5b8c\u4e86\uff0c24\u548c25\u8fd8\u67093\u573a\u8003\u8bd5\u7136\u540e\u5c31\u53ef\u4ee5\u5c3d\u60c5\u5237\u9898\u4e86\u3002\u53c8\u5b89\u4e0a ubuntu \u4e86\uff0c\u611f\u89c9\u5f88\u723d\u3002</p> <p></p> <p>\u7eff\u540d\u8868\u73b0\u5206\u95f9\u9ebb\u4e86\uff0cC\u6709\u70b9\u7cd6\u4e38\uff0cWA\u4e86\u51e0\u6b21\uff0c\u5176\u5b9e\u786e\u5b9e\u633a\u7b80\u5355\uff0cD\u4e0d\u4f1a\u5c31\u539f\u8c05\u81ea\u5df1\u4e86\u3002</p>"},{"location":"cp_solving/Codeforces/2120/#a","title":"A","text":"<p>\u633a\u7b80\u5355\u7684\uff0c\u8981\u6ce8\u610f\u662f\u4e0d\u80fd\u7ffb\u8f6c\u7684\uff0c\u6240\u4ee5\u76f4\u63a5\u679a\u4e3e\u51e0\u79cd\u60c5\u51b5\uff0c\u8981\u4e48\u5c31\u662f\u4e24\u4e2a\u5c0f\u7684\u5e76\u6392\uff0c\u5927\u7684\u5728\u4e0a\u9762\u6216\u8005\u4e0b\u9762\uff0c\u8981\u4e48\u5c31\u662f\u4e24\u4e2a\u5c0f\u7684\u4e0a\u4e0b\u653e\uff0c\u5927\u7684\u5728\u5de6\u8fb9\u6216\u8005\u53f3\u8fb9\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nusing ll = long long;\n\nvoid solve()\n{\n    array&lt;int, 3&gt; l, b;\n    for(int i = 0; i &lt; 3; i++)\n        cin &gt;&gt; l[i] &gt;&gt; b[i];\n    if(l[0] == l[2]){\n        if(l[0] == b[0] + b[1] + b[2]){\n            cout &lt;&lt; \"YES\\n\";\n            return;\n        }\n    }\n    if(b[0] == b[2]){\n        if(b[0] == l[0] + l[1] + l[2]){\n            cout &lt;&lt; \"YES\\n\";\n            return;\n        }\n    }\n    if(b[1] == b[2]){\n        if(b[1] + b[0] == l[0] &amp;&amp; l[1] + l[2] == l[0]){\n            cout &lt;&lt; \"YES\\n\";\n            return;\n        }\n    }\n    if(l[1] == l[2]){\n        if(l[1] + l[0] == b[0] &amp;&amp; b[1] + b[2] == b[0]){\n            cout &lt;&lt; \"YES\\n\";\n            return;\n        }\n    }\n    cout &lt;&lt; \"NO\\n\";\n}\nint main()\n{\n    ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);\n    int T; cin &gt;&gt; T; while(T--)\n    solve();\n    return 0;\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2120/#b","title":"B","text":"<p>\u54c8\u54c8\u54c8\uff0c\u770b\u8d77\u6765\u8fd8\u4ee5\u4e3a\u597d\u96be\uff0c\u8fd8\u5f88\u803d\u8bef\u4e86\u4e00\u4f1a\uff0c\u4f46\u662f\u89c2\u5bdf\u5982\u679c\u4e0d\u8003\u8651\u78b0\u649e\uff0c\u90a3\u4e48\u9664\u975e\u662f\u5728\u5bf9\u89d2\u7ebf\u4e0a\uff0c\u4e14\u8def\u5f84\u662f\u5bf9\u89d2\u7ebf\uff0c\u5426\u5219\u4e00\u5b9a\u4f1a\u8d70\u4e00\u4e2a\u77e9\u5f62\uff0c\u6c38\u8fdc\u4e0d\u4f1a\u5230\u89d2\u843d\u3002</p> <p>\u800c\u8003\u8651\u78b0\u649e\uff0c\u5176\u5b9e\u5e76\u4e0d\u5f71\u54cd\uff0c\u76f8\u5f53\u4e8e\u662f\u4e24\u4e2a\u5c0f\u7403\u4e92\u6362\u4e86\u8f68\u9053\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u627e\u5bf9\u89d2\u7ebf\u4e0a\u4e14\u6cbf\u7740\u5bf9\u89d2\u7ebf\u8d70\u7684\u5c0f\u7403\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nusing ll = long long;\n\nvoid solve()\n{\n    int n, s;\n    cin &gt;&gt; n &gt;&gt; s;\n    int ans = 0;\n    for(int i = 1; i &lt;= n; i++){\n        int dx, dy, x, y;\n        cin &gt;&gt; dx &gt;&gt; dy &gt;&gt; x &gt;&gt; y;\n        if(x + y == s &amp;&amp; dx * dy &lt; 0) ans++;\n        else if(x == y &amp;&amp; dx * dy &gt; 0) ans++;\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\nint main()\n{\n    ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);\n    int T; cin &gt;&gt; T; while(T--)\n    solve();\n    return 0;\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2120/#c","title":"C","text":"<p>\u611f\u89c9\u5f97\u628a\u5fc3\u9759\u4e0b\u6765\u597d\u597d\u5199\u9898\u89e3\uff0c\u800c\u4e0d\u53ea\u662f\u628a\u8fd9\u5f53\u505a\u4e00\u9879\u4efb\u52a1\u548c\u4e00\u79cd\u8d1f\u62c5\u3002</p> <p>\u9996\u5148\u6211\u4eec\u53ef\u8fbe\u5230\u7684\u6700\u5927\u7b54\u6848\u4e00\u5b9a\u662f \\(\\sum_{i=1}^{n} {i}\\)\uff0c \u6700\u5c0f\u7684\u7b54\u6848\u662f \\(n\\)\u3002</p> <p>\u90a3\u4e48\u662f\u5426\u5728\u8fd9\u4e2a\u533a\u95f4\u5185\u5219\u4e00\u5b9a\u53ef\u4ee5\u6709\u7b54\u6848\u5462\uff1f</p> <p>\u5176\u5b9e\u53ef\u4ee5\u8d2a\u5fc3\u53bb\u8003\u8651\uff0c\u9996\u5148\u6211\u4eec\u5047\u8bbe\u5f53\u524d\u7684\u56fe\u662f \\(n\\) \u4e3a\u6839\u8282\u70b9\uff0c\u4ece\u5927\u5230\u5c0f\u8fde\u7684\u4e00\u6761\u94fe\uff0c\u90a3\u4e48\u8fd9\u65f6\u6211\u4eec\u4e00\u5b9a\u662f\u8fbe\u5230\u6211\u4eec\u80fd\u8fbe\u5230\u7684\u6700\u5927\u7684\u503c\u3002</p> <p>\u63a5\u4e0b\u6765\u5c31\u53ef\u4ee5\u8d2a\u5fc3\u7684\u53d6\uff0c\u6bcf\u6b21\u5982\u679c\u5f53\u524d\u7b54\u6848\u5927\u4e8e\u76ee\u6807\uff0c\u5219\u628a \\(i\\) \u8fde\u5230 \\(1\\)\uff0c \u6216\u8005\u662f\u8fde\u4e00\u4e2a\u522b\u7684\u80fd\u76f4\u63a5\u4f7f\u5f97\u5f53\u524d\u503c\u7b49\u4e8e \\(m\\)\uff0c \u90a3\u4e48\u53ef\u4ee5\u9000\u51fa\u5faa\u73af\u4e86\u3002</p> <p>\u5982\u679c\u5f53\u524d\u7684\u7b54\u6848\u6070\u597d\u7b49\u4e8e \\(m\\)\uff0c \u90a3\u4e48\u5c31\u8ba9 \\(root = i\\)\uff0c\u5c0f\u4e8e \\(root\\) \u7684\u503c\uff0c\u53ea\u9700\u8981\u80fd\u7ed9\u51fa\u7b49\u4e8e \\(i\\) \u7684\u8d21\u732e\u5c31\u597d\uff0c\u6240\u4ee5\u5168\u8fde \\(root\\) \u5c31\u884c\u4e86\u3002</p> <p>\u670d\u4e86\uff0cWA\u56db\u6b21\u90fd\u662f\u56e0\u4e3a\u6ca1\u5224\u65ad \\(m &lt; n\\)\uff0c\u751a\u81f3\u540e\u6765\u53d1\u73b0\u4e86\u6709\u53e6\u4e00\u4e2a\u9650\u5236\uff0c\u4f46\u662f\u52a0\u7684\u662f \\(m &lt; n - 1\\)\uff0c\u60f3\u6210\u8fb9\u6743\u4e86\u6765\u7740\uff0c\u9274\u5b9a\u4e3a\u6ca1\u7761\u597d\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nusing ll = long long;\n\nvoid solve()\n{\n    int n; ll m;\n    cin &gt;&gt; n &gt;&gt; m;\n    ll now = 1LL * (1 + n) * n / 2;\n    if(m &gt; now || m &lt; n - 1){\n        cout &lt;&lt; \"-1\\n\";\n        return;\n    }\n    int root = 1;\n    vector&lt;pair&lt;int, int&gt;&gt; edges;\n    for(int i = n; i &gt;= 1; i--){\n        if(now == m){\n            root = i;\n            break;\n        }\n        // cerr &lt;&lt; now &lt;&lt; '\\n';\n        if(i - 1 &lt;= now - m){\n            now -= i - 1;\n            edges.push_back({1, i});\n        }else{\n            // \u770b i \u9700\u8981\u548c\u8c01\u8fde\n            int x = i - (now - m);\n            edges.push_back({x, i});\n            now -= i - x;\n            // now = m;\n            assert(now == m);\n            // i - x = now - m\n            // x = i - (now - m)\n        }\n        // cerr &lt;&lt; edges.size() &lt;&lt; '\\n';\n    }\n    for(int i = root - 1; i &gt;= 1; i--)\n        edges.push_back({root, i});\n    cout &lt;&lt; root &lt;&lt; '\\n';\n    for(auto [u, v] : edges){\n        cout &lt;&lt; u &lt;&lt; \" \" &lt;&lt; v &lt;&lt; '\\n';\n        // 2 + 2 + 1 + 1\n    }\n}\nint main()\n{\n    ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);\n    int T; cin &gt;&gt; T; while(T--)\n    solve();\n    return 0;\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2120/#d","title":"D","text":"<p>\u9996\u5148 \\(n\\) \u662f\u597d\u60f3\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u80af\u5b9a\u4f18\u5148\u4fdd\u8bc1 \\(n\\) \u5c0f\uff0c\u8bd5\u6837\u4f8b\u5927\u6982\u4e5f\u80fd\u8bd5\u51fa\u6765\uff0c\\(n = k(a-1) + 1\\)\u3002</p> <p>\u600e\u4e48\u6765\u7684\u5462\uff1f\u5c31\u662f\u5982\u679c\u6709 \\(k(a-1) + 1\\) \u884c\uff0c\u90a3\u4e48\u81f3\u5c11\u4f1a\u6709\u4e00\u4e2a\u6570\u5b57\u7684\u6570\u91cf\u662f \\(\\ge k\\) \u7684\uff0c\u5e76\u4e14\u4e00\u5b9a\u8981\u81f3\u5c11\u8fd9\u4e2a\u503c\uff0c\u624d\u80fd\u6ee1\u8db3\u6761\u4ef6\u3002</p> <p>\u5148\u8bf4\u7ed3\u8bba\uff0c\\(m = \\binom{n}{a}(b-1)k + 1\\)</p> <p>\\((b-1)k\\) \u5c31\u662f\u80fd\u4f7f\u5f97\u6bcf\u4e00\u884c\u6709 \\(b-1\\) \u4e2a\u76f8\u540c\u7684\uff0c\u7136\u540e\u5217\u7684\u79cd\u7c7b\u662f\u6709 \\(\\binom{n}{a}\\) \u79cd\uff0c\u6240\u4ee5\u6211\u4eec\u4e58 \\((b-1)k\\) \u5c31\u662f\u80fd\u4f7f\u5f97\u6bcf\u79cd\u5217\u662f\u51fa\u73b0\u4e86 \\(b-1\\) \u6b21\u3002</p> <p>\u5176\u5b9e\u6211\u53ef\u80fd\u4e5f\u6ca1\u592a\u641e\u61c2</p> <p>python \u633a\u723d\uff0c\u53d6\u6a21\u4e0d\u9700\u8981\u8003\u8651\u8d1f\u6570\uff0c\u4f46\u662f\u5176\u5b9e\u8981\u8003\u8651\u7684\u8bdd\u4e5f\u5c31\u591a\u64cd\u4f5c\u4e00\u6b21\u3002</p> <pre><code>mod = 1000000007\ndef solve():\n    a, b, k = map(int, input().split())\n    n = ((a - 1) * k + 1) % mod\n    # (n, a) * (b - 1) * k\n    # n * (n - 1) * (n - a + 1)\n    # n! / m!\n    fz = 1\n    for i in range(a):\n        fz = fz * (n - i) % mod\n    fm = 1\n    for i in range(1, a + 1):\n        fm = fm * i % mod\n    ans = fz * pow(fm, mod - 2, mod) % mod * (b - 1) % mod * k % mod + 1\n    print(n, ans % mod)\nfor _ in range(int(input())):\n    solve()\n</code></pre>"},{"location":"cp_solving/Codeforces/2120/#e","title":"E","text":"<p>\u770b\u9898\u89e3\u7a0d\u5fae\u6709\u70b9\u96be\u53d7\uff0c\u4f46\u5176\u5b9e\u4e5f\u4e0d\u662f\u5f88\u96be\u3002</p> <p>\u7528\u4e8c\u5206\u53ef\u4ee5\u627e\u51fa\u6bcf\u4e2a\u8f66\u9053\u7684\u6700\u5c0f\u7684\u8f66\u8f86\u6570\u3002</p> <p>\u5176\u5b9e\u6709\u70b9\u4e0d\u77e5\u9053\u600e\u4e48\u63cf\u8ff0\u51fa\u6765\u3002\u8ba9\u6700\u7ec8\u6700\u5c0f\u7684\u8f66\u8f86\u6570\u662f \\(lmt\\)\uff0c\u90a3\u4e48\u539f\u672c\u5c0f\u4e8e \\(lmt\\) \u7684\u6570\u5b57\u90fd\u4f1a\u53d8\u6210 \\(lmt\\)\uff0c\u6bd4 \\(lmt\\) \u5927\u7684\u90fd\u53d8\u6210 \\(lmt + k\\) \u6216\u8005 \\(lmt + k + 1\\) \u662f\u6700\u8d5a\u7684\u3002</p> <p>\u76f8\u5f53\u4e8e\u5c31\u662f\u53ef\u4ee5\u63a5\u53d7\u4e00\u4e9b\u8f66\u8f86\uff0c\u53ef\u4ee5\u79fb\u52a8\u4e00\u4e9b\u8f66\u8f86\uff0c\u90a3\u4e48\u6211\u4eec\u80af\u5b9a\u5e0c\u671b\u63a5\u53d7\u7684\u8f66\u8f86\u662f\u5c3d\u91cf\u591a\u7684\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u6709\u610f\u4e49\u7684\u79fb\u52a8\uff0c\u6bcf\u6b21\u79fb\u52a8\u90fd\u4f1a\u4f7f\u5f97\u603b \\(cost\\) \u51cf\u5c0f\u3002\u800c\u4e14\u6700\u5c0f\u7684\u8f66\u8f86\u6570\u5c3d\u91cf\u5927\uff0c\u624d\u4f1a\u8ba9\u7b54\u6848\u5c3d\u91cf\u5c0f\uff0c\u6240\u4ee5\u53ef\u4ee5\u4e8c\u5206\u6c42\u51fa\u6765\u3002</p> <p>\u76f8\u5f53\u4e8e\u662f\u627e\u6700\u5927\u7684 \\(lmt\\) \u4f7f\u5f97 \\(\\sum_{i = 1} ^ n max(0, lmt - a_i) \\le \\sum_{i = 1} ^ n max(0, a_i - (k + lmt))\\) \u3002 \u90a3\u4e48\u9700\u8981\u79fb\u52a8\u7684\u4f1a\u591a\u4e00\u4e9b\uff0c\u591a\u51fa\u6765\u7684\u5c31\u52a0\u56de\u53bb\uff0c\u53d8\u6210 \\(k + lmt + 1\\)\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u662f\u5426\u79fb\u52a8\uff0c\u5bf9\u7b54\u6848\u6ca1\u6709\u5f71\u54cd\uff0c\u5982\u679c\u8fd8\u5269\u4e0b\u4e00\u4e9b\uff0c\u5c31\u52a0\u5230\u6700\u5c0f\u7684\u6570\u5b57\u4e0a\uff0c\u7136\u540e\u5c31\u5dee\u4e0d\u591a\u4e86\u3002</p> <p>\u6211\u770b\u7684\u5b98\u65b9\u7684\u90a3\u4e2a\u9898\u89e3\uff0c\u73b0\u5728\u8d77\u7801\u80fd\u61c2\u8fd9\u4e2a\u4ee3\u7801\u5427\uff0c\u8981\u81ea\u5df1\u60f3\u786e\u5b9e\u592a\u96be\u5566\u3002</p> <pre><code>// \u4f60\u9192\u6765\uff0c\u53d1\u73b0\u81ea\u5df1\u56de\u5230\u4e86\u5927\u4e00\u2026\u2026\n// \u8fd9\u4e00\u6b21\uff0c\u4f60\u4e0b\u5b9a\u51b3\u5fc3\uff1a\u8981\u6210\u4e3a Candidate Master\u3002\n#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nusing ll = long long;\n// created: 2025-06-25 22:16:33\nvoid solve(){\n    int n, k;\n    cin &gt;&gt; n &gt;&gt; k;\n    vector&lt;int&gt; a(n + 1);\n    for(int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; a[i];\n    sort(a.begin() + 1, a.end());\n    int lo = a[1] -1 , hi = accumulate(a.begin() + 1, a.end(), 0LL) / n + 1;\n    while(lo &lt; hi - 1){\n        int mid = (lo + hi) &gt;&gt; 1;\n        ll s1 = 0, s2 = 0;\n        for(int i = 1; i &lt;= n; i++){\n            s1 += max(0, mid - a[i]);\n            s2 += max(0, a[i] - k - mid);\n        }\n        if(s1 &lt;= s2) lo = mid;\n        else hi = mid;\n    }\n    ll def = 0, exc = 0, defs = 0, excs = 0, ans = 0;\n    for(int i = 1; i &lt;= n; i++){\n        if(a[i] &lt;= lo){\n            def += lo - a[i];\n            defs++;\n            a[i] = lo;\n        }else if(a[i] &gt; k + lo){\n            exc += a[i] - k - lo;\n            excs++;\n            a[i] = k + lo;\n        }\n    }\n    exc -= def;\n    for(int i = 1; i &lt;= min(exc, excs); i++)\n        a[n - i + 1]++;\n    exc -= excs;\n    for(int i = 1; i &lt;= exc; i++)\n        a[i]++, def++;\n    ans += def * k;\n    for(int i = 1; i &lt;= n; i++)\n        ans += 1LL * a[i] * (a[i] + 1) / 2;\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n/* &lt;think&gt;\n\u79fb\u8d70\u4e4b\u540e\uff0c\u5982\u679c\u591a\u4e86\u4e00\u4e9b\n\u90a3\u5c31\u52a0\u56de\u53bb\n\u8981\u662f\u52a0\u56de\u53bb\uff0c\u8fd8\u5269\u4e86\u4e00\u4e9b\uff0c\u5c31\u79fb\u8fc7\u53bb\n\u597d\u597d\u597d\uff0c\u8fd8\u884c\n&lt;/think&gt; */\nint main(){\n    ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);\n    int t; cin &gt;&gt; t; while(t--)\n    solve(); return 0;\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2127/","title":"Atto Round 1 (Codeforces Round 1041, Div. 1 + Div. 2)","text":"<p>2025-08-09</p>"},{"location":"cp_solving/Codeforces/2127/#a","title":"A","text":"<p>\u7ed9\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(n\\) \u7684\u6570\u7ec4\uff0c\u662f\u5426\u53ef\u4ee5\u901a\u8fc7\u628a\u5176\u4e2d\u7684 \\(-1\\) \u66f4\u6362\u6210\u4efb\u610f\u6570\u5b57\uff0c\u4f7f\u5f97\u5bf9\u4e8e \\(1 \\le i \\le n - 2\\) :</p> <p>\\(mex(a_i, a_{i + 1}, a_{i + 2}) = max(a_i, a_{i + 1}, a_{i + 2}) - min(a_i, a_{i + 1}, a_{i + 2})\\)</p>"},{"location":"cp_solving/Codeforces/2127/#solution","title":"solution","text":"<p>\u4e09\u4e2a\u6570\u5b57\u7684 MEX \u503c\u53ea\u53ef\u80fd\u7b49\u4e8e \\({0, 1, 2, 3}\\)\u3002</p> <p>\u5f53 $mex &gt; 0 $ \u65f6\uff0c\\(min(a_i, a_{i + 1}, a_{i + 2}) = 0\\)\uff0c\u4e8e\u662f \\(max(a_i, a_{i + 1}, a_{i + 2}) = mex\\)\uff0c\u90a3\u4e48\u663e\u7136\u5bf9\u4e8e \\(mex = x\\) \u7684\u6570\u7ec4\uff0c\u5176\u4e2d\u80af\u5b9a\u4e0d\u80fd\u51fa\u73b0\u503c\u7b49\u4e8e \\(x\\) \u7684\u5143\u7d20\u3002</p> <p>\u6240\u4ee5\u5f53\u4e14\u4ec5\u5f53 \\(mex(a_i, a_{i + 1}, a_{i + 2}) = 0\\) \u65f6\u53ef\u4ee5\u6ee1\u8db3\u6761\u4ef6\uff0c\u6240\u4ee5 \\(a\\) \u4e2d\u6240\u6709\u5143\u7d20\u5fc5\u987b\u5168\u90e8\u76f8\u7b49\u4e14\u4e0d\u7b49\u4e8e \\(0\\) \u624d\u53ef\u4ee5\u662f\u4e00\u4e2a\u597d\u6570\u7ec4\u3002</p>"},{"location":"cp_solving/Codeforces/2127/#code","title":"code","text":"<pre><code>// Date: 2025-08-07\n// Time: 22:37:15\nvoid ChatGptDeepSeek()\n{\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;int&gt; a(n + 1);\n    for(int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; a[i];\n    if(count(a.begin() + 1, a.end(), 0)){\n        cout &lt;&lt; \"NO\\n\";\n        return;\n    }\n    int mx = *max_element(a.begin() + 1, a.end());\n    for(int i = 1; i &lt;= n; i++){\n        if(a[i] != -1 &amp;&amp; a[i] != mx){\n            cout &lt;&lt; \"NO\\n\";\n            return;\n        }\n    }\n    cout &lt;&lt; \"YES\\n\";\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2127/#b","title":"B","text":"<p>\u6709\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(n\\) \u7684\u901a\u9053\uff0c\u6709 \\(n\\) \u4e2a\u683c\u5b50\uff0c\u6700\u5de6\u8fb9\u7684\u662f\u7b2c \\(1\\) \u4e2a\uff0c\u521a\u5f00\u59cb\u65f6 Hamid \u5728\u7b2c \\(x\\) \u4e2a\u683c\u5b50\u3002\u6709\u4e00\u4e9b\u683c\u5b50\u662f\u7a7a\u7684\uff0c\u6709\u4e00\u4e9b\u683c\u5b50\u662f\u5899\u3002</p> <p>\u5728\u6bcf\u4e00\u5929\u5f00\u59cb\u7684\u65f6\u5019 Mani \u4f1a\u9009\u62e9\u4e00\u4e2a\u7a7a\u683c\u5b50\uff0c\u5e76\u5728\u8fd9\u4e2a\u683c\u5b50\u4e0a\u5efa\u4e00\u5835\u5899\u3002</p> <p>\u7136\u540e Hamid \u4f1a\u9009\u62e9\u4e00\u4e2a\u65b9\u5411\uff0c\u5982\u679c\u8fd9\u4e2a\u65b9\u5411\u4e0a\u6ca1\u6709\u683c\u5b50\u4e86\uff0c\u90a3\u4e48\u4ed6\u53ef\u4ee5\u79bb\u5f00\uff0c\u5426\u5219\u4ed6\u4f1a\u6467\u6bc1\u8fd9\u4e2a\u65b9\u5411\u4e0a\u79bb\u4ed6\u6700\u8fd1\u7684\u5899\uff0c\u8fd9\u4e00\u5929\u7ed3\u675f\u65f6\u4ed6\u4f1a\u5446\u5728\u8fd9\u4e2a\u5730\u65b9\u3002</p> <p>Hamid \u60f3\u65e9\u70b9\u79bb\u5f00\uff0cMani \u4e0d\u60f3\u8ba9 Hamid \u65e9\u70b9\u79bb\u5f00\u3002\u5982\u679c\u4e24\u4eba\u90fd\u8db3\u591f\u806a\u660e\uff0cHamid \u9700\u8981\u591a\u5c11\u5929\u624d\u80fd\u79bb\u5f00\uff1f</p>"},{"location":"cp_solving/Codeforces/2127/#solution_1","title":"solution","text":"<p>\u5982\u679c\u5f53\u524d\u4e00\u5835\u5899\u90fd\u6ca1\u6709\uff0c\u90a3\u4e48 Mani \u53ea\u80fd\u5728\u4e00\u4e2a\u65b9\u5411\u5efa\u5899\uff0c\u6240\u4ee5 Hamid \u4e00\u5929\u5c31\u53ef\u4ee5\u79bb\u5f00\u3002</p> <p>\u8ba9\u7b54\u6848\u4e3a \\(ans\\)\uff0c\u90a3\u4e48\u663e\u7136 \\(ans \\le min(x, n - x + 1)\\)\uff0c\u56e0\u4e3a\u5982\u679c\u5565\u90fd\u4e0d\u7ba1\u53ea\u5f80\u4e00\u4e2a\u65b9\u5411\u8d70\uff0c\u80af\u5b9a\u81f3\u5c11\u80fd\u8fbe\u5230\u8fd9\u4e2a\u6570\u5b57\u3002</p> <p>\u4f46\u5982\u679c\u53ea\u8003\u8651\u4e86\u8fd9\u4e2a\uff0c\u6211\u559c\u63d0\u4e86 Wa on test 2\u3002</p> <p>\u56e0\u4e3a Hamid \u5176\u5b9e\u662f\u53ef\u4ee5\u77ac\u79fb\u5230\u79bb\u4ed6\u6700\u8fd1\u7684\u5899\uff0c\u6211\u4eec\u53ef\u4ee5\u627e\u5230\u79bb\u4ed6\u5de6\u8fb9\u548c\u53f3\u8fb9\u6700\u8fd1\u7684\u5899\uff0c\u5206\u522b\u8bb0\u5b83\u4eec\u7684\u4f4d\u7f6e\u4e3a \\(L, R\\)\u3002Hamid \u4e00\u5b9a\u53ef\u4ee5\u7528\u4e00\u5929\u5230\u8fbe \\(L\\)\uff0c\u6216 \\(R\\)\u3002\u90a3\u4e48 \\(ans \\le max(L + 1, n - R + 2)\\)\u3002</p> <p>\u56e0\u4e3a\u5047\u5982 \\(L + 1\\) \u66f4\u5c0f\uff0c\u90a3\u4e48 Mani \u80af\u5b9a\u4f1a\u5728 \\(x - 1\\) \u5efa\u5899\uff0c\u4f7f\u5f97\u4f60\u65e0\u6cd5\u77ac\u79fb\u5230 \\(L\\)\uff0c\u53cd\u4e4b\u4ed6\u4f1a\u5728 \\(x + 1\\) \u5efa\u5899\uff0c\u6240\u4ee5\u53ea\u80fd\u53d6 max\u3002</p>"},{"location":"cp_solving/Codeforces/2127/#code_1","title":"code","text":"<pre><code>// Date: 2025-08-07\n// Time: 22:48:46\nvoid ChatGptDeepSeek()\n{\n    int n, x;\n    cin &gt;&gt; n &gt;&gt; x;\n    string s; cin &gt;&gt; s;\n    int ans = min(x, n - x + 1);\n    s = \" \" + s;\n    int L = 0, R = n + 1;\n    for(int i = x - 1; i &gt;= 1; i--){\n        if(s[i] == '#'){\n            L = i;\n            break;\n        }\n    }\n    for(int i = x + 1; i &lt;= n; i++){\n        if(s[i] == '#'){\n            R = i;\n            break;\n        }\n    }\n    ans = min(ans, max(L + 1, n - R + 1 + 1));\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2127/#c","title":"C","text":"<p>\u6709\u4e24\u4e2a\u957f\u5ea6\u4e3a \\(n\\) \u7684\u6570\u7ec4 \\(a, b\\)\u3002</p> <p>Ali \u548c Bahamin \u5728\u73a9\u4e00\u4e2a\u6e38\u620f\uff0c\u6301\u7eed \\(k\\) \u56de\u5408\u3002\u5728\u6bcf\u56de\u5408\u4e2d\uff1a</p> <ul> <li> <p>\u9996\u5148\uff0cAli \u9009\u62e9\u4e24\u4e2a\u4e0b\u6807 \\(i\\) \u548c \\(j\\) (\\(1 \\le i &lt; j \\le n\\))\uff1b</p> </li> <li> <p>\u7136\u540e Bahamin \u53ef\u4ee5\u91cd\u65b0\u6392\u5217 \\(a_i, a_j, b_i, b_j\\)\uff0c\u4ea4\u6362\u51e0\u4e2a\u6570\u5b57\u7684\u503c\uff0c\u4e5f\u53ef\u4ee5\u8ba9\u8fd9\u51e0\u4e2a\u6570\u5b57\u4fdd\u6301\u4e0d\u53d8\u3002</p> </li> </ul> <p>\u5728 \\(k\\) \u8f6e\u6e38\u620f\u4e4b\u540e\uff0c\u6e38\u620f\u7684\u5f97\u5206\u4e3a \\(v = \\sum\\limits_{i=1}^n |a_i - b_i|\\). Ali \u5e0c\u671b \\(v\\) \u5c3d\u91cf\u5c0f\uff0cBahamin \u5e0c\u671b \\(v\\) \u5c3d\u91cf\u5927\uff0c\u5e76\u4e14\u4e24\u4e2a\u4eba\u90fd\u8db3\u591f\u806a\u660e\uff0c\u6700\u7ec8\u7684 \\(v\\) \u662f\u591a\u5c11\u3002</p>"},{"location":"cp_solving/Codeforces/2127/#solution_2","title":"solution","text":"<ul> <li> <p>hint 1</p> <p>\\(k\\) \u8f6e\u6e38\u620f\u540e\uff0c\\(v\\) \u4e0d\u53ef\u80fd\u51cf\u5c0f\uff0c\u56e0\u4e3a\u5982\u679c\u51cf\u5c0f\uff0cBahamin \u80af\u5b9a\u4e0d\u64cd\u4f5c\uff0c\u90a3\u503c\u8d77\u7801\u4e0d\u4f1a\u53d8\u3002</p> </li> <li> <p>hint 2</p> <p>Ali \u53ea\u4f1a\u9009\u62e9\u4e00\u5bf9\u4e0d\u540c\u7684 \\((i, j)\\)\uff0cBahamin \u4e5f\u6700\u591a\u53ea\u6709\u7b2c\u4e00\u6b21\u9700\u8981\u8fdb\u884c\u64cd\u4f5c\u3002Bahamin \u4e00\u5b9a\u53ef\u4ee5\u4f7f\u5f97\u64cd\u4f5c\u540e\uff0c\u53ef\u4ee5\u8fbe\u5230\u6700\u5927\u7684 \\(v\\)\u3002</p> </li> </ul> <p>\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u53bb\u627e\u4e00\u5bf9 \\((i, j)\\) \u4f7f\u5f97\u8fdb\u884c\u64cd\u4f5c\u540e\uff0c\\(v\\) \u7684\u589e\u52a0\u503c\u5c3d\u91cf\u5c0f\u3002</p> <p>\u60f3\u4e00\u4e0b\uff0c\u5047\u5982\u6211\u4eec\u6709\u56db\u4e2a\u6570\u5b57\uff0c\\(v1 \\le v2 \\le v3 \\le v4\\)\uff0c\u6211\u4eec\u60f3\u8981\u5047\u8bbe\u5b83\u4eec\u662f\u6211\u4eec\u9009\u7684 \\(a_i,a_j,b_i,b_j\\) \u90a3\u56db\u4e2a\u6570\u5b57\uff0c\u64cd\u4f5c\u4e4b\u540e \\(|a_i - b_i| + |a_j - b_j|\\) \u7684\u503c\u53ef\u80fd\u662f\u4ec0\u4e48\u5462\uff1f</p> <p>\u5176\u5b9e\u5c31\u662f\u6392\u5217\u7ec4\u5408\u561b\uff0c\u5176\u4e2d\u6700\u5927\u7684\u4e00\u5b9a\u662f \\(v3 + v4 - v1 - v2\\)\u3002\u4e5f\u5c31\u662f\u6211\u4eec\u4ea4\u6362\u540e\uff0c\u4e0d\u8981\u8ba9\u6700\u5927\u7684\u4e24\u4e2a\u6570\u5b57\u7684\u4e0b\u6807\u76f8\u540c\uff0c\u5c31\u53ef\u4ee5\u4f7f\u5f97\u7b54\u6848\u53d8\u5f97\u6700\u5927\u3002</p> <p>\u7531\u4e8e\u53ef\u4ee5\u81ea\u7531\u4ea4\u6362\uff0c\u6211\u4eec\u53ef\u4ee5\u4ea4\u6362 \\(a_i,b_i\\)\uff0c\u4f7f\u5f97 \\(a_i &gt;= b_i\\)\uff0c\u7136\u540e\u6211\u4eec\u6309 \\(a\\) \u7684\u503c\u9012\u589e\u6392\u5e8f\u3002</p> <p>\u90a3\u4e48\u5bf9\u4e8e \\(i &lt; j\\)\uff0c\u4e00\u5b9a\u6709 \\(a_i \\le a_j,b_j \\le a_j, b_i \\le b_j\\)\u3002\u6240\u4ee5 \\(a_j\\) \u4e00\u5b9a\u662f\u8fd9\u51e0\u4e2a\u6570\u5b57\u4e2d\u6700\u5927\u7684\u3002</p> <p>\u5b83\u4eec\u56db\u4e2a\u7684\u5173\u7cfb\u53ea\u80fd\u662f</p> <pre><code>v2 v4\nv1 v3\n</code></pre> <p>\u6216\u8005</p> <pre><code>v3 v4 or v3 v4\nv1 v2    v2 v1\n</code></pre> <p>\u5bf9\u4e8e\u4e0b\u9762\u7684\u4e24\u79cd\uff0c\u8fd9\u56db\u4e2a\u6570\u5b57\u7684\u8d21\u732e\u5df2\u7ecf\u662f \\(v4 + v3 - v2 - v1\\)\uff0c\u6240\u4ee5\u4e0d\u4f1a\u8ba9\u7b54\u6848\u53d8\u5927\u3002\u5047\u8bbe\u5b58\u5728\u6ee1\u8db3\u8fd9\u79cd\u5173\u7cfb\u7684 \\((i, j)\\) \u90a3\u4e48\u7b54\u6848\u4e0d\u4f1a\u53d8\u3002</p> <p>\u5bf9\u4e8e\u7b2c\u4e00\u79cd\uff0c\u5176\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u4e3a \\(v4 + v2 - v3 - v1\\)\u3002Bahamin \u4ea4\u6362\u4e4b\u540e\uff0c\u7b54\u6848\u7684\u53d8\u5316\u4e3a \\((v4 + v3 - v2 - v1) - (v4 + v2 - v3 - v1) = 2(v3 - v2)\\)\u3002</p> <p>\u6240\u4ee5\u82e5\u65e0\u4f7f\u5f97\u7b54\u6848\u4e0d\u53d8\u7684 \\((i,j)\\)\uff0c\u4ea4\u6362\u5e76\u6392\u5e8f\u4e4b\u540e\uff0c\\(b\\) \u4e5f\u4e00\u5b9a\u662f\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4\u3002</p> <p>\u82e5\u4e0d\u5b58\u5728 \\(1\\) \u7684\u60c5\u51b5\uff0c\\(v\\) \u4f1a\u589e\u52a0 \\(2\\min\\limits_{1 \\le i &lt; j \\le n} (b_j - a_i)\\) \u3002</p>"},{"location":"cp_solving/Codeforces/2127/#code_2","title":"code","text":"<pre><code>// Date: 2025-08-07\n// Time: 23:25:18\nvoid ChatGptDeepSeek()\n{\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    vector&lt;pair&lt;int, int&gt;&gt; a(n + 1);\n    for(int i = 1; i &lt;= n; i++) cin &gt;&gt; a[i].first;\n    for(int i = 1; i &lt;= n; i++) cin &gt;&gt; a[i].second;\n    ll ans = 0;\n    for(int i = 1; i &lt;= n; i++){\n        if(a[i].first &lt; a[i].second)\n            swap(a[i].first, a[i].second);\n        ans += a[i].first - a[i].second;\n    }\n    int add = INF;\n    sort(a.begin() + 1, a.end(), [](pair&lt;int,int&gt; x, pair&lt;int, int&gt; y){\n        return x.first &lt; y.first;\n    });\n    for(int i = 2; i &lt;= n; i++){\n        auto [x, y] = a[i];\n        if(a[i - 1].first &gt;= y){\n            cout &lt;&lt; ans &lt;&lt; \"\\n\";\n            return;\n        }\n        add = min(add, y - a[i - 1].first);\n    }\n    cout &lt;&lt; ans + 2 * add &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"cp_solving/Codeforces/2127/#d","title":"D","text":"<p>\u6709 \\(n\\) \u4e2a\u623f\u5b50 \\(m\\) \u5ea7\u6865\uff0c\u8fd9 \\(n\\) \u4e2a\u623f\u5b50\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e9b\u6865\u8054\u901a\u3002</p> <p>\u95ee\u6709\u591a\u5c11\u79cd\u6392\u5217\u623f\u5b50\u7684\u65b9\u5f0f\uff0c\u4f7f\u5f97\u6709\u6865\u8fde\u63a5\u7684\u623f\u5b50\u90fd\u5728\u6cb3\u7684\u4e24\u8fb9\uff0c\u4e14\u6240\u6709\u6865\u4e4b\u95f4\u4e0d\u4f1a\u4ea4\u53c9\u3002</p>"},{"location":"cp_solving/Codeforces/2127/#solution_3","title":"solution","text":"<ul> <li> <p>hint 1     \u6865\u7684\u6570\u91cf\u4e00\u5b9a\u53ea\u80fd\u662f \\(n - 1\\)\uff0c\u5426\u5219\u5c31\u4f1a\u5b58\u5728\u73af\uff0c\u6709\u73af\u7684\u8bdd\u5c31\u767e\u5206\u767e\u4e0d\u884c\u3002</p> </li> <li> <p>hint 2     \u4e00\u4e2a\u8282\u70b9\u7684\u5b50\u8282\u70b9\u4e2d\uff0c\u4e0d\u662f\u53f6\u5b50\u7684\u8282\u70b9\u6700\u591a\u53ea\u80fd\u6709\u4e24\u4e2a\u3002</p> </li> </ul> <p>\u6211\u8d5b\u65f6\u6ca1\u5199\u51fa\u8fd9\u9898\uff0c\u4e4b\u540e\u4e5f\u662f\u53c8\u60f3\u4e86\u633a\u4e45\u624d\u60f3\u660e\u767d\u3002\u6211\u5f53\u65f6\u662f\u76f4\u63a5\u5148\u786e\u5b9a\u6811\u7684\u6839\u8282\u70b9\uff0c\u7136\u540e\u6bcf\u4e2a\u70b9\u7684\u5b50\u8282\u70b9\u4e2d\u7684\u53f6\u5b50\u8282\u70b9\u53ef\u4ee5\u81ea\u7531\u6392\u5217\u3002\u7136\u540e\u6211\u60f3\u7684\u975e\u5e38\u6df7\u4e71\u4e86\uff0c\u6211\u627e\u4e00\u4e2a\u6709\u4e24\u4e2a\u4e0d\u662f\u53f6\u5b50\u7684\u5b50\u8282\u70b9\u7684\u70b9\u4f5c\u4e3a\u6839\u8282\u70b9\uff0c\u7136\u540e dfs\uff0c\u4e58\u6bcf\u4e2a\u70b9\u7684\u975e\u53f6\u5b50\u5b50\u8282\u70b9\u6570\u91cf\u7684\u6392\u5217\u3002\u3002\u3002\u4f46\u663e\u7136\u8fd9\u662f\u9519\u7684\uff0c\u800c\u4e14\u6211\u5230\u6700\u540e\u4e5f\u8d8a\u5199\u8d8a\u4e0d\u77e5\u9053\u600e\u4e48\u786e\u5b9a\u6839\u8282\u70b9\uff0c\u4e5f\u4e0d\u80fd\u786e\u5b9a\u4ec0\u4e48\u65f6\u5019\u9700\u8981\u4e582\u3002</p> <p>\u6211\u60f3\u7684\u662f\uff0c\u6839\u8282\u70b9\u6709\u65f6\u5019\u4f1a\u67092\u4e2a\u4e0d\u662f\u53f6\u5b50\u8282\u70b9\u7684\u5b50\u8282\u70b9\uff0c\u6709\u65f6\u5019\u662f1\u4e2a\uff0c\u8fd9\u8ba9\u6211\u5f88\u4e0d\u597d\u7b97\u7b54\u6848\u554a\u3002</p> <p>\u4f46\u662f\u770b\u4e86\u9898\u89e3\u624d\u53d1\u73b0\u4e00\u4e2a\u6709\u7528\u7684\u4e8b\u60c5\uff0c\u5982\u679c\u53bb\u6389\u6240\u6709\u7684\u53f6\u5b50\u8282\u70b9\uff0c\u5269\u4e0b\u7684\u90e8\u5206\u4e00\u5b9a\u662f\u4e00\u6761\u94fe\u3002</p> <p>\u8fd9\u6761\u94fe\u4e00\u5b9a\u662f\u76f8\u90bb\u7684\u8282\u70b9\u5728\u6cb3\u7684\u4e0d\u540c\u8fb9\uff0c\u6240\u4ee5\u6700\u5de6\u8fb9\u7684\u8282\u70b9\u5176\u5b9e\u662f\u53ef\u4ee5\u786e\u5b9a\u7684\uff0c\u6bcf\u4e2a\u70b9\u7684\u53f6\u5b50\u8282\u70b9\u7684\u6570\u91cf\u90fd\u53ef\u4ee5\u81ea\u7531\u6392\u5217\uff0c\u6240\u4ee5\u76f4\u63a5\u7b97\u5c31\u597d\u4e86\u3002\u753b\u4e2a\u56fe\u5c31\u4f1a\u975e\u5e38\u7684\u6e05\u6670\u4e86\u3002</p> <p>\u5982\u679c\u8fd9\u6761\u94fe\u4e0a\u81f3\u5c11\u6709\u4e24\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u5219\u53ef\u4ee5\u5de6\u53f3\u5bf9\u79f0\u4e00\u4e0b\uff0c\u7b54\u6848\u53ef\u4ee5\u4e582\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nusing LL = long long;\n\nconstexpr int mod = int(1e9) + 7;\nconstexpr int N = int(2e5);\nint fact[N + 1];\nvoid solve()\n{\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    vector&lt;vector&lt;int&gt;&gt; g(n + 1);\n    vector&lt;int&gt; d(n + 1);\n    for(int i = 1; i &lt;= m; i++){\n        int u, v; cin &gt;&gt; u &gt;&gt; v;\n        g[u].push_back(v);\n        g[v].push_back(u);\n        d[u]++, d[v]++;\n    }\n    if(m != n - 1){\n        cout &lt;&lt; \"0\\n\";\n        return;\n    }\n    int ans = 2, cnt = 0;\n    for(int u = 1; u &lt;= n; u++){\n        int leaf = 0, not_leaf = 0;\n        for(int v : g[u]){\n            if(d[v] == 1) leaf++;\n            else not_leaf++;\n        }\n        if(d[u] &gt; 1) cnt++;\n        if(not_leaf &gt; 2){\n           ans = 0; break;\n        }\n        ans = 1LL * ans * fact[leaf] % mod;\n    }\n    if(cnt &gt; 1) ans = 2 * ans % mod;\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\nint main()\n{\n    ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);\n    fact[0] = 1;\n    for(int i = 1; i &lt;= N; i++)\n        fact[i] = 1LL * fact[i - 1] * i % mod;\n    int T; cin &gt;&gt; T; while(T--)\n    {solve();} return 0;\n}\n</code></pre>"},{"location":"cp_solving/final/CF1237C2/","title":"CF1237 C2. Balanced Removals (Harder)","text":""},{"location":"cp_solving/final/CF1237C2/#_1","title":"\u9898\u76ee\u63cf\u8ff0","text":"<p>\u8fd9\u662f\u8be5\u95ee\u9898\u7684\u66f4\u96be\u7248\u672c\u3002\u5728\u672c\u7248\u672c\u4e2d\uff0c\\(n \\le 50\\,000\\)\u3002</p> <p>\u5728\u4e09\u7ef4\u7a7a\u95f4\u4e2d\u6709 \\(n\\) \u4e2a\u4e92\u4e0d\u76f8\u540c\u7684\u70b9\uff0c\u7f16\u53f7\u4ece \\(1\\) \u5230 \\(n\\)\u3002\u7b2c \\(i\\) \u4e2a\u70b9\u7684\u5750\u6807\u4e3a \\((x_i, y_i, z_i)\\)\u3002\u70b9\u7684\u6570\u91cf \\(n\\) \u662f\u5076\u6570\u3002</p> <p>\u4f60\u9700\u8981\u901a\u8fc7\u4e00\u7cfb\u5217 \\(\\frac{n}{2}\\) \u6b21\u201c\u6d88\u9664\u201d\u64cd\u4f5c\u79fb\u9664\u6240\u6709 \\(n\\) \u4e2a\u70b9\u3002\u6bcf\u6b21\u64cd\u4f5c\uff0c\u4f60\u53ef\u4ee5\u79fb\u9664\u4efb\u610f\u4e24\u4e2a\u5c1a\u672a\u88ab\u79fb\u9664\u4e14\u6784\u6210\u201c\u5b8c\u5168\u5e73\u8861\u5bf9\u201d\u7684\u70b9 \\(a\\) \u548c \\(b\\)\u3002\u5982\u679c\u4e0d\u5b58\u5728\u5176\u4ed6\u5c1a\u672a\u88ab\u79fb\u9664\u7684\u70b9 \\(c\\) \u4f4d\u4e8e\u70b9 \\(a\\) \u548c \\(b\\) \u7684\u8f74\u5bf9\u9f50\u6700\u5c0f\u5305\u56f4\u76d2\u5185\uff0c\u5219\u70b9\u5bf9 \\(a\\) \u548c \\(b\\) \u88ab\u79f0\u4e3a\u201c\u5b8c\u5168\u5e73\u8861\u5bf9\u201d\u3002</p> <p>\u5f62\u5f0f\u5316\u5730\u8bf4\uff0c\u82e5\u4e14\u552f\u82e5 \\(\\min(x_a, x_b) \\le x_c \\le \\max(x_a, x_b)\\)\uff0c\\(\\min(y_a, y_b) \\le y_c \\le \\max(y_a, y_b)\\)\uff0c\u4e14 \\(\\min(z_a, z_b) \\le z_c \\le \\max(z_a, z_b)\\)\uff0c\u5219\u70b9 \\(c\\) \u4f4d\u4e8e\u70b9 \\(a\\) \u548c \\(b\\) \u7684\u8f74\u5bf9\u9f50\u6700\u5c0f\u5305\u56f4\u76d2\u5185\u3002\u6ce8\u610f\uff0c\u5305\u56f4\u76d2\u53ef\u80fd\u662f\u9000\u5316\u7684\u3002</p> <p>\u8bf7\u627e\u51fa\u4e00\u79cd\u65b9\u6848\uff0c\u7528 \\(\\frac{n}{2}\\) \u6b21\u64cd\u4f5c\u79fb\u9664\u6240\u6709\u70b9\u3002</p>"},{"location":"cp_solving/final/CF1237C2/#_2","title":"\u8f93\u5165\u683c\u5f0f","text":"<p>\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570 \\(n\\)\uff08\\(2 \\le n \\le 50\\,000\\)\uff0c\\(n\\) \u4e3a\u5076\u6570\uff09\uff0c\u8868\u793a\u70b9\u7684\u6570\u91cf\u3002</p> <p>\u63a5\u4e0b\u6765\u7684 \\(n\\) \u884c\uff0c\u6bcf\u884c\u5305\u542b\u4e09\u4e2a\u6574\u6570 \\(x_i, y_i, z_i\\)\uff08\\(-10^8 \\le x_i, y_i, z_i \\le 10^8\\)\uff09\uff0c\u8868\u793a\u7b2c \\(i\\) \u4e2a\u70b9\u7684\u5750\u6807\u3002</p> <p>\u4efb\u610f\u4e24\u70b9\u4e0d\u4f1a\u91cd\u5408\u3002</p>"},{"location":"cp_solving/final/CF1237C2/#_3","title":"\u8f93\u51fa\u683c\u5f0f","text":"<p>\u8f93\u51fa \\(\\frac{n}{2}\\) \u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570 \\(a_i, b_i\\)\uff08\\(1 \\le a_i, b_i \\le n\\)\uff09\uff0c\u8868\u793a\u7b2c \\(i\\) \u6b21\u64cd\u4f5c\u4e2d\u88ab\u79fb\u9664\u7684\u4e24\u4e2a\u70b9\u7684\u7f16\u53f7\u3002\u6bcf\u4e2a \\(1\\) \u5230 \\(n\\) \u4e4b\u95f4\u7684\u6574\u6570\u6070\u597d\u51fa\u73b0\u4e00\u6b21\u3002</p> <p>\u53ef\u4ee5\u8bc1\u660e\u603b\u662f\u5b58\u5728\u4e00\u79cd\u79fb\u9664\u6240\u6709\u70b9\u7684\u65b9\u6848\u3002\u5982\u679c\u6709\u591a\u79cd\u65b9\u6848\uff0c\u8f93\u51fa\u4efb\u610f\u4e00\u79cd\u5373\u53ef\u3002</p>"},{"location":"cp_solving/final/CF1237C2/#1","title":"\u8f93\u5165\u8f93\u51fa\u6837\u4f8b #1","text":""},{"location":"cp_solving/final/CF1237C2/#1_1","title":"\u8f93\u5165 #1","text":"<pre><code>6\n3 1 0\n0 3 0\n2 2 0\n1 0 0\n1 3 0\n0 1 0\n</code></pre>"},{"location":"cp_solving/final/CF1237C2/#1_2","title":"\u8f93\u51fa #1","text":"<pre><code>3 6\n5 1\n2 4\n</code></pre>"},{"location":"cp_solving/final/CF1237C2/#2","title":"\u8f93\u5165\u8f93\u51fa\u6837\u4f8b #2","text":""},{"location":"cp_solving/final/CF1237C2/#2_1","title":"\u8f93\u5165 #2","text":"<pre><code>8\n0 1 1\n1 0 1\n1 1 0\n1 1 1\n2 2 2\n3 2 2\n2 3 2\n2 2 3\n</code></pre>"},{"location":"cp_solving/final/CF1237C2/#2_2","title":"\u8f93\u51fa #2","text":"<pre><code>4 5\n1 6\n2 7\n3 8\n</code></pre>"},{"location":"cp_solving/final/CF1237C2/#_4","title":"\u8bf4\u660e/\u63d0\u793a","text":"<p>\u5728\u7b2c\u4e00\u4e2a\u6837\u4f8b\u4e2d\uff0c\u70b9\u53ca\u5176\u5bf9\u5e94\u7684\u5305\u56f4\u76d2\u5982\u4e0b\u56fe\u6240\u793a\uff08\u4e3a\u7b80\u5316\u8d77\u89c1\uff0c\u4ec5\u5728 \\(z=0\\) \u5e73\u9762\u4e0a\u7ed8\u5236\uff09\u3002\u6ce8\u610f\uff0c\u79fb\u9664\u7684\u987a\u5e8f\u5f88\u91cd\u8981\uff1a\u4f8b\u5982\uff0c\u70b9 \\(5\\) \u548c \\(1\\) \u6700\u521d\u5e76\u4e0d\u80fd\u6784\u6210\u5b8c\u5168\u5e73\u8861\u5bf9\uff0c\u4f46\u5728\u70b9 \\(3\\) \u88ab\u79fb\u9664\u540e\u53ef\u4ee5\u3002</p> <p></p> <p>\u7531 ChatGPT 4.1 \u7ffb\u8bd1</p>"},{"location":"cp_solving/final/CF1237C2/#solution","title":"solution","text":"<p>\u672c\u6765\u5927\u6982\u60f3\u5230\u4e86\u7684\uff0c\u4f46\u662fWA\u4e86\u53c8\u53d1\u4e86\u4f1a\u5446\u611f\u89c9\u4e0d\u4f1a\u5199\u4e86\uff0c\u4e8e\u662f\u770b\u4e86\u4e00\u773c\u9898\u89e3\u624d\u610f\u8bc6\u5230\u672c\u6765\u60f3\u5f97\u6ca1\u5565\u95ee\u9898\u3002</p> <p>\u8003\u8651\u4e00\u7ef4\u7684\u60c5\u51b5\uff0c\u80af\u5b9a\u4f18\u5148\u79fb\u9664 \\(x\\) \u76f8\u7b49\u7684\u70b9\uff0c\u4e8e\u662f\u4e0d\u5b58\u5728 \\(x\\) \u76f8\u7b49\u7684\u70b9\u5bf9\u4e86\uff0c\u53ef\u4ee5\u76f4\u63a5\u6309 \\(x\\) \u6392\u5e8f\u540e\u79fb\u9664\u76f8\u90bb\u7684\u5bf9\u3002</p> <p>\u4e8c\u7ef4\u5462\uff1f\u7c7b\u4f3c\u5730\uff0c\u5bf9\u4e8e \\(x\\) \u76f8\u7b49\u7684\u70b9\uff0c\u5b83\u4eec\u7684 \\(y\\) \u53c8\u6784\u6210\u4e86\u4e00\u7ef4\u7684\u60c5\u51b5\uff0c\u4e8e\u662f\u4e0d\u4f1a\u518d\u6709 \\(x\\) \u76f8\u7b49\u7684\u70b9\u5bf9\uff0c\u4e8e\u662f\u53c8\u53ef\u4ee5\u6309 \\(x\\) \u6392\u5e8f\u540e\u79fb\u9664\u76f8\u90bb\u7684\u70b9\uff0c\u56e0\u4e3a\u5b83\u4eec\u4e4b\u95f4\u4e0d\u4f1a\u6709 \\(x\\) \u5728\u5b83\u4eec\u4e4b\u95f4\u7684\u6570\u5b57\u4e86\u3002</p> <p>\u4e09\u7ef4\u7684\u8bdd\uff0c\\(x\\) \u76f8\u540c\u7684\u70b9\u53c8\u53ef\u4ee5\u6784\u6210\u4e8c\u7ef4\u7684\u60c5\u51b5\u3002\u7c7b\u4f3c\u5730\u5904\u7406\u5c31\u597d\u4e86\u3002\u867d\u7136\u8fd9\u6837\u770b\u8d77\u6765\u6709\u70b9\u9ebb\u70e6\uff0c\u4f46\u662f\u5728\u4ee3\u7801\u91cc\u5176\u5b9e\u5c31\u975e\u5e38\u7b80\u5355\u4e86\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n// created: 2025-09-11 21:00:46\nstruct node{\n    int x, y, z, id;\n};\nvoid solve(){\n    int n; cin &gt;&gt; n;\n    vector&lt;node&gt; p(n);\n    for(int i = 0; i &lt; n; i++){\n        cin &gt;&gt; p[i].x &gt;&gt; p[i].y &gt;&gt; p[i].z;\n        p[i].id = i + 1;\n    }\n    sort(p.begin(), p.end(), [](node x, node y){\n        if(x.x == y.x) return x.y == y.y ? x.z &lt; y.z : x.y &gt; y.y;\n        return x.x &lt; y.x;\n    });\n    vector&lt;array&lt;int, 2&gt;&gt; ans;\n    {\n        vector&lt;node&gt; np;\n        vector&lt;int&gt; vis(n);\n        for(int i = 0; i + 1 &lt; p.size(); i++){\n            if(p[i].x == p[i + 1].x &amp;&amp; p[i].y == p[i + 1].y){\n                ans.push_back({p[i].id, p[i + 1].id});\n                vis[i] = vis[i + 1] = 1;\n                i++;\n            }\n        }\n        for(int i = 0; i &lt; n; i++)\n            if(!vis[i]) np.push_back(p[i]);\n        p = np;\n    }\n    {\n        vector&lt;node&gt; np;\n        vector&lt;int&gt; vis(p.size());\n        for(int i = 0; i + 1 &lt; p.size(); i++){\n            if(p[i].x == p[i + 1].x){\n                ans.push_back({p[i].id, p[i + 1].id});\n                vis[i] = vis[i + 1] = 1;\n                i++;\n            }\n        }\n        for(int i = 0; i &lt; vis.size(); i++)\n            if(!vis[i]) np.push_back(p[i]);\n        p = np;\n    }\n    for(int i = 0; i &lt; p.size(); i += 2)\n        ans.push_back({p[i].id, p[i + 1].id});\n    for(auto [x, y] : ans)\n        cout &lt;&lt; x &lt;&lt; \" \" &lt;&lt; y &lt;&lt; \"\\n\";\n}\nint main(){\n    ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);\n    // int t; cin &gt;&gt; t; while(t--)\n    {solve();} return 0;\n}\n</code></pre>"},{"location":"cp_solving/final/P1600/","title":"P1600 [NOIP 2016 \u63d0\u9ad8\u7ec4] \u5929\u5929\u7231\u8dd1\u6b65","text":"<p>tag : \u7ebf\u6bb5\u6811\u5408\u5e76</p> <p>\u611f\u89c9\u597d\u96be\u7406\u89e3\uff0c\u5c31\u7b97\u628a\u522b\u4eba\u4ee3\u7801\u6284\u5b8c\u4e5f\u4e0d\u4e00\u5b9a\u4f1a\u3002\u3002\u3002\u601d\u8def\u5012\u662f\u4e0d\u96be\u7684\u3002</p> <p>\u8fd9\u79cd\u9898\u4e0d\u5982\u8fb9\u5199\u535a\u5ba2\u8fb9\u5199\uff0c\u597d\u7406\u89e3\u4e00\u70b9\u3002</p>"},{"location":"cp_solving/final/P1600/#_1","title":"\u9898\u610f","text":"<p>\u6709 \\(n\\) \u4e2a\u8282\u70b9\u7684\u6811\uff0c\\(m\\) \u4e2a\u4eba\u4ece \\(s_i\\) \u8dd1\u5230 \\(t_i\\)\uff0c \u6bcf\u4e2a\u8282\u70b9 \\(j\\) \u6709\u4e00\u4e2a\u89c2\u5bdf\u5458\uff0c\u95ee \\(j\\) \u8282\u70b9\u7684\u89c2\u5bdf\u5458\u5728\u7b2c \\(w_j\\) \u79d2\u80fd\u9047\u5230\u51e0\u4e2a\u4eba\u3002</p>"},{"location":"cp_solving/final/P1600/#solution","title":"solution","text":""},{"location":"cp_solving/final/P1600/#1","title":"1","text":"<p>\u5bf9\u4e8e \\(s_i\\) \u5230 LCA(\\(s_i, t_i\\)) \u8def\u5f84\u4e0a\uff0c\u4ec5\u6ee1\u8db3 \\(dep_s = w_j + dep_j\\) \u7684\u70b9\u53ef\u4ee5\u89c2\u5bdf\u5230 \\(i\\)\u3002</p> <p>\u90a3\u4e48\u53ef\u4ee5\u5728\u6bcf\u4e2a\u8282\u70b9\u5f00\u4e00\u4e2a\u6743\u503c\u7ebf\u6bb5\u6811\uff0c\u628a \\(s_i\\) \u5230 LCA(\\(s_i, t_i\\)) \u8def\u5f84\u4e0a\u7684\u70b9\u90fd\u52a0\u4e00\u4e2a \\(dep_s\\)\uff0c\u8d70\u5230\u6bcf\u4e00\u4e2a\u70b9\u65f6\uff0c\u67e5 \\(dep_j + w_j\\) \u7684\u6570\u91cf\u5373\u53ef\u3002\u5dee\u5206\u4fee\u6539\u518d merge \u5c31\u53ef\u4ee5\u4e86\u3002\u8fd9\u4e00\u90e8\u5206\u5176\u5b9e\u4e0d\u662f\u5f88\u96be\u3002</p>"},{"location":"cp_solving/final/P1600/#2","title":"2","text":"<p>\u5bf9\u4e8e LCA(\\(s_i, t_i\\)) \u5230 \\(t_i\\) \u8def\u5f84\u4e0a\uff0c\\(dep_s - dep_{lca} + dep_j - dep_{lca} = w_j\\)\uff0c\u5373 \\(dep_s - 2dep_{lca} = w_j - dep_j\\)\u3002\u8ddf\u7b2c\u4e00\u6bb5\u5176\u5b9e\u540c\u7406\u7684\u3002</p> <p>ok\u6211\u73b0\u5728\u81ea\u5df1\u5199\u5199\u770b\u770b\uff0c\u5176\u5b9e\u601d\u8def\u771f\u4e0d\u662f\u5f88\u96be\u554a\u3002</p>"},{"location":"cp_solving/final/P1600/#code","title":"code","text":"<p>\u5f88\u5f00\u5fc3\u554a\uff0c\u81ea\u5df1\u5199\u7684\uff0c\u53ea\u9519\u4e86\u4e00\u70b9\u70b9\uff0c\u867d\u7136\u4e5f\u662f\u770b\u4e86\u522b\u4eba\u4ee3\u7801\u7684\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nusing LL = long long;\n\nconstexpr int N = 300005;\nint n, m, w[N], dep[N], f[N][20];\nvector&lt;vector&lt;int&gt;&gt; g;\nvoid init(int u, int p)\n{\n    dep[u] = dep[p] + 1, f[u][0] = p;\n    for(int i = 1; i &lt;= 19; i++)\n        f[u][i] = f[f[u][i - 1]][i - 1];\n    for(auto v : g[u]){\n        if(v == p) continue;\n        init(v, u);\n    }\n}\nint lca(int x, int y)\n{\n    if(dep[x] &lt; dep[y]) swap(x, y);\n    for(int i = 0, z = dep[x] - dep[y]; z; i++, z &gt;&gt;= 1)\n        if(z &amp; 1) x = f[x][i];\n    if(x == y) return x;\n    for(int i = 19; i &gt;= 0; i--)\n        if(f[x][i] != f[y][i])\n            x = f[x][i], y = f[y][i];\n    return f[x][0];\n}\nstruct node{\n    int l, r, cnt;\n};\n#define lson seg[p].l\n#define rson seg[p].r\n#define mi ((l + r) &gt;&gt; 1)\nnode seg[N * 50];\nint stot = 0, rt[N][2], ans[N];\nvoid update(int &amp;p, int l, int r, int pos, int val)\n{\n    if(!p) p = ++stot;\n    if(l == r){\n        seg[p].cnt += val;\n        return;\n    }\n    if(pos &lt;= mi) update(lson, l, mi, pos, val);\n    else update(rson, mi + 1, r, pos, val);\n}\nint merge(int p, int q, int l, int r)\n{\n    if(!p || !q) return p + q;\n    if(l == r){\n        seg[p].cnt += seg[q].cnt;\n        return p;\n    }\n    lson = merge(lson, seg[q].l, l, mi);\n    rson = merge(rson, seg[q].r, mi + 1, r);\n    return p;\n}\nint query(int p, int l, int r, int pos)\n{\n    if(l == r)\n        return seg[p].cnt;\n    if(pos &lt;= mi) return query(lson, l, mi, pos);\n    return query(rson, mi + 1, r, pos);\n}\nvoid dfs(int u)\n{\n    for(auto v : g[u]){\n        if(v == f[u][0]) continue;\n        dfs(v);\n        rt[u][0] = merge(rt[u][0], rt[v][0], -N, N);\n        rt[u][1] = merge(rt[u][1], rt[v][1], -N, N);\n    }\n    ans[u] += query(rt[u][1], -N, N, w[u] - dep[u]);\n    if(w[u] + dep[u] &lt;= N)\n        ans[u] += query(rt[u][0], -N, N, w[u] + dep[u]);\n}\nvoid solve()\n{\n    cin &gt;&gt; n &gt;&gt; m;\n    g = vector&lt;vector&lt;int&gt;&gt; (n + 1);\n    for(int i = 1; i &lt; n; i++){\n        int u, v;\n        cin &gt;&gt; u &gt;&gt; v;\n        g[u].push_back(v);\n        g[v].push_back(u);\n    }\n    init(1, 0);\n    for(int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; w[i];\n    while(m--){\n        int s, t;\n        cin &gt;&gt; s &gt;&gt; t;\n        int l = lca(s, t);\n        update(rt[s][0], -N, N, dep[s], 1);\n        update(rt[f[l][0]][0], -N, N, dep[s], -1);\n        int x = dep[s] - 2 * dep[l];\n        if(x &gt;= -N){\n            update(rt[t][1], -N, N, x, 1);\n            update(rt[l][1], -N, N, x, -1);\n        }\n    }\n    dfs(1);\n    for(int i = 1; i &lt;= n; i++)\n        cout &lt;&lt; ans[i] &lt;&lt; \" \\n\" [i == n];\n}\n\nint main()\n{\n    ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);\n    // int t; cin &gt;&gt; t; while(t--)\n    {solve();} return 0;\n}\n/*\ndep[s] - dep[j] = w[j]\nw[j] + dep[j] = dep[s]\n\ndep[s] + dep[j] - 2dep[l] = w[j]\nw[j] - dep[j] = dep[s] - 2dep[l]\n*/\n</code></pre>"},{"location":"cp_solving/final/P1972/","title":"P1972 [SDOI2009] HH\u7684\u9879\u94fe","text":"<p>tag : \u6811\u72b6\u6570\u7ec4</p>"},{"location":"cp_solving/final/P1972/#_1","title":"\u9898\u610f","text":"<p>\u4e00\u4e2a\u6570\u7ec4 \\(a\\)\uff0c\u6709 \\(q\\) \u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee \\([l, r]\\) \u4e4b\u524d\u4e0d\u540c\u6570\u5b57\u7684\u4e2a\u6570\u3002</p>"},{"location":"cp_solving/final/P1972/#solution","title":"solution","text":"<p>\u770b\u8d77\u6765\u975e\u5e38\u56f0\u96be\uff0c\u5b9e\u5219\u53ea\u9700\u8981\u975e\u5e38\u7b80\u5355\u7684\u6811\u72b6\u6570\u7ec4\u5c31\u53ef\u4ee5\u3002\u3002\u3002\u867d\u7136\u4e5f\u80fd\u7528\u83ab\u961f\uff0c\u4f46\u662f\u5f97\u5361\u5e38\uff0c\u6811\u72b6\u6570\u7ec4\u771f\u667a\u6167\u5427\u3002</p> <p>\u6309 \\(r\\) \u6392\u5e8f\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u6570\u5b57\u51fa\u73b0\u7684\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u628a\u8fd9\u4e9b\u4f4d\u7f6e\u7684\u503c\u8bbe\u4e3a 1,\u90a3\u4e48\u8fd9\u4e2a\u5c31\u53d8\u6210\u5355\u70b9\u4fee\u6539\u52a0\u533a\u95f4\u67e5\u8be2\u4e86\uff0c\u5c31\u975e\u5e38\u7b80\u5355\u3002</p>"},{"location":"cp_solving/final/P1972/#code","title":"code","text":"<pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nusing LL = long long;\n\nconstexpr int N = int(1e6) + 1;\nstruct node{\n    int l, r, id;\n}Q[N];\nint a[N], lst[N], b[N], ans[N];\ninline int lowbit(int x){return (x) &amp; (-x);}\ninline void add(int i, int x)\n{\n    while(i &lt; N){\n        b[i] += x;\n        i += lowbit(i);\n    }\n}\ninline int query(int i)\n{\n    int res = 0;\n    while(i){\n        res += b[i];\n        i -= lowbit(i);\n    }\n    return res;\n}\n\nint main()\n{\n    ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);\n    int n; cin &gt;&gt; n;\n    for(int i = 1; i &lt;= n; i++){\n        cin &gt;&gt; a[i];\n    }\n    int q; cin &gt;&gt; q;\n    for(int i = 0; i &lt; q; i++){\n        cin &gt;&gt; Q[i].l &gt;&gt; Q[i].r;\n        Q[i].id = i;\n    }\n    sort(Q, Q + q, [&amp;](node x, node y){\n        return x.r &lt; y.r;\n    });\n    for(int i = 1, j = 0; i &lt;= n; i++){\n        if(lst[a[i]])\n            add(lst[a[i]], - 1);\n        lst[a[i]] = i;\n        add(lst[a[i]], 1);\n        while(j &lt; q &amp;&amp; Q[j].r == i){\n            ans[Q[j].id] = query(i) - query(Q[j].l - 1);\n            j++;\n        }\n    }\n    for(int i = 0; i &lt; q; i++)\n        cout &lt;&lt; ans[i] &lt;&lt; \"\\n\";\n    return 0;\n}\n</code></pre> <p>\u8fd9\u662f\u6211\u5199\u7684\u83ab\u961f\u7684\uff0c\u4e5f\u8d34\u4e00\u4e0b\u5427\u3002</p> <p>\u5947\u6570\u5757\u5347\u5e8f\u5076\u6570\u5757\u964d\u5e8f\u53ef\u4ee5\u7701\u65f6\u95f4\uff0c\u7136\u540e\u9047\u5230\u83ab\u961f\u7684\u9898\uff0c\u5c3d\u91cf\u522b\u7528 vector \u4e86\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u7b97\u6cd5\u672c\u6765\u5c31\u5361\u65f6\u95f4\uff0cvector \u65f6\u95f4\u8fd8\u591a\u90a3\u4e48\u591a\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nusing LL = long long;\n\nconstexpr int N = int(1e6) + 1;\nstruct node{\n    int l, r, id;\n}Q[N];\nint a[N], b[N], pos[N], cnt[N], ans[N], res;\ninline void add (int i){\n    if(!cnt[a[i]]) res++;\n    cnt[a[i]]++;\n}\ninline void del (int i){\n    cnt[a[i]]--;\n    if(!cnt[a[i]]) res--;\n}\n// bool cmp(node x, node y)\n// {\n//     return pos[x.l] == pos[y.l] ? x.r &lt; y.r : pos[x.l] &lt; pos[y.l];\n//     // return pos[x.l] == pos[y.l] ? (pos[x.l] &amp; 1 ? x.r &lt; y.r : x.r &gt; y.r) : pos[x.l] &lt; pos[y.l];\n// }\nint main()\n{\n    ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);\n    int n; cin &gt;&gt; n;\n    // vector&lt;int&gt; a(n + 1), pos(n + 1), cnt(N);\n    int siz = sqrt(n);\n    for(int i = 1, tot = 0; i &lt;= n; i++){\n        cin &gt;&gt; a[i];\n        if(!b[a[i]]){\n            b[a[i]] = ++tot;\n        }\n        a[i] = b[a[i]];\n        pos[i] = i / siz;\n    }\n    int q; cin &gt;&gt; q;\n    // vector&lt;node&gt; Q(q);\n    for(int i = 0; i &lt; q; i++){\n        cin &gt;&gt; Q[i].l &gt;&gt; Q[i].r;\n        Q[i].id = i;\n    }\n    sort(Q, Q + q, [&amp;](node x, node y){\n        return pos[x.l] == pos[y.l] ? (pos[x.l] &amp; 1 ? x.r &lt; y.r : x.r &gt; y.r) : pos[x.l] &lt; pos[y.l];\n    });\n    // sort(Q, Q + q, cmp);\n    int L = 1, R = 0;\n    // vector&lt;int&gt; ans(q);\n\n    for(int i = 0; i &lt; q; i++){\n        while(Q[i].l &lt; L)\n            add(--L);\n        while(Q[i].l &gt; L)\n            del(L++);\n        while(Q[i].r &lt; R)\n            del(R--);\n        while(Q[i].r &gt; R)\n            add(++R);\n        // for(int j = 1; j &lt;= 5; j++)\n        //     cerr &lt;&lt; cnt[j] &lt;&lt; \" \\n\" [j == 5];\n        ans[Q[i].id] = res;\n    }\n    for(int i = 0; i &lt; q; i++)\n        cout &lt;&lt; ans[i] &lt;&lt; \"\\n\";\n    return 0;\n}\n</code></pre>"},{"location":"cp_solving/final/P2272/","title":"P2272 [ZJOI2007] \u6700\u5927\u534a\u8fde\u901a\u5b50\u56fe","text":"<p>tag: scc</p>"},{"location":"cp_solving/final/P2272/#_1","title":"\u9898\u610f","text":"<p>\u6700\u5927\u534a\u8054\u901a\u5b50\u56fe\u662f\u6307\uff0c\u8282\u70b9\u6570\u91cf\u6700\u591a\uff0c\u4e14\u5bf9\u4e8e\u5176\u4e2d\u4efb\u610f\u4e24\u4e2a\u70b9 \\(u, v\\)\uff0c\u8981\u4e48 \\(u\\) \u53ef\u4ee5\u5230\u8fbe \\(v\\)\uff0c\u8981\u4e48 \\(v\\) \u53ef\u4ee5\u5230\u8fbe \\(u\\)\u7684\u5b50\u56fe\u3002</p>"},{"location":"cp_solving/final/P2272/#solution","title":"solution","text":"<p>\u5f3a\u8fde\u901a\u5206\u91cf\u91cc\u7684\u70b9\u80af\u5b9a\u90fd\u6ee1\u8db3\uff0c\u7f29\u70b9\u6210 DAG \u4e4b\u540e\uff0c\u6700\u5927\u534a\u8054\u901a\u5b50\u56fe\u80af\u5b9a\u662f\u4e00\u6761\u94fe\u3002</p> <p>\u76f4\u63a5 dp \u5c31\u53ef\u4ee5\u4e86\u3002</p>"},{"location":"cp_solving/final/P2272/#code","title":"code","text":"<p>\u76f4\u63a5\u5efa\u65b0\u56fe\u7136\u540e\u53bb\u9664\u91cd\u8fb9\u5c31\u884c\u4e86\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nstruct graph{\n    int n, m;\n    vector&lt;int&gt; head, nxt, from, to;\n    vector&lt;int&gt; dfn, low, in_stack, scc, sz, stk;\n    int totEdge, tot, sc;\n    graph(int __n, int __m){\n        n = __n, m = __m;\n        head.assign(n + 5, 0);\n        nxt.assign(m + 5, 0);\n        from.assign(m + 5, 0);\n        to.assign(m + 5, 0);\n        totEdge = 1;\n\n        dfn = low = in_stack = scc = sz = vector&lt;int&gt; (n + 5, 0);\n        tot = sc = 1;\n    }\n    void addEdge(int u, int v){\n        nxt[totEdge] = head[u];\n        head[u] = totEdge;\n        from[totEdge] = u;\n        to[totEdge] = v;\n        ++totEdge;\n    }\n    void tarjan(int u){\n        dfn[u] = low[u] = ++tot;\n        in_stack[u] = true, stk.push_back(u);\n        for(int i = head[u]; i; i = nxt[i]){\n            int v = to[i];\n            if(!dfn[v]){\n                tarjan(v);\n                low[u] = min(low[u], low[v]);\n            }else if(in_stack[v])\n                low[u] = min(low[u], dfn[v]);\n        }\n        if(low[u] == dfn[u]){\n            ++sc;\n            for(int k; k != u; ){\n                k = stk.back(); stk.pop_back();\n                scc[k] = sc, sz[sc]++;\n                in_stack[k] = false;\n            }\n        }\n    }\n};\nint ans[100010], f[100010], used[100010];\nint main()\n{\n    ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);\n    int n, m, mod; cin &gt;&gt; n &gt;&gt; m &gt;&gt; mod;\n    graph g(n, m * 2);\n    for(int i = 1; i &lt;= m; i++){\n        int u, v; cin &gt;&gt; u &gt;&gt; v;\n        g.addEdge(u, v);\n    }\n    for(int i = 1; i &lt;= n; i++){\n        if(!g.dfn[i]) g.tarjan(i);\n    }\n    graph ng(n, m * 2);\n    for(int i = 1; i &lt; g.totEdge; i++){\n        int u = g.from[i], v = g.to[i];\n        if(g.scc[u] != g.scc[v]){\n            ng.addEdge(g.scc[u], g.scc[v]);\n        }\n    }\n    for(int i = 1; i &lt;= g.sc; i++)\n        ans[i] = g.sz[i], f[i] = 1;\n    for(int i = g.sc; i &gt;= 1; i--){\n        // \u66f4\u65b0\u76f8\u8fde\u7684\u8fb9\n        for(int e = ng.head[i]; e; e = ng.nxt[e]){\n            int v = ng.to[e];\n            if(used[v] == i) continue;\n            used[v] = i;\n            if(ans[v] &lt; ans[i] + g.sz[v]){\n                ans[v] = ans[i] + g.sz[v];\n                f[v] = f[i];\n            }else if(ans[v] == ans[i] + g.sz[v]){\n                f[v] = (f[v] + f[i]) % mod;\n            }\n        }\n    }\n    int C = 0, mx = 0;\n    for(int i = 1; i &lt;= g.sc; i++){\n        if(ans[i] &gt; mx){\n            mx = ans[i];\n            C = f[i];\n        }else if(ans[i] == mx){\n            C = (C + f[i]) % mod;\n        }\n    }\n    cout &lt;&lt; mx &lt;&lt; '\\n' &lt;&lt; C &lt;&lt; '\\n';\n    return 0;\n}\n</code></pre>"},{"location":"cp_solving/final/P2495/","title":"P2495 [SDOI2011] \u6d88\u8017\u6218","text":"<p>tag : \u865a\u6811\uff0c dp</p>"},{"location":"cp_solving/final/P2495/#_1","title":"\u9898\u610f","text":"<p>\u6709\u4e00\u9897\u4ee5 \\(1\\) \u4e3a\u9876\u70b9\u7684\u6811\uff0c\u7ed9\u51fa \\(q\\) \u6b21\u8be2\u95ee\uff0c\u5bf9\u4e8e\u6bcf\u6b21\u8be2\u95ee\uff0c\u7ed9\u51fa \\(k\\) \u4e2a\u70b9\uff0c\u5220\u9664\u4e00\u4e9b\u8fb9\uff0c\u4f7f\u5f97\u8fd9\u4e9b\u8fb9\u6743\u503c\u548c\u6700\u5c0f\u4e14\u8fd9\u4e9b\u70b9\u5747\u65e0\u6cd5\u5230\u8fbe \u8282\u70b9\\(1\\)\u3002(\\(\\sum k \\le 5 \\times 10 ^ 5\\))</p>"},{"location":"cp_solving/final/P2495/#solution","title":"solution","text":"<p>\u82e5\u65e0\u8be2\u95ee\u6b21\u6570\u9650\u5236\uff0c\u53ef\u4ee5\u904d\u5386\u6574\u9897\u6811dp\uff0c\\(dp_{u}\\) \u8868\u793a\u4ee5 \\(u\\) \u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u65e0\u7279\u6b8a\u8282\u70b9\u7684\u6700\u5c0f\u82b1\u8d39\u3002\u90a3\u4e48\u5bf9\u4e8e \\(u\\) \u7684\u6bcf\u4e2a\u5b50\u7ed3\u70b9 \\(v\\), \u5982\u679c \\(v\\) \u662f\u7279\u6b8a\u70b9\uff0c\u5219\\(dp_u += w\\)\uff1b \u5426\u5219 \\(dp_u += min(dp_v, w)\\)\u3002\u4f46\u662f \\(q\\) \u6b21\u8be2\u95ee\uff0c\u5982\u679c\u6bcf\u6b21\u90fd\u904d\u5386\u6574\u68f5\u6811\u5c31\u975e\u5e38\u6162\u4e86\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u53ea\u7528\u865a\u6811\uff0c\u865a\u6811\u5c31\u662f\u53ea\u5c06\u5173\u952e\u70b9\u4ee5\u53ca\u5b83\u4eec\u4e24\u4e24\u4e4b\u95f4\u7684 lca \u5efa\u4e00\u9897\u65b0\u7684\u6811\uff0c\u8fd9\u6837\u5355\u6b21\u8be2\u95ee\u53ea\u9700\u8981 \\(O(k)\\) \u590d\u6742\u5ea6\u3002</p> <p>\u5176\u5b9e\u96be\u70b9\u53ea\u5728\u5efa\u865a\u6811\uff0c\u4e0d\u7136\u53ea\u6709\u8fd9\u4e2a dp\uff0c\u4f30\u8ba1\u53ea\u662f\u4e2a\u7eff\u9898\u4e86\u3002</p>"},{"location":"cp_solving/final/P2495/#code","title":"code","text":"<p>\u5176\u5b9e\u4e5f\u4e0d\u96be\uff0c\u4e5f\u662f\u865a\u6811\u7684\u6728\u677f\u9898\u5427\uff0c\u4f46\u662f\u5f53\u65f6\u5199\u7684\u4ee3\u7801\u6709\u4e00\u70b9\u70b9\u4e71\uff0c\u521a\u5b66\u5199\u7684\u3002\u3002\u3002\u4ee5\u540e\u5982\u679c\u6709\u7a7a\uff0c\u6765\u91cd\u5199\u4e00\u4e0b\u8fd9\u9898\u7684\u4ee3\u7801\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nusing LL = long long;\n\nconstexpr int N = 250000 + 1;\nconstexpr int inf = int(1e9);\nvector&lt;pair&lt;int, int&gt;&gt; g[N], vg[N];\nLL dp[N];\nint tot, fa[N][21], we[N][21], dep[N], dfn[N];\nbool have[N];\nvoid dfs1(int u, int p)\n{\n    dfn[u] = ++tot;\n    dep[u] = dep[p] + 1;\n    for(int i = 1; i &lt;= 20; i++){\n        fa[u][i] = fa[fa[u][i - 1]][i - 1];\n        we[u][i] = min(we[u][i - 1], we[fa[u][i - 1]][i - 1]);\n    }\n    for(auto [v, w] : g[u]){\n        if(v == p) continue;\n        fa[v][0] = u;\n        we[v][0] = w;\n        dfs1(v, u);\n    }\n}\nint lca(int x, int y)\n{\n    if(dep[x] &lt; dep[y]) swap(x, y);\n    for(int i = 0, z = dep[x] - dep[y]; z; i++, z &gt;&gt;= 1){\n        if(z &amp; 1)\n            x = fa[x][i];\n    }\n    if(x == y) return x;\n    for(int i = 20; i &gt;= 0; i--){\n        if(fa[x][i] != fa[y][i]){\n            x = fa[x][i], y = fa[y][i];\n        }\n    }\n    return fa[x][0];\n}\nint get(int x, int y)\n{\n    if(dep[x] &lt; dep[y]) swap(x, y);\n    int res = inf;\n    for(int i = 0, z = dep[x] - dep[y]; z; i++, z &gt;&gt;= 1){\n        if(z &amp; 1)\n            res = min(res, we[x][i]), x = fa[x][i];\n    }\n    return res;\n}\nvoid build(vector&lt;int&gt; p)\n{\n    int k = p.size();\n    for(auto x : p)\n        have[x] = true;\n    ranges::sort(p, [&amp;](int x, int y){return dfn[x] &lt; dfn[y];});\n    for(int i = 0; i + 1 &lt; k; i++){\n        p.push_back(lca(p[i], p[i + 1]));\n    }\n    ranges::sort(p, [&amp;](int x, int y){return dfn[x] &lt; dfn[y];});\n    p.erase(unique(p.begin(), p.end()), p.end());\n    for(int i = 0; i + 1 &lt; p.size(); i++){\n        int L = lca(p[i], p[i + 1]);\n        int w = get(L, p[i + 1]);\n        vg[L].push_back({p[i + 1], w});\n    }\n    if(p[0] != 1) vg[1].push_back({p[0], get(1, p[0])});\n}\nvoid dfs2(int u)\n{\n    if(have[u]){\n        dp[u] = inf;\n    }else{\n        for(auto [v, w] : vg[u]){\n            dfs2(v);\n            dp[u] += min(dp[v], w + 0ll);\n        }\n    }\n    for(auto [v, _] : vg[u])\n        dp[v] = 0, vg[v].clear();\n}\nint main()\n{\n    ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);\n    int n;\n    cin &gt;&gt; n;\n    for(int i = 1; i &lt; n; i++){\n        int u, v, w;\n        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;\n        g[u].push_back({v, w});\n        g[v].push_back({u, w});\n    }\n    dfs1(1, 0);\n    int m;\n    cin &gt;&gt; m;\n    while(m--){\n        int k; cin &gt;&gt; k;\n        vector&lt;int&gt; p(k);\n        for(int i = 0; i &lt; k; i++)\n            cin &gt;&gt; p[i];\n        build(p);\n        dfs2(1);\n        cout &lt;&lt; dp[1] &lt;&lt; '\\n';\n        for(auto x : p) have[x] = false;\n        vg[1].clear();\n        dp[1] = 0;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"cp_solving/final/P2515/","title":"P2515 [HAOI2010] \u8f6f\u4ef6\u5b89\u88c5","text":"<p>tag : scc, dp</p>"},{"location":"cp_solving/final/P2515/#_1","title":"\u9898\u610f","text":"<p>\\(n\\) \u4e2a\u8f6f\u4ef6\uff0c\u6bcf\u4e2a\u8f6f\u4ef6\u5360\u7a7a\u95f4 \\(w_i\\)\uff0c\u4ef7\u503c\u4e3a \\(v_i\\)\u3002</p> <p>\u6bcf\u4e2a\u8f6f\u4ef6\u53ef\u80fd\u4f9d\u8d56\u4e00\u4e9b\u8f6f\u4ef6\uff0c\u53ef\u80fd\u4e0d\u4f9d\u8d56\uff0c\u5fc5\u987b\u5b83\u4f9d\u8d56\u7684\u6587\u4ef6\u6709\u6548\uff0c\u5b83\u624d\u6709\u4ef7\u503c\u3002\u6c42 \\(m\\) \u7a7a\u95f4\u53ef\u4ee5\u8fbe\u5230\u7684\u6700\u5927\u4ef7\u503c\u3002</p>"},{"location":"cp_solving/final/P2515/#solution","title":"solution","text":"<p>\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u91cc\u7684\u8f6f\u4ef6\uff0c\u5fc5\u987b\u5168\u90e8\u5b89\u88c5\uff0c\u7f29\u70b9\u4e4b\u540e\u5c31\u662f DAG \u4e86\uff0c\u4e14\u6bcf\u4e2a\u70b9\u53ea\u6709\u6700\u591a\u4e00\u4e2a\u51fa\u8fb9\uff0c\u6240\u4ee5\u7f29\u70b9\u540e\u6bcf\u4e2a\u8fde\u901a\u5757\u4e00\u5b9a\u662f\u4e00\u9897\u6811\uff0c\u76f4\u63a5 dp \u5c31\u884c\u4e86\u3002</p> <p>\u5efa\u65b0\u6811\u7684\u65f6\u5019\u8bb0\u4e00\u4e0b\u5165\u5ea6\uff0c\u6211\u4eec\u53ea\u9700\u8981\u904d\u5386 \\(indeg = 0\\) \u7684\u70b9\u3002</p>"},{"location":"cp_solving/final/P2515/#code","title":"code","text":"<pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconstexpr int N = 110;\nint n, m, w[N], v[N], dp[N][510];\nint head[N], nxt[N], to[N], ecnt = 1;\nint dfn[N], low[N], instk[N], tot;\nint scc[N], sz[N], sc;\nvector&lt;int&gt; stk;\nvector&lt;vector&lt;int&gt;&gt; g;\nint nv[N], nw[N];\nvoid add(int u, int v)\n{\n    nxt[ecnt] = head[u];\n    head[u] = ecnt;\n    to[ecnt] = v;\n    ++ecnt;\n}\nvoid tarjan(int u)\n{\n    dfn[u] = low[u] = ++tot;\n    instk[u] = 1, stk.push_back(u);\n    for(int e = head[u]; e; e = nxt[e]){\n        int v = to[e];\n        if(!dfn[v]){\n            tarjan(v);\n            low[u] = min(low[u], low[v]);\n        }else if(instk[v])\n            low[u] = min(low[u], dfn[v]);\n    }\n    if(low[u] == dfn[u]){\n        ++sc;\n        for(int k = -1; k != u; ){\n            k = stk.back(); stk.pop_back();\n            scc[k] = sc, sz[sc]++;\n            nv[sc] += v[k], nw[sc] += w[k];\n            instk[k] = 0;\n        }\n    }\n}\nvoid dfs(int u)\n{\n    for(int x = nw[u]; x &lt;= m; x++)\n        dp[u][x] = nv[u];\n    for(auto v : g[u]){\n        dfs(v);\n        for(int x = m; x &gt;= nw[u]; x--){\n            for(int y = 0; y + x &lt;= m; y++)\n                dp[u][x + y] = max(dp[u][x + y], dp[u][x] + dp[v][y]);\n        }\n    }\n}\nint main()\n{\n    ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);\n    cin &gt;&gt; n &gt;&gt; m;\n    for(int i = 1; i &lt;= n; i++) cin &gt;&gt; w[i];\n    for(int i = 1; i &lt;= n; i++) cin &gt;&gt; v[i];\n    for(int i = 1; i &lt;= n; i++){\n        int d; cin &gt;&gt; d;\n        if(d) add(d, i);\n    }\n    for(int i = 1; i &lt;= n; i++){\n        if(!dfn[i]) tarjan(i);\n    }\n    g.assign(sc + 1, vector&lt;int&gt;());\n    vector&lt;int&gt; deg(sc + 1);\n    for(int i = 1; i &lt;= n; i++){\n        for(int e = head[i]; e; e = nxt[e]){\n            int v = to[e];\n            if(scc[i] != scc[v]){\n                g[scc[i]].push_back(scc[v]);\n                deg[scc[v]]++;\n            }\n        }\n    }\n    for(int i = 1; i &lt;= sc; i++){\n        sort(g[i].begin(), g[i].end());\n        g[i].erase(unique(g[i].begin(), g[i].end()), g[i].end());\n    }\n    for(int i = 1; i &lt;= sc; i++){\n        if(deg[i] == 0){\n            dfs(i);\n            for(int x = m; x &gt;= 0; x--){\n                for(int y = 0; y + x &lt;= m; y++)\n                    dp[0][x + y] = max(dp[0][x + y], dp[0][x] + dp[i][y]);\n            }\n        }\n    }\n    int ans = 0;\n    for(int i = 1; i &lt;= m; i++) ans = max(ans, dp[0][i]);\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n    return 0;\n}\n</code></pre>"},{"location":"cp_solving/final/P2607/","title":"P2607 [ZJOI2008] \u9a91\u58eb","text":"<p>tag : \u57fa\u73af\u6811\uff0c \u6811\u5f62DP</p>"},{"location":"cp_solving/final/P2607/#_1","title":"\u9898\u610f","text":"<p>\u6709\u5411\u56fe\uff0c\u7ed9 \\(n\\) \u4e2a\u70b9\uff0c\u6bcf\u4e2a\u70b9\u6709\u4e00\u4e2a\u51fa\u8fb9\u4ee5\u53ca\u70b9\u6743\uff0c\u9009\u51fa\u4e00\u4e9b\u70b9\uff0c\u4f7f\u5f97\u4ed6\u4eec\u4e24\u4e24\u4e0d\u76f8\u90bb\u4e14\u70b9\u6743\u4e4b\u548c\u6700\u5927\u3002\u6c42\u6700\u5927\u70b9\u6743\u548c\u3002</p>"},{"location":"cp_solving/final/P2607/#solution","title":"solution","text":"<p>\u6bcf\u4e2a\u70b9\u90fd\u6709\u4e00\u6761\u51fa\u8fb9\uff0c\u6240\u4ee5\u6bcf\u4e2a\u8fde\u901a\u5757\u90fd\u662f\u4e00\u9897\u57fa\u73af\u6811\uff0c\u5c31\u662f\u6bd4\u6811\u591a\u4e86\u4e00\u6761\u8fb9\uff0c\u5fc5\u5b9a\u6709\u4e00\u4e2a\u73af\uff0c\u7136\u540e\u5176\u4ed6\u70b9\u90fd\u662f\u8fde\u5230\u8fd9\u4e2a\u73af\u7684\u94fe\u3002</p> <p>\u5982\u679c\u662f\u6811\u7684\u8bdd\uff0c\u5c31\u975e\u5e38\u7b80\u5355\uff0c\u53ea\u9700\u8981\u57fa\u7840\u7684DP\u5c31\u80fd\u5199\u51fa\u6765\u3002\\(dp_{u,0/1}\\) \u8868\u793a\u4e0d\u9009/\u9009 \\(u\\) \u7684\u6700\u5927\u7b54\u6848\u3002\u5bf9\u4e8e \\(u\\) \u7684\u5b50\u7ed3\u70b9 \\(v\\)\uff0c\\(dp_{u,0} += max(dp_{v,0}, dp_{v,1}), dp_{u, 1} += dp_{v, 0}\\)\u3002</p> <p>\u4f46\u662f\u591a\u4e86\u4e00\u6761\u8fb9\u5c31\u4f1a\u5f88\u70e6\uff0c\u6ca1\u6709\u8fd9\u6761\u8fb9\u4f30\u8ba1\u5c31\u662f\u9ec4\u9898\u4e86\uff0c\u52a0\u4e86\u5c31\u6210\u84dd\u9898\u3002</p> <p>\u5176\u5b9e\u601d\u8def\u5c31\u662f\u65ad\u5f00\u4e00\u6761\u73af\u4e0a\u7684\u8fb9\uff0c\u5bf9\u4e8e\u8fd9\u6761\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\uff0c \\(x, y\\)\uff0c\u5fc5\u7136\u81f3\u5c11\u6709\u4e00\u4e2a\u70b9\u4e0d\u80fd\u9009\uff0c\u6240\u4ee5\u5206\u522b\u4ee5\u8fd9\u4e24\u4e2a\u70b9\u4e3a\u6839\u8282\u70b9\u8fdb\u884c dfs\uff0c\u53d6 \\(max(dp_{x, 0}, dp_{y, 0})\\)\u3002</p> <p>\u6211\u672c\u6765\u5199\u4e86\u4e00\u5927\u5806\uff0c\u7136\u540e\u53bb\u770b\u4e86\u5176\u4ed6\u4eba\u7684\u4ee3\u7801\uff0c\u6709\u4e00\u4e2a\u5f88\u5999\u7684\u65b9\u6cd5\u662f\uff0c\u7528\u5e76\u67e5\u96c6\uff0c\u8fd9\u6837\u53ef\u4ee5\u5f88\u8f7b\u677e\u5730\u5f97\u5230\u90a3\u4e24\u4e2a\u70b9\uff0c\u4ee5\u53ca\u5c31\u53ef\u4ee5\u76f4\u63a5\u4e0d\u8fde\u90a3\u4e00\u6761\u8fb9\u4e86\uff0c\u65b9\u4fbf\u5f88\u591a\u3002</p> <p>\u5bf9\u4e8e\u6709\u4e9b\u9898\uff0c\u5982\u679c\u4e0d\u65b9\u4fbf\u8fd9\u6837\u505a\uff0c\u4e5f\u53ef\u4ee5\u5e38\u89c4\u65b9\u6cd5\uff0c\u53ef\u80fd\u9700\u8981\u7279\u5224\u4e00\u4e0b\u90a3\u4e24\u4e2a\u7aef\u70b9\u7684\u5173\u7cfb\u3002</p>"},{"location":"cp_solving/final/P2607/#code","title":"code","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nusing LL = long long;\n\nconstexpr int N = int(1e6) + 10;\nint w[N], f[N];\n// vector&lt;vector&lt;int&gt;&gt; g;\nLL dp[N][2];\nint head[N &lt;&lt; 1], nxt[N &lt;&lt; 1], to[N &lt;&lt; 1], ecnt = 1;\nvoid add(int u, int v){\n    nxt[ecnt] = head[u], to[ecnt] = v, head[u] = ecnt++;\n}\n\nvoid dfs(int u, int p)\n{\n    dp[u][0] = 0, dp[u][1] = w[u];\n    for(int e = head[u]; e; e = nxt[e]){\n        int v = to[e];\n        if(v == p) continue;\n        dfs(v, u);\n        dp[u][0] += max(dp[v][0], dp[v][1]);\n        dp[u][1] += dp[v][0];\n    }\n}\nint find(int x){return x == f[x] ? x : f[x] = find(f[x]);}\nvoid solve()\n{\n    int n; cin &gt;&gt; n;\n    // g.assign(n + 1, vector&lt;int&gt;());\n    for(int i = 1; i &lt;= n; i++) f[i] = i;\n    vector&lt;pair&lt;int, int&gt;&gt; vec;\n    for(int i = 1; i &lt;= n; i++){\n        cin &gt;&gt; w[i];\n        int x; cin &gt;&gt; x;\n        int fi = find(i), fx = find(x);\n        if(fi == fx) vec.push_back({i, x});\n        else{\n            f[fi] = fx;\n            // g[x].push_back(i);\n            // g[i].push_back(x);\n            add(i, x), add(x, i);\n        }\n    }\n    LL ans = 0;\n    for(auto [x, y] : vec){\n        dfs(x, 0);\n        LL tmp = dp[x][0];\n        dfs(y, 0);\n        ans += max(tmp, dp[y][0]);\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n\nint main()\n{\n    ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);\n    // int t; cin &gt;&gt; t; while(t--)\n    {solve();} return 0;\n}\n</code></pre>"},{"location":"cp_solving/final/P4045/","title":"P4045 [JSOI2009] \u5bc6\u7801","text":"<p>tag : AC \u81ea\u52a8\u673a\uff0c dp</p>"},{"location":"cp_solving/final/P4045/#_1","title":"\u9898\u610f","text":"<p>\u6709 \\(n\\) \u4e2a\u5b57\u7b26\u4e32\uff0c\u95ee\u957f\u5ea6\u4e3a \\(L\\) \u7684\u5b57\u7b26\u4e32\u91cc\u6709\u591a\u5c11\u4e2a\u5b57\u7b26\u4e32\u5305\u542b\u8fd9 \\(n\\) \u4e2a\u5b57\u7b26\u4e32\u3002</p> <p>\u6570\u91cf\u5c0f\u4e8e 42 \u65f6\uff0c\u8981\u8f93\u51fa\u6570\u91cf\u3002</p>"},{"location":"cp_solving/final/P4045/#solution","title":"solution","text":"<p>\u5efa AC \u81ea\u52a8\u673a\uff0c\u679a\u4e3e\u6bcf\u4e00\u4f4d\u9009\u4ec0\u4e48\u5b57\u7b26\uff0c\u8d70\u5230\u4e86\u54ea\u4e2a\u8282\u70b9\uff0c\u4ee5\u53ca\u5df2\u7ecf\u62e5\u6709\u7684\u5b57\u7b26\u4e32\u7684\u72b6\u6001\u3002\\(dp_{i, u, S}\\) \u8868\u793a\u957f\u5ea6\u4e3a \\(i\\) \u7684\u5b57\u7b26\u4e32\uff0c\u8d70\u5230\u8282\u70b9 \\(u\\)\uff0c \u72b6\u6001\u4e3a \\(S\\) \u7684\u65b9\u6848\u6570\u3002\\(id_u\\) \u4e3a\u8282\u70b9 \\(u\\) \u5339\u914d\u7684\u5b57\u7b26\u4e32\u7684\u60c5\u51b5\u3002</p> <p>\u90a3\u4e48\u8f6c\u79fb\u4e3a \\(dp_{i, v, S | id_v} += dp_{i - 1, u, S}\\)\u3002</p> <p>\u8f93\u51fa\u65b9\u6848\u5176\u5b9e\u8fd8\u662f\u6709\u70b9\u9ebb\u70e6\uff0c\u4f46\u4e5f\u4e0d\u662f\u5f88\u96be\u4e86\u3002</p>"},{"location":"cp_solving/final/P4045/#code","title":"code","text":"<pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nusing LL = long long;\n\nconstexpr int N = 105;\nint n, l;\nint ch[N][26], fail[N], h[N], tot;\nLL dp[2][N][1024];\nbool ok[N][30][1024], vis[N][30][1024];\nstring res;\nvoid insert(string s, int index)\n{\n    int u = 0;\n    for(auto c : s){\n        int x = c - 'a';\n        if(!ch[u][x]) ch[u][x] = ++tot;\n        u = ch[u][x];\n    }\n    h[u] |= 1 &lt;&lt; index;\n}\nvoid build()\n{\n    queue&lt;int&gt; q;\n    for(int u = 0; u &lt; 26; ++u){\n        if(ch[0][u])\n            q.push(ch[0][u]);\n    }\n    while(!q.empty()){\n        int u = q.front(); q.pop();\n        h[u] |= h[fail[u]];\n        for(int v = 0; v &lt; 26; ++v){\n            if(ch[u][v]){\n                fail[ch[u][v]] = ch[fail[u]][v];\n                q.push(ch[u][v]);\n            }else\n                ch[u][v] = ch[fail[u]][v];\n        }\n    }\n}\nvoid check(int u, int len, int mask)\n{\n    if(vis[u][len][mask]) return;\n    vis[u][len][mask] = true;\n    if(len == l){\n        if(mask == (1 &lt;&lt; n) - 1) ok[u][len][mask] = true;\n        return;\n    }\n    for(int x = 0; x &lt; 26; ++x){\n        int v = ch[u][x];\n        check(v, len + 1, mask | h[v]);\n        ok[u][len][mask] |= ok[v][len + 1][mask | h[v]];\n    }\n}\nvoid output(int u, int len, int mask)\n{\n    if(!ok[u][len][mask]) return;\n    if(len == l){\n        cout &lt;&lt; res &lt;&lt; '\\n';\n        return;\n    }\n    for(int x = 0; x &lt; 26; ++x){\n        int v = ch[u][x];\n        res.push_back('a' + x);\n        output(v, len + 1, mask | h[v]);\n        res.pop_back();\n    }\n}\nint main()\n{\n    ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);\n    cin &gt;&gt; l &gt;&gt; n;\n    vector&lt;string&gt; s(n);\n    for(int i = 0; i &lt; n; ++i){\n        cin &gt;&gt; s[i];\n        // insert(s[i], i);\n    }\n    ranges::sort(s);\n    s.erase(unique(s.begin(), s.end()), s.end());\n    n = s.size();\n    for(int i = 0; i &lt; n; ++i)\n        insert(s[i], i);\n    build();\n    int now = 0;\n    dp[now][0][0] = 1;\n    for(int i = 0; i &lt; l; ++i, now ^= 1){\n        for(int u = 0; u &lt;= tot; ++u)\n            for(int mask = 0; mask &lt; (1 &lt;&lt; n); ++mask)\n                dp[now ^ 1][u][mask] = 0;\n\n        for(int u = 0; u &lt;= tot; ++u){\n            for(int mask = 0; mask &lt; (1 &lt;&lt; n); ++mask){\n                LL num = dp[now][u][mask];\n                if(!num) continue;\n                for(int x = 0; x &lt; 26; x++){\n                    int v = ch[u][x];\n                    dp[now ^ 1][v][mask | h[v]] += num;\n                }\n            }\n        }\n    }\n    LL ans = 0;\n    for(int u = 0; u &lt;= tot; ++u)\n        ans += dp[now][u][(1 &lt;&lt; n) - 1];\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n    if(ans &lt;= 42)\n        check(0, 0, 0), output(0, 0, 0);\n    return 0;\n}\n</code></pre>"},{"location":"cp_solving/final/P4301/","title":"P4301 [CQOI2013] \u65b0Nim\u6e38\u620f","text":"<p>tag : \u535a\u5f08\uff0c\u7ebf\u6027\u57fa</p>"},{"location":"cp_solving/final/P4301/#_1","title":"\u9898\u610f","text":"<p>\u6709 \\(n\\) \u5806\u7269\u54c1\uff0c\u6bcf\u5806\u6709 \\(a_i\\) \u4e2a\uff0c\u7b2c\u4e00\u56de\u5408\u4e24\u4eba\u90fd\u53ef\u4ee5\u62ff\u8d70\u82e5\u5e72\u5806\u706b\u67f4\uff0c\u4f46\u4e0d\u80fd\u62ff\u5b8c\u6240\u6709\u5806\uff0c\u62ff\u7684\u5806\u5fc5\u987b\u62ff\u5b8c\u3002\u540e\u9762\u7684\u56de\u5408\u8ddf Nim \u6e38\u620f\u89c4\u5219\u4e00\u6837\u3002</p> <p>\u5982\u679c\u5148\u624b\u53ef\u4ee5\u5fc5\u80dc\uff0c\u90a3\u4e48\u8f93\u51fa\u5728\u7b2c\u4e00\u56de\u5408\u6700\u5c11\u8981\u62ff\u591a\u5c11\u6839\u706b\u67f4\uff0c\u5426\u5219\u8f93\u51fa -1\u3002</p>"},{"location":"cp_solving/final/P4301/#solution","title":"solution","text":"<p>\u6211\u4eec\u9700\u8981\u4fdd\u8bc1\u6211\u4eec\u62ff\u5b8c\u4e4b\u540e\uff0c\u53e6\u4e00\u4e2a\u4eba\u4e0d\u7ba1\u548b\u62ff\uff0c\u5f02\u6216\u548c\u90fd\u4e3a\u6b63\u6570\u3002</p> <p>\u6240\u4ee5\u6211\u4eec\u53ea\u80fd\u4fdd\u7559\u4e00\u4e2a\u6781\u5927\u7684\u7ebf\u6027\u57fa\uff0c\u6240\u4ee5\u4ece\u5927\u5230\u5c0f\u63d2\u5165\u5c31\u884c\uff0c\u4e0d\u80fd\u63d2\u5165\u5219\u5fc5\u987b\u5728\u7b2c\u4e00\u56de\u5408\u62ff\u8d70\u3002</p>"},{"location":"cp_solving/final/P4301/#code","title":"code","text":"<pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint main()\n{\n    int n; cin &gt;&gt; n;\n    vector&lt;int&gt; a(n + 1);\n    for(int i = 1; i &lt;= n; i++) cin &gt;&gt; a[i];\n    sort(a.begin() + 1, a.end(), greater&lt;&gt;());\n    vector&lt;int&gt; v(32);\n    auto Insert = [&amp;](int x){\n        for(int i = 31; i &gt;= 0; i--){\n            if(x &gt;&gt; i &amp; 1){\n                if(v[i]){\n                    x ^= v[i];\n                }else{\n                    v[i] = x;\n                    // cerr &lt;&lt; i &lt;&lt; \" \" &lt;&lt; x &lt;&lt; '\\n';\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n    /*\n    \u522b\u4eba\u4e5f\u8981\u62ff\u554a \u6240\u4ee5\u8981\u4f7f\u5f97\u53e6\u5916\u4e00\u4e2a\u4eba\n    \u65e0\u8bba\u5982\u4f55\u90fd\u51d1\u4e0d\u51fa\u5f02\u6216\u548c\u4e3a0\u7684\u5806\n    \u90a3\u4e48\u4e5f\u5c31\u662f\u53ea\u7ed9\u4ed6\u7559\u4e00\u4e2a\u7ebf\u6027\u57fa\n    */\n    long long ans = 0;\n    for(int i = 1; i &lt;= n; i++){\n        if(!Insert(a[i])) ans += a[i];\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n    return 0;\n}\n</code></pre>"},{"location":"cp_solving/final/P4570/","title":"P4570 [BJWC2011] \u5143\u7d20","text":"<p>tag: \u7ebf\u6027\u57fa\uff0c\u8d2a\u5fc3</p>"},{"location":"cp_solving/final/P4570/#_1","title":"\u9898\u610f","text":"<p>\\(n\\) \u5bf9\u6570\u5b57 \\(x, y\\)\uff0c\u9009\u5219\u82e5\u5e72\u5bf9\u6570\u5b57\uff0c\u4f7f\u5f97\u5176\u4e2d\u4e0d\u5b58\u5728 \\(x\\) \u5f02\u6216\u548c\u4e3a 0 \u7684\u5b50\u96c6\uff0c\u4e14 \\(y\\) \u4e4b\u548c\u6700\u5927\u3002</p>"},{"location":"cp_solving/final/P4570/#solution","title":"solution","text":"<p>\u5c31\u662f\u53d6\u4e00\u4e2a \\(x\\) \u7684\u7ebf\u6027\u57fa\uff0c\u4f7f\u5f97 \\(y\\) \u503c\u548c\u6700\u5927\uff0c\u6240\u4ee5\u4f18\u5148\u63d2\u5165 \\(y\\) \u5927\u7684\u3002</p> <p>\u5230\u662f\u4e5f\u6ca1\u6709\u8bc1\u660e\uff0c\u4f46\u662f\u7ebf\u6027\u57fa\u7684\uff0c\u611f\u89c9\u5f88\u591a\u90fd\u662f\u7c7b\u4f3c\u3002</p> <p>\u5982\u679c\u968f\u4fbf\u63d2\u5165\uff0c\u90a3\u4e48\u5982\u679c\u4f60\u53d1\u73b0\u4e00\u5bf9\u6570\u5b57\u63d2\u4e0d\u8fdb\u53bb\uff0c\u4f46\u91cc\u9762\u6709 \\(y\\) \u66f4\u5c0f\u7684\uff0c\u90a3\u6211\u4eec\u53ef\u80fd\u8981\u5220\u4e00\u4e2a \\(x\\)\uff0c\u628a\u5f53\u524d\u7684\u63d2\u8fdb\u53bb\u3002\u6392\u4e86\u5e8f\u5c31\u4e0d\u9700\u8981\u8fd9\u6837\u9ebb\u70e6\u4e86\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nusing LL = long long;\n\nint main()\n{\n    int n; cin &gt;&gt; n;\n    vector&lt;LL&gt; v(64);\n    auto Insert = [&amp;](LL x){\n        for(int i = 63; i &gt;= 0; i--){\n            if(x &gt;&gt; i &amp; 1){\n                if(v[i])\n                    x ^= v[i];\n                else{\n                    v[i] = x;\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n    vector&lt;pair&lt;LL, int&gt;&gt; vec(n);\n    for(int i = 0; i &lt; n; i++)\n        cin &gt;&gt; vec[i].first &gt;&gt; vec[i].second;\n    ranges::sort(vec, [](pair&lt;LL, int&gt; x, pair&lt;LL, int&gt; y){\n        return x.second &gt; y.second;\n    });\n    int ans = 0;\n    for(auto [number, magic] : vec){\n        if(Insert(number))\n            ans += magic;\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n    return 0;\n}\n</code></pre>"},{"location":"cp_solving/final/P5357/","title":"P5357 \u3010\u6a21\u677f\u3011AC \u81ea\u52a8\u673a","text":"<p>tag : AC \u81ea\u52a8\u673a</p>"},{"location":"cp_solving/final/P5357/#_1","title":"\u9898\u610f","text":"<p>\u7ed9\u4e00\u4e2a\u6587\u672c\u4e32\u548c \\(n\\) \u4e2a\u6a21\u5f0f\u4e32\uff0c\u6c42\u6bcf\u4e2a\u6a21\u5f0f\u4e32\u5728\u6587\u672c\u4e32\u4e2d\u7684\u51fa\u73b0\u6b21\u6570\u3002</p>"},{"location":"cp_solving/final/P5357/#solution","title":"solution","text":"<p>\u5efa ac \u81ea\u52a8\u673a\uff0c\u7136\u540e\u8bb0\u5230\u6bcf\u4e2a\u70b9\u7684\u6570\u91cf\u662f\u591a\u5c11\u3002\u8fde \\(fail_i\\) \u548c \\(i\\) \u5efa\u6811\u3002\u7236\u8282\u70b9\u7684\u6570\u91cf\u8981\u52a0\u5b50\u7ed3\u70b9\u7684\u6570\u91cf\u3002</p> <p>\u7136\u540e\u76f4\u63a5\u8f93\u51fa\u6bcf\u4e2a\u5b57\u7b26\u4e32\u51fa\u73b0\u6b21\u6570\u5c31\u884c\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconstexpr int N = int(2e5) + 5;\nint trie[N][26], fail[N], point[N], rt = 1, tot = rt;\nint head[N], nxt[N], to[N], sum[N], idx = 1;\n\nvoid insert(string s, int index)\n{\n    int u = rt;\n    for(auto c : s){\n        int x = c - 'a';\n        if(!trie[u][x]) trie[u][x] = ++tot;\n        u = trie[u][x];\n    }\n    point[index] = u;\n}\nvoid build()\n{\n    queue&lt;int&gt; q;\n    fail[rt] = rt;\n    for(int i = 0; i &lt; 26; i++){\n        if(trie[rt][i]){\n            fail[trie[rt][i]] = rt;\n            q.push(trie[rt][i]);\n        }\n        else trie[rt][i] = rt;\n    }\n    while(!q.empty()){\n        auto u = q.front(); q.pop();\n        for(int v = 0; v &lt; 26; v++){\n            if(trie[u][v])\n                fail[trie[u][v]] = trie[fail[u]][v], q.push(trie[u][v]);\n            else\n                trie[u][v] = trie[fail[u]][v];\n        }\n    }\n}\nvoid addEdge(int u, int v)\n{\n    to[idx] = v;\n    nxt[idx] = head[u];\n    head[u] = idx;\n    idx++;\n}\nvoid dfs(int u)\n{\n    for(int i = head[u]; i; i = nxt[i]){\n        dfs(to[i]);\n        sum[u] += sum[to[i]];\n    }\n}\nint main()\n{\n    ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);\n    int n; cin &gt;&gt; n;\n    for(int i = 1; i &lt;= n; i++){\n        string s; cin &gt;&gt; s;\n        insert(s, i);\n    }\n    build();\n    for(int i = 2; i &lt;= tot; i++){\n        addEdge(fail[i], i);\n    }\n    string s; cin &gt;&gt; s;\n    int u = rt;\n    for(auto c : s){\n        int x = c - 'a';\n        u = trie[u][x];\n        sum[u]++;\n    }\n    dfs(rt);\n    for(int i = 1; i &lt;= n; i++)\n        cout &lt;&lt; sum[point[i]] &lt;&lt; \"\\n\";\n    return 0;\n}\n</code></pre>"},{"location":"cp_solving/final/P5522/","title":"P5522 [yLOI2019] \u68e0\u68a8\u714e\u96ea","text":"<p>tag : \u7ebf\u6bb5\u6811</p>"},{"location":"cp_solving/final/P5522/#_1","title":"\u9898\u610f","text":"<p>\u6709 \\(m\\) \u4e2a\u7531 \\(0, 1, ?\\) \u7ec4\u6210\u7684\u957f\u5ea6\u4e3a \\(n\\) \u7684\u5b57\u7b26\u4e32\u3002</p> <p>\u82e5 \\(t_i\\) \u4e3a \\(?\\), \u5219 \\(t_i\\) \u65e2\u53ef\u4ee5\u662f \\(0\\)\uff0c\u4e5f\u53ef\u4ee5\u662f \\(1\\)\u3002</p> <p>\u6709 \\(q\\) \u6b21\u8be2\u95ee\uff0c</p> <ul> <li> <p>\u8be2\u95ee1: \u95ee \\([l, r]\\) \u7684\u5b50\u4e32\u6709\u591a\u5c11\u79cd\u53ef\u80fd\u7684\u5185\u5bb9\u3002</p> </li> <li> <p>\u8be2\u95ee2: \u4fee\u6539\u7b2c \\(pos\\) \u4e2a\u5b57\u7b26\u4e32\u3002</p> </li> </ul>"},{"location":"cp_solving/final/P5522/#solution","title":"solution","text":"<p>\u7ebf\u6bb5\u6811\u76f4\u63a5\u5b58\u6bcf\u4e2a\u4f4d\u7f6e\u7684 \\(0,1,?\\) \u6570\u91cf\u4f1a T\uff0c\u6211\u4eec\u53ea\u7528\u8bb0\u5fc5\u987b\u653e \\(0/1\\) \u7684\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u7528\u4f4d\u8fd0\u7b97\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\n\nstruct node{\n    int a, b;\n};\nint n, m, q;\nconstexpr int N = 100010;\nstring s[N];\nnode tr[N &lt;&lt; 2];\n#define ls p &lt;&lt; 1\n#define rs p &lt;&lt; 1 | 1\n#define mi ((l + r) &gt;&gt; 1)\nnode merge(const node &amp;x, const node &amp;y)\n{\n    node res;\n    for(int i = 0; i &lt; n; i++){\n        res.a = x.a | y.a;\n        res.b = x.b | y.b;\n    }\n    return res;\n}\nvoid build(int p, int l, int r)\n{\n    // cerr &lt;&lt; l &lt;&lt; \" \" &lt;&lt; r &lt;&lt; '\\n';\n    if(l == r){\n        tr[p] = {0, 0};\n        for(int i = 0; i &lt; n; i++){\n            if(s[l][i] == '0') tr[p].a |= 1 &lt;&lt; i;\n            else if(s[l][i] == '1') tr[p].b |= 1 &lt;&lt; i;\n        }\n        return;\n    }\n    build(ls, l, mi), build(rs, mi + 1, r);\n    tr[p] = merge(tr[ls], tr[rs]);\n}\nvoid change(int p, int l, int r, int index)\n{\n    if(l == r){\n        tr[p] = {0, 0};\n        for(int i = 0; i &lt; n; i++){\n            if(s[l][i] == '0') tr[p].a |= 1 &lt;&lt; i;\n            else if(s[l][i] == '1') tr[p].b |= 1 &lt;&lt; i;\n        }\n        return;\n    }\n    if(index &lt;= mi) change(ls, l, mi, index);\n    else change(rs, mi + 1, r, index);\n    tr[p] = merge(tr[ls], tr[rs]);\n}\nnode query(int p, int l, int r, int lx, int rx)\n{\n    // cerr &lt;&lt; \"query : \" &lt;&lt; l &lt;&lt; \" \" &lt;&lt; r &lt;&lt; '\\n';\n    if(l &gt;= lx &amp;&amp; r &lt;= rx) return tr[p];\n    node res{0, 0};\n    if(lx &lt;= mi) res = merge(res, query(ls, l, mi, lx, rx));\n    if(rx &gt; mi) res = merge(res, query(rs, mi + 1, r, lx, rx));\n    return res;\n}\nint main()\n{\n    ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;\n    for(int i = 1; i &lt;= m; i++)\n        cin &gt;&gt; s[i];\n    build(1, 1, m);\n    int ans = 0;\n    while(q--){\n        int op; cin &gt;&gt; op;\n        if(op){\n            int pos; string t;\n            cin &gt;&gt; pos &gt;&gt; t;\n            s[pos] = t;\n            change(1, 1, m, pos);\n        }else{\n            int l, r; cin &gt;&gt; l &gt;&gt; r;\n            node res = query(1, 1, m, l, r);\n            if(!(res.a &amp; res.b)){\n                int x = 1;\n                for(int i = 0; i &lt; n; i++){\n                    if((res.a &gt;&gt; i &amp; 1) == (res.b &gt;&gt; i &amp; 1))\n                        x *= 2;\n                }\n                ans ^= x;\n            }\n        }\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n    return 0;\n}\n/*\n\u53ea\u8bb0\u5fc5\u987b\u586b 0/1 \u7684\u4f4d\u7f6e\n\u82e5 &amp; \u4e0d\u7b49\u4e8e 0, \u5219 no\n\n*/\n</code></pre>"},{"location":"cp_solving/nowcoder/102303/","title":"\u725b\u5ba2\u5468\u8d5b82","text":"<p>\u6700\u7b80\u5355\u7684\u4e00\u96c6\uff0c\u7b2c\u4e00\u6b21ak\u5468\u8d5b\u3002</p> <p>\u672c\u6765\u6ca1\u6253\u7b97\u6253\u7684\uff0c\u4f46\u662f\u5403\u996d\u7684\u65f6\u5019\u770b\u5230\u7fa4\u91cc\u6709\u4eba\u5410\u69fd\u592a\u7b80\u5355\u4e86\uff0c\u6709\u4eba\u8bf4F\u9898\u592a\u7b80\u5355\u4e86\u3002\u3002\u7136\u540e\u6211\u56de\u6765\u4e5f\u56db\u5341\u591a\u5206\u949fak\u4e86\u3002</p>"},{"location":"cp_solving/nowcoder/102303/#a","title":"A","text":""},{"location":"cp_solving/nowcoder/102303/#b","title":"B","text":""},{"location":"cp_solving/nowcoder/102303/#c","title":"C","text":"<p>\u80af\u5b9a\u662f\u6309\u5927\u5c0f\u987a\u5e8f\u53bb\u6392\u961f\u7684\u3002\u4f46\u662f\u5982\u679c\u5927\u5c0f\u76f8\u540c\u80af\u5b9a\u4e0d\u7b26\u5408\u3002\u6240\u4ee5\u6392\u5e8f\u7136\u540e\u6309\u5927\u5c0f\u8f93\u51fa\u3002</p> <pre><code>void solve()\n{\n    int n;\n    cin&gt;&gt;n;\n    vector&lt;pii&gt;a(n);\n    for(int i=0;i&lt;n;i++){\n        cin&gt;&gt;a[i].fi;\n        a[i].se=i+1;\n    }\n    sort(all(a));\n    for(int i=1;i&lt;n;i++){\n        if(a[i].fi==a[i-1].fi){\n            cout&lt;&lt;\"NO\\n\";\n            return;\n        }\n    }\n    cout&lt;&lt;\"YES\\n\";\n    for(int i=0;i&lt;n;i++)\n        cout&lt;&lt;a[i].se&lt;&lt;\" \\n\"[i+1==n];\n}\n</code></pre>"},{"location":"cp_solving/nowcoder/102303/#d","title":"D","text":"<p>\u7ed9\u7684\u6570\u7ec4\u662f\u4e00\u4e2a\u9012\u51cf\u7684\u6570\u7ec4\uff0c\u53ea\u6709\u65b0\u7684\u6570\u5b57\u51fa\u73b0\uff0c\u8fd9\u4e2a\u6570\u5b57\u624d\u662f\u786e\u5b9a\u7684\u3002\u5176\u4ed6\u7684\u4f4d\u7f6e\u53ef\u4ee5\u586b\u6ee1\u8db3\u6761\u4ef6\u7684\u6240\u6709\u6570\u5b57\u3002</p> <pre><code>7\n6 2 2 1 1 1 1\n</code></pre> <p>\u6bd4\u5982\u770b\u8fd9\u4e2a\u6837\u4f8b\uff0c\u663e\u7136\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a \\(a_1=6\\) \uff0c \\(a_2=2\\) \uff0c \\(a_4=1\\) \uff0c\u5176\u4ed6\u5730\u65b9\u6211\u4eec\u4e0d\u77e5\u9053\u4ed6\u80fd\u586b\u591a\u5c11\u3002\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u53ef\u4ee5\u53d6\u591a\u5c11\u4e2a\u6570\uff0c\u6bd4\u5982 \\(a_3\\) \u53ef\u4ee5\u662f \\([3,4,5,7]\\) \uff0c\u90a3\u4e48\u8fd9\u91cc\u5c31\u67094\u79cd\u60c5\u51b5\u3002\u6240\u4ee5\u7b54\u6848\u4f1a\u4e584\uff0c\u518d\u5230\u540e\u9762\u7684\u53d6\u503c\u4e0d\u786e\u5b9a\u7684\u5730\u65b9\uff0c\u7ed3\u679c\u7684\u53ef\u80fd\u6027\u5c31\u4f1a\u5c111\u3002</p> <p>\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u603b\u7ed3\u4e00\u4e0b\uff0c\u521a\u5f00\u59cb\u53ef\u4ee5\u53d6\u503c\u7684\u6570\u5b57\u6570\u91cf\u4e3a \\(n-a_1\\) \uff0c\u7136\u540e\u6bcf\u6b21\u9047\u5230\u4e00\u4e2a\u65b0\u7684\u6570\u5b57\uff0c\u53d6\u503c\u5c31\u4f1a\u589e\u52a0 \\(a_i-a_{i-1}-1\\) \u79cd\uff0c\u7136\u540e\u5982\u679c\u76f8\u7b49\u7684\u8bdd\uff0c\u5c31\u4f1a-1\u79cd\u3002\u800c\u4e0d\u6210\u7acb\u7684\u60c5\u51b5\u663e\u7136\u53ea\u6709\u6570\u7ec4\u4e3a\u975e\u9012\u51cf\u65f6\u3002</p> <pre><code>constexpr int mod = 998244353;\n\nvoid solve()\n{\n    int n;\n    cin&gt;&gt;n;\n    vi a(n+1);\n    for(int i=1;i&lt;=n;i++)\n        cin&gt;&gt;a[i];\n    int have=n-a[1];\n    ll res=1;\n    for(int i=2;i&lt;=n;i++){\n        if(a[i]==a[i-1]){\n            res=res*have%mod;\n            have--;\n        }else if(a[i]&lt;a[i-1]){\n            have+=a[i-1]-a[i]-1;\n        }else{\n            cout&lt;&lt;\"0\\n\";\n            return;\n        }\n    }\n    cout&lt;&lt;res&lt;&lt;'\\n';\n}\n</code></pre>"},{"location":"cp_solving/nowcoder/102303/#e","title":"E","text":"<p>\u8fd9\u4e2a\u9898\u5c31\u662f\u8bf4\u6570\u7ec4 \\(a\\) \u548c \\(b\\) \u90fd\u8981\u53d6 \\(m\\) \u4e2a\u6570\u5b57\uff0c\u4e14 \\(a\\) \u53d6\u7684 \\(m\\) \u4e2a\u6570\u5b57\uff0c\u4e0b\u6807\u90fd\u6bd4 \\(b\\) \u9009\u51fa\u6765\u7684\u6570\u5b57\u8981\u5c0f\u3002\u8981\u4f7f\u5f97\u4ed6\u4eec\u7684\u548c\u6700\u5c0f\u3002</p> <p>\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7b97\u51fa\u524d \\(i\\) \u4e2a\u6570\u5b57\u91cc\u9762\uff0c\\(a\\) \u53d6 \\(m\\) \u4e2a\u6570\u5b57\u7684\u6700\u5c0f\u503c\u3002\u8fd8\u6709 \\(b\\) \u4ece \\([i,n]\\) \u4e4b\u95f4\u9009 \\(m\\) \u4e2a\u6570\u5b57\u7684\u6700\u5c0f\u503c\u3002</p> <p>\u53ef\u4ee5\u7528\u4f18\u5148\u961f\u5217\u6216 multiset \u6765\u7ef4\u62a4\u3002\u5f53\u6570\u5b57\u591a\u4e8em\u4e2a\u65f6\u5220\u9664\u6700\u5927\u7684\u6570\u5b57\u3002</p> <p>\u6ce8\u610fmultiset\u5220\u9664val\u65f6\u4f1a\u5220\u9664\u6240\u6709\u7b49\u4e8e\u8fd9\u4e2a\u503c\u7684\u5143\u7d20\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528st.erase(st.lower_bound(val))\u6216st.erase(st.find(val))\u6216st.erase(prev(st.end())\u3002</p> <pre><code>void solve()\n{\n    int n,m;\n    cin&gt;&gt;n&gt;&gt;m;\n    vi a(n+1),b(n+1);\n    vl s1(n+1),s2(n+1);\n    multiset&lt;int&gt;st1,st2;\n    for(int i=1;i&lt;=n;i++){\n        cin&gt;&gt;a[i];\n    }\n    for(int i=1;i&lt;=n;i++){\n        cin&gt;&gt;b[i];\n    }\n    ll sum=0;\n    for(int i=1;i&lt;=n;i++){\n        st1.insert(a[i]);\n        sum+=a[i];\n        while(sz(st1)&gt;m){\n            sum-=*st1.rbegin();\n            st1.erase(prev(st1.end()));\n        }\n        s1[i]=sum;\n    }\n    sum=0;\n    for(int i=n;i&gt;=1;i--){\n        st2.insert(b[i]);\n        sum+=b[i];\n        while(sz(st2)&gt;m){\n            sum-=*st2.rbegin();\n            st2.erase(prev(st2.end()));\n        }\n        s2[i]=sum;\n    }\n    ll ans=LNF;\n    for(int i=m;i+m&lt;=n;i++){\n        cmin(ans,s1[i]+s2[i+1]);\n    }\n    cout&lt;&lt;ans&lt;&lt;'\\n';\n}\n</code></pre>"},{"location":"cp_solving/nowcoder/102303/#f","title":"F","text":"<p>\u610f\u601d\u5c31\u662f\u8bf4\u6bcf\u4e00\u4e2a\u5b50\u6570\u7ec4\uff0c\u5fc5\u987b\u6709\u4e00\u4e2a\u6570\u5b57\u5728\u8fd9\u4e2a\u5b50\u6570\u7ec4\u4e2d\u53ea\u51fa\u73b0\u4e00\u6b21\uff0c\u4e14\u4e0d\u540c\u7684\u6570\u5b57\u6700\u5c11\u3002</p> <p>\u6211\u4eec\u5148\u4ece\u5c0f\u7684\u60c5\u51b5\u5f00\u59cb\u8003\u8651\uff0c</p> <p>\\(n\\) = 3 \u65f6\uff0c\u5f88\u663e\u7136\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u4e3a \\([1,2,1]\\) \u6216 \\([2,1,2]\\) \u3002</p> <p>\u90a3\u6211\u4eec\u7ee7\u7eed \\(n=4\\) \u65f6\uff0c\u5fc5\u987b\u5f97\u591a\u7528\u4e00\u4e2a \\(3\\) \u4e86\u3002</p> <p>\u7136\u540e\u8fd9\u65f6\u5019\u53ef\u4ee5\u53d1\u73b0\uff0c\u5728 \\([1,2,1,3]\\) \u540e\u9762\u52a0\u4e00\u4e2a \\([1,2,1]\\) \uff0c\u8fd9\u4ecd\u7136\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u6570\u7ec4\u3002</p> <p>\u6240\u4ee5\u6211\u4eec\u6bcf\u6b21\u90fd\u4f1a\u589e\u52a0\u4e00\u4e2a\u65b0\u7684\u6570\u5b57\uff0c\u7136\u540e\u628a\u4e4b\u524d\u7684\u6570\u7ec4\u62fc\u5728\u540e\u9762\u3002</p> <p>\u6bd4\u5982\u5982\u679c\u957f\u5ea6\u5927\u4e8e 7 \uff0c\u90a3\u4e48\u80af\u5b9a\u8981\u52a0\u4e00\u4e2a 4\uff0c\u540e\u9762\u53c8\u80fd\u5728\u62fc\u4e0a \\([1,2,1,3,1,2,1]\\) \u3002</p> <pre><code>void solve()\n{\n    int n;\n    cin&gt;&gt;n;\n    vi ans;\n    int x=1;\n    ans.push_back(1);\n    while(sz(ans)&lt;n){\n        vi tmp=ans;\n        ++x;\n        ans.push_back(x);\n        for(auto y:tmp)\n            ans.push_back(y);\n    }\n    cout&lt;&lt;x&lt;&lt;'\\n';\n    for(int i=0;i&lt;n;i++)\n        cout&lt;&lt;ans[i]&lt;&lt;\" \\n\"[i==n-1];\n}\n</code></pre> <p>\u611f\u89c9\u8fd9\u9898\u53ef\u4ee5\u5f53div2B(\u6ca1\u6709\u5c2c\u9ed1</p> <p>\u4e4b\u524d\u7684\u5f88\u591a\u5468\u8d5bF\u8fd8\u633a\u96be\u7684\u3002\u8fd9\u573a\u5e94\u8be5\u662f\u975e\u5e38\u7b80\u5355\u7684\u4e00\u573a\u3002\u6211\u4e5f\u662f\u770b\u5230\u5927\u5bb6\u8bf4</p>"},{"location":"daily/2025/0312/","title":"2025-03-12","text":"<p>\u6628\u665a\u7684 div. 3 \u4eca\u5929\u51fa\u5206\u4e86\u3002\u3002</p> <p>\u672c\u4ee5\u4e3a\u52a0\u5b8c\u540e\u4f1a\u79bb\u84dd\u540d\u53ea\u6709\u51e0\u5206\uff0c\u4f46\u662f\u53d8\u6210\u4e861611\uff0c\u6211\u524d\u9762\u6709\u5927\u6982\u4e00\u767e\u591a\u4ebaFST\u4e86\uff0chack\u9636\u6bb5\u6211\u524d\u9762\u7684\u670950\u5de6\u53f3\u88abhack\u3002\u3002\u3002</p> <p>\u597d\u597d\u73cd\u60dc\u4e0b\u6b64\u523b\u5427\uff0c\u4e5f\u8bb8\u8fc7\u4e24\u5929\u53c8\u56de\u53bb\u4e86\u3002</p> <p>\u6700\u8fd1\u9700\u8981\u66f4\u65b0\u7684\u5185\u5bb9\u6709</p> <ul> <li> 24\u9655\u897f\u7701\u8d5bB\u9898</li> <li> \u676d\u7535\u6625\u5b63\u8054\u8d5b(1) 1002\u9898</li> <li> Codeforces Round 1009 Div. 3</li> <li> CF2063D</li> <li> CF2078E</li> </ul> <p>\u6709\u7684\u662f\u4e4b\u524d\u51e0\u5929\u5199\u7684\u4f46\u6ca1\u6709\u53ca\u65f6\u66f4\u65b0... \u5f97\u8d76\u7d27\u66f4\u4e00\u4e0b\u4e86\u3002</p> <p>\u7a7a\u95f2\u7684\u65f6\u5019\u6253\u7b97\u7a0d\u5fae\u5199\u70b9\u524d\u7aef\u5565\u7684\uff0c\u4e00\u6b21\u7a0d\u5fae\u5199\u4e00\u4f1a\uff0c\u5237\u70b9 <code>contribution</code> ... \u60f3\u597d\u597d\u8bb0\u5f55\u4e00\u4e0b\uff0c\u770b\u5230\u5e95\u6211\u591a\u4e45\u80fd\u7a33\u5b9a\u84dd\u540d\uff0c\u591a\u4e45\u80fd\u4e0a CM \uff0c\u53c8\u6216\u8005\u65e0\u6cd5\u8fbe\u6210\u3002</p>"},{"location":"daily/2025/0312/#_1","title":"\u4eca\u65e5\u505a\u9898","text":"<ol> <li>\u676d\u7535\u6625\u5b63\u8054\u8d5b(1) 1002</li> <li>CF2063D</li> </ol> <p>\u676d\u7535\u90a3\u4e2a1002\u6709\u70b9\u96be\u7684\uff0c\u5176\u5b9e\u7ea6\u7b49\u4e8e\u6284\u522b\u4eba\u4ee3\u7801\u7684\uff0c\u770b\u5f97\u61c2\uff0c\u7b49\u4f1a\u5199\u535a\u5ba2\u597d\u597d\u603b\u7ed3\u4e00\u4e0b\u5427\u3002 </p> <p>CF2063D\u662f\u4e00\u4e2a*2000\u7684\u9898\uff0c\u4f46\u611f\u89c9rating\u6807\u9ad8\u4e86\uff0c\u5176\u5b9e\u4e0d\u548b\u96be\uff0c\u6ca1\u770b\u9898\u89e3\u5199\u51fa\u6765\u4e86\u3002</p> <p>\u8017\u65f6\u4e00\u4e2a\u534a\u5c0f\u65f6\uff0c\u73b0\u572801:35\uff0c\u7ec8\u4e8e\u628a\u8fd9\u4e9b\u535a\u5ba2\u7ed9\u8865\u5b8c\u4e86\u3002\u3002\u3002\u4e5f\u53ef\u80fd\u662f\u4e00\u4e2a\u5c0f\u65f6\uff0c\u4e0d\u592a\u8bb0\u5f97\u4e86\u3002\u3002\u3002</p>"},{"location":"daily/2025/0318/","title":"3\u670818\u65e5","text":""},{"location":"daily/2025/0318/#24h","title":"24\u6e56\u5317\u7701\u8d5bH","text":"<p>\u53bb\u5e74\u6bd4\u8d5b\u6ca1\u65f6\u95f4\u770b\uff0c\u867d\u7136\u770b\u4e86\u4e5f\u80af\u5b9a\u4e0d\u4f1a\u5199\u3002\u5076\u7136\u7ffb\u9898\u5355\u5728\u72b6\u538bDP\u91cc\u7ffb\u5230\uff0c\uff0c\u4f46\u662f\u6211\u8fde\u5565\u53eb\u72b6\u538bDP\u90fd\u4e0d\u592a\u8bb0\u5f97\u4e86\uff0c\u4e4b\u524d\u53ea\u770b\u8fc7\u51e0\u9898\u3002</p> <p>\u5176\u5b9e\u662f\u6628\u5929\u5148\u770b\u4e86\u4e0b\u9898\u89e3\uff0c\u5927\u6982\u77e5\u9053\u8981\u7528\u72b6\u538b DP \uff0c\u7136\u540e\u6bcf\u4e24\u4f4d\u8868\u793a\u4e00\u4e2a\u6709\u9c7c\u7684\u5355\u5143\u683c\u7684\u72b6\u6001\u3002</p> <p>\u56e0\u4e3a\u6bcf\u4e2a\u6c60\u5858\u7684\u9c7c\u7684\u6570\u91cf\u6700\u591a\u53ea\u67093\uff0c\u6240\u4ee5\u6211\u4eec\u75282\u4f4d\u4e8c\u8fdb\u5236\u4f4d\u5c31\u53ef\u4ee5\u8868\u793a\u51fa\u6765\u3002\u603b\u5171\u9700\u8981 \\(2k\\) \u4f4d\u3002\u7531\u4e8e \\(k\\) \u5f88\u5c0f\uff0c\u6240\u4ee5\u5c31\u53ef\u4ee5\u8fd9\u6837\u3002</p> <p>\u5e76\u4e14\u8fd8\u6709\u4e00\u4e2a\u5f88\u5173\u952e\u7684\u4fe1\u606f\u5c31\u662f\uff0c\u6bcf\u4e2a\u70b8\u5f39\u6700\u591a\u53ea\u80fd\u70b8\u4e94\u4e2a\u5355\u5143\u683c\uff0c\u5e76\u4e14\u5f62\u72b6\u662f\u56fa\u5b9a\u7684\u3002\u6240\u4ee5\u6bcf\u4e2a\u6c60\u5858\u6700\u591a\u53ea\u4f1a\u88ab5\u4e2a\u5355\u5143\u683c\u7ed9\u70b8\u5230\u3002</p> <p>\u6240\u4ee5\u603b\u5171\u6700\u591a\u53ea\u6709 \\(5k\\) \u4e2a\u6c60\u5858\u6709\u53ef\u80fd\u88ab\u653e\u7f6e\u70b8\u5f39\u3002\u6211\u4eec\u679a\u4e3e\u6bcf\u4e00\u4e2a\u72b6\u6001\uff0c\u770b\u4f7f\u7528\u6bcf\u4e00\u4e2a\u70b8\u5f39\u4f1a\u8f6c\u79fb\u5230\u4ec0\u4e48\u72b6\u6001\u3002</p> <p>\u6700\u540e\u6211\u4eec\u9700\u8981\u8f93\u51fa\u9c7c\u5168\u90fd\u88ab\u70b8\u4f3c\u7684\u6700\u5c0f\u7684\u7b54\u6848\uff0c\u4e5f\u5c31\u662f \\(dp_0\\) \u3002</p> <pre><code>int mp[1001][1001];\n\nvoid ChatGptDeepSeek()\n{\n    memset(mp, -1, sizeof mp);\n    // cerr&lt;&lt;mp[0][0]&lt;&lt;'\\n';\n    int n, m, k;\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;\n    vector&lt;int&gt; x(k), y(k), a(k);\n    int now = 0;\n    // map&lt;pair&lt;int, int&gt;, int&gt; mp;\n    for (int i = 0; i &lt; k; i++) {\n        cin &gt;&gt; x[i] &gt;&gt; y[i] &gt;&gt; a[i];\n        mp[x[i]][y[i]] = i;\n        // mp[{ x[i], y[i] }] = i;\n        now |= (a[i] &lt;&lt; (2 * i));\n    }\n    // 10 01 10\n    // cerr &lt;&lt; now &lt;&lt; '\\n';\n    vector&lt;int&gt; dp(now + 1, 666);\n    dp[now] = 0;\n    vector&lt;pair&lt;int, int&gt;&gt; dir { { 0, 0 }, { 0, 1 }, { 0, -1 }, { 1, 0 }, { -1, 0 } };\n    auto calc = [&amp;](int now_val, int i, int j) {\n        for (auto it : dir) {\n            int nx = i + it.first, ny = j + it.second;\n            if (nx &gt; n || nx &lt; 1 || ny &gt; m || ny &lt; 1)\n                continue;\n            if (mp[nx][ny] != -1) {\n                int xx = (now_val &gt;&gt; (2 * mp[nx][ny])) &amp; 3;\n                assert(xx &lt;= 3 &amp;&amp; xx &gt;= 0);\n                now_val ^= (xx &lt;&lt; (2 * mp[nx][ny]));\n                xx = max(0, xx - 1);\n                now_val |= (xx &lt;&lt; (2 * mp[nx][ny]));\n            }\n        }\n        return now_val;\n    };\n    //k * 2**20\n    //k*1e6*5\n    for (int i = 0; i &lt; k; i++) {\n        for (auto it : dir) {\n            int nx = x[i] + it.first, ny = y[i] + it.second;\n            if (nx &gt; n || nx &lt; 1 || ny &gt; m || ny &lt; 1)\n                continue;\n            // for (int _ = 1; _ &lt;= 3; _++)\n            for (int j = now; j &gt;= 0; j--) {\n                int nxt = calc(j, nx, ny);\n                assert(nxt &lt;= j);\n                dp[nxt] = min(dp[nxt], dp[j] + 1);\n            }\n        }\n    }\n    cout &lt;&lt; dp[0] &lt;&lt; '\\n';\n}\n</code></pre> <p>\u7136\u540e\u5176\u5b9e\u5c31\u662f\u4e00\u4e9b\u7b80\u5355\u7684\u64cd\u4f5c\u4e86\u3002\u3002\u4f46\u662f\u6211\u628a map \u6539\u6210\u6570\u7ec4\u5c31\u4e0d\u8d85\u65f6\u4e86\u3002\u3002</p> <p>\u4f46\u662f\u65f6\u95f4\u6700\u591a 500ms \u4e86\uff0c\u7b97\u6bd4\u8f83\u6162\u7684\u4e86\u3002\u770b\u4e86\u522b\u4eba\u7684\u66f4\u5feb\u4ee3\u7801\u53d1\u73b0\uff0c\u6709\u7684\u662f DFS \uff0c\u6709\u7684\u662f\u628a\u72b6\u6001\u653e\u5916\u5c42\uff0c\u5982\u679c\u4e0d\u662f\u5408\u6cd5\u72b6\u6001\u5c31\u8df3\u8fc7\uff0c\u53ef\u4ee5\u51cf\u5c11\u5f88\u591a\u7684\u65f6\u95f4\u3002</p> <p>\u6539\u4e86\u4e4b\u540e\u53d8\u6210 240ms\u3002\u3002\u867d\u7136\u5199\u4e86\u5341\u5206\u949f\u591a\uff0c\u4e14\u5199\u9519\u4e86\u770b\u4e86\u4e00\u4f1a\u624d\u770b\u51fa\u6765\u3002\u3002\u6211\u628a <code>ny&gt;m || ny&lt;1</code> \u5199\u6210\u4e86 <code>ny&gt;m || ny&gt;m</code> \u3002</p> <pre><code>    for (int i = now; i &gt;= 0; i--) {\n        {\n            int tmp = i;\n            bool skip = false;\n            for (int j = 0; j &lt; k; j++) {\n                if ((tmp &amp; 3) &gt; a[j]) {\n                    skip = true;\n                    break;\n                }\n                tmp &gt;&gt;= 2;\n            }\n            if (skip)\n                continue;\n        }\n        // cerr&lt;&lt;i&lt;&lt;\" \"&lt;&lt;dp[i]&lt;&lt;\" \\n\";\n        for (int j = 0; j &lt; k; j++) {\n            for (auto it : dir) {\n                int nx = x[j] + it.first, ny = y[j] + it.second;\n                if (nx &gt; n || nx &lt; 1 || ny &gt; m || ny &lt; 1)\n                    continue;\n                int nxt = calc(i, nx, ny);\n                // cerr&lt;&lt;nxt&lt;&lt;'\\n';\n                dp[nxt] = min(dp[nxt], dp[i] + 1);\n            }\n        }\n    }\n</code></pre>"},{"location":"daily/2025/0318/#24g","title":"24\u6e56\u5317\u7701\u8d5bG","text":"<p>\u4e50\uff0c\u5199\u4e86\u4e09\u4e2a\u5c0f\u65f6\u3002\u3002\u3002\u867d\u7136\u524d\u9762\u4e00\u76f4\u5728\u5199\u9519\u8bef\u7684\u505a\u6cd5\u3002\u3002</p> <p>\u6700\u540e\u7cbe\u529b\u4e0d\u592a\u884c\u4e86\uff0c\u5b9e\u5728\u770b\u4e0d\u51fa\u6765\u3002\u3002\u95ee\u4e86\u4e0bdeepseek\uff0c\u5e2e\u6211\u627e\u5230\u4e86\u4e00\u4e9b\u95ee\u9898\u3002\u56e0\u4e3a\u5199\u9519\u4e86\u91cd\u65b0\u5199\u4e00\u4e0b\uff0c\u7136\u540e\u5fd8\u8bb0\u521d\u59cb\u5316\u5e76\u67e5\u96c6\u4e86\u3002\u3002</p> <p>\u7136\u540e\u5360\u4e86\u65b0\u683c\u5b50\u7684\u8bdd\uff0c\u5468\u56f4\u6240\u6709\u7684\u70b9\u7684\u6c14\u90fd\u4e0d\u80fd\u6709\u8fd9\u4e2a\u683c\u5b50\u3002\u8fd9\u4e00\u70b9\u6211\u4e5f\u77e5\u9053\u554a\uff0c\u4f46\u662f\u8111\u5b50\u975e\u5e38\u6df7\u4e71\u4e86\u3002\u3002\u7136\u540e\u778e\u6539\u4e86\u4e0b\u8fc7\u4e86\u3002</p> <p>\u8fd8\u662f\u5f88\u9ebb\u70e6\u7684\u4e00\u4e2a\u9898\u7684\uff0c\u7136\u540e\u6211\u662f\u6ca1\u6709\u60f3\u5230\u6bcf\u4e2a\u8fde\u901a\u5757\u7684\u6c14\u90fd\u653e\u96c6\u5408\u91cc\u4e0d\u4f1aTLE MLE\u3002\u3002\u3002\u4f46\u662f\u6bcf\u4e2a\u8fde\u901a\u5757\u6bcf\u6b21 DFS BFS\u7b97\u6c14\u4e5f\u662f\u6ca1\u95ee\u9898\u3002\u3002</p> <p>\u786e\u5b9e\u5c31\u662f\u6a21\u62df\u3002\u4e0d\u7136\u6211\u4e5f\u5199\u4e0d\u4e86\u8fd9\u4e48\u4e45\uff0c\u53ef\u80fd\u5c31\u4e00\u70b9\u4e1c\u897f\u90fd\u6572\u4e0d\u4e86\u3002</p> <p>\u611f\u89c9 BFS DFS \u540c\u6837\u4e0d\u597d\u5199\u3002\u771f\u8981\u54c8\u6c14\u4e86\u3002</p> <p>\u867d\u7136\u6548\u7387\u5f88\u4f4e\uff0c\u4f46\u4e5f\u662f\u591a\u5199\u4e00\u9898\u5427\u3002\u4e5f\u8be5\u4f11\u606f\u4e00\u4e0b\u4e86\u3002</p> <pre><code>int board[20][20];\nint p[20][20];\n\nconstexpr int N = 5e5;\nint cnt[N + 1], f[N + 1];\n// bool vis[N + 1];\n// vector&lt;int&gt; f(9);\nint find(int x)\n{\n    return f[x] == x ? x : f[x] = find(f[x]);\n}\nvoid ChatGptDeepSeek()\n{\n    // \u770b\u81ea\u5df1\u4e0a\u4e0b\u5de6\u53f3\u7684\u540c\u8272\u7684\n    // \u5982\u679c\u6709 \u90a3\u4e48\u52a0\u5165\u5b83\u4eec\u6240\u5728\u7684\u8054\u901a\u5757\n    // \u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u8054\u901a\u7684\u4fe1\u606f\n    //\n    // \u770b\u5b83\u5468\u56f4\u7684\u989c\u8272\u4e0d\u540c\u7684 \u82e5\u6c14\u4e3a0\u4e86 \u5219\u8be5\u5168\u90e8\u79fb\u9664\u4e86\n    // \u600e\u4e48\u7528\u5e76\u67e5\u96c6\u5462\uff1f\u597d\u50cf\u8fd8\u884c \u8bd5\u8bd5 \uff0c\u5176\u5b9e\u6ca1\u7528\u8fc7\u51e0\u6b21\u5e76\u67e5\u96c6\uff08\n    for (int i = 0; i &lt;= 19; i++)\n        for (int j = 0; j &lt;= 19; j++)\n            board[i][j] = -1;\n    int m;\n    cin &gt;&gt; m;\n\n    vector&lt;pair&lt;int, int&gt;&gt; dir { { -1, 0 }, { 1, 0 }, { 0, -1 }, { 0, 1 } };\n    vector&lt;set&lt;pair&lt;int, int&gt;&gt;&gt; Qi(m + 1, set&lt;pair&lt;int, int&gt;&gt;());\n\n    int res = 0;\n    auto Eat = [&amp;](auto&amp;&amp; self, int x, int y, int v) -&gt; void {\n        // cerr &lt;&lt; x &lt;&lt; \" \" &lt;&lt; y &lt;&lt; '\\n';\n        res++;\n        assert(x &lt;= 19 &amp;&amp; x &gt;= 1 &amp;&amp; y &lt;= 19 &amp;&amp; y &gt;= 1);\n        board[x][y] = -1;\n        for (auto it : dir) {\n            int nx = x + it.first, ny = y + it.second;\n            if (nx &gt; 19 || nx &lt; 1 || ny &gt; 19 || ny &lt; 1 || board[nx][ny] == -1)\n                continue;\n            if (board[nx][ny] != v) {\n                int idx = find(p[nx][ny]);\n                assert(idx &lt;= m &amp;&amp; idx &gt; 0);\n\n                Qi[idx].insert({ x, y });\n            } else\n                self(self, nx, ny, v);\n        }\n    };\n    for (int i = 1; i &lt;= m; i++) {\n        res = 0;\n        int x, y;\n        cin &gt;&gt; x &gt;&gt; y;\n        board[x][y] = (i % 2);\n        p[x][y] = i;\n        f[i] = i;\n\n        // \u5148\u7b97\u5468\u56f4\u7684\u53cd\u8272\u7684\u6c14\n        for (auto it : dir) {\n            int nx = x + it.first, ny = y + it.second;\n            if (nx &gt; 19 || nx &lt; 1 || ny &gt; 19 || ny &lt; 1 || board[nx][ny] == -1)\n                continue;\n            int idx = find(p[nx][ny]);\n            // if(!idx) continue;\n            assert(idx &lt;= m &amp;&amp; idx &gt; 0);\n\n            if (!Qi[idx].empty())\n                Qi[idx].erase({ x, y });\n            if (p[nx][ny] % 2 != i % 2) {\n                // dbg(i, nx, ny);\n\n                if (Qi[idx].empty()) {\n                    // dbg(nx, ny, idx);\n                    Eat(Eat, nx, ny, p[nx][ny] % 2);\n                    // f[idx] = 0;\n                }\n            }\n        }\n        for (auto it : dir) {\n            int nx = x + it.first, ny = y + it.second;\n            if (nx &gt; 19 || nx &lt; 1 || ny &gt; 19 || ny &lt; 1)\n                continue;\n            if (board[nx][ny] == -1)\n                Qi[i].insert({ nx, ny });\n        }\n        for (auto it : dir) {\n            int nx = x + it.first, ny = y + it.second;\n            if (nx &gt; 19 || nx &lt; 1 || ny &gt; 19 || ny &lt; 1 || (board[nx][ny] != i % 2))\n                continue;\n            int idx = find(p[nx][ny]);\n            if (idx == i)\n                continue;\n            assert(idx &lt;= m &amp;&amp; idx &gt; 0 &amp;&amp; board[nx][ny] == board[x][y]);\n            for (auto it : Qi[idx]) {\n                // if (board[it.first][it.second] == -1)\n                Qi[i].insert(it);\n            }\n            f[idx] = i;\n        }\n        // dbg(Qi[i]);\n        // cerr &lt;&lt; Qi[i].size() &lt;&lt; '\\n';\n        int val = res;\n        res = 0;\n        if (Qi[i].empty())\n            Eat(Eat, x, y, i &amp; 1);\n        if (i &amp; 1) {\n            cout &lt;&lt; res &lt;&lt; \" \" &lt;&lt; val &lt;&lt; '\\n';\n        } else {\n            cout &lt;&lt; val &lt;&lt; \" \" &lt;&lt; res &lt;&lt; '\\n';\n        }\n        // dbg(Qi[find(1)]);\n        // dbg(Qi[2]);\n    }\n    // \u6211\u8981\u54c8\u6c14\u4e86\n}\n</code></pre>"},{"location":"daily/2025/0327/","title":"2025-03-27/28","text":""},{"location":"daily/2025/0327/#0328","title":"0328","text":"<p>\u73b0\u5728 00:08 \uff0c\u4e5f\u7b97\u662f28\u53f7\u54c8\u3002\u3002</p>"},{"location":"daily/2025/0327/#today","title":"Today","text":"<p>\u7761\u524d\u6765\u4e00\u9053\u9898\uff0c\u7531\u4e8eCF\u505a\u4e0d\u4e86\uff0c\u4e8e\u662f\u6d1b\u8c37\u968f\u4fbf\u627e\u4e86\u9053\u7eff\u9898\u3002\u600e\u4e48\u8fd9\u4e48\u6c34\u9898\u3002\u3002\u3002</p> <p>https://blog.wuyi.host/cp_solving/2025/0313/#p1013</p> <p>ABC398E\uff0c\u600e\u4e48\u8fd9\u4e48\u7b80\u5355\u3002\u3002\u3002\u6bd4\u8d5b\u65f6\u5148\u770bF\u4e86\uff0c\u4eba\u7a0d\u5fae\u591a\u4e00\u70b9\uff0c\u4f46\u4e00\u76f4\u9519\u7684\u601d\u8def\u3002E\u771f\u7684\u5f88\u7b80\u5355\u3002</p> <p>https://blog.wuyi.host/cp_solving/AtCoder/ABC398/#e</p> <p>\u4e0a\u5348\u8865\u4e86 F \uff0c\u7528 KMP \u67e5\u6700\u957f\u7684\u56de\u6587\u540e\u7f00\u3002</p> <p>https://blog.wuyi.host/cp_solving/AtCoder/ABC398/#f</p> <p>\u4e0b\u5348\u770b\u4e86\u4e00\u4e2a\u5176\u4ed6\u7684 KMP \u7684\u9898\uff0c\u6d1b\u8c37P10915 \u7eff\u9898\uff0c\u53bb\u5e74\u7684\u4e00\u9053\u84dd\u6865B\u7ec4\u56fd\u8d5b\u9898\u3002\u5199\u9898\u89e3\u7684\u6c34\u5e73\u6709\u70b9\u8fc7\u4e8e\u4f4e\u4e86\uff0c\uff0c\u53ef\u80fd\u81ea\u5df1\u4e5f\u770b\u4e0d\u61c2\u3002</p> <p>https://blog.wuyi.host/cp_solving/2025/0313/#p10915</p>"},{"location":"daily/2025/0327/#0327","title":"0327","text":""},{"location":"daily/2025/0327/#today_1","title":"Today","text":"<p>\u4eca\u65e5\u6ca1\u5199\u5565\u9898\u6765\u7740\u3002\u3002\u3002</p> <p>\u8865\u4e86\u4e0a\u5468\u7684\u676d\u7535\u6625\u5b63\u8d5b03\u7684 1001 1003 1010\u3002</p> <p>\u8bb0\u5f55\u5728 https://blog.wuyi.host/cp_solving/2025hdu-spring/03/ </p>"},{"location":"daily/2025/0327/#tomorrow","title":"Tomorrow","text":"<p>\u8865\u4e0a\u573a\u7684 ABC\u7684EF\uff0c\u62d6\u4e86\u4e00\u5468... \u660e\u5929\u4e00\u5b9a\u5f97\u8865\u4e86\uff0c\u96be\u5ea6\u5e94\u8be5\u4e0d\u662f\u5f88\u9ad8\uff0c\u4e0a\u5348\u673a\u623f\u7684\u8bfe\u5b8c\u6210\u3002</p> <p>https://atcoder.jp/contests/abc398/tasks/abc398_e</p> <p>https://atcoder.jp/contests/abc398/tasks/abc398_f</p> <p>\u4e0b\u5348\u505a\u4e09\u9053 cf rating <code>*1600-*1800</code> \u7684\u9898\u76ee\u3002</p> <p>\u665a\u4e0a\u6253\u676d\u7535\u6bd4\u8d5b\u3002</p>"},{"location":"daily/2025/0331/","title":"2025-03-31","text":"<p>2025-03-31</p> <p>\u6628\u665a\u7761\u89c9\u65f6\uff0c\u770b\u5230\u7fa4\u91cc\u6709\u4eba\u90fd\u5728\u53d1\u4e00\u4e2aOI\u91cd\u5f00\u6e38\u620f\u7684\u622a\u56fe\u3002\u3002\u611f\u89c9\u633a\u6709\u610f\u601d\uff0c\u4e8e\u662f\u4f53\u9a8c\u4e86\u4e00\u4e0b\uff0c\u611f\u89c9\u597d\u559c\u6b22OI\u90a3\u79cd\u7ecf\u5386\u3002</p> <p>https://qoj.ac/files/Little09sLife/index.html</p> <p>\u6211\u77e5\u9053\u90a3\u5bf9\u6211\u4e0d\u592a\u53ef\u80fd\uff0c\u5373\u4f7f\u73b0\u5728\u6211\u4e5f\u662f\u5f88\u83dc\u5f88\u83dc\uff0c\u4ee5\u524d\u66f4\u662f\u7535\u8111\u90fd\u6ca1\u548b\u78b0\u8fc7\u7684\uff0c\u4f46\u6211\u73b0\u5728\u5b8c\u5168\u53ef\u4ee5\u5e7b\u60f3\u81ea\u5df1\u662f OIer \uff0c\u73b0\u5728\u4e5f\u540c\u6837\u53ef\u4ee5\u6253\u6bd4\u8d5b\u3002</p> <p>\u6211\u73b0\u5728\u662f\u4e00\u540d OIer\uff0c\u6211\u8981\u597d\u597d\u5b66\u7b97\u6cd5\uff0c\u597d\u597d\u5237\u9898\u3002\u73b0\u5b9e\u91cc\u7684\u5b66\u4e60\uff0c\u53ef\u4e0d\u662f\u80fd\u70b9\u70b9\u5c5e\u6027\u5c31\u80fd\u5b66\u4f1a\u7b97\u6cd5\u7684\u3002\u3002</p> <p>\u597d\u597d\u73cd\u60dc\u6700\u540e\u7684\u4e00\u5e74\u4e0d\u5230\u7684\u65f6\u95f4\uff0c\u4e4b\u540e\u5c31\u8981\u52a0\u8bad\u6587\u5316\u8bfe\u4e86\u3002</p>"},{"location":"daily/2025/0401/","title":"4\u67081\u65e5","text":"<p>2025-04-01 \u6700\u8fd1\u51c6\u5907\u591a\u505a\u70b9DP\u3002\u3002\u3002</p>"},{"location":"daily/2025/0401/#_1","title":"\u603b\u7ed3","text":"<p>\u4eca\u65e5\u6548\u7387\u8f83\u4f4e\uff0c\u767d\u5929\u770b\u4e86\u7b1b\u5361\u5c14\u6811\uff0c\u6d1b\u8c37\u6a21\u677f\u9898\uff0c\u987a\u4fbf\u628a\u676d\u5ddeM\u8865\u4e86\uff0c\u4e0d\u548b\u96be\u3002</p> <p>\u665a\u4e0a\u53ea\u5199\u4e86\u4e00\u9053\u7eff\u9898\u3002\u3002\u7136\u540e\u73b0\u5728\u662f1\u70b953\uff0c\u4e5f\u662f\u628a\u90a3\u4e2aP2679\u7684\u8865\u4e86\u3002\u3002</p> <p>P5658\u8fd9\u4e2a\uff0c\u9898\u5355\u91cc\u8bf4\u662f\u6811\u5f62DP\uff0c\u597d\u597d\u597d\uff0c\u8fd8\u662f\u6709\u4e00\u4e9b\u9700\u8981\u7406\u89e3\u7684\u4e1c\u897f\u3002\u660e\u5929\u63a5\u7740\u505aDP\u9898\u5355\u3002\u3002</p>"},{"location":"daily/2025/0401/#p1095-","title":"\u6d1b\u8c37P1095 \u666e\u53ca/\u63d0\u9ad8-","text":"<p>2025-04-01 tag: DP</p> <p>\u9ec4\u9898\uff0c\u4f46\u662f\u8fd8\u662f\u505a\u4e86\u56db\u4e94\u5341\u5206\u949f\u3002\u3002\u3002\u6ca1\u5565\u597d\u8bf4\u7684\u3002</p> <pre><code>void ChatGptDeepSeek()\n{\n    int m, s, t;\n    cin &gt;&gt; m &gt;&gt; s &gt;&gt; t;\n    // \u6c34\u9898 \u679a\u4e3e\u7528\u4e86\u591a\u5c11\u6b21\u9b54\u6cd5\u5c31\u884c\n\n    vector&lt;int&gt; d(t + 1), T(t + 1), r(t + 1), ned(t + 1);\n    r[0] = m;               // \u7528 i \u6b21\u9b54\u6cd5\u540e \u5269\u4f59\u7684\u9b54\u6cd5\n    T[0] = 0;               // \u7528 i \u6b21\u9b54\u6cd5 \u6062\u590d\u9700\u8981\u7684\u65f6\u95f4\n    ned[0] = (s + 16) / 17; // \u7528 i \u6b21\u9b54\u6cd5 \u8d70\u5230\u7ec8\u70b9\u9700\u8981\u7684\u65f6\u95f4\n\n    d[0] = (t + 16) / 17 * 17; // \u7528 i \u6b21\u9b54\u6cd5 t\u65f6\u95f4\u8d70\u7684\u8ddd\u79bb\n    for (int i = 1; i &lt;= t; i++)\n    {\n        T[i] = T[i - 1];\n        r[i] = r[i - 1];\n        if (r[i - 1] &lt; 10)\n        {\n            T[i] += (10 - r[i - 1] + 3) / 4;\n            r[i] = r[i] + (T[i] - T[i - 1]) * 4 - 10;\n        }\n        else\n            r[i] -= 10;\n        // \u5269\u4e0b t-T[i]\u7684\u65f6\u95f4 \u770b\u80fd\u8d70\u591a\u5c11\n        ned[i] = T[i] + i;\n        if (ned[i] &gt; t)\n            break;\n        d[i] = i * 60 + (t - ned[i]) * 17;\n\n        if (s &gt;= i * 60)\n        {\n            ned[i] += (s - i * 60 + 16) / 17;\n        }\n        // cerr &lt;&lt; i &lt;&lt; \" \" &lt;&lt; r[i] &lt;&lt; \" \" &lt;&lt; T[i] &lt;&lt; \" \" &lt;&lt; ned[i] &lt;&lt; \" \\n\";\n    }\n    int time = t + 1;\n    for (int i = 0; i &lt;= t; i++)\n    {\n        if (d[i] &gt;= s &amp;&amp; ned[i] &lt;= t)\n        {\n            // cerr &lt;&lt; i &lt;&lt; \" \" &lt;&lt; ned[i] &lt;&lt; \" \\n\";\n            time = min(time, ned[i]);\n        }\n    }\n    if (time != t + 1)\n        cout &lt;&lt; \"Yes\\n\"\n             &lt;&lt; time &lt;&lt; '\\n';\n    else\n        cout &lt;&lt; \"No\\n\"\n             &lt;&lt; *max_element(d.begin(), d.end()) &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"daily/2025/0401/#p2679","title":"\u6d1b\u8c37P2679 \u666e\u53ca+/\u63d0\u9ad8","text":"<p>2025-04-01 tag: DP</p> <p>\u867d\u7136\u60f3\u4e86\u4e00\u4f1a\uff0c\u5199\u4e86\u4e00\u4e2a\u591a\u5c0f\u65f6\u3002\u4f46\u8fd9\u4e2a\u5c31\u662f\u5f88\u6b63\u5e38\u7684DP\u9898\uff0c\u633a\u597d\u7684\u3002</p> <p>\u5b66\u5230\u4e00\u4e2a\u5c0f\u6280\u5de7\uff0c\u5c31\u662f\u5f88\u591a\u65f6\u5019\u6211\u4eec\u5f00\u591a\u7ef4\u7684 DP \u53ea\u4f1a\u7528\u5230 \\(i\\) \u548c \\(i-1\\) \u7684\uff0c\u53ef\u4ee5\u6eda\u52a8\u6570\u7ec4\uff0c\u6211\u4e00\u822c\u559c\u6b22\u6bcf\u6b21\u5faa\u73af\u65b0\u5f00\u4e00\u4e2a\u3002\u4f46\u662f\u5176\u5b9e\u53ef\u4ee5\u7528 \\(i\\&amp; 1\\) \u548c \\((i\\&amp;1) \\oplus 1\\) \u8fd9\u79cd\u8868\u793a\uff0c\u6bd4\u8f83\u597d\u5199\u3002</p> <pre><code>constexpr int mod = 1000000007;\n\nint dp[2][202][202];\nvoid ChatGptDeepSeek()\n{\n    int n, m, k;\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;\n\n    // \u5339\u914d\u4e86i\u957f\u5ea6\uff0c\u7528\u4e86 j \u6bb5\n    vector&lt;char&gt; A(n + 1), B(m + 1);\n    for (int i = 1; i &lt;= n; i++)\n        cin &gt;&gt; A[i];\n    for (int i = 1; i &lt;= m; i++)\n        cin &gt;&gt; B[i];\n    vector&lt;vector&lt;int&gt;&gt; DP(m + 1, vector&lt;int&gt;(k + 1));\n    dp[0][0][0] = DP[0][0] = 1;\n    for (int i = 1; i &lt;= n; i++)\n    {\n\n        vector nDP = DP;\n        for (int j = 1; j &lt;= min(i, m); j++)\n        {\n            if (A[i] == B[j])\n            {\n                for (int l = 1; l &lt;= min(k, j); l++)\n                {\n                    dp[i &amp; 1][j][l] = (dp[i &amp; 1][j][l] + DP[j - 1][l - 1]) % mod;\n                    nDP[j][l] = (nDP[j][l] + DP[j - 1][l - 1]) % mod;\n\n                    dp[i &amp; 1][j][l] = (dp[i &amp; 1][j][l] + dp[(i ^ 1) &amp; 1][j - 1][l]) % mod;\n                    nDP[j][l] = (nDP[j][l] + dp[(i ^ 1) &amp; 1][j - 1][l]) % mod;\n                }\n            }\n        }\n        for (int j = 0; j &lt;= min(i, m); j++)\n            for (int l = 1; l &lt;= min(k, j); l++)\n                dp[(i ^ 1) &amp; 1][j][l] = 0;\n        DP = nDP;\n    }\n    cout &lt;&lt; DP[m][k] &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"daily/2025/0401/#p5658","title":"\u6d1b\u8c37P5658 \u666e\u53ca+/\u63d0\u9ad8","text":"<p>2025-04-01 tag: DFS</p> <p>\u6211\u670d\u4e86\uff0c\u672c\u6765\u662f\u5728\u5199 DP\u9898\u5355\u7684\uff0cWA\u4e86\u4e00\u665a\u4e0a\uff0c\u4e0d\u662f\u54e5\u4eec\u8fd9\u8ddfDP\u6709\u5173\u7cfb\u5417\uff1f\u867d\u7136\u5e94\u8be5\u53ef\u4ee5\uff0c\u4f46\u662f\u4f1a\u5f88\u4e0d\u597d\u505a\u3002</p> <p>\u5b66\u4e60\u4e86\u9898\u89e3\u7684\u65b9\u6cd5\u3002\u3002\u3002</p> <pre><code>void ChatGptDeepSeek()\n{\n    int n;\n    cin &gt;&gt; n;\n    string s;\n    cin &gt;&gt; s;\n    vector&lt;vector&lt;ll&gt;&gt; adj(n + 1, vector&lt;ll&gt;());\n    vector&lt;int&gt; fa(n + 1);\n    for (int i = 2; i &lt;= n; i++)\n    {\n        int x;\n        cin &gt;&gt; x;\n        fa[i] = x;\n        adj[x].push_back(i);\n    }\n    s = \" \" + s;\n    vector&lt;int&gt; stk, lst(n + 1);\n    vector&lt;long long&gt; sum(n + 1);\n\n    auto dfs = [&amp;](auto &amp;&amp;self, int u, int pre) -&gt; void\n    {\n        int tmp = 0;\n        if (s[u] == ')')\n        {\n            if (!stk.empty())\n            {\n                tmp = stk.back();\n                stk.pop_back();\n                lst[u] = lst[fa[tmp]] + 1;\n            }\n        }\n        else\n            stk.push_back(u);\n        sum[u] = sum[pre] + lst[u];\n        for (auto v : adj[u])\n        {\n            if (v == pre)\n                continue;\n            self(self, v, u);\n        }\n        if (tmp)\n            stk.push_back(tmp);\n        else if (!stk.empty())\n            stk.pop_back();\n    };\n    dfs(dfs, 1, 0);\n    long long ans = 0;\n    for (int i = 1; i &lt;= n; i++)\n    {\n        ans ^= (1LL * i * sum[i]);\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\n</code></pre>"},{"location":"daily/2025/0405/","title":"\u6389\u5206again","text":"<p>\u4eca\u5929\u53c8\u8981\u6389\u5206\u4e86\uff0c\u4e3a\u4ec0\u4e48\u5462\uff1f\u5199\u51fa\u6765C\u9898\u7684\u4eba\u4e00\u5927\u534a\u90fd\u5199\u51fa\u4e86D\u9898\uff0c\u800c\u6211\u5374\u5dee\u5f97\u5f88\u8fdc\u5f88\u8fdc\u3002</p> <p>\u5f53\u7136\u8fd9\u53ea\u80fd\u662f\u81ea\u5df1\u7684\u95ee\u9898\u3002</p> <p>\u6389\u5206\u7684\u96be\u53d7\uff0c\u8c01\u90fd\u4f1a\u6709\uff0c\u6211\u8be5\u600e\u4e48\u53bb\u7ec8\u7ed3\u5b83\u5462\uff1f\u5982\u4f55\u4f7f\u5f97\u6389\u5206\u6fc0\u52b1\u81ea\u5df1\u8fdb\u6b65\uff1f</p> <p>\u8fd8\u5728\u5e7b\u60f3\u6ca1\u6709\u5237\u5230\u8db3\u591f\u7684\u9898\u5c31\u80fd\u9760\u8fd0\u6c14\u4e0a\u5206\u751a\u81f3\u4e0a\u7d2b\u4e0a\u6a59\u5417\uff1f\u8be5\u653e\u5f03\u5e7b\u60f3\u4e86\uff0c\u5929\u5929\u60f3\u90a3\u4e48\u591a\uff0c\u4ec0\u4e48\u7528\u90fd\u6ca1\u6709\u3002</p> <p>\u4e09\u5343\u591a\u4eba\u5199\u51fa\u6765\u7684\u9898\uff0c\u73b0\u5728\u8fd8\u6ca1\u60f3\u51fa\u6765\u3002\u3002\u3002</p>"},{"location":"daily/2025/0630/","title":"\u65b0\u7684\u5f00\u59cb","text":"<p>created: 2025-06-30 03:08:32</p> <p>\u65f6\u95f4\u8fc7\u5f97\u771f\u5feb\u963f\uff0c25\u53f7\u4e0a\u5348\u8003\u5b8c\u7684\uff0c\u5b66\u6821\u672c\u6765\u60f3\u7559\u6211\u4eec\u73ed\u4e0a\u51e0\u5929\u8bfe\uff0c\u4f46\u662f\u53ea\u4e0a\u4e09\u5929\u5c31\u6ca1\u4e0a\u4e86\u3002\u633a\u597d\u7684\uff0c\u5176\u5b9e\u4ed6\u4eec\u597d\u50cf\u662f\u51c6\u5907\u6559py\u57fa\u7840\u8bed\u6cd5\uff0c\u786e\u5b9e\u6ca1\u5565\u5fc5\u8981\u5427\u3002</p> <p>\u6628\u5929\u4e0b\u5348\u6253\u4e86\u767e\u5ea6\u4e4b\u661f\u521d\u8d5b\u7b2c\u4e00\u573a\uff0c\u597d\u96be\u554a\uff0c\u53ea\u5199\u4e86\u4e24\u4e2a\u9898\uff0c\u63d0\u524d\u9000\u51fa\u6bd4\u8d5b\u4e86\u3002\u4e0b\u4e00\u573a\u6709\u70b9\u4e0d\u592a\u60f3\u6253\u4e86\uff0c\u611f\u89c9\u6709\u70b9\u5750\u7262\uff0c\u4e0d\u8fc7\u5341\u573a\u725b\u5ba2\u591a\u6821\u5355\u6311\u5e94\u8be5\u66f4\u5750\u7262\u3002</p>"},{"location":"daily/2025/0630/#_2","title":"\u5199\u535a\u5ba2\u771f\u633a\u597d\u7684\u5427","text":"<p>\u5c31\u662f\u611f\u89c9\u60f3\u5230\u4ec0\u4e48\u53ef\u4ee5\u8bb0\u4e0b\u6765\uff0c\u633a\u597d\u7684\uff0c\u867d\u7136\u4ee5\u540e\u4e5f\u4e0d\u4e00\u5b9a\u4f1a\u770b\u3002\u8bb0\u5f55\u4e0b\u6765\u603b\u80fd\u7559\u4e0b\u6765\u70b9\u4ec0\u4e48\u4e1c\u897f\u5427\u3002</p> <p>\u8fd9\u4e2a\u535a\u5ba2\u4ece\u8fd9\u5b66\u671f\u521a\u6765\u5b66\u6821\u624d\u5f00\u59cb\u4e3b\u8981\u53d1\u5185\u5bb9\uff0c\u4e4b\u524d\u53d1\u7684\u5f88\u5c11\uff0c\u5927\u6982\u4ece 2 \u6708 15 \u65e5\u5230\u4eca\u5929\uff0c\u867d\u7136\u4e2d\u95f4\u4e5f\u662f\u5f88\u591a\u65f6\u95f4\u90fd\u6ca1\u6709\u53d1\u4e1c\u897f\uff0c\u4f46\u6211\u5df2\u7ecf\u7559\u4e0b\u4e86\u5f88\u591a\u4e1c\u897f\u5566\uff01</p> <p>\u8fd9\u4e9b\u5185\u5bb9\u90fd\u5c06\u662f\u6211\u5b9d\u8d35\u7684\u8d22\u5bcc\u548c\u6210\u957f\u7684\u8bb0\u5f55\uff0c\u6211\u7ec8\u4e8e\u575a\u6301\u4e00\u4e2a\u5b66\u671f\u5199\u4e86\u8fd9\u4e48\u591a\u5185\u5bb9\u5566\uff01\u867d\u7136\u53ef\u4ee5\u5199\u5f97\u66f4\u591a\u5427\uff0c\u4f46\u4e5f\u662f\u4e00\u4e2a\u5f88\u5927\u7684\u8fdb\u6b65\u4e86\u3002</p> <p>\u662f\u56e0\u4e3a\u8fd9\u4e2a\u5b66\u671f\u4e70\u7684\u8fd9\u4e2a\u57df\u540d\uff0c\u8bbf\u95ee\u66f4\u65b9\u4fbf\u4e86\uff0c\u6240\u4ee5\u5c31\u90a3\u65f6\u5019\u5f00\u59cb\u66f4\u6709\u5174\u8da3\u5f04\u4e86\uff0c\u521a\u5f00\u59cb\u90a3\u6bb5\u65f6\u95f4\uff0c\u6bcf\u5929\u665a\u4e0a\u7761\u89c9\u4e4b\u524d\u5c31\u662f\u66f4\u65b0\u535a\u5ba2\u7136\u540e\u5230\u5e8a\u4e0a\u8fd8\u5728\u624b\u673a\u4e0a\u770b\u54c8\u54c8\u54c8\u3002</p> <p>\u771f\u7684\u611f\u89c9\u628a\u60f3\u6cd5\u5199\u4e0b\u6765\u4f1a\u597d\u5f88\u591a\uff0c\u4e5f\u8bb8\u53ef\u4ee5\u542f\u53d1\u601d\u7ef4\uff0c\u8fdb\u884c\u66f4\u591a\u7684\u601d\u8003\uff0c\u6211\u611f\u89c9\u6211\u4eba\u751f\u7684\u5f88\u591a\u7684\u65f6\u95f4\u90fd\u6d6a\u8d39\u5728\u4e86\u90a3\u4e2a\u5c0f\u76d2\u5b50\u4e0a\uff0c\u4ece\u90a3\u4e0a\u9762\u6536\u83b7\u5230\u7684\u5374\u5f88\u5c11\u3002</p> <p>\u7136\u540e\u8fd9\u4f1a\u7a81\u7136\u60f3\u5230\u5982\u679c\u6709\u4eba\u80fd\u4e00\u8d77\u5199\u535a\u5ba2\uff0c\u6bcf\u5929\u6211\u4eec\u53ef\u4ee5\u4e92\u76f8\u770b\u5bf9\u65b9\u6709\u4ec0\u4e48\u60f3\u6cd5\uff0c\u5199\u4e86\u4ec0\u4e48\u535a\u5ba2\uff0c\u4e5f\u662f\u4e00\u4ef6\u5f88\u9177\u7684\u4e8b\u60c5\u5462\u3002\u8bb0\u5f97\u4ee5\u524d\u5728\u4e00\u672c\u6742\u5fd7\u4e0a\u770b\u5230\uff0c\u4ee5\u524d\u56fd\u5916\u90a3\u8fb9\u7684\u4eba\u5c31\u662f\u4e92\u76f8\u5199\u65e5\u8bb0\u7ed9\u8eab\u8fb9\u7684\u4eba\u4ea4\u6362\u7740\u770b\uff0c\u56e0\u4e3a\u4e2d\u4e16\u7eaa\u7684\u65f6\u5019\u5a31\u4e50\u6d3b\u52a8\u6bd4\u8f83\u5c11\u3002\u4e0d\u77e5\u9053\u662f\u4e0d\u662f\u771f\u7684\uff0c\u4f46\u662f\u542c\u8d77\u6765\u633a\u6709\u610f\u601d\u7684\u3002</p> <p>\u8fd9\u5b66\u671f\u5982\u679c\u4e0d\u662f\u8003\u8bd5\uff0c\u6211\u53ef\u80fd\u4e00\u4e2a\u5b66\u671f\u90fd\u4e0d\u4f1a\u5199\u5b57\uff0c\u6709\u65f6\u5199\u7b97\u6cd5\u9898\u4f1a\u5728\u7eb8\u4e0a\u753b\u753b\uff0c\u800c\u4e14\u597d\u4e45\u6ca1\u770b\u8fc7\u4e66\u4e86\u554a\u3002\u611f\u89c9\u770b\u770b\u4e66\u8fd8\u662f\u633a\u597d\u7684\uff0c\u6bd4\u5237\u89c6\u9891\u597d\u3002</p> <p>\u6211\u5e0c\u671b\u6211\u4e00\u5b9a\u4e00\u5b9a\u8981\u575a\u6301\u5199\u535a\u5ba2\uff0c\u54ea\u6015\u6bcf\u6b21\u53ea\u5199\u4e00\u70b9\u70b9\u6216\u8005\u9694\u4e00\u6bb5\u65f6\u95f4\u518d\u6765\u5199\u4e00\u70b9\u4e1c\u897f\uff0c\u4e5f\u4e0d\u8981\u628a\u8fd9\u91cc\u5199\u7684\u5185\u5bb9\u5220\u6389\u3002</p> <p>\u8fd9\u5b66\u671f\u8fd8\u4e0d\u9519\u5462\uff0c\u5176\u5b9e\u4e5f\u662f\u6709\u4e00\u4e9b\u6536\u83b7\u7684\u3002</p>"},{"location":"daily/2025/0630/#_3","title":"\u5e0c\u671b\u6211\u5c11\u5237\u89c6\u9891","text":"<p>\u5f88\u96be\u53d7\u554a\u611f\u89c9\uff0c\u6211\u7740\u4e00\u4e2a\u6708\u5927\u90e8\u5206\u65f6\u95f4\u7528\u6765\u5237\u89c6\u9891\u4e86\uff0c\u751a\u81f3\u8fd9\u51e0\u5e74\u5927\u90e8\u5206\u65f6\u95f4\u7528\u6765\u5237\u89c6\u9891\u4e86\uff0c\u867d\u7136\u73a9\u6e38\u620f\u7684\u65f6\u95f4\u53ef\u80fd\u4e5f\u591a\u3002</p> <p>\u611f\u89c9\u6211\u771f\u7684\u662f\u88ab\u8d44\u672c\u505a\u5c40\u4e86\uff0c\u5176\u5b9e\u5237\u89c6\u9891\u4ec0\u4e48\u4e5f\u4e0d\u4f1a\u6536\u83b7\uff0c\u8fd9\u4e2a\u9053\u7406\u6211\u662f\u65e9\u5c31\u77e5\u9053\u7684\uff0c\u4f46\u4eca\u5929\u4ecd\u662f\u5199\u4e0b\u4e86\u8fd9\u4e9b\u6587\u5b57\u3002\u4eba\u603b\u662f\u5f88\u96be\u6539\u53d8\u7684\uff0c\u6211\u6162\u6162\u6765\u5427\u3002</p> <p>\u5f00\u4e2a\u73a9\u7b11\u7684\u8bf4\uff0c\u5982\u679c\u6211\u628a\u5237\u89c6\u9891\u7684\u65f6\u95f4\u7559\u51fa\u6765\u804a\u5929\uff0c\u611f\u89c9\u53ef\u4ee5\u548cQQ\u5217\u8868\u91cc\u4e00\u767e\u591a\u4e2a\u597d\u53cb\u90fd\u7ecf\u5e38\u804a\u5929\uff0c\u804a\u5929\u4e5f\u4e0d\u9700\u8981\u5f88\u591a\u65f6\u95f4\uff0c\u4f46\u662f\u6211\u53ef\u80fd\u53ea\u7ed9\u4e09\u56db\u4e2a\u4eba\u53d1\u6d88\u606f\u5427\u3002\u867d\u7136\u53ef\u80fd\u4e0d\u77e5\u9053\u804a\u4ec0\u4e48...\u5927\u591a\u6570\u4eba\u53ef\u80fd\u53ea\u662f\u52a0\u4e2a\u597d\u53cb\uff0c\u4ee5\u540e\u53ef\u80fd\u518d\u4e5f\u4e0d\u4f1a\u804a\u5929\u4e86\u3002</p> <p>\u51fa\u53bb\u8d70\u8d70\u4e5f\u4e0d\u9519\u554a\uff0c\u8d70\u8def\u4f1a\u662f\u6d6a\u8d39\u65f6\u95f4\u5417\uff1f\u6211\u4eec\u5b66\u6821\u95e8\u53e3\u6709\u5356\u7092\u9762\uff0c\u6211\u7ecf\u5e38\u5403\uff0c\u611f\u89c9\u5403\u4e86\u6709100\u6b21\u4e86\uff0c\u6709\u65f6\u5019\u4e0d\u60f3\u53bb\u4e70\uff0c\u6765\u56de\u8981\u8d70\u4e8c\u5341\u5206\u949f\u53ef\u80fd\u3002\u4e3a\u5565\u4e0d\u60f3\u53bb\u5462\uff1f\u611f\u89c9\u8fd9\u6bb5\u8def\u633a\u65e0\u804a\u53ef\u80fd\uff0c\u4f46\u4e8b\u5b9e\u662f\u4e0d\u80fd\u5c3d\u60c5\u73a9\u624b\u673a\u53ef\u80fd\u3002\u3002\u3002\u6211\u8fd9\u6837\u771f\u7684\u597d\u5417\uff1f\u8fd9\u662f\u6781\u5176\u4e0d\u6b63\u5e38\u7684\u3002</p> <p>\u624b\u673a\u53ea\u5e94\u8be5\u662f\u4e00\u4e2a\u5de5\u5177\uff0c\u6211\u5e94\u8be5\u5728\u9700\u8981\u65f6\u53bb\u4f7f\u7528\u5b83\uff0c\u800c\u4e0d\u662f\u4e00\u76f4\u88ab\u5b83\u63a7\u5236\u3002\u6bcf\u5929\u665a\u4e0a\u5165\u7761\u4e4b\u524d\uff0c\u6211\u5e94\u8be5\u662f\u5728\u601d\u8003\u4e00\u4e9b\u4e8b\u60c5\uff0c\u56de\u5fc6\u4eca\u5929\u53d1\u751f\u8fc7\u7684\u4e8b\u60c5\uff0c\u601d\u8003\u4e00\u4e9b\u4ee5\u540e\u7684\u4e8b\u60c5\uff0c\u800c\u4e0d\u5e94\u8be5\u662f\u73a9\u624b\u673a\u73a9\u5230\u56f0\u4e86\u518d\u7761\u89c9\u2026\u2026</p> <p>\u6211\u73b0\u5728\u601d\u8003\u5f97\u597d\u5c11\u554a\uff0c\u76f8\u5f53\u4e8e\u8fd9\u51e0\u5e74\u6211\u90fd\u6ca1\u6709\u4ec0\u4e48\u6210\u957f\u3002\u6210\u957f\u662f\u4e0d\u662f\u5c31\u662f\u4e0d\u65ad\u5730\u53bb\u52aa\u529b\uff0c\u770b\u7ed3\u679c\u5982\u4f55\uff0c\u505a\u597d\u81ea\u5df1\u60f3\u505a\u7684\u4e8b\uff0c\u4e0d\u65ad\u7684\u601d\u8003\uff0c\u63d0\u9ad8\u81ea\u5df1\u7684\u7cbe\u795e\u5883\u754c\uff0c\u4e0d\u65ad\u8c03\u6574\u81ea\u5df1\u7684\u8ba4\u77e5\u3002</p> <p>\u5f88\u5e78\u8fd0\u5728\u4eca\u5929\u4e4b\u524d\uff0c\u6211\u8fd8\u662f\u5e72\u4e86\u5f88\u591a\u4e8b\u7684\uff0c\u867d\u7136\u6bd4\u8d77\u6709\u4e9b\u4eba\u6211\u505a\u5f97\u5f88\u5c11\uff0c\u4f46\u4ecd\u7136\u9700\u8981\u672a\u672a\u6765\u8003\u8651\u3002\u800c\u4e14\u6211\u4e0d\u80fd\u6bcf\u5929\u90fd\u662f\u60f3\u7740\u5237\u89c6\u9891\u6709\u591a\u574f\uff0c\u6211\u4e0d\u505a\u8fd9\u4ef6\u4e8b\u60c5\uff0c\u5c31\u4e0d\u9700\u8981\u60f3\u3002\u3002\u3002</p>"},{"location":"daily/2025/0630/#_4","title":"\u751f\u6d3b\u662f\u5927\u90e8\u5206\u65f6\u95f4\u90fd\u5f88\u65e0\u804a\u5417\uff1f","text":"<p>\u6700\u8fd1\u4e86\u89e3\u5230\u4e86\u4e00\u4e2a\u5b66\u957f\u7684\u5b9e\u4e60\u7684\u60c5\u51b5\uff0c\u4ed6\u6bcf\u5929\u516d\u70b9\u5de6\u53f3\u5c31\u8981\u8d77\u5e8a\uff0c\u56e0\u4e3a\u4f4f\u7684\u5730\u65b9\u91cc\u516c\u53f8\u6709\u70b9\u8fdc\uff0c\u5927\u6982\u8981\u5750\u4e00\u4e2a\u534a\u5c0f\u65f6\u8f66\u3002\u4e0d\u8fc7\u4e0b\u5348\u4e94\u70b9\u949f\u4e0b\u73ed\uff0c\u8fd8\u633a\u597d\u7684\u3002</p> <p>\u4f46\u662f\u56de\u5bb6\u505a\u4e2a\u996d\u5403\u53ef\u80fd\u5dee\u4e0d\u591a\u5c31\u516b\u70b9\u4e86\uff0c\u7136\u540e\u53ef\u80fd\u518d\u6d17\u4e2a\u8863\u670d\u5565\u7684\uff0c\u5c31\u53ea\u5269\u51e0\u5c0f\u65f6\u5c31\u8981\u7761\u89c9\u5566\u3002\u611f\u89c9\u8d77\u5f97\u592a\u65e9\u4e86\uff0c\u8ddf\u4e0a\u4e2d\u5b66\u4e00\u6837\u2026\u2026\u7136\u540e\u665a\u4e0a\u7684\u65f6\u95f4\u8fc7\u5f97\u4e5f\u597d\u5feb\uff0c\u4e0d\u8fc7\u6211\u4eec\u73b0\u5728\u5176\u5b9e\u4e5f\u5dee\u4e0d\u591a\u5427\u3002</p> <p>\u5c31\u662f\u611f\u89c9\u5927\u90e8\u5206\u65f6\u95f4\u90fd\u5728\u5fd9\uff0c\u7559\u7ed9\u81ea\u5df1\u7684\u65f6\u95f4\u5f88\u5c11\u3002\u6211\u4e5f\u4e0d\u77e5\u9053\u600e\u4e48\u63cf\u8ff0\uff0c\u5c31\u662f\u611f\u89c9\u6709\u70b9\u4e0d\u723d\u5427\u3002\u4f46\u662f\u751f\u6d3b\u53ef\u80fd\u5c31\u662f\u8fd9\u6837\u5427\uff0c\u5927\u5bb6\u90fd\u662f\u6bcf\u5929\u53ea\u670924\u5c0f\u65f6\u3002</p> <p>\u6211\u4e4b\u524d\u9ad8\u8003\u7ed3\u675f\u7684\u6691\u5047\u53bb\u5e72\u8fc7\u517c\u804c\uff0c\u4f46\u597d\u50cf\u5c31\u5e72\u4e86\u5341\u5929\uff0c\u56e0\u4e3a\u611f\u89c9\u592a\u7d2f\u5566\uff5e\u5f53\u65f6\u662f\u5728\u4e00\u4e2a\u996d\u5e97\u505a\u670d\u52a1\u5458\uff0c\u8d1f\u8d23\u4e0a\u83dc\u3001\u6536\u76d8\u5b50\u548c\u64e6\u684c\u5b50\uff0c\u665a\u4e0a\u8981\u5173\u95e8\u4e86\u518d\u62d6\u4e2a\u5730\uff0c\u5e73\u65f6\u6ca1\u4eba\u6765\u5c31\u7ad9\u7740\u5c31\u884c\u4e86\u3002</p> <p>\u5f53\u65f6\u5c31\u662f\u6709\u4e00\u79cd\u611f\u89c9\uff0c\u600e\u4e48\u8bf4\u5462\uff0c\u5f88\u96be\u53d7\u554a\uff0c\u611f\u89c9\u5f88\u4e0d\u81ea\u5728\u3002\u7ad9\u4e45\u4e86\u6216\u8005\u5de5\u4f5c\u4e45\u4e86\u633a\u7d2f\u5427\uff0c\u7136\u540e\u56de\u5bb6\u4e5f\u5f88\u665a\uff0c\u56de\u53bb\u5dee\u4e0d\u591a\u5c31\u8be5\u7761\u4e86\uff0c\u6211\u53c8\u8d77\u5f97\u6bd4\u8f83\u665a\uff0c\u611f\u89c9\u6ca1\u6709\u65f6\u95f4\u601d\u8003\u6216\u8005\u6ca1\u6709\u65f6\u95f4\u73a9\u5427\u3002\u6211\u611f\u89c9\u4e0d\u592a\u77e5\u9053\u600e\u4e48\u63cf\u8ff0\uff0c\u53cd\u6b63\u5f53\u65f6\u53ef\u80fd\u5c31\u662f\u7a81\u7136\u53c8\u611f\u89c9\u4e0a\u5b66\u771f\u597d\u3002</p> <p>\u597d\u6df7\u4e71\u5440\u8bf4\u5f97\uff0c\u5176\u5b9e\u5c31\u662f\u4e00\u79cd\u611f\u89c9\uff0c\u4f46\u662f\u5176\u5b9e\u5f53\u65f6\u6211\u4e5f\u4e0d\u548b\u601d\u8003\u7684\uff0c\u73b0\u5728\u4e5f\u662f\u3002\u611f\u89c9\u53ea\u6709\u6ca1\u6709\u624b\u673a\u7684\u65f6\u5019\u624d\u4f1a\u53bb\u601d\u8003\u3002</p> <p>\u8fd9\u6bb5\u65f6\u95f4\u4e0d\u662f\u8003\u8bd5\u5417\uff1f\u611f\u89c9\u5199\u5b8c\u4e4b\u540e\u7684\u65f6\u95f4\u6709\u70b9\u96be\u71ac\u54c8\u54c8\u54c8\uff0c\u7136\u540e\u60f3\u5230\u76d1\u8003\u7684\u8001\u5e08\u53ea\u80fd\u5750\u7740\u6216\u7ad9\u7740\uff0c\u6bd4\u6211\u4eec\u66f4\u65e0\u804a\uff0c\u4e0d\u77e5\u9053\u4ed6\u4eec\u600e\u4e48\u5ea6\u8fc7\u7684\u54c8\u54c8\u54c8\u3002\u5237\u89c6\u9891\u4e5f\u770b\u5230\u6709\u8001\u5e08\u5410\u69fd\u76d1\u8003\u5f88\u65e0\u804a\u3002\u60f3\u60f3\u5982\u679c\u8981\u53d1\u5446\u90a3\u4e48\u4e45\u771f\u7684\u5f88\u96be\u53d7\u5427\uff0c\u90a3\u4e48\u4e45\u7684\u8bdd\u6ca1\u6709\u5f88\u591a\u53ef\u4ee5\u601d\u8003\u7684\u4e8b\u60c5\u3002</p> <p>\u5176\u5b9e\u6211\u7684\u4e2d\u5b66\u65f6\u671f\u5927\u6982\u5c31\u662f\u5927\u90e8\u5206\u65f6\u95f4\u5728\u53d1\u5446\u5427\uff0c\u521d\u4e2d\u7684\u521d\u4e00\u521d\u4e8c\u4e0a\u8bfe\u8fd8\u662f\u542c\u7684\uff0c\u540e\u6765\u6211\u4eec\u5b66\u6821\u88ab\u62c6\u4e86\uff0c\u53bb\u4e86\u53e6\u4e00\u4e2a\u5b66\u6821\uff0c\u5f53\u65f6\u597d\u4f24\u5fc3\uff0c\u8bfe\u4e0a\u7ecf\u5e38\u53d1\u5446\u6216\u8005\u4f24\u5fc3\u3002\u3002\u3002\u9ad8\u4e2d\u4e5f\u662f\u57fa\u672c\u6240\u6709\u8bfe\u90fd\u5728\u5e0c\u671b\u5feb\u70b9\u4e0b\u8bfe\uff0c\u4e0a\u8bfe\u65f6\u5c31\u662f\u53d1\u5446\u4e0d\u77e5\u9053\u5728\u60f3\u5565\uff0c\u5927\u5b66\u4e86\u4e0a\u4e00\u4e9b\u4e0d\u65b9\u4fbf\u73a9\u624b\u673a\u7684\u8bfe\u53ef\u80fd\u4e5f\u662f\uff0c\u867d\u7136\u6709\u7684\u8001\u5e08\u8bb2\u7684\u786e\u5b9e\u6ca1\u5565\u610f\u601d\uff0c\u4f46\u662f\u8fd8\u662f\u8981\u5b66\u4e00\u4e0b\u7684\u3002\u3002\u3002\u671f\u672b\u901f\u6210\u6709\u70b9\u96be\u53d7\u554a\u3002</p> <p>\u5e0c\u671b\u4ee5\u540e\u7684\u6211\uff0c\u53ef\u4ee5\u5076\u5c14\u62bd\u51fa\u65f6\u95f4\u6563\u6563\u6b65\uff0c\u601d\u8003\u4e00\u4e9b\u6709\u610f\u601d\u7684\u4e8b\u60c5\uff0c\u6216\u8005\u662f\u5076\u5c14\u548c\u4e00\u4e9b\u670b\u53cb\u8054\u7edc\u4e00\u4e0b\uff1f</p>"},{"location":"daily/2025/0630/#_5","title":"\u7b80\u5355\u603b\u7ed3","text":"<p>\u770b\u4e86\u4e0b\u57df\u540d\u6ce8\u518c\u65f6\u95f4\uff0c\u662f2\u670815\u65e5\uff0c\u90a3\u5c31\u662f\u8fd9\u5929\u6765\u5b66\u6821\u7684\uff0c\u5230\u4eca\u5929\u6709\u56db\u4e2a\u534a\u6708\u4e86\u3002\u5176\u5b9e\u8fd9\u4e2a\u5b66\u671f\u611f\u89c9\u5e72\u5f97\u4e0d\u9519\uff0c\u5c31\u662f\u4e0d\u77e5\u4e0d\u89c9\u53d1\u4e86\u597d\u591a\u7bc7\u535a\u5ba2\u5427\uff0c\u53ef\u80fd\u5bf9\u4e8e\u522b\u4eba\u4e0d\u4f1a\u6709\u5565\u5e2e\u52a9\uff0c\u4f46\u662f\u4e5f\u662f\u82b1\u4e86\u6211\u597d\u591a\u65f6\u95f4\u7684\uff0c\u7ecf\u5e38\u4e00\u7bc7\u5199\u4e00\u5c0f\u65f6\uff0c\u8fd9\u4e00\u7bc7\u5199\u5230\u8fd9\u91cc\u4e5f\u82b1\u4e86\u4e00\u5c0f\u65f6\u4e86\u3002</p> <p>github \u7684 contribution \u591a\u4e86\u597d\u591a\uff0c\u6d1b\u8c37\u4e0a\u505a\u7684\u84dd\u9898\u548c\u7eff\u9898\u4e5f\u5f88\u591a\u90fd\u662f\u8fd9\u5b66\u671f\u5199\u7684\u3002\u867d\u7136\u4e4b\u524d\u4e5f\u5f04\u4e86\u4e00\u4e2a\u535a\u5ba2\uff0c\u5176\u5b9e\u5c31\u662f\u4e0a\u5b66\u671f\uff0c\u4f46\u662f\u5176\u5b9e\u57fa\u672c\u5565\u5185\u5bb9\u4e5f\u6ca1\u7559\u4e0b\uff0c\u4e0d\u8fc7\u5199\u5f97\u4e0d\u662f\u5f88\u591a\uff0c\u5927\u6982\u4e5f\u5c31\u4e8c\u5341\u591a\u7bc7\u3002\u5f53\u65f6\u662f hexo \u5f04\u7684\uff0cmkdocs-material \u7b80\u5355\u597d\u591a\u597d\u591a\uff0c\u611f\u89c9\u4e5f\u597d\u4e00\u4e9b\u3002</p> <p>\u8fd9\u5b66\u671f\u6253\u4e86\u4e09\u573aICPC\u9080\u8bf7\u8d5b\uff0c\u5206\u522b\u662f\u6b66\u6c49\u3001\u897f\u5b89\u3001\u5357\u660c\uff0c\u6253\u4e86\u84dd\u6865\u676f\u7701\u8d5b\u548c\u56fd\u8d5b\uff0c\u84dd\u6865\u7701\u8d5b\u662f\u5728\u6211\u4eec\u5b66\u6821\u6253\u7684\uff0c\u56fd\u8d5b\u53bb\u7684\u6b66\u6c49\u3002</p> <p></p> <p>ICPC\u7b2c\u4e00\u573a\u662f\u6b66\u6c49\uff0c\u975e\u5e38\u620f\u5267\u6027\u7684\u62ff\u4e86\u94c1\u724c\u7b2c\u4e00\u540d\uff0c\u5dee2\u7f5a\u65f6\u5c31\u53ef\u4ee5\u62ff\u724c\u5b50\uff0c\u897f\u5b89\u6392\u540d\u5f88\u5dee\uff0c\u5357\u660c\u7ec8\u4e8e\u62ff\u5230\u94dc\u724c\u3002\u84dd\u6865\u7701\u8d5b\u5f88\u7b80\u5355\uff0c\u6211\u4e5f\u662f\u7ec8\u4e8e\u5728B\u7ec4\u7684\u7b2c\u4e00\u9875\u770b\u5230\u81ea\u5df1\u54c8\u54c8\u54c8\uff0c\u597d\u50cf\u662f\u7b2c\u4e8c\u5341\u591a\u4e2a\uff0c\u53bb\u5e74\u597d\u50cf\u662f\u6392\u5728\u6700\u540e\u9762\u7684\u3002\u56fd\u8d5b\u4e5f\u662f\u5f88\u5e78\u8fd0\u7684\u62ff\u5230\u4e86\u56fd\u4e00\uff0c\u8fd8\u662f\u6709\u70b9\u5f00\u5fc3\u7684\uff0c\u800c\u4e14\u662f\u6211\u4eec\u5b66\u6821\u7b2c\u4e00\u4e2a\u56fd\u4e00\uff0c\u84dd\u6865\u56fd\u8d5b\u524d\u4e00\u665a\u8001\u5e08\u8bf7\u6211\u4eec\u5403\u996d\u4e86\uff0c\u611f\u8c22\u8001\u5e08\uff0c\u996d\u5f88\u597d\u5403\uff0c\u597d\u559c\u6b22\u8001\u5e08\u54c8\u54c8\u54c8\u3002</p> <p>cf rating\u5012\u662f\u6ca1\u600e\u4e48\u6da8\uff0cmax rating\u53d8\u6210\u4e861859\uff0c\u5e0c\u671b\u6691\u5047\u80fd\u6210\u4e3a\u7c7d\u5cb7\u3002</p> <p>\u4eca\u5e74\u84dd\u6865\u56fd\u8d5b\u662f\u7b2c\u4e00\u6b21\u548c\u6c7d\u5de5\u5927\u7684\u670b\u53cb\u89c1\u9762\uff0c\u4ed6\u4eec\u5b66\u6821\u597d\u591a\u6253\u56fd\u8d5b\u7684\uff0c\u597d\u7fa1\u6155\uff0c\u611f\u89c9\u6c1b\u56f4\u5f88\u4e0d\u9519\u3002\u4e3a\u5565\u662f\u7b2c\u4e00\u6b21\u89c1\u9762\u5462\uff1f\u4e09\u573a\u9080\u8bf7\u8d5b\u6211\u4eec\u90fd\u662f\u4e00\u8d77\u53bb\u7684\uff0c\u5e76\u4e14\u6709\u4e24\u573a\u90fd\u662f\u5728\u540c\u4e00\u4e2a\u673a\u623f\u3002\u56e0\u4e3a\u524d\u4e24\u573a\u5f88\u60b2\u5267\u6211\u4eec\u90fd\u6ca1\u6709\u62ff\u5230\u5956\u724c\u3002</p> <p>\u611f\u89c9\u84dd\u6865\u676f\u8fd8\u633a\u597d\u7684\uff0c\u9664\u4e86ICPC\u6211\u5176\u5b9e\u53ea\u6253\u8fc7\u84dd\u6865\u676f\uff0c\u53ef\u4ee5\u6253\u7684\u6bd4\u8d5b\u672c\u6765\u4e5f\u6ca1\u591a\u5c11\uff0c\u800c\u4e14\u8fd9\u4e24\u5e74\u90fd\u662f\u5b66\u6821\u62a5\u540d\u7684\u8d39\u7528\uff0c\u867d\u7136\u4eca\u5e74\u7701\u8d5b\u62a5\u540d\u8d39\u8fd8\u6ca1\u62a5\u9500\u3002\u3002\u3002</p>"},{"location":"daily/2025/0630/#_6","title":"\u5bf9\u672a\u6765\u5267\u60c5\u7684\u5e7b\u60f3","text":"<p>\u4e0b\u5b66\u671f\u60f3\u5355\u5237\u4e00\u4e24\u6b21XCPC\u526f\u672c\uff0c\u5df2\u7ecf\u559c\u63d0\u4e86\u4e09\u4ef6\u725b\u5ba2\u6691\u5047\u591a\u6821\uff0c\u4e3a\u5565\u662f3\u4ef6\u5462?\u56e0\u4e3a\u6211\u662f\u4e00\u4e2a\u4eba\u62a5\u540d\u7684\uff0c\u5e0c\u671b\u6691\u5047\u597d\u597d\u6253\u5427\uff0c\u73cd\u60dc\uff0c\u4e5f\u662f\u7b2c\u4e00\u6b21\u62a5\u540d\u4f30\u8ba1\u4e5f\u662f\u6700\u540e\u4e00\u6b21\u3002</p> <p>\u7b49\u4e86\u4e24\u5e74\uff0c\u8fd8\u662f\u6ca1\u6709\u7b49\u6765\u80fd\u966a\u6211\u52a0\u8bad\u7684\u4eba\u3002\u6211\u5c06\u72ec\u81ea\u52a0\u8bad\uff0c\u771f\u8981\u597d\u597d\u8bad\u5427\uff0c\u6700\u540e\u4e00\u4e2a\u8d5b\u5b63\u4e86\u3002\u6691\u5047\u6211\u6253\u7b97\u6bcf\u5929\u628a\u5237\u9898\u60c5\u51b5\u53d1\u670b\u53cb\u5708\uff0c\u80fd\u575a\u6301\u53d1\u7684\u8bdd\u4e5f\u5f88\u4e0d\u9519\uff0c\u56e0\u4e3a\u5982\u679c\u4e00\u5929\u4e0d\u5199\uff0c\u90a3\u53ef\u80fd\u5c31\u4f1a\u5f88\u591a\u5929\u4e0d\u5199\uff0c\u6691\u5047\u5c31\u6d6a\u8d39\u4e86\uff0c\u4e0b\u534a\u5e74\u7684\u53c2\u8d5b\u673a\u4f1a\u4e5f...</p> <p>\u611f\u8c22\u4f60\u4eec\uff0c\u5176\u5b9e\u6211\u7684\u597d\u670b\u53cb\u8fd8\u662f\u633a\u591a\u7684\u563b\u563b\uff0c\u4f60\u4eec\u90fd\u662f\uff0c\u611f\u8c22\u6709\u4f60\u4eec\uff01</p> <p>\u201c\u4f60\u9192\u6765\uff0c\u53d1\u73b0\u81ea\u5df1\u56de\u5230\u4e86\u5927\u4e00\u2026\u2026\u201d</p> <p>\u8fd9\u4e00\u6b21\uff0c\u4f60\u4e0b\u5b9a\u51b3\u5fc3\uff1a\u4e00\u5b9a\u8981\u6210\u4e3aICPC\u4e16\u754c\u51a0\u519b\uff01</p> <p>\u867d\u7136\u8fd9\u4e2a\u5267\u672c\u7edd\u5bf9\u4e0d\u53ef\u80fd\uff0c\u8bf4\u7740\u73a9\u73a9\u611f\u89c9\u633a\u6709\u610f\u601d\u7684\u54c8\u54c8\u54c8\u3002</p> <p>\u5dee\u4e0d\u591a\u7ed3\u675f\u529b\uff0c\u6211\u56f0\u4e86\uff5e\u665a\u5b89\uff5e</p> <p>upd: \u53d1\u73b0\u9519\u522b\u5b57\u6709\u70b9\u591a\u554a\uff0c\u56e0\u4e3a\u7528\u7684ubuntu\u81ea\u5e26\u7684ibus\u8f93\u5165\u6cd5\uff0c\u6253\u4e2d\u6587\u5c31\u662f\u5f88\u5bb9\u6613\u9519\u5b57\u54c8\u54c8\u54c8\uff0c\u7136\u540e\u8fd9\u91cc\u5927\u6982 2.8 k \u5b57\u4e86\u3002</p>"},{"location":"daily/2025/0801/","title":"CF2117G + 23\u5408\u80a5\u533a\u57df\u8d5bJ","text":"<p>created on 2025 08-02</p> <p>\u8fd9\u4e2a 2117G \u662f\u6709\u4e00\u6bb5\u65f6\u95f4\u4e4b\u524d\u7684 div 3 \u7684\u9898\u4e86\uff0c\u5f53\u65f6\u770b\u5c31\u89c9\u5f97\u4e0d\u662f\u5f88\u96be\uff0c\u8bb0\u5f97\u4e4b\u524d\u5199\u8fc7\u4e00\u4e2a\u7c7b\u4f3c\u7684\u9898\uff0c\u867d\u7136\u4e5f\u662f\u770b\u9898\u89e3\u4e86\u7684\u3002</p> <p>\u4f46\u662f\u6628\u665a\u518d\u5199\u8fd9\u4e2a2117G\u8fd8\u662f\u4e0d\u4f1a\uff0c\u770b\u4e86\u9898\u89e3\u624d\u660e\u767d\u4e86\u3002\u3002\u3002</p>"},{"location":"daily/2025/0801/#cf2117g","title":"CF2117G","text":"<p>\u7ed9\u4e00\u4e2a\u65e0\u5411\u56fe\uff0c\u5b9a\u4e49\u8def\u5f84\u7684\u957f\u5ea6\u4e3a\u7ecf\u8fc7\u7684\u8fb9\u4e2d\u6700\u5927\u8fb9\u4e0e\u6700\u5c0f\u8fb9\u7684\u957f\u5ea6\u4e4b\u548c\uff0c\u6c42 \\(1\\) \u5230 \\(n\\) \u7684\u6700\u5c0f\u8ddd\u79bb\u3002</p> <p>\u5982\u679c\u6c42 \\(1\\) \u548c \\(n\\) \u5230\u6bcf\u4e2a\u70b9\u7ecf\u8fc7\u7684\u6700\u5c0f\u7684\u6700\u5927\u8fb9\u6216\u8005\u662f\u7ecf\u8fc7\u7684\u6700\u5c0f\u7684\u6700\u5c0f\u8fb9\u662f\u6bd4\u8f83\u5bb9\u6613\u7684\uff0c\u53ef\u4ee5\u7528 dijkstra\uff0c\u4f46\u5982\u679c\u60f3\u540c\u65f6\u8003\u8651\u8fd9\u4e24\u4e2a\u95ee\u9898\uff0c\u4e0d\u592a\u5bb9\u6613\u505a\u5230\u3002</p> <p>\u5e76\u4e14\u5982\u679c\u4f60\u6c42 \\(1\\) \u548c \\(n\\) \u5230\u6bcf\u4e2a\u70b9\u7ecf\u8fc7\u7684\u6700\u5c0f\u7684\u6700\u5c0f\u8fb9\uff0c\u90a3\u4e48\u4e2d\u9014\u53ef\u80fd\u4f1a\u7ecf\u8fc7\u5927\u7684\u8fb9\uff0c\u4e0d\u592a\u597d\u3002\u90a3\u4e48\u5982\u679c\u6211\u4eec\u6c42\u51fa\u6765\u4e86 \\(1\\) \u548c \\(n\\) \u5230\u6bcf\u4e2a\u70b9\u7684\u6700\u5c0f\u7684\u6700\u5927\u8fb9\u7684\u957f\u5ea6\uff0c\u53c8\u8be5\u600e\u4e48\u5f97\u5230\u7b54\u6848\u5462\uff1f</p> <p>\u6211\u5c31\u662f\u4e0d\u592a\u80fd\u60f3\u5f97\u5230\u8fd9\u91cc\uff0c\u6211\u60f3\u7684\u662f\uff0c\u4f60\u662f\u4e0d\u662f\u53ef\u4ee5\u5c1d\u8bd5\u53bb\u8d70\u6240\u6709\u5c0f\u4e8e\u7b49\u4e8e\u67d0\u4e2a\u957f\u5ea6\u7684\u8fb9\uff0c\u7136\u540e\u770b\u80fd\u8d70\u5230\u7684\u6700\u5c0f\u8fb9\u662f\u5565\uff0c\u4f46\u663e\u7136\u65f6\u95f4\u590d\u6742\u5ea6\u4e0d\u592a\u884c\u3002\u3002\u3002</p> <p>\u770b\u4e86\u9898\u89e3\u624d\u611f\u89c9\uff0c\u771f\u5999\u554a\uff0c\u5176\u5b9e\u4e5f\u633a\u7b80\u5355\u3002\u6211\u4eec\u53bb\u679a\u4e3e\u6bcf\u4e00\u6761\u8fb9\uff0c\u5bf9\u4e8e \\(u, v, w\\) \u8fd9\u6761\u8fb9\uff0c\u5047\u5982\u5b83\u662f \\(1\\) \u5230 \\(n\\) \u4e2d\u7684\u4e00\u6761\u8fb9\uff0c\u90a3\u4e48\u8981\u4e48\u662f \\(1\\) \u8d70\u5230 \\(u\\)\uff0c\\(v\\) \u8d70\u5230 \\(n\\)\uff0c\u8981\u4e48\u5c31\u662f\u53cd\u8fc7\u6765\u3002\u6240\u4ee5\u53ea\u8981\u6211\u4eec\u679a\u4e3e\u6bcf\u4e00\u6761\u8fb9\uff0c\u4e00\u5b9a\u53ef\u4ee5\u679a\u4e3e\u5230 \\(w\\) \u662f\u7b54\u6848\u4e2d\u7684\u6700\u77ed\u8fb9\uff0c\u518d\u52a0\u4e0a\u4e24\u7aef\u7684\u6700\u5927\u8ddd\u79bb\u5c31\u53ef\u4ee5\u4e86\u3002</p> <p>\u597d\u50cf\u5176\u5b9e\u6ca1\u4ec0\u4e48\u96be\u7684\u5730\u65b9\uff0c\u8fd9\u79cd\u9898\u4e00\u5b9a\u8981\u8003\u8651\u5c31\u662f\u679a\u4e3e\u6bcf\u4e00\u6761\u8fb9\u4f5c\u4e3a\u8def\u5f84\u7684\u4e00\u90e8\u5206\u3002\u800c\u4e14\u8fd8\u662f\u4ee5\u524d\u770b\u8fc7\u7684\u539f\u9898\uff0c\u53e6\u4e00\u9898\u771f\u7684\u57fa\u672c\u4e00\u6a21\u4e00\u6837\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nusing pii = pair&lt;int, int&gt;;\n\nvoid solve()\n{\n    // \u57fa\u672c\u4e0a\u4e00\u6a21\u4e00\u6837 https://codeforces.com/gym/104857/problem/J\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    vector&lt;vector&lt;pii&gt;&gt; vec(n + 1);\n    vector&lt;array&lt;int, 3&gt;&gt; edges;\n    for(int i = 1; i &lt;= m; i++){\n        int u, v, w;\n        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;\n        vec[u].push_back({v, w});\n        vec[v].push_back({u, w});\n        edges.push_back({u, v, w});\n    }\n    /*\n    \u5982\u679c\u53ef\u4ee5\u77e5\u9053\u53ea\u7ecf\u8fc7\u5c0f\u4e8e w \u7684\u8fb9\u53ef\u4ee5\u5230\u8fbe\u7684\u6700\u77ed\u7684\u8fb9\u662f\u591a\u5c11\uff0c\u4f1a\u6bd4\u8f83\u65b9\u4fbf\n    \u56e0\u4e3a\u5982\u679c\u53ea\u7b97\u67d0\u4e2a\u70b9\u5230 1 \u548c  n \u7ecf\u8fc7\u7684\u6700\u5927\u8fb9\uff0c\u662f\u6bd4\u8f83\u65b9\u4fbf\u7684\uff0c\u4e14\u4e0d\u600e\u4e48\u5f71\u54cd\u5c0f\u7684\u8fb9\n    \u53cd\u4e4b\u5f71\u54cd\u66f4\u5927\uff0c\u4e0d\u65b9\u4fbf\n\n    \u5443 \u662f\u4e0d\u662f\u4e0d\u7528\u8003\u8651\u90a3\u4e48\u591a \u6c42\u6700\u77ed\u7684\u6700\u5927\u8fb9\u7684\u65f6\u5019 \u987a\u4fbf\u8bb0\u5f55\u7ecf\u8fc7\u7684\u6700\u5c0f\u8fb9\u662f\u4e0d\u662f\u5c31\u884c\u4e86\n    */\n    auto dijkstra = [&amp;](int s) -&gt; vector&lt;int&gt; {\n        vector&lt;int&gt; dis(n + 1, 1e9);\n        priority_queue&lt;array&lt;int, 2&gt;, vector&lt;array&lt;int, 2&gt;&gt;, greater&lt;&gt;&gt; pq;\n        pq.push({0, s});\n        while(pq.size()){\n            auto [dist, u] = pq.top();\n            pq.pop();\n            if(dis[u] &lt; dist) continue;\n            for(auto [v, w] : vec[u]){\n                if(max(w, dist) &lt; dis[v]){\n                    dis[v] = max(w, dist);\n                    pq.push({dis[v], v});\n                }\n            }\n        }\n        return dis;\n    };\n    vector&lt;int&gt; dis1 = dijkstra(1);\n    vector&lt;int&gt; disn = dijkstra(n);\n    int ans = INT_MAX;\n    for(auto [u, v, w] : edges){\n        // cerr &lt;&lt; format(\"u, v, w : [{}, {}, {}]\\n\", u, v, w);\n        // cerr &lt;&lt; format(\"dis1[u], disn[v] : {} {} dis1[v], disn[u] : {} {}\\n\", dis1[u], disn[v], dis1[v], disn[u]);\n        ans = min(ans, min(max({dis1[u], disn[v], w}), max({dis1[v], disn[u], w})) + w);\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr), cout.tie(nullptr);\n    int t;\n    cin &gt;&gt; t;\n    while(t--)\n        solve();\n    return 0;\n}\n</code></pre> <p>\u8fd9\u4e2a\u9898\u76ee\u8fd8\u53ef\u4ee5\u7528 dsu \u6765\u505a\u3002\u56e0\u4e3a\u662f\u6700\u5927\u8fb9\u52a0\u6700\u5c0f\u8fb9\uff0c\u6211\u4eec\u53ef\u4ee5\u6309\u8fb9\u6743\u6392\u5e8f\uff0c\u7136\u540e\u52a0\u8fb9\uff0c\u82e5 \\(1\\) \u548c \\(n\\) \u8054\u901a\uff0c\u5219\u4e00\u5b9a\u53ef\u4ee5\u7ecf\u8fc7\u8be5\u8fde\u901a\u5757\u4e2d\u7684\u6700\u5c0f\u8fb9\u3002</p> <p>\u5199\u4e86\u4e00\u4e0b dsu \u5199\u6cd5\uff0c\u4e0d\u8fc7\u672c\u6765\u6211\u662f\u4e0d\u592a\u7406\u89e3\u4e3a\u4ec0\u4e48\u53ef\u4ee5 dsu\uff0c\u8fd9\u4e2a\u4e5f\u662f\u633a\u4e0d\u9519\u7684\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nusing pii = pair&lt;int, int&gt;;\n\nvoid solve()\n{\n    // \u57fa\u672c\u4e0a\u4e00\u6a21\u4e00\u6837 https://codeforces.com/gym/104857/problem/J\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    vector&lt;array&lt;int, 3&gt;&gt; edges;\n    for(int i = 1; i &lt;= m; i++){\n        int u, v, w;\n        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;\n        edges.push_back({u, v, w});\n    }\n    vector&lt;int&gt; f(n + 1), mn(n + 1, 1e9);\n    iota(f.begin() + 1, f.end(), 1);\n\n    auto find = [&amp;](auto &amp;&amp;self, int x) -&gt; int{\n        return f[x] == x ? x : f[x] = self(self, f[x]);\n    };\n    ranges::sort(edges, [](array&lt;int, 3&gt; x, array&lt;int, 3&gt; y){\n        return x[2] &lt; y[2];\n    });\n    int ans = 2e9;\n    for(auto [u, v, w] : edges){\n        int fu = find(find, u), fv = find(find, v);\n        mn[fv] = min(mn[fv], w);\n        mn[fu] = min(mn[fu], mn[fv]);\n        f[fv] = fu;\n        if(find(find, 1) == find(find, n)){\n            ans = min(ans, mn[f[1]] + w);\n        }\n    }\n    cout &lt;&lt; ans &lt;&lt; '\\n';\n}\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr), cout.tie(nullptr);\n    int t;\n    cin &gt;&gt; t;\n    while(t--)\n        solve();\n    return 0;\n}\n</code></pre> <p>\u90a3\u4e48\u5bf9\u4e8e dijkstra \u7684\u65b9\u6cd5\uff0c\u5176\u5b9e\u6211\u4eec\u672c\u8d28\u53ea\u7528\u679a\u4e3e \\(w\\) \u4f5c\u4e3a\u8def\u5f84\u4e2d\u7684\u6700\u77ed\u8fb9\uff0c\u56e0\u4e3a\u6211\u521a\u624d\u770b\u4e86\u4e00\u4e0b\u5408\u80a5\u90a3\u4e2aJ\u6211\u4e4b\u524d\u5199\u7684\u4ee3\u7801\u3002\u3002\u3002\u73b0\u5728\u5bf9\u8fd9\u4e2a\u9898\uff0c\u611f\u89c9\u66f4\u6e05\u6670\u4e86\u4e00\u4e9b\u3002</p> <p>\u56e0\u4e3a\u4e0d\u7ba1\u4f60\u8def\u5f84\u600e\u4e48\u8d70\uff0c\u4e00\u5b9a\u4f1a\u6709\u4e00\u4e2a\u8fb9\u6765\u5f53\u6700\u77ed\u7684\u90a3\u4e2a\u8fb9\uff0c\u5e76\u4e14\u6211\u4eec\u7528 dijkstra \u7b97\u51fa\u6765\u7684\u6bcf\u4e2a\u70b9\u5230 \\(1\\) \u548c \\(n\\) \u7684\u7ecf\u8fc7\u7684\u6700\u77ed\u7684\u6700\u5927\u7684\u8fb9\uff0c\u8fd9\u4e2a\u4e1c\u897f\u4e5f\u662f\u4fdd\u8bc1\u4e00\u5b9a\u6b63\u786e\u7684\u3002</p>"},{"location":"daily/2025/0801/#2023icpcj","title":"2023ICPC\u5408\u80a5\u533a\u57df\u8d5bJ\u9898","text":"<p>\u8fd9\u4e2a\u9898\u7b80\u76f4\u662f\u8ddf\u4e0a\u9762\u4e00\u9898\u4e00\u6a21\u4e00\u6837\u7684\uff0c\u662f\u53bb\u5e74\u5341\u6708\u4efdVP\u7684\uff0c\u5f53\u65f6\u5c31\u4e0d\u4f1a\uff0c\u7136\u540e\u770b\u4e86\u9898\u89e3\u3002\u4f46\u663e\u7136\u6ca1\u600e\u4e48\u8bb0\u4f4f\uff0c\u4f46\u662f\u80fd\u8bb0\u5f97\u4ee5\u524d\u5199\u8fc7\u4e5f\u662f\u8fd8\u7b97\u53ef\u4ee5\u4e86\u54c8\u54c8\u54c8\u3002</p> <p>\u8fd9\u4e2a\u9898\u8def\u5f84\u7684\u6743\u503c\u662f\u6700\u5927\u8fb9\u52a0\u6b21\u5927\u7684\u8fb9\uff0c\u6211\u4eec\u540c\u6837\u4e0d\u597d\u6c42\u3002\u90a3\u4e48\u6211\u4eec\u76f4\u63a5\u679a\u4e3e\u6bcf\u4e00\u6761\u8fb9\u4f5c\u4e3a\u6700\u5927\u8fb9\uff0c\u7b2c\u4e8c\u5927\u7684\u8fb9\u80af\u5b9a\u662f \\(min(max(path(1, u), path(v, n)), max(path(1, v), path(u, n)))\\)\u3002</p> <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nusing ll = long long;\nusing pii = pair&lt;int,int&gt;;\nusing pll = pair&lt;ll,ll&gt;;\nconst int INF = 1000000000;\nconst ll LNF = 1000000000000000000;\n// #define int long long\nsigned main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    cout.tie(0);\n    int n,m;\n    cin&gt;&gt;n&gt;&gt;m;\n    vector&lt;vector&lt;pair&lt;int,int&gt;&gt;&gt;adj(n+1,vector&lt;pair&lt;int,int&gt;&gt;());\n    vector&lt;array&lt;int,3&gt;&gt;edge(m);\n    for(int i=1;i&lt;=m;i++){\n        int u,v,w;\n        cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;\n        adj[u].push_back({v,w});\n        adj[v].push_back({u,w});\n        edge[i-1]={u,v,w};\n    }\n    auto dij=[&amp;](int s){\n        vector&lt;int&gt;dis(n+1,INF);\n        priority_queue&lt;pii,vector&lt;pii&gt;,greater&lt;pii&gt;&gt;pq;\n        dis[s]=0;\n        pq.push({dis[s],s});\n        while(!pq.empty()){\n            auto [d,id]=pq.top();\n            pq.pop();\n            if(d&gt;dis[id]) continue;\n            for(auto [v,w]:adj[id]){\n                int l=max(d,w);\n                if(l&lt;dis[v]){\n                    dis[v]=l;\n                    pq.push({dis[v],v});\n                }\n            }\n        }\n        return dis;\n    };\n    int ans=2*INF;\n    vector dis1=dij(1),dis2=dij(n);\n    for(auto [i,v,w]:edge){\n        int y=min(max(dis1[i],dis2[v]),max(dis2[i],dis1[v]));\n        if(y&lt;=w)\n            ans=min(ans,w+y);\n    }\n    cout&lt;&lt;ans&lt;&lt;'\\n';\n    return 0;\n}\n</code></pre>"},{"location":"daily/2025/0801/#_1","title":"\u603b\u7ed3","text":"<p>\u8fd9\u4e24\u9898\u5176\u5b9e\u90fd\u4e0d\u662f\u5f88\u96be\uff0c\u5e76\u4e14\u7528\u7684\u65b9\u6cd5\u4e5f\u662f\u4e00\u6a21\u4e00\u6837\u7684\u3002\u548b\u8bf4\u5462\uff0c\u611f\u89c9\u60f3\u4e0d\u51fa\u6765\u4e5f\u6b63\u5e38\uff0c\u4f46\u662f\u4e0b\u6b21\u771f\u7684\u4e0d\u8981\u60f3\u4e0d\u5230\u4e00\u6837\u7684\u9898\u76ee\u4e86\uff0c\u867d\u7136\u518d\u9047\u89c1\u7684\u6982\u7387\u5f88\u5c0f\u3002</p> <p>\u603b\u4e4b\u5c31\u662f\u8981\u591a\u601d\u8003\u5427\uff0c\u5c31\u7b97\u770b\u9898\u89e3\uff0c\u4e5f\u8d77\u7801\u81ea\u5df1\u5c3d\u91cf\u80fd\u591a\u60f3\u5230\u4e00\u4e9b\u4e1c\u897f\uff0c\u8fd9\u6837\u5370\u8c61\u4f1a\u66f4\u6df1\u523b\u4e00\u4e9b\u7684\u3002</p>"},{"location":"daily/2025/2025_0118/","title":"2025-01-18","text":"<p>\u4eca\u5929\u53c8\u662f\u4ec0\u4e48\u90fd\u6ca1\u5199\u7684\u4e00\u5929\uff0c\u5c31\u665a\u4e0a\u770b\u4e86\u4e00\u4e2a\u9898\u76ee\u3002</p> <p>\u81ea\u4ece1\u670811\u53f7\u56de\u5bb6\u5230\u4eca\u5929\uff0c\u4e00\u4e2a\u661f\u671f\u591a\u4e86\uff0c\u4e00\u76f4\u5728\u73a9\uff0c\u5199\u9898\u5f88\u5c11\uff0c\u8981\u7a0d\u5fae\u591a\u5199\u4e00\u70b9\u4e86\u3002\u592a\u5e9f\u4e86\u3002\u3002\u3002</p> <p>\u521a\u624d\u770b\u4e86CF2043D\uff0c\u82b1\u4e86\u4e00\u5c0f\u65f6\u591a\u65f6\u95f4\u624dAC\uff0c\u800c\u4e14\u8fd8\u770b\u4e86\u9898\u89e3\u624d\u5199\u51fa\u6765\u3002</p> <p>\u662f\u4e00\u4e2a *1800 \u7684\u9898\u76ee\uff0c\u4f46\u662f\u611f\u89c9\u6ca1\u6709\u5f88\u96be\u7684\u3002\u3002\u3002\u4f46\u662f\u6211\u4e0d\u4f1a\u5199\u3002</p>"},{"location":"daily/2025/2025_0118/#_1","title":"\u9898\u76ee\u5927\u610f","text":"<p>\u7ed9\u4e09\u4e2a\u6570\u5b57\uff0c\\(l\\) ,\\(r\\), \\(G\\), \u627e\u51fa\u4e24\u4e2a\u6570\u5b57 \\(A\\) \u548c \\(B\\) \uff0c\u4f7f\u5f97\u5b83\u4eec\u7684\u6700\u5927\u516c\u7ea6\u6570(GCD)\u7b49\u4e8e \\(G\\) \u5e76\u4e14 \\(|A-B|\\) \u6700\u5927\u3002</p> <p>\u5982\u679c\u6709\u591a\u5bf9\u8fd9\u6837\u7684\u6570\u5b57\uff0c\u9009\u62e9 \\(A\\) \u6700\u5c0f\u7684\u3002\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u8f93\u51fa \"-1 -1\"\u3002</p> <p>\u8f93\u5165\u4e09\u4e2a\u6570\u5b57 \\(l\\), \\(r\\) , \\(G\\) (\\(1\\le l\\le r\\le10^{18}\\); $1\\le G\\le10^{18} $)</p>"},{"location":"daily/2025/2025_0118/#_2","title":"\u601d\u8def","text":"<p>\u7531\u4e8e\\(gcd(A,B)=G\\),</p> <p>\u6240\u4ee5 \\(A\\) \u548c \\(B\\) \u4e00\u5b9a\u90fd\u662f G\u7684\u500d\u6570\u3002</p> <p>\u8bb0\u4e3a \\(A=aG,B=bG\\) ,</p> <p>\u6240\u4ee5\u6211\u4eec\u9700\u8981 \\(gcd(a,b)=1\\),</p> <p>\u5373\u6211\u4eec\u8981\u627e\u5230 \\(a, b \\in [\\ \\lceil\\frac{l}{G}\\rceil\\ ,\\ \\lfloor\\frac{r}{G}\\rfloor\\ ]\\) \uff0c\u6ee1\u8db3 \\(gcd(a,b)=1\\) \uff0c\u4e14 \\(|b-a|\\) \u6700\u5927\uff0c\\(a\\) \u5c3d\u91cf\u5c0f\u3002</p> <p>\u770b\u8d77\u6765\u5f88\u9ebb\u70e6\uff0c\u4f46\u662f\u5176\u5b9e\u4e24\u4e2a\u4e92\u8d28\u7684\u6570\u662f\u975e\u5e38\u591a\u7684\uff0c\u6240\u4ee5\u76f4\u63a5\u66b4\u529b\u627e\u5e76\u4e0d\u4f1a\u627e\u5f88\u591a\u6b21\u3002</p> <p>\u6709\u8fd9\u4e48\u4e00\u4e2a\u4e8b\u5b9e\uff0c\u7d20\u6570\u662f\u5bc6\u96c6\u7684\uff0c\u8bf4\u4eba\u8bdd\u5c31\u662f\u7d20\u6570\u4e24\u4e24\u4e4b\u95f4\u6328\u7684\u975e\u5e38\u8fd1\uff0c\\(\\le n\\) \u7684\u7d20\u6570\u4e24\u4e24\u8ddd\u79bb\u5927\u7ea6\u662f \\(\\log n\\) \uff0c\u6240\u4ee5\u6700\u591a\u51e0\u5341\u6b21\u5c31\u4f1a\u627e\u5230\u4e00\u4e2a\u8d28\u6570\uff0c\u800c\u8d28\u6570\u548c\u4efb\u4f55\u6570\u5b57\u90fd\u662f\u4e92\u8d28\u7684\u3002\u6240\u4ee5\u6211\u4eec\u627e\u4e24\u4e2a\u4e92\u8d28\u7684\u6570\u53ea\u4f1a\u66f4\u5feb\u3002</p> <p>\u6240\u4ee5\u53ea\u9700\u8981\u68c0\u67e5\u6bcf\u4e00\u4e2a\u957f\u5ea6\uff0c\u662f\u5426\u53ef\u4ee5\u627e\u5230\u5408\u6cd5\u7684\u5c31\u5f73\u4e8d\u4e86\u3002</p> <pre><code>void solve()\n{\n    ll l,r,G;\n    cin&gt;&gt;l&gt;&gt;r&gt;&gt;G;\n    ll tl=((l-1)/G+1)*G,tr=r/G*G;\n    if(tl&gt;r||tr&lt;l){\n        cout&lt;&lt;\"-1 -1\\n\";\n        return;\n    }\n    l=tl,r=tr;\n    for(ll d=(r-l)/G;d&gt;=1;d--){\n        for(ll L=l/G;L+d&lt;=r/G;L++){\n            if(gcd(L,L+d)==1){\n                cout&lt;&lt;L*G&lt;&lt;\" \"&lt;&lt;(L+d)*G&lt;&lt;'\\n';\n                return;\n            }\n        }\n    }\n    if(l==G)\n        cout&lt;&lt;G&lt;&lt;\" \"&lt;&lt;G&lt;&lt;'\\n';\n    else\n        cout&lt;&lt;\"-1 -1\\n\";\n}\n</code></pre> <p>\u660e\u5929\u518d\u5199\uff08\uff09\u3002</p>"},{"location":"daily/2025/2025_0215/","title":"2025-02-15","text":"<p>\u4eca\u5929\u4e0b\u5348\u521a\u5230\u5b66\u6821\u554a\uff0c\u8fd9\u4e2a\u5bd2\u5047\u8fc7\u5f97\u771f\u5feb\u3002\u3002\u3002</p> <p>\u4f46\u5176\u5b9e\u8fd9\u4e2a\u5bd2\u5047\u4ec0\u4e48\u90fd\u6ca1\u5e72\uff0c\u6ca1\u5199\u51e0\u4e2a\u9898\uff0c\u4e5f\u6ca1\u5b66\u4ec0\u4e48\u4e1c\u897f\u3002\u4f46\u662f\u8fc7\u7684\u901f\u5ea6\u53ef\u662f\u5f88\u5feb\u3002\u3002\u3002\u4e00\u4e0b\u5c31\u7ed3\u675f\u4e86\u3002</p> <p>\u62a5\u540d\u4e86\u725b\u5ba2\u5bd2\u5047\u8425\uff0c\u672c\u4ee5\u4e3a\u81ea\u5df1\u4f1a\u56e0\u4e3a\u8fd9\u4e2a\u800c\u6709\u5f88\u5927\u8fdb\u6b65\uff0c\u4f46\u662f\u6bcf\u573a\u81ea\u5df1\u7684\u6392\u540d\u90fd\u662f\u5dee\u4e0d\u591a\u7684\uff0c\u751a\u81f3\u540e\u9762\u7684\u6bd4\u524d\u9762\u7684\u8fd8\u5dee\uff0c\u6839\u672c\u6ca1\u6709\u8fdb\u6b65\u3002\u9898\u4e5f\u6ca1\u548b\u8865\u3002\u4f46\u662f\u66f4\u8ba9\u6211\u770b\u6e05\u695a\u4e86\u6211\u548c\u4ed6\u4eec\u4e4b\u95f4\u7684\u5dee\u8ddd\uff0c\u6211\u4e00\u76f4\u4e00\u5343\u591a\u540d\uff0c\u5c31\u662f\u597d\u4e0d\u4e86\u3002 <code>\u4ed6\u4eec</code> \u90fd\u597d\u5389\u5bb3\u3002\u3002\u3002</p> <p>\u4e0a\u4e0d\u53bb\u4e0b\u4e0d\u6765\u5361\u8fd9\u91cc\uff0c\uff08\uff09\u3002</p> <p>\u4eca\u5929\u5f88\u5f00\u5fc3\u7684\u5c31\u662f\u4e70\u4e86\u4e00\u4e2a\u57df\u540d\uff0c\u611f\u89c9\u5e94\u8be5\u4f1a\u6709\u5f88\u591a\u7528\u5f97\u4e0a\u7684\u5730\u65b9\uff0c\u76ee\u524d\u7528\u6765\u5f04\u6210\u535a\u5ba2\u7684\u57df\u540d\uff0c\u4e4b\u524d\u5728github pages\u7684\uff0c\u6ca1\u52a0\u901f\u5668\u5f88\u96be\u8bbf\u95ee\uff0c\u73b0\u5728\u90fd\u884c\u4e86\uff0c\u5c31\u5f88\u723d\u3002</p> <p>\u7b49\u4ee5\u540e\u6709\u4e86\u670d\u52a1\u5668\u518d\u5b66\u70b9\u6280\u672f\uff0c\u5c31\u53ef\u4ee5\u6298\u817e\u66f4\u591a\u73a9\u6cd5\u4e86\u3002</p> <p>\u7f3a\u7684\u5237\u9898\u8fd9\u5757\u4e5f\u662f\u5f97\u597d\u597d\u8865\u8865\u4e86\uff0c\u4e0a\u534a\u5e74\u4e89\u53d6\u80fd\u53bb\u7684\u6bd4\u8d5b\u4e0d\u8981\u592a\u4e22\u4eba\uff0c\u5e0c\u671b\u80fd\u6709\u597d\u70b9\u7684\u4f53\u9a8c\u3002\u660e\u5929\u5c31\u5f00\u59cb\u5237\u9898\u3002</p> <p>\u8fd9\u5b66\u671f\u7684\u8ddf\u8ba1\u7b97\u673a\u6709\u5173\u7684\u8bfe\u57fa\u672c\u90fd\u5728\u673a\u623f\uff0c\u8fd8\u662f\u5f88\u597d\u7684\uff0c\u6211\u5c06\u8ddf\u7740\u5b66\u4e00\u4e0b\u3002\u6709\u6570\u636e\u5e93\uff0cjavaweb\u548c\u8ba1\u7b97\u673a\u7ec4\u6210\u539f\u7406\u3002\u611f\u89c9\u5e94\u8be5\u4f1a\u6709\u4e00\u4e9b\u6bd4\u8f83\u6709\u610f\u601d\u7684\u5185\u5bb9\u3002\u800c\u4e14JavaWeb\u7684\u6559\u6750\u8fd8\u662f\u9ed1\u9a6c\u7a0b\u5e8f\u5458\u7684\uff0c\u6709\u70b9\u610f\u601d\u54c8\u3002\u8001\u5e08\u5f88\u597d\uff0c\u6211\u5c06\u597d\u597d\u5b66\u4e60\u3002</p> <p>\u6211\u5199\u8fd9\u79cd\u5185\u5bb9\u8001\u662f\u7279\u522b\u4e71\u7684\uff0c\u4e0d\u77e5\u9053\u8981\u5199\u4e9b\u4ec0\u4e48\u3002\u3002\u3002</p> <p>\u603b\u4e4b\u8fc7\u53bb\u7684\u90fd\u5df2\u7ecf\u8fc7\u53bb\u4e86\uff0c\u6211\u76f8\u4fe1\u81ea\u5df1\u4f1a\u5199\u4e00\u4e9b\u9898\u76ee\u7684\uff0c\u4f1a\u6709\u5f88\u5927\u5f88\u5927\u7684\u8fdb\u6b65\u7684\u3002</p>"},{"location":"daily/2025/2025_0311/","title":"\u600e\u4e48\u624d\u80fd\u6210\u4e3a\u9ad8\u624b\u554a","text":"<p>\u6700\u8fd1\u597d\u96be\u53d7\u554a\uff0cCF\u6ca1\u6709\u4e00\u628a\u4e0a\u5206\u7684\u3002\u5dee\u4e0d\u591a\u534a\u5e74\u524d\u5c31\u4e0a\u8fc7\u84dd\u4e86\uff0c\u73b0\u5728\u8fd8\u5728\u9752\uff0c\u4e00\u76f4\u5361\u7740\u3002\u6211\u5df2\u7ecf\u597d\u4e45\u597d\u4e45\u6ca1\u6709\u4f53\u9a8c\u8fc7\u4e0a\u5206\u7684\u5feb\u4e50\u4e86\u554a\u3002</p> <p>\u6211\u771f\u7684\u6709\u53ef\u80fd\u4e0a\u53bb\u5417\uff1f\u6211\u771f\u7684\u80fd\u4e00\u76f4\u4fdd\u6301\u84dd\u540d\u5417\uff1f\u8fd9\u6837\u4e0b\u53bb\u4e00\u70b9\u4f53\u9a8c\u90fd\u6ca1\u6709\u554a\uff0c\u597d\u96be\u53d7\u3002\u518d\u7ec3\u4e00\u6bb5\u65f6\u95f4\u5427\uff0c\u6211\u8981\u771f\u6b63\u7684\u52aa\u529b\uff0c\u6295\u5165\u5f97\u66f4\u591a\u3002</p> <p>\u5982\u679c\u5b9e\u5728\u8fd8\u662f\u4e0d\u80fd\u4fdd\u6301\u84dd\u540d\uff0c\u90a3\u4e48\u6211\u662f\u5426\u8981\u653e\u5f03\u8fd9\u4e2a\u5462\uff1f\u4e3a\u4ec0\u4e48\u6211\u5c31\u6ca1\u522b\u4eba\u5389\u5bb3\u5462\uff1f\u6211\u5199\u7684\u9898\u4e5f\u4e0d\u7b97\u5c11\u4e86\uff0c\u6211\u611f\u89c9\u5199\u9898\u6bd4\u6211\u5c11\u5f88\u591a\u7684\u4eba\u90fd\u6bd4\u6211\u5389\u5bb3\u3002</p> <p>\u5176\u5b9e\u4e5f\u662f\u5408\u7406\u7684\uff0c\u5199\u4e86\u90a3\u4e48\u591a\u4e86\uff0c\u771f\u6b63\u7684\u81ea\u5df1\u601d\u8003\u8db3\u591f\u591a\u7684\u80fd\u6709\u591a\u5c11\uff1f\u800c\u4e14\u5199\u4e86\u5f88\u591a\u6c34\u9898\u5427\uff0c\u6ca1\u6709\u8865\u7684\u9898\u975e\u5e38\u975e\u5e38\u7684\u591a\u3002\u5199\u9898\u770b\u4e0d\u4e86\u4e00\u4f1a\u53ef\u80fd\u5c31\u9700\u8981\u770b\u9898\u89e3\u4e86\u3002</p> <p>\u4f46\u662f\u6211\u53c8\u611f\u89c9\u81ea\u5df1\u6709\u4e00\u4e9b\u8fdb\u6b65\uff0c\uff0c\uff0c\u3002\u3002\u3002</p> <p>\u7b49\u5468\u4e09\u53bb\u81ea\u4e60\u5ba4\u5446\u4e00\u665a\u4e0a\uff0c\u770b\u770b\u80fd\u4e0d\u80fd\u591a\u5199\u4f1a\u9898\uff0c\u6216\u8005\u601d\u8003\u51fa\u70b9\u4ec0\u4e48\u4e1c\u897f\u3002\u554a\u554a\u554a\uff0c\u6211\u7684\u601d\u7eea\u975e\u5e38\u7684\u6df7\u4e71\u3002\u4e0d\u77e5\u9053\u8be5\u548b\u8bf4\u3002\u5509\u5509\uff0c\u5148\u7761\u89c9\u5427\u3002</p>"},{"location":"daily/2025/2025_0311/#_2","title":"\u6389\u5206\u5c31\u52a0\u8bad","text":"<p>\u65e2\u7136\u6389\u5206\u4e86\uff0c\u5c31\u8981\u5199\u66f4\u591a\u7684\u9898\u3002\u6211\u6709\u4ec0\u4e48\u8d44\u683c\u89c9\u5f97\u81ea\u5df1\u96be\u53d7\uff1fCF\u4e3b\u9875\u7684\u672c\u6708\u505a\u9898\u91cf\u8fde\u4e09\u4f4d\u6570\u90fd\u6ca1\u6709\uff0c\u5199\u9898\u4e0d\u591f\u591a\u7684\u8bdd\uff0c\u601d\u7ef4\u4e5f\u660e\u663e\u4e0d\u592a\u884c\u5427\u3002<code>I need solve more problems</code> </p> <p>\u53ea\u8981\u6389\u5206\u4e86\uff0c\u5c31\u5199\u66f4\u591a\u7684\u9898\uff0c\u8fd9\u6837\u8fdf\u65e9\u4f1a\u4e0a\u5206\u7684\u5427\uff08\uff09\u3002</p> <p>\u60f3\u627e\u56de\u6700\u521d\u6253CF\u7684\u90a3\u4efd\u5feb\u4e50\uff0c\u800c\u4e0d\u662f\u50cf\u73b0\u5728\u8fd9\u6837\uff0c\u6253\u5b8c\u4e4b\u540e\u9ed8\u9ed8\u96be\u53d7\u5e76\u4e14\u6301\u7eed\u6389\u5206\u3002\u6211\u4e5f\u4e0d\u60f3\u4e0b\u6b21\u53bb\u6bd4\u8d5b\u7684\u65f6\u5019\u8fd8\u662f\u9752\u540d\u3002\u3002\u3002</p>"},{"location":"daily/2025/2025_0311/#_3","title":"\u8ba1\u5212","text":"<p>\u76ee\u524d <code>solved for last month</code> \u624d 64\uff0c\u8fd9\u5468\u8981\u8ba9\u8fd9\u4e2a\u6570\u5b57\u8fbe\u5230 100 \uff1f</p> <p>\u7136\u540e\u4fdd\u6301\u8fd9\u4e2a\u6570\u5b57\u5e76\u4e0d\u9700\u8981\u82b1\u8d39\u5f88\u591a\u7cbe\u529b\u5427\uff0c\u4e00\u5468\u53bb\u81f3\u5c11\u8865\u4e00\u573a ABC \uff0c\u5c3d\u91cf\u591a\u8865\u70b9\u9898\u76ee\uff0c\u7136\u540e VP \u7684\u548c\u725b\u5ba2\u7684\u6253\u4e86\u7684\u6bd4\u8d5b\uff0c\u8fd8\u6709\u676d\u7535\u7684\u6bd4\u8d5b\uff0c\u8865\u8fd9\u4e9b\u6bd4\u8d5b\u7684\u9898\u76ee\u3002</p> <p>\u5c31\u662f\u4e3b\u8981 CF \u5237\u9898\uff0c\u6bcf\u5468\u4e00\u573a ABC + \u676d\u7535\u6bd4\u8d5b + VP\u7701\u8d5b \u5e76\u8865\u9898\uff0cCF\u65b0\u51fa\u7684\u6240\u6709\u6bd4\u8d5b\u90fd\u6253\u3002\u6216\u8005\u8bd5\u7740\u6bcf\u5929 VP \u4e00\u573a div2 \u6216\u8005 edu \uff1f \u4fdd\u6301\u4e00\u4e0b\u8282\u594f\uff1f</p> <p>\u5148\u770b\u770b\u660e\u5929\u8865\u9898\u80fd\u8865\u6210\u5565\u6837\u5427\u3002\u5c31\u662f\u5c3d\u91cf\u80fd\u770b\u7684\u81ea\u5df1\u770b\u4e00\u4e0b\uff0c\u4e0d\u884c\u5c31\u53bb\u770b\u9898\u89e3\uff0c\u80fd\u61c2\u9898\u89e3\u7684\u601d\u8defAC\u90a3\u5c31\u5199\uff0c\u6bd5\u7adfCF\u4e0a\u7684\u9898\u76ee\u662f\u65e0\u5c3d\u7684\uff0c\u8fd8\u6709ATC\u4e4b\u7c7b\u7684\uff0c\u4e0d\u7528\u62c5\u5fc3\u6d6a\u8d39\u4e86\u9898\u76ee\u3002</p>"},{"location":"daily/2025/2025_0311/#_4","title":"\u5fd8\u4e86","text":"<p>\u521a\u624d\u7a81\u7136\u60f3\u5230\u4e86\u4ec0\u4e48\uff0c\u4f46\u662f\u53c8\u5fd8\u8bb0\u4e86\u3002\u65f6\u5019\u4e0d\u65e9\u4e86\uff0c\u8be5\u7761\u89c9\u4e86\u3002</p>"},{"location":"daily/table/01/","title":"\u65e5\u5e38\u8bb0\u5f55\u8868 1","text":"<p>created: 2025-06-25</p> <p>\u6211\u611f\u89c9\u5c31\u7b97\u9047\u5230\u770b\u8d77\u6765\u518d\u4e0d\u60f3\u5199\u7684\u9898\u76ee\uff0c\u4e5f\u6700\u597d\u4e0d\u8981\u76f4\u63a5\u5c31\u770b\u9898\u89e3\u4e86\u3002\u4e8e\u662f\u4ece\u8fd9\u91cc\u5f00\u59cb\uff0c\u6211\u51b3\u5b9a\u5c06\u8bb0\u5f55\u5199\u7684\u4e00\u4e9b\u6bd4\u8f83\u6709\u96be\u5ea6\u7684\u9898\uff0c\u4ee5\u53ca\u662f\u5426\u770b\u4e86\u9898\u89e3\uff0c\u548c\u4e00\u4e9b\u60f3\u6cd5\u5427\u3002</p> \u9898\u53f7 \u96be\u5ea6 tag time Editorial? \u603b\u7ed3 CF2112E 2100 DP \u6811 06-25 Yes \u8fd9\u9898\u57fa\u672c\u521a\u70b9\u5f00\u5c31\u770b\u9898\u89e3\u4e86\u6709\u70b9\u4e0d\u5e94\u8be5\uff0c\u5176\u5b9e\u662f\u53ef\u4ee5\u601d\u8003\u4e00\u4e9b\u4e1c\u897f\u7684\uff0c\u867d\u7136\u672a\u5fc5\u80fd\u5199\u51fa\u6765\u3002 CF2120E 2100 \u4e8c\u5206 06-27 Yes \u770b\u4e86\u9898\u89e3\uff0c\u770b\u61c2\u4e86\u3002\u611f\u89c9\u5f88\u96be\u60f3\u51fa\u6765\u3002"},{"location":"daily/table/01/#cf2112e","title":"CF2112E","text":"<p>\u8fd9\u9898\u662f\u771f\u4e0d\u8be5\u4e00\u5f00\u59cb\u5c31\u770b\u9898\u89e3\uff0c\u8fd9\u4e5f\u662f\u6211\u65b0\u5efa\u8fd9\u4e2a\u6587\u4ef6\u7684\u60f3\u6cd5\uff0c\u4ee5\u540e\u8981\u81ea\u5df1\u603b\u7ed3\u4e00\u4e0b\uff0c\u53cd\u601d\u4e00\u4e0b\u3002</p> <p>\u8fd9\u9898\u6211\u89c9\u5f97\u6211\u8d77\u7801\u8981\u81ea\u5df1\u60f3\u5230\u6bcf\u4e2a\u8282\u70b9\u82e5\u4e0d\u4e3a\u7eff\u8272\u5219\u53ea\u80fd\u5168\u90e8\u989c\u8272\u76f8\u540c\uff0cDP\u53ef\u80fd\u60f3\u4e0d\u5230\u4e5f\u6b63\u5e38\u5427\uff0c\u4f46\u662f\u7b2c\u4e00\u6b65\u4e5f\u540c\u6837\u91cd\u8981\uff0c\u76f4\u63a5\u770b\u9898\u89e3\u80af\u5b9a\u5370\u8c61\u4e0d\u4f1a\u5f88\u6df1\uff0c\u5bf9\u601d\u7ef4\u53ef\u80fd\u4e5f\u63d0\u5347\u6709\u9650\u3002\u5982\u679c\u4e0d\u5199\u535a\u5ba2\uff0c\u90a3\u8ddf\u6ca1\u5199\u9898\u4e5f\u6ca1\u5565\u533a\u522b\u4e86\u3002</p>"},{"location":"daily/table/01/#cf2120e","title":"CF2120E","text":"<p>\u8fd8\u884c\uff0c\u521a\u5f00\u59cb\u770b\u9898\u89e3\u5f88\u96be\u53d7\uff0c\u770b\u4e0d\u660e\u767d\u4ed6\u90a3\u4e2a\u4e8c\u5206\u662f\u5e72\u5565\u7684\uff0c\u4ee5\u53ca\u540e\u9762\u7684\u64cd\u4f5c\u4e5f\u4e0d\u662f\u5f88\u61c2\u3002</p> <p>\u5c31\u662f\u6015\u6709\u70b9\u9ebb\u70e6\uff0c\u4f46\u662f\u5176\u5b9e\u8fd8\u597d\u7684\uff0c\u8010\u5fc3\u770b\uff0c\u81ea\u5df1\u4e5f\u662f\u53ef\u4ee5\u770b\u61c2\u7684\u3002</p> <p>\u8fd9\u4e2a\u9898\u5176\u5b9e\u8fd8\u662f\u6bd4\u8f83\u6709\u96be\u5ea6\u7684\uff0c\u8fd9\u6837\u770b\u4e86\u9898\u89e3\u4e5f\u5f88\u723d\u3002\u800c\u4e14\u5199\u96be\u9898\u770b\u9898\u89e3\u672c\u6765\u5c31\u5f88\u6b63\u5e38\uff0c\u56e0\u4e3a\u5b9e\u529b\u4e0d\u591f\u3002</p>"},{"location":"develepment/frontend/main/","title":"Main","text":""},{"location":"develepment/frontend/main/#_1","title":"\u524d\u7aef\u57fa\u7840\u77e5\u8bc6","text":"<p>\u8fd9\u4e00\u90e8\u5206\u5185\u5bb9\u4e0d\u662f\u5f88\u4f1a\uff0c\u6b63\u5728\u5b66\u4e60\u3002</p> <p>\u6211\u4eec\u8981\u901a\u8fc7css\u6765\u8c03\u6574\u7f51\u9875\u7684\u5e03\u5c40\u3002</p> <p>\u53c2\u8003\u8d44\u6599:</p> <p>CSS \u9009\u62e9\u5668 - CSS\uff1a\u5c42\u53e0\u6837\u5f0f\u8868 | MDN</p> <p>\u8ba1\u5212\u662f\u6211\u5b66\u4e00\u70b9\u4e1c\u897f\u5c31\u7a0d\u5fae\u8bb0\u4e00\u70b9\uff0c\u7136\u540e\u7b49\u6211\u638c\u63e1\u6bd4\u8f83\u719f\u7ec3\uff0c\u5c31\u51fa\u4e00\u4e0b\u5b8c\u6574\u7f51\u9875\u7684\u8bb2\u89e3\u3002</p>"},{"location":"develepment/frontend/main/#css","title":"CSS\u5c5e\u6027","text":""},{"location":"develepment/frontend/main/#1css","title":"1.CSS\u8bed\u6cd5","text":"<p>CSS \u7531 \u9009\u62e9\u5668\uff08Selector\uff09 \u548c \u58f0\u660e\uff08Declaration\uff09 \u7ec4\u6210\uff1a</p> <pre><code>\u9009\u62e9\u5668 {\n    \u5c5e\u6027: \u503c;\n}\n</code></pre>"},{"location":"develepment/frontend/main/#_2","title":"\u4f8b\u5b50\uff1a","text":"<pre><code>p {\n    color: red;       /* \u8bbe\u7f6e\u6587\u672c\u989c\u8272\u4e3a\u7ea2\u8272 */\n    font-size: 20px;  /* \u8bbe\u7f6e\u5b57\u4f53\u5927\u5c0f\u4e3a20px */\n}\n</code></pre> <p>\u50cf\u8fd9\u6837\u5c31\u662f\u8bbe\u7f6e\u6240\u6709\u7684 <code>&lt;p&gt;</code> \u6807\u7b7e\u7684\u6837\u5f0f\u3002</p> <p>\u6bcf\u4e2a\u5c5e\u6027\u540e\u9762\u8981\u5206\u53f7\uff0c\u5927\u62ec\u53f7\u540e\u9762\u4e0d\u8981\u5206\u53f7\uff01</p>"},{"location":"develepment/frontend/main/#2css","title":"2.CSS\u9009\u62e9\u5668","text":"<p>\u9009\u62e9\u5668\u6709\u597d\u591a\u79cd\uff0c\u53ea\u8bf4\u4e00\u4e0b\u6211\u76ee\u524d\u7528\u8fc7\u7684\u3002</p>"},{"location":"develepment/frontend/main/#_3","title":"\u901a\u7528\u9009\u62e9\u5668","text":"<pre><code>* {\n}\n</code></pre> <p>\u5339\u914d\u6587\u6863\u7684\u6240\u6709\u5143\u7d20\u3002\u7ed9\u6240\u6709\u6807\u7b7e\u8bbe\u7f6e\u6837\u5f0f\u3002</p>"},{"location":"develepment/frontend/main/#_4","title":"\u5143\u7d20\u9009\u62e9\u5668","text":"<pre><code>header {\n    display: flex;\n    padding: 5px;\n    margin: 0px;\n    align-items: center;\n}\n</code></pre> <p>\u7c7b\u4f3c\u8fd9\u79cd\uff0c\u524d\u9762\u662f\u6807\u7b7e\u540d\u3002\u53ef\u4ee5\u8bbe\u7f6e\u6240\u6709\u8fd9\u4e2a\u6807\u7b7e\u7684\u6837\u5f0f\u3002\u6211\u8fd9\u4e2a\u5c31\u662f\u8bbe\u7f6e\u7684\u6240\u6709\u7684 <code>&lt;header&gt;</code> \u6807\u7b7e\u7684\u6837\u5f0f\u3002</p>"},{"location":"develepment/frontend/main/#_5","title":"\u7c7b\u9009\u62e9\u5668","text":"<p>\u9009\u62e9\u7279\u5b9a\u7684\u7c7b\u3002</p> <pre><code>.navbar {\n    display: flex;\n    align-items: center;\n    margin-left: auto; /* \u4f7f\u5f97\u5bfc\u822a\u680f\u81ea\u52a8\u79fb\u52a8\u5230\u53f3\u8fb9 */\n    margin-right: 50px;\n}\n</code></pre> <p>\u9009\u62e9\u6240\u6709navbar\u7c7b\uff0c\u5927\u62ec\u53f7\u524d\u9762\u662f <code>.classname</code> \uff0c\u4e00\u4e2a\u70b9+\u7c7b\u540d\u3002\u5728\u9700\u8981\u7684\u6807\u7b7e\u91cc\u8bbe\u7f6eclass\u5c5e\u6027\uff0c\u7136\u540e\u901a\u8fc7class\u6765\u9009\u62e9\u5143\u7d20\u3002</p>"},{"location":"develepment/frontend/main/#id","title":"ID\u9009\u62e9\u5668","text":"<p>\u6309\u7167 <code>id</code> \u5c5e\u6027\u9009\u62e9\u4e00\u4e2a\u4e0e\u4e4b\u5339\u914d\u7684\u5143\u7d20\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4e00\u4e2a\u6587\u6863\u4e2d\uff0c\u6bcf\u4e2a ID \u5c5e\u6027\u90fd\u5e94\u5f53\u662f\u552f\u4e00\u7684\u3002</p> <p>\u8bed\u6cd5\uff1a<code>#idname</code></p> <p>\u4f8b\u5b50\uff1a<code>#toc</code> \u5339\u914d ID \u4e3a \"toc\" \u7684\u5143\u7d20\u3002</p> <p>\u8fd9\u4e2a\u8fd8\u6ca1\u7528\u8fc7\uff0c<code>id</code> \u5c5e\u6027\u8fd8\u6ca1\u7528\u8fc7\u3002</p>"},{"location":"develepment/frontend/main/#_6","title":"\u7ec4\u5408\u9009\u62e9\u5668","text":"<p>\u53ef\u4ee5\u540c\u65f6\u9009\u62e9\u591a\u4e2a\u5143\u7d20\u3002</p> <pre><code>.search_button, .search_input {\n    box-sizing: border-box; /* \u4f7f\u5f97\u8f93\u5165\u6846\u548c\u641c\u7d22\u6309\u94ae\u9ad8\u5ea6\u76f8\u540c */\n    height: 32px;\n    align-items: center;\n    display: flex;\n    justify-content: center;\n}\n</code></pre> <p>\u6211\u8fd9\u4e2a\u5c31\u662f\u540c\u65f6\u8bbe\u7f6e\u8fd9\u4e24\u4e2a\u7c7b\u7684\u5c5e\u6027\uff0c\u53ef\u4ee5\u7b80\u5316\u8fd9\u4e9b\u5171\u540c\u7684\u5c5e\u6027\uff0c\u4e0d\u9700\u8981\u5199\u4e24\u6b21\u4e86\u3002\u3002</p> <p>\u7528\u6cd5\u5c31\u662f <code>A, B</code> \uff0c\u53ef\u4ee5\u9009\u62e9\u591a\u4e2a\u5143\u7d20\uff0c\u7528\u9017\u53f7\u8fde\u63a5\uff0c\u53ef\u4ee5\u662f\u4e0d\u540c\u7684\u9009\u62e9\u5668\u8fde\u4e00\u8d77\uff0c\u4f8b\u5982\u5143\u7d20\u9009\u62e9\u5668\u548c\u7c7b\u9009\u62e9\u5668\uff0c\u4e5f\u53ef\u4ee5\u7ec4\u6210\u4e00\u4e2a\u9009\u62e9\u5668\u5217\u8868\u3002</p>"},{"location":"develepment/frontend/main/#_7","title":"\u540e\u4ee3\u9009\u62e9\u5668","text":"<p>\u53ef\u4ee5\u8bbe\u7f6e\u4e0d\u540c\u7684\u5c42\u7ea7\u3002</p> <pre><code>.product p {\n    display: -webkit-box;\n    -webkit-line-clamp: 2;  /* \u9650\u5236\u6700\u591a\u663e\u793a3\u884c */\n    -webkit-box-orient: vertical;  /* \u5782\u76f4\u6392\u5217 */\n    overflow: hidden;  /* \u8d85\u51fa\u5185\u5bb9\u9690\u85cf */\n    text-overflow: ellipsis;  /* \u8d85\u51fa\u90e8\u5206\u663e\u793a\u7701\u7565\u53f7 */\n    white-space: normal;  /* \u5141\u8bb8\u6362\u884c */\n    word-wrap: break-word;  /* \u81ea\u52a8\u6362\u884c */\n\n    line-clamp: 2;                     /* \u6807\u51c6\u5199\u6cd5 */\n    box-orient: vertical;              /* \u6807\u51c6\u5199\u6cd5 */\n}\n</code></pre> <p>\u7528\u6cd5\u5c31\u662f <code>A B</code> \uff0c\u7528\u7a7a\u683c\u9694\u5f00\uff0c\u6309\u5c42\u7ea7\u9009\u62e9\u7684\uff0c\u4e5f\u53ef\u4ee5\u591a\u5c42\uff0c\u4f46\u662f\u4e00\u822c\u6ca1\u5fc5\u8981\u3002\u4e5f\u662f\u53ef\u4ee5\u7c7b\u540d\u548c\u5143\u7d20\u540d\u8fd9\u4e9b\u6df7\u5408\u7684\uff0c\u975e\u5e38\u7684\u723d\u554a\u3002</p>"},{"location":"develepment/frontend/main/#css3","title":"\u5f15\u5165css\u7684\u65b9\u5f0f\u67093\u79cd\u5e38\u89c1\u65b9\u5f0f:","text":""},{"location":"develepment/frontend/main/#_8","title":"\u5916\u90e8\u5f15\u5165","text":"<p>\u5728head\u90e8\u5206\u6dfb\u52a0 <code>link</code> \u6807\u7b7e\u5f15\u5165\u5916\u90e8CSS\u6587\u4ef6\u3002</p> <pre><code>&lt;link rel=\"stylesheet\" href=\"./css/main.css\"&gt;\n</code></pre> <p>\u8fd8\u53ef\u4ee5\u901a\u8fc7CDN\u5f15\u7528\uff0c\u6216\u8005\u76f4\u63a5\u4e0b\u8f7d\u6846\u67b6\uff0c\u6709\u7684\u4f1a\u6709\u5199\u597d\u7684CSS\uff0c\u6bd4\u5982bootstrap\u3002</p> <p>CSS\u5199\u5728\u5355\u72ec\u7684\u6587\u4ef6\u91cc\u7684\u4e00\u4e2a\u5f88\u597d\u7684\u5730\u65b9\u5c31\u662f\uff0cVS Code\u7528\u5feb\u6377\u952e\u6ce8\u91ca\u4ee3\u7801\u65f6\uff0c\u65e0\u6cd5\u6ce8\u91caHTML\u91cc\u7684style\u6807\u7b7e\u7684\u5185\u5bb9\uff0c\u56e0\u4e3aHTML\u548cCSS\u7684\u6ce8\u91ca\u662f\u4e0d\u4e00\u6837\u7684\u3002</p> <p>\u6ce8\u610f\u5355\u8bcd\u4e0d\u8981\u5199\u9519\u4e86\uff0c<code>stylesheet</code> \u540e\u9762\u6ca1\u6709s\u3002</p>"},{"location":"develepment/frontend/main/#css_1","title":"\u5185\u90e8CSS","text":"<p>\u76f4\u63a5\u5728style\u6807\u7b7e\u4e2d\u5199CSS\u4ee3\u7801\u3002</p> <p>\u4e00\u822c\u628astyle\u6807\u7b7e\u653e\u5728head\u6807\u7b7e\u91cc\u3002</p> <pre><code>&lt;head&gt;\n    &lt;style&gt;\n        body {\n            background-color: lightblue;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n</code></pre>"},{"location":"develepment/frontend/main/#css_2","title":"\u884c\u5185CSS","text":"<p>\u76f4\u63a5\u5728HTML\u6807\u7b7e\u7684 <code>style</code> \u6807\u7b7e\u4e2d\u5199\u4ee3\u7801\u3002</p> <pre><code>&lt;img src=\"img/junjie.jpg\" width=\"64px\" style=\"margin-right: 2em; \"&gt;\n</code></pre> <p>\u6bd4\u8f83\u9002\u5408\u4e34\u65f6\u6837\u5f0f\uff0c\u800c\u4e14\u6bd4\u8f83\u65b9\u4fbf\u63a7\u5236\u3002</p>"},{"location":"develepment/frontend/main/#_9","title":"\u5f15\u5165\u5b57\u4f53","text":""},{"location":"develepment/frontend/main/#cdn","title":"CDN\u5f15\u5165","text":"<pre><code>/* \u5f15\u5165\u971e\u9e5c\u6587\u6977 */\n@import url('https://cdn.jsdelivr.net/npm/lxgw-wenkai-webfont@1.1.0/style.css');\n\n/* \u5168\u5c40\u8bbe\u7f6e\u5b57\u4f53 */\nbody {\n  font-family: 'LXGW WenKai', serif !important;\n}\n</code></pre>"},{"location":"misc/MkDocs/","title":"MkDocs","text":"<p>\u770b\u5230\u5f88\u591a\u5927\u4f6c\u7684\u535a\u5ba2\u90fd\u662f\u8fd9\u4e2a Material for MkDocs , \u6211\u4e5f\u60f3\u6574\u4e00\u4e2a\uff0c\u6240\u4ee5\u6765\u5b66\u4e60\u4e00\u4e0b\u3002</p> <p>\u5176\u5b9e\u5f88\u591a\u5185\u5bb9\u53ef\u80fd\u4f1a\u662f\u6211\u590d\u5236\u5176\u4ed6\u5927\u4f6c\u7684\u535a\u5ba2\u3002</p> <p>\u6211\u4e4b\u524d\u5f04\u7684\u535a\u5ba2\u5f88\u4e71\uff0c\u4e5f\u6ca1\u66f4\u65b0\u591a\u4e45\uff0c\u5c31\u6ca1\u6709\u518d\u5f04\u4e86\u3002\u73b0\u5728\u60f3\u91cd\u65b0\u6574\u4e00\u4e2a\u3002</p> <p>\u73b0\u5728\u662f\u5728windows\u4e0a\u914d\u7f6e\u3002</p> <p>\u9996\u5148\u9700\u8981\u5b89\u88c5pip\uff0c\u5728\u8fd9\u4e4b\u524d\u8981\u5148\u5b89\u88c5python\uff0c\u4e0b\u8f7d\u94fe\u63a5\u3002</p> <p>\u597d\u5427\u4e0b\u8f7d\u5b89\u88c5\u7a0b\u5e8f\u4e4b\u540e\u4f1a\u81ea\u52a8\u5b89\u88c5\u597dpip\u3002</p> <p>\u8fd9\u91cc\u672c\u6765\u662f\u5e94\u8be5\u6709\u4e00\u5f20\u56fe\u7247\u7684\uff0c\u4f46\u662f\u8fd9\u4e2a\u63d2\u5165\u56fe\u7247\u597d\u9ebb\u70e6\uff0c\u6211\u4e5f\u4e0d\u77e5\u9053\u4e3a\u5565\u4e00\u76f4\u4e0d\u80fd\u663e\u793a\u3002\u3002\u3002</p> <p>\u5509\u5509\uff0c\u535a\u5ba2\u4e0d\u52a0\u56fe\u7247\u4e5f\u597d\uff0c\u65b9\u4fbf\u5bfc\u5165\uff0c\u4e5f\u7701\u7a7a\u95f4\u3002</p> <p>\u6211\u76f4\u63a5\u4e0b\u8f7d\u4e86\u6700\u65b0\u7248\u7684\uff0c\u53ef\u4ee5\u4e0b\u8f7d\u5176\u4ed6\u7248\u672c\uff0c\u4f46\u662f\u4e0d\u8981\u592a\u4f4e\u4e86\u3002</p>"},{"location":"misc/MkDocs/#_1","title":"\u5b89\u88c5","text":"<pre><code>pip install mkdocs-material\n</code></pre> <p>\u5728 cmd \u6216 powershell \u8f93\u5165\u4ee5\u4e0a\u5185\u5bb9\u3002</p> <p>\u6211\u62a5error\u4e86</p> <pre><code> error: Microsoft Visual C++ 14.0 or greater is required. Get it with \"Microsoft C++ Build Tools\": https://visualstudio.microsoft.com/visual-cpp-build-tools/\n      [end of output]\n\n  note: This error originates from a subprocess, and is likely not a problem with pip.\n  ERROR: Failed building wheel for regex\n  Building wheel for MarkupSafe (pyproject.toml) ... done\n  Created wheel for MarkupSafe: filename=MarkupSafe-3.0.2-py3-none-any.whl size=9325 sha256=c4cb3dbadfedcb388ee37c84f33b807769309218ed97e3e46efc94903212e884\n  Stored in directory: c:\\users\\ilyha\\appdata\\local\\pip\\cache\\wheels\\31\\d7\\9c\\91ea0a7f1bd99970c6602ae982d137132c904433343f48095b\n  Building wheel for pyyaml (pyproject.toml) ... done\n  Created wheel for pyyaml: filename=PyYAML-6.0.2-cp314-cp314-win_amd64.whl size=45437 sha256=42903cee0a60f3f89009d1c5cb7a7351f4c6e357df99414dffa2f70b581cd9c8\n  Stored in directory: c:\\users\\ilyha\\appdata\\local\\pip\\cache\\wheels\\16\\d3\\3b\\1f603c475e2c00f8749b9c112c874a87093b6fc1ef4a11ce07\nSuccessfully built MarkupSafe pyyaml\nFailed to build regex\nERROR: ERROR: Failed to build installable wheels for some pyproject.toml based projects (regex)\n</code></pre> <p>\u7f3a\u5c11visual c++\u3002\u597d\u50cf\u662f\u6211\u81ea\u5df1\u5220\u7684\uff0c\u6211\u770b\u7535\u8111\u4e0a\u81ea\u5e26\u7684\u672c\u6765\u6709visual c++\uff0c\u6211\u4e0d\u559c\u6b22\u5c31\u5220\u4e86\u3002</p> <p>\u6211\u73b0\u5728\u4e0b\u8f7d\u4e00\u4e0b\u7136\u540e\u770b\u770b\u91cd\u65b0\u5b89\u88c5\u3002</p> <p>Microsoft C++ \u751f\u6210\u5de5\u5177 - Visual Studio</p> <p>\u597d\u50cf\u65e0\u6cd5\u4e0b\u8f7d\u3002\u3002\u3002</p> <p>\u6211\u7528\u624b\u673a\u4e0a\u7684edge\u4e5f\u4e0b\u8f7d\u4e0d\u4e86\uff0c\u4f46\u662f\u81ea\u5e26\u7684\u90a3\u4e2a\u6d4f\u89c8\u5668\u4e0b\u8f7d\u6210\u529f\u4e86\u3002</p> <p>\u662f\u4e00\u4e2avisual studio installer\uff0c\u800c\u4e14\u4e0b\u8f7d\u8fdb\u5ea6\u4e00\u76f4\u4e0d\u52a8\u3002\u3002\u3002\u8981\u4e0d\u76f4\u63a5\u4e0b\u8f7d\u4e00\u4e2avisual studio\u5427\u3002</p> <p>Visual C++ Build Tools 2015</p> <p>\u670d\u4e86\uff0c\u4e00\u76f4\u8bf4\u4e0b\u8f7d\u5931\u8d25\u3002\u3002\u3002</p> <p>\u91cd\u542f\u4e00\u4e0b\u8bd5\u8bd5\u3002</p> <p>\u7136\u540e\u6211\u53c8\u53bb\u4e86\u7b2c\u4e00\u4e2a\uff0c\u4e0b\u8f7d\u6210\u529f\u4e86\u3002</p> <p>\u4f46\u662f\u8fd9\u4e2a\u662f\u4e0b\u8f7dVisual Studio 2022\u7684\uff0c\u6211\u9009\u4e8610GB\u7684\u4e1c\u897f\u4e0b\u8f7d\uff0c\u597d\u50cf\u4e0d\u7528\u4e0b\u8fd9\u4e48\u591a\u7684\u3002\u53ea\u7528\u9009\u90a3\u4e2a2015xxx\u7684\u5c31\u884c\u4e86\uff0c\u6211\u9009\u4e86C++\u684c\u9762\u5f00\u53d1\u5de5\u51777GB\uff0c2015 \u5f00\u53d1\u5de5\u51774GB\uff0c\u5e94\u8be5\u53ea\u4e0b\u90a3\u4e2a\u5c31\u884c\u7684\u3002</p> <p>ok\uff0c\u5b89\u88c5\u5b8c\u4e4b\u540e\uff0c\u8fd0\u884c\u521a\u624d\u7684pip xxxx\uff0c\u6ca1\u6709<code>error</code>\u4e86\u3002</p> <p>\u4e3b\u8981\u662f\u6211\u628a\u7535\u8111\u4e0a\u90a3\u4e2aVisual C++\u7ed9\u5220\u4e86\uff0c\u4f60\u4eec\u5982\u679c\u6ca1\u5220\uff0c\u5e94\u8be5\u4e0d\u7528\u8fd9\u4e48\u9ebb\u70e6\u3002</p> <p>\u611f\u89c9\u6bd4Ubuntu\u7684\u64cd\u4f5c\u8f7b\u677e\u5f88\u591a\uff0cUbuntu\u7528\u8fd9\u4e2apip\u7cfb\u7edf\u62a5\u8b66\u544a\uff0c\u4e0d\u8ba9\u7528\uff0c\u5f97\u5f04\u865a\u62df\u73af\u5883\u3002\u914d\u7f6eDocker\u4e5f\u975e\u5e38\u9ebb\u70e6\uff0c\u81f3\u5c11\u6211\u662f\u6ca1\u5f04\u6210\u529f\u7684\u3002</p>"},{"location":"misc/MkDocs/#_2","title":"\u65b0\u5efa\u7f51\u7ad9","text":"<p>\u5728\u5b8c\u6210Material for MkDocs\u7684\u5b89\u88c5\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528<code>mkdocs</code>\u76f8\u5173\u547d\u4ee4\u6765\u542f\u52a8\u6587\u6863\u3002\u8f6c\u5230\u8981\u653e\u7f6e\u9879\u76ee\u7684\u76ee\u5f55\uff0c\u7136\u540e\u8f93\u5165\uff1a</p> <pre><code>mkdocs new .\n</code></pre> <p>\u4ee5\u4e0a\u64cd\u4f5c\u4f1a\u65b0\u5efa\u4ee5\u4e0b\u7ed3\u6784\u7684\u6587\u4ef6\uff1a</p> <pre><code>.\n\u251c\u2500 docs/\n\u2502  \u2514\u2500 index.md\n\u2514\u2500 mkdocs.yml\n</code></pre>"},{"location":"misc/MkDocs/#_3","title":"\u914d\u7f6e","text":""},{"location":"misc/MkDocs/#_4","title":"\u6700\u5c0f\u914d\u7f6e","text":"<p>\u53ea\u9700\u8981\u7b80\u5355\u7684\u6dfb\u52a0\u4ee5\u4e0b\u51e0\u884c\u5185\u5bb9\u5230<code>mkdocs.yml</code>\u5373\u53ef\u542f\u7528\u4e3b\u9898\u3002\u8bf7\u6ce8\u610f\uff0c\u7531\u4e8e\u6709\u51e0\u79cd\u4e0d\u540c\u7684\u5b89\u88c5\u65b9\u6cd5\uff0c\u56e0\u6b64\u914d\u7f6e\u53ef\u80fd\u4f1a\u7565\u6709\u4e0d\u540c\uff1a</p> <pre><code>theme:\n  name: material\n</code></pre> <p>\u5982\u679c\u662f\u4eceGitHub\u514b\u9686\u7684MkDocs from GitHub\uff0c\u90a3\u4e48\u5e94\u5f53\u5217\u51fa\u6240\u6709\u4e3b\u9898\u7684\u9ed8\u8ba4\u9879\uff0c\u56e0\u4e3a<code>mkdocs_theme.yml</code>\u4e0d\u4f1a\u4f5c\u4e3a<code>\u5b98\u65b9\u7684\u63cf\u8ff0\u6587\u4ef6</code>\u88ab\u81ea\u52a8\u8f7d\u5165\u3002</p>"},{"location":"misc/MkDocs/#_5","title":"\u9884\u89c8","text":"<p>MkDocs\u5305\u542b\u4e00\u4e2a\u8bd5\u8bd5\u9884\u89c8\u7684\u670d\u52a1\uff0c\u6240\u6709\u53ef\u4ee5\u5728\u64b0\u5199\u6587\u6863\u7684\u8fc7\u7a0b\u4e2d\u8fdb\u884c\u5b9e\u65f6\u9884\u89c8\u3002\u5f53\u6587\u6863\u4fee\u6539\u4fdd\u5b58\u540e\uff0c\u8fd9\u4e2a\u670d\u52a1\u4f1a\u81ea\u52a8\u91cd\u5efa\u6574\u4e2a\u7f51\u7ad9\u7684\u6587\u6863\u3002\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u542f\u52a8\uff1a</p> <pre><code>mkdocs serve\n</code></pre> <p>\u4f1a\u8f93\u51fa</p> <pre><code>PS C:\\blog&gt; mkdocs serve\nINFO    -  Building documentation...\nINFO    -  Cleaning site directory\nINFO    -  Documentation built in 1.69 seconds\nINFO    -  [02:08:25] Watching paths for changes: 'docs', 'mkdocs.yml'\nINFO    -  [02:08:25] Serving on http://127.0.0.1:8000/\nINFO    -  [02:08:28] Browser connected: http://127.0.0.1:8000/\nINFO    -  Shutting down...\n</code></pre> <p>\u6309\u4f4fctrl\u7136\u540e\u70b9\u51fb\u90a3\u4e2a\u94fe\u63a5\uff0c\u4f1a\u5728\u6d4f\u89c8\u5668\u6253\u5f00\uff0c\u53ef\u4ee5\u9884\u89c8\u7f51\u7ad9\u3002</p>"},{"location":"misc/MkDocs/#_6","title":"\u751f\u6210\u7f51\u7ad9","text":"<p>\u5f53\u6587\u6863\u7f16\u8f91\u5b8c\u6210\u540e\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u5c06\u6240\u6709\u7684Markdown\u6587\u4ef6\u751f\u6210\u4e00\u4e2a\u9759\u6001\u7f51\u7ad9\uff1a</p> <pre><code>mkdocs build\n</code></pre> <p>\u8be5\u76ee\u5f55\u4e2d\u7684\u5185\u5bb9\u5c31\u662f\u9879\u76ee\u6587\u6863/\u7f51\u7ad9\u3002\u56e0\u4e3a\u662f\u5b8c\u5168\u72ec\u7acb\u7684\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u64cd\u4f5c\u6570\u636e\u5e93\u6216\u8005\u670d\u52a1\u5668\u3002\u751f\u6210\u7684\u7f51\u7ad9\u53ef\u4ee5\u6258\u7ba1\u5728GitHub Pages\u3001GitLab Pages\u3001CDN\u7f51\u7edc\u6216\u8005\u5176\u5b83\u7684web\u670d\u52a1\u5668\u4e0a\u3002</p> <p>\u8fd9\u4e5f\u592a\u4e0d\u9519\u4e86\u5427\uff0c\u914d\u7f6e\u5f88\u7b80\u5355\u3002</p>"},{"location":"misc/MkDocs/#_7","title":"\u53d1\u5e03\u7f51\u7ad9","text":"<p>\u5c06\u7f51\u7ad9\u6258\u7ba1\u5728<code>git</code>\u5e93\u4e2d\u7684\u6700\u5927\u597d\u5904\u662f\u80fd\u591f\u5728\u63a8\u9001\u65b0\u66f4\u6539\u65f6\u81ea\u52a8\u90e8\u7f72\u5b83\u3002MkDocs\u4f7f\u5f97\u8fd9\u4e00\u64cd\u4f5c\u66f4\u52a0\u7b80\u5355\u3002</p>"},{"location":"misc/MkDocs/#github-pages","title":"GitHub Pages","text":"<p>\u5982\u679c\u5df2\u7ecf\u5728GitHub\u4e0a\u6258\u7ba1\u4ee3\u7801\uff0c\u90a3\u4e48\u4f7f\u7528GitHub Pages\u6765\u53d1\u5e03\u7f51\u7ad9\u518d\u65b9\u4fbf\u4e0d\u8fc7\u4e86\u3002</p>"},{"location":"misc/MkDocs/#github-actions","title":"\u4f7f\u7528GitHub Actions","text":"<p>\u4f7f\u7528GitHub Actions\u53ef\u4ee5\u81ea\u52a8\u90e8\u7f72\u7f51\u7ad9\u3002\u5728\u5e93\u7684\u6839\u76ee\u5f55\u4e0b\u65b0\u5efa\u4e00\u4e2aGitHub Actions workflow\uff0c\u6bd4\u5982\uff1a<code>.github/workflows/ci.yml</code>\uff0c\u5e76\u7c98\u8d34\u5165\u4ee5\u4e0b\u5185\u5bb9\uff1a</p> <p>\u521b\u5efa\u8fd9\u4e2a\u8def\u5f84\u5e76\u52a0\u5165\u4ee5\u4e0b\u5185\u5bb9</p> <pre><code># .github/workflows/ci.yml\nname: ci \non:\n  push:\n    branches: \n      - main\npermissions:\n  contents: write\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - name: Configure Git Credentials\n        run: |\n          git config user.name github-actions[bot]\n          git config user.email 41898282+github-actions[bot]@users.noreply.github.com\n      - uses: actions/setup-python@v4\n        with:\n          python-version: 3.x\n      - run: echo \"cache_id=$(date --utc '+%V')\" &gt;&gt; $GITHUB_ENV \n      - uses: actions/cache@v3\n        with:\n          key: mkdocs-material-${{ env.cache_id }}\n          path: .cache\n          restore-keys: |\n            mkdocs-material-\n      - name: Install dependencies\n        run: |\n          pip install mkdocs-material\n          pip install mkdocs-glightbox\n          pip install mkdocs-git-revision-date-localized-plugin\n      - name: Deploy\n        run: mkdocs gh-deploy --force\n</code></pre>"},{"location":"misc/MkDocs/#_8","title":"\u914d\u7f6e\u81ea\u52a8\u90e8\u7f72","text":""},{"location":"misc/MkDocs/#github-pages_1","title":"\u542f\u7528 GitHub Pages","text":"<ul> <li>\u8fdb\u5165\u4ed3\u5e93\u8bbe\u7f6e -&gt; Pages - Source \u9009\u62e9 <code>gh-pages</code> \u5206\u652f - \u4fdd\u5b58\u8bbe\u7f6e</li> </ul>"},{"location":"misc/MkDocs/#_9","title":"\u914d\u7f6e\u90e8\u7f72\u5206\u652f","text":"<pre><code># mkdocs.yml\nremote_branch: gh-pages    # GitHub Pages \u5206\u652f\nremote_name: origin       # \u8fdc\u7a0b\u4ed3\u5e93\u540d\n</code></pre>"},{"location":"misc/MkDocs/#_10","title":"\u624b\u52a8\u90e8\u7f72\u547d\u4ee4","text":"<pre><code># \u90e8\u7f72\u5230 GitHub Pages\nmkdocs gh-deploy\n\n# \u5f3a\u5236\u90e8\u7f72\nmkdocs gh-deploy --force\n\n# \u6307\u5b9a\u5206\u652f\nmkdocs gh-deploy --remote-branch custom-branch\n</code></pre> <p>\u5168\u90e8\u7684\u5185\u5bb9\u57fa\u672c\u90fd\u662f\u770b\u8fd9\u4e2a\u548c\u8fd9\u4e2a\uff0c\u786e\u5b9e\u633a\u4e0d\u9519\u7684\u3002</p> <p>\u611f\u8c22\u5927\u4f6c\u4eec\u3002</p> <p>\u7136\u540e\u73b0\u5728\u6211\u4eec\u7684\u535a\u5ba2\u5c31\u53ef\u4ee5\u5728 username.github.io \u663e\u793a\u4e86(\u5982\u679c\u4f60\u7684\u4ed3\u5e93\u540d\u662fusername.github.io)\u3002</p> <p>\u6211\u7684\u662f fwdzh.github.io </p>"},{"location":"misc/customdomain/","title":"\u901a\u8fc7\u81ea\u5b9a\u4e49\u57df\u540d\u8bbf\u95eegithub pages","text":""},{"location":"misc/customdomain/#github-pages","title":"github pages\u81ea\u5b9a\u4e49\u57df\u540d","text":"<p>\u4e4b\u524d\u77e5\u9053\u53ef\u4ee5\u628a\u81ea\u5df1\u7684\u57df\u540d\u8df3\u8f6c\u5230 <code>github.io</code> \u6765\u7740\uff0c\u6700\u8fd1\u60f3\u7740\u6ce8\u518c\u4e2a\u57df\u540d\u770b\u80fd\u4e0d\u80fd\u6574\u70b9\u6709\u610f\u601d\u7684\u4e1c\u897f\u3002\u4f46\u662f\u76ee\u524d\u8fd8\u6ca1\u6709\u670d\u52a1\u5668\uff0c\u7136\u540e\u5c31\u60f3\u80fd\u4e0d\u80fd\u663e\u793a\u70b9\u5565\u4e1c\u897f\u3002  </p> <p>\u7136\u540e\u53d1\u73b0\u663e\u793agithub pages\u7684\u4e1c\u897f\u5c31\u975e\u5e38\u7684\u65b9\u4fbf\u554a\uff0c\u53ea\u7528\u5728\u9879\u76ee\u7684settings\u754c\u9762\uff0c\u6dfb\u52a0custom domain\uff0c\u5f53\u7136\u9700\u8981\u5148\u5728\u57df\u540d\u7ba1\u7406\u91cc\u6dfb\u52a0\u90a3\u4e2a\u9879\u76ee\u7684\u9875\u9762\u7684\u89e3\u6790\u3002\u5c31\u662f\u535a\u5ba2\u7684\u9875\u9762\u3002</p> <p>\u7136\u540e\u5c31\u53ef\u4ee5\u901a\u8fc7\u81ea\u5b9a\u4e49\u7684\u57df\u540d\u8bbf\u95eegithub pages\u4e86\u3002\u975e\u5e38\u7684\u65b9\u4fbf\u554a\u3002</p> <p>\u6ce8\u518c\u7684\u8fd9\u4e2a\u57df\u540d\u4e5f\u662f\u521a\u6ce8\u518c\u5c31\u80fd\u7528\u4e0a\u4e86\u3002</p> <p>\u770b\u4ee5\u540e\u80fd\u4e0d\u80fd\u518d\u6574\u70b9\u522b\u7684\u5427\u3002\u4e3a\u4e86\u8fd9\u4e2a\uff0c\u4e5f\u662f\u591a\u5199\u70b9\u535a\u5ba2\u5427\u3002\u3002\u3002\u4e0d\u7136\u4e0d\u662f\u767d\u6574\u4e86\u3002\u7136\u540e\u4e5f\u662f\u53ef\u4ee5\u8bd5\u7740\u591a\u6574\u70b9\u56fe\u7247\uff0c\u627e\u4e2a\u7f51\u7ad9\u4e0a\u4f20\u7528url\uff0c\u56e0\u4e3a\u4e0a\u4f20\u603b\u662f\u53ef\u80fd\u4f1a\u6709\u95ee\u9898\u3002</p> <p>\u6700\u6700\u4fbf\u5b9c\u7684\u57df\u540d\u90fd\u662f179\u6216199\uff0c10\u5e74\u3002\u3002\u3002\u7eed\u8d39\u5f88\u8d35\u3002\u4e0d\u8fc7\u76ee\u524d\u4e3b\u8981\u662f\u4e3a\u4e86\u63a2\u7d22\u4e00\u4e0b\uff0c\u73a9\u4e00\u4e0b\uff0c\u770b\u80fd\u505a\u70b9\u4ec0\u4e48\u6709\u610f\u601d\u7684\u4e1c\u897f\u300210\u5e74\u65f6\u95f4\u4e5f\u662f\u5f88\u4e45\u4e86\u3002</p>"},{"location":"misc/deleteubuntu/","title":"windows\u53cc\u7cfb\u7edf\u5220\u9664ubuntu arch","text":""},{"location":"misc/deleteubuntu/#2025-02-22","title":"2025-02-22","text":""},{"location":"misc/deleteubuntu/#windowsubuntu-arch","title":"windows\u53cc\u7cfb\u7edf\u5220\u9664ubuntu arch","text":"<p>\u9996\u5148\u5728\u78c1\u76d8\u7ba1\u7406\u91cc\u5220\u6389ubuntu\u5728\u7684\u5206\u533a</p> <p>\u7136\u540e\u518d\u628agrub\u5f15\u5bfc\u5220\u6389</p> <p>\u9996\u5148\u6253\u5f00cmd\u6216powershell\uff0c\u8f93\u5165diskpart</p> <p>\u518dlist volume\uff0c\u627e\u5230EFI\u5206\u533a\uff0c\u5927\u5c0f\u53ef\u80fd\u662f300M\u5de6\u53f3\uff0c\u901a\u5e38\u662fFAT32\u683c\u5f0f</p> <p>select volume 1\uff0c\u770bEFI\u5206\u533a\u5177\u4f53\u7684\u7f16\u53f7\uff0c\u7136\u540e\u9009\u62e9\uff0c\u7136\u540e\u7ed9\u4ed6\u5206\u914d\u76d8\u7b26</p> <p>assign letter=Z</p> <p>\u7136\u540e\u8fd9\u4e2a\u5206\u533a\u88ab\u6211\u4eec\u6302\u8f7d\u5230\u4e86\u8fd9\u4e2a\u76d8\uff0c\u6211\u4eec\u53ef\u4ee5\u7ba1\u7406\u5458\u8eab\u4efd\u6253\u5f00VS Code</p> <p>\u7136\u540e\u76f4\u63a5\u7528VS Code\u6253\u5f00\u8fd9\u4e2a\u76d8\uff0c\u5c31\u53ef\u4ee5\u770b\u5230\u6587\u4ef6\u76ee\u5f55\uff0c\u7136\u540e\u628aEFI/\u4e0b\u7684ubuntu\u6216arch\u6587\u4ef6\u5939\u5220\u9664</p> <p>\u7136\u540e\u518dremove letter=Z\uff0c\u518d\u91cd\u542f\u7535\u8111\uff0c\u5e94\u8be5\u5c31\u770b\u4e0d\u5230grub\u5f15\u5bfc\u4e86</p> <p>\u6211\u5148\u8bd5\u8bd5</p> <pre><code>diskpart\nlist volume\nselect volume 1 #\u770b\u5177\u4f53\u54ea\u4e2a\u662fEFI\u5206\u533a\nassign letter=Z #\u7ed9EFI\u5206\u533a\u5206\u914d\u76d8\u7b26\n\u7136\u540e\u53bb\u5220\u9664EFI/\u4e0b\u7684ubuntu\u6216arch\u6587\u4ef6\u5939\uff0c\u53ef\u4ee5\u4f7f\u7528\u7ba1\u7406\u5458VS Code\u6253\u5f00\u8fd9\u4e2a\u76d8\nremove letter=Z #\u5220\u9664\u76d8\u7b26\nexit\n</code></pre>"},{"location":"misc/git_/","title":"github\u76f8\u5173","text":""},{"location":"misc/git_/#_1","title":"\u6bcf\u4e2a\u9879\u76ee\u90fd\u80fd\u81ea\u5b9a\u4e49\u57df\u540d","text":"<p>2025-02-26</p> <p>\u8ba9\u4e00\u4e2a\u540c\u5b66\u6dfb\u52a0\u81ea\u5b9a\u4e49\u57df\u540d\u586b\u52a0\u6211\u7684\u5b50\u57df\u540d\u3002\u3002\u3002\u7136\u540e\u6211\u8ddf\u4ed6\u8bf4\u53ea\u6709 username.github.io\u80fd\u89e3\u6790\u5230\u5b50\u57df\u540d\uff0c\u5176\u4ed6\u7684\u9879\u76ee\u53ea\u80fd\u662f\u540e\u9762\u659c\u6760\u52a0\u9879\u76ee\u540d\u3002\u7ed3\u679c\u4ed6\u7814\u7a76\u51fa\u4e86\u53ef\u4ee5\u6bcf\u4e2a\u9879\u76ee\u90fd\u81ea\u5b9a\u4e49\u3002\u3002\u3002</p> <p>\u5176\u5b9e\u662f\u57df\u540d\u89e3\u6790\u7684\u65f6\u5019\uff0c\u76f4\u63a5\u90fd\u586b username.github.io , \u4e0d\u8981\u52a0\u5176\u4ed6\u7684\u4e1c\u897f\u3002\u8fd9\u6837\u6bcf\u4e2a\u9879\u76ee\u90fd\u80fd\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u57df\u540d\u3002\u3002\u3002</p> <p>\u679c\u7136\u591a\u4ea4\u6d41\u5c31\u662f\u4f1a\u6709\u4e9b\u5e2e\u52a9\u3002\u90a3 username.github.io \u4e5f\u6ca1\u4ec0\u4e48\u7279\u6b8a\u7684\uff0c\u4e5f\u5c31\u662f\u4e0d\u8bbe\u7f6e custom domain \u7684\u65f6\u5019\uff0c\u7a0d\u5fae\u6709\u70b9\u7528\u3002</p>"},{"location":"misc/git_/#githubio","title":"github.io","text":"<p>2025-02-19</p> <p>\u4eca\u5929\u7b97\u662f\u53d1\u73b0 <code>username.github.io</code> \u6709\u4ec0\u4e48\u4e0d\u540c\u4e4b\u5904\u4e86\u3002\u3002\u3002</p> <p>\u5efa\u4e86\u4e00\u4e2a\u65b0\u9879\u76ee\uff0c\u60f3\u7740\u5f04\u4e2a\u5b50\u57df\u540d\u89e3\u6790\u90a3\u4e2a\u9879\u76ee\u7684pages\uff0c\u4f46\u662f\u53d1\u73b0\u4e0d\u53ef\u4ee5\u3002</p> <p>\u56e0\u4e3a\u666e\u901a\u9879\u76ee\u7684pages\u7684\u8def\u5f84\u5b83\u662fusername.github.io/repo , \u8fd9\u5e76\u4e0d\u662f\u4e00\u4e2a\u57df\u540d\uff0c\u6240\u4ee5\u4e0d\u80fd\u89e3\u6790\u3002\u3002\u3002</p> <p>\u4f46\u662f\u53ef\u4ee5\u901a\u8fc7\u6211\u8fd9\u4e2a\u57df\u540d\u7ed1\u5b9a\u4e86 <code>github.io</code> \uff0c\u6240\u4ee5\u5176\u4ed6\u9879\u76ee\u4f1a\u89e3\u6790\u5230 custom domain/repo \uff0c\u4e5f\u7b97\u8fd8\u884c\u5427\u3002</p> <p>\u611f\u89c9\u5fc5\u987b\u5f97\u518d\u6ce8\u518c\u4e00\u4e2agithub\u8d26\u53f7\u4e86\uff0c\u4e0d\u7136\u6211\u7684\u4e3b\u57df\u540d\u4e00\u76f4\u6ca1\u6709\u53ef\u4ee5\u89e3\u6790\u7684\u4e1c\u897f\uff0c\u611f\u89c9\u8fd9\u6837\u4e0d\u592a\u597d\u3002</p>"},{"location":"misc/git_/#git443","title":"git\u8fde\u63a5443\u7aef\u53e3\u5931\u8d25","text":"<p>\u6211\u8bb0\u5f97\u4e4b\u524d\u6211\u662f22\u7aef\u53e3\u5931\u8d25\uff0c\u7136\u540e\u53bb\u6d4f\u89c8\u5668\u548c\u95eechat\uff0c\u6539\u4e86host\u6587\u4ef6\uff0c\u597d\u4e86\u4e00\u6bb5\u65f6\u95f4\u3002</p> <p>\u4eca\u5929\u65b0\u5efa\u4e00\u4e2a\u9879\u76ee\u5c31443\u7aef\u53e3\u8fde\u63a5\u5931\u8d25\uff0c\u67e5\u4e86\u4e00\u4e0b\u52a0\u4e86\u4e2a\u4ee3\u7406\u5c31\u597d\u4e86\u3002</p> <pre><code>git config --global http.proxy http://127.0.0.1:33210\ngit config --global https.proxy https://127.0.0.1:33210\n</code></pre> <p>\u628aip\u548c\u7aef\u53e3\u6362\u6210\u81ea\u5df1\u7684\uff0c\u8f93\u8fd9\u4e2a\u547d\u4ee4\uff0c\u7ed9git\u8bbe\u7f6e\u4ee3\u7406\uff0c\u7136\u540e\u5c31\u597d\u4e86\u3002</p> <p>\u4f46\u662f\u5f88\u5947\u602a\u7684\u662f\uff0c\u6211\u4e4b\u524d\u5e94\u8be5\u6ca1\u8bbe\u8fc7\u4ee3\u7406\uff0c\u4e3a\u5565\u5176\u4ed6\u6587\u4ef6\u5939\u4e00\u76f4git push\u90fd\u6ca1\u6709\u95ee\u9898\u5462\u3002\u3002\u3002\u800c\u4e14\u4e0d\u5f00\u52a0\u901f\u5668\u8c8c\u4f3c\u4e5f\u80fdpush\u3002</p>"},{"location":"misc/gitbasic/","title":"github\u57fa\u7840\u64cd\u4f5c\u53cagithub pages","text":"<p>2025-02-27</p> <p>\u6307\u5bfc\u8001\u5e08: ChatGPT</p>"},{"location":"misc/gitbasic/#github","title":"github\u57fa\u672c\u64cd\u4f5c","text":"<p>\u5176\u5b9e\u6211\u4e5f\u4e0d\u548b\u4f1a\u3002\u3002\u3002\u7ecf\u5e38\u5927\u90e8\u5206\u90fd\u662f\u95ee chat \u548c deepseek\u3002\u76ee\u524d\u57fa\u672c\u4e0a\u53ea\u7528 git add \uff0ccommit , push , branch \u8fd9\u4e9b\u3002\u3002\u3002\u8fd9\u662f\u5927\u6982\u4f1a\u63d0\u4ea4\u4ee3\u7801\u3002\u5176\u4ed6\u7684\u5565\u90fd\u4e0d\u4f1a\uff0c\u8be5\u5b66\u4e00\u4e0b\u603b\u7ed3\u4e00\u4e0b\u4e86\u3002</p>"},{"location":"misc/gitbasic/#_1","title":"\u521b\u5efa\u4ed3\u5e93","text":"<p>\u9996\u5148\u54b1\u4eec\u521b\u5efa\u4e00\u4e2a\u4ed3\u5e93\uff0c\u6709\u4e00\u4e2a\u9009\u9879\u662f\u6dfb\u52a0 <code>README file</code> \uff0c\u9009\u4e86\u8fd9\u4e2a\u5e94\u8be5\u5c31\u4f1a\u81ea\u52a8\u521d\u59cb\u5316\u4ed3\u5e93\uff0c\u5426\u5219\u4ed3\u5e93\u662f\u7a7a\u7684\u3002</p> <p>\u6211\u8bf4\u600e\u4e48\u6bcf\u6b21\u60c5\u51b5\u4e0d\u4e00\u6837\u5462\u3002\u90a3\u54b1\u4eec\u8fd9\u91cc\u5148\u4e0d\u8981\u9009\u3002\u56e0\u4e3a\u4ee5\u540e\u9009\u4e0d\u9009\uff0c\u64cd\u4f5c\u90fd\u5dee\u4e0d\u591a\u3002</p> <p>\u5176\u4ed6\u7684\u8bbe\u7f6e\u90fd\u5148\u4e0d\u7528\u6539\uff0c\u53d6\u597d\u9879\u76ee\u540d\u5b57\u5c31\u884c\u3002</p> <p>\u6ca1\u6709\u9009\u6dfb\u52a0 <code>README.md</code> \u7684\u8bdd\uff0c\u4ed3\u5e93\u4f1a\u662f\u7a7a\u7684\u3002</p> <p>\u4f1a\u663e\u793a\u8fd9\u51e0\u884c\u4ee3\u7801\uff0c\u6bcf\u4e2a\u4eba\u7684\u4e0d\u4e00\u6837\uff0c\u7b2c\u516d\u884c\u90a3\u91cc\u7684\u9879\u76ee\u5730\u5740\u4e0d\u4e00\u6837\u3002</p> <pre><code>echo \"# www\" &gt;&gt; README.md\ngit init\ngit add README.md\ngit commit -m \"first commit\"\ngit branch -M main\ngit remote add origin https://github.com/fwdzh/www.git\ngit push -u origin main\n</code></pre> <p>\u9009ssh\u8fde\u63a5\u7684\u8bdd\u4f1a\u6709\u70b9\u4e0d\u4e00\u6837\uff0c\u8fd9\u91cc\u54b1\u4eec\u5148\u7528https\u8fde\u63a5\u3002</p> <p>\u8fd9\u4e2a\u662f\u8ba9\u54b1\u4eec\u521b\u5efa\u672c\u5730\u76ee\u5f55\u5e76\u548c\u8fdc\u7a0b\u4ed3\u5e93\u8fde\u63a5\u63a8\u9001\u6587\u4ef6\u7684\u3002</p> <p>\u8fd9\u4e2a\u547d\u4ee4\uff0c\u6211\u4eec\u53ef\u4ee5\u70b9\u5f00\u672c\u5730\u6587\u4ef6\u5939\uff0c\u7136\u540e\u53f3\u952e\u70b9\u51fb\u7a7a\u767d\u7684\u5730\u65b9\uff0c\u9009\u62e9 <code>git bash here</code>\uff0c\u5c31\u4f1a\u5728\u8fd9\u91cc\u542f\u52a8git bash\uff0c\u53ef\u4ee5\u5728\u91cc\u9762\u8f93\u5165\u547d\u4ee4\u3002\u4e5f\u53ef\u4ee5\u4f7f\u7528vscode \u6253\u5f00\u6587\u4ef6\u5939\uff0c\u5728vscode \u7684\u7ec8\u7aef\u4e2d\u8f93\u5165\u547d\u4ee4\u3002</p> <p>\u5728vscode\u4e2d\u53ef\u4ee5\u4f7f\u7528 ctrl+` \u5feb\u6377\u952e\u6765\u6253\u5f00\u7ec8\u7aef\uff0c\u51e0\u884c\u547d\u4ee4\u5168\u590d\u5236\u8fc7\u53bb\u5c31\u884c\u3002</p> <p>\u4e0d\u8fc7\u7b2c\u4e00\u6b21\u5e94\u8be5\u9700\u8981\u54b1\u4eec\u914d\u7f6e\u7528\u6237\u4fe1\u606f\u3002</p> <pre><code>Author identity unknown\n\n*** Please tell me who you are.\n\nRun\n\n  git config --global user.email \"you@example.com\"\n  git config --global user.name \"Your Name\"\n\nto set your account's default identity.\nOmit --global to set the identity only in this repository.\n\nfatal: unable to auto-detect email address (got 'ilyha@skadi.(none)')\n</code></pre> <p>\u6211\u521a\u624d\u628a\u547d\u4ee4\u5168\u7c98\u8fc7\u53bb\u51fa\u8fd9\u4e2a\u4e86\u3002\u8fd9\u662f\u8ba9\u54b1\u4eec\u5148\u914d\u7f6e\u7528\u6237\u4fe1\u606f\u3002</p> <pre><code>git config --global user.email \"you@example.com\"\ngit config --global user.name \"Your Name\"\n</code></pre> <p>\u628a\u5bf9\u5e94\u7684\u5f15\u53f7\u91cc\u7684\u5185\u5bb9\uff0c\u6362\u6210\u4f60\u7684github\u7ed1\u5b9a\u7684\u90ae\u7bb1\uff0c\u548cgithub\u7684\u7528\u6237\u540d\u3002</p> <pre><code>git config --global user.email \"2895264580@qq.com\"\ngit config --global user.name \"fwdzh\"\n</code></pre> <p>\u8fd9\u662f\u6211\u7684\uff0c\u4f60\u4eec\u6539\u6210\u81ea\u5df1\u7684\u3002</p> <p>\u7c98\u5230\u7ec8\u7aef\u53bb\u3002\u8fd9\u91cc\u52a0 --global\u662f\u8bbe\u7f6e\u5168\u5c40\u7684\uff0c\u4e0d\u52a0\u7684\u8bdd\u53ea\u8bbe\u7f6e\u5f53\u524d\u76ee\u5f55\u7684\u4fe1\u606f\u3002</p> <p>\u5982\u679c\u4f60\u63d0\u793a443\u7aef\u53e3\u621622\u7aef\u53e3\u8fde\u4e0d\u4e0a\uff0c\u53ef\u4ee5\u53bb\u641c\u7d22\u89e3\u51b3\u65b9\u6cd5\u3002\u6211\u7684\u53e6\u4e00\u7bc7\u535a\u5ba2\u6709\u7b80\u5355\u8bb0\u4e86\u4e00\u4e0b443\u7aef\u53e3\u8fde\u4e0d\u4e0a\u3002</p>"},{"location":"misc/gitbasic/#1-echo-www-readmemd","title":"1. <code>echo \"# www\" &gt;&gt; README.md</code>","text":"<pre><code>echo \"# www\" &gt;&gt; README.md\n</code></pre> <p>\ud83d\udccc \u4f5c\u7528\uff1a</p> <ul> <li>\u521b\u5efa\u4e00\u4e2a <code>README.md</code> \u6587\u4ef6\uff0c\u5e76\u5728\u5176\u4e2d\u5199\u5165 <code># www</code>\u3002</li> <li>\u5982\u679c <code>README.md</code> \u6587\u4ef6\u5df2\u5b58\u5728\uff0c\u5219\u5728\u672b\u5c3e\u8ffd\u52a0 <code># www</code>\u3002</li> <li>\u8fd9\u4e2a\u6587\u4ef6\u901a\u5e38\u7528\u4e8e\u63cf\u8ff0\u9879\u76ee\u7684\u57fa\u672c\u4fe1\u606f\uff0c\u5728 GitHub \u4e0a\u4f1a\u81ea\u52a8\u663e\u793a\u4e3a\u9879\u76ee\u4e3b\u9875\u7684\u4ecb\u7ecd\u3002</li> </ul>"},{"location":"misc/gitbasic/#2-git-init","title":"2. <code>git init</code>","text":"<pre><code>git init\n</code></pre> <p>\ud83d\udccc \u4f5c\u7528\uff1a</p> <ul> <li>\u5728\u5f53\u524d\u76ee\u5f55\u4e0b \u521d\u59cb\u5316\u4e00\u4e2a Git \u4ed3\u5e93\uff0c\u751f\u6210 <code>.git/</code> \u9690\u85cf\u76ee\u5f55\u3002</li> <li>\u4e4b\u540e\u7684 Git \u547d\u4ee4\uff08\u5982 <code>add</code>\u3001<code>commit</code>\u3001<code>push</code> \u7b49\uff09\u90fd\u4f1a\u57fa\u4e8e\u8fd9\u4e2a Git \u4ed3\u5e93\u8fdb\u884c\u64cd\u4f5c\u3002</li> </ul> <p>\ud83d\udca1 \u6267\u884c\u540e\uff0c\u5f53\u524d\u76ee\u5f55\u5c31\u53d8\u6210\u4e86\u4e00\u4e2a Git \u4ed3\u5e93\u3002</p>"},{"location":"misc/gitbasic/#3-git-add-readmemd","title":"3. <code>git add README.md</code>","text":"<pre><code>git add README.md\n</code></pre> <p>\ud83d\udccc \u4f5c\u7528\uff1a</p> <ul> <li>\u5c06 <code>README.md</code> \u6587\u4ef6\u52a0\u5165 \u6682\u5b58\u533a\uff08staging area\uff09\uff0c\u51c6\u5907\u63d0\u4ea4\u3002</li> </ul> <p>\ud83d\udca1 \u53ea\u6709\u88ab <code>git add</code> \u7684\u6587\u4ef6\u624d\u4f1a\u88ab <code>commit</code> \u8bb0\u5f55\u3002</p>"},{"location":"misc/gitbasic/#4-git-commit-m-first-commit","title":"4. <code>git commit -m \"first commit\"</code>","text":"<pre><code>git commit -m \"first commit\"\n</code></pre> <p>\ud83d\udccc \u4f5c\u7528\uff1a</p> <ul> <li>\u63d0\u4ea4\u4ee3\u7801\uff0c\u628a <code>README.md</code> \u4ece\u6682\u5b58\u533a\u63d0\u4ea4\u5230\u672c\u5730\u4ed3\u5e93\uff08\u672c\u5730 <code>main</code> \u5206\u652f\uff09\u3002</li> <li><code>-m \"first commit\"</code> \u6307\u5b9a\u63d0\u4ea4\u4fe1\u606f\uff0c\u63cf\u8ff0\u8fd9\u6b21\u63d0\u4ea4\u7684\u5185\u5bb9\u3002</li> </ul> <p>\ud83d\udca1 \u6267\u884c\u540e\uff0c\u4f60\u7684\u4ee3\u7801\u5df2\u7ecf\u88ab\u8bb0\u5f55\u5728\u672c\u5730 Git \u4ed3\u5e93\uff0c\u4f46\u8fd8\u6ca1\u6709\u63a8\u9001\u5230\u8fdc\u7a0b GitHub\u3002</p>"},{"location":"misc/gitbasic/#5-git-branch-m-main","title":"5. <code>git branch -M main</code>","text":"<pre><code>git branch -M main\n</code></pre> <p>\ud83d\udccc \u4f5c\u7528\uff1a</p> <ul> <li>\u5c06\u5f53\u524d\u5206\u652f\u91cd\u547d\u540d\u4e3a <code>main</code>\uff08\u73b0\u4ee3 Git \u9ed8\u8ba4\u4f7f\u7528 <code>main</code> \u4f5c\u4e3a\u4e3b\u5206\u652f\uff0c\u800c\u4e0d\u662f <code>master</code>\uff09\u3002</li> </ul> <p>\ud83d\udca1 \u5982\u679c\u4f60\u521a <code>git init</code>\uff0c\u9ed8\u8ba4\u5206\u652f\u53ef\u80fd\u662f <code>master</code>\uff0c\u8fd9\u4e2a\u547d\u4ee4\u4f1a\u6539\u6210 <code>main</code>\u3002</p>"},{"location":"misc/gitbasic/#6-git-remote-add-origin-httpsgithubcomfwdzhwwwgit","title":"6. <code>git remote add origin https://github.com/fwdzh/www.git</code>","text":"<pre><code>git remote add origin https://github.com/fwdzh/www.git\n</code></pre> <p>\ud83d\udccc \u4f5c\u7528\uff1a</p> <ul> <li>\u5c06\u8fdc\u7a0b GitHub \u4ed3\u5e93\uff08<code>https://github.com/fwdzh/www.git</code>\uff09\u6dfb\u52a0\u4e3a <code>origin</code> \u8fdc\u7a0b\u5730\u5740\u3002</li> <li>\u4e4b\u540e\u53ef\u4ee5\u4f7f\u7528 <code>origin</code> \u4f5c\u4e3a\u522b\u540d\u8fdb\u884c <code>git push</code> / <code>git pull</code>\u3002</li> </ul> <p>\ud83d\udca1 \u6267\u884c\u540e\uff0c\u672c\u5730 Git \u77e5\u9053\u4ee3\u7801\u5e94\u8be5\u63a8\u9001\u5230\u54ea\u4e2a GitHub \u4ed3\u5e93\u3002</p>"},{"location":"misc/gitbasic/#7-git-push-u-origin-main","title":"7. <code>git push -u origin main</code>","text":"<pre><code>git push -u origin main\n</code></pre> <p>\ud83d\udccc \u4f5c\u7528\uff1a</p> <ul> <li>\u5c06\u672c\u5730 <code>main</code> \u5206\u652f\u7684\u4ee3\u7801\u63a8\u9001\u5230 GitHub \u8fdc\u7a0b\u4ed3\u5e93\u3002</li> <li><code>-u</code> \u9009\u9879\u7684\u4f5c\u7528\uff1a\u8bbe\u7f6e <code>origin/main</code> \u4e3a\u9ed8\u8ba4\u4e0a\u6e38\u5206\u652f\uff0c\u4ee5\u540e <code>git push</code> \u548c <code>git pull</code> \u53ef\u4ee5\u7701\u7565 <code>origin main</code>\uff0c\u76f4\u63a5\u7528 <code>git push</code> / <code>git pull</code>\u3002</li> </ul> <p>\u6267\u884c\u5b8c\u8fd9\u4e9b\u547d\u4ee4\u4e4b\u540e\uff0c\u6211\u4eec\u7684\u672c\u5730\u76ee\u5f55\u5c31\u4f1a\u521d\u59cb\u5316\u4e3a\u4e00\u4e2agit\u4ed3\u5e93\uff0c\u53ef\u4ee5\u4f7f\u7528git\u547d\u4ee4\u6765\u62c9\u53d6\u6216\u63a8\u9001\u4ee3\u7801\u3002\u5e76\u4e14\u53ef\u4ee5\u5229\u7528github pages\u65b9\u4fbf\u5730\u90e8\u7f72\u9759\u6001\u7f51\u9875\u3002</p>"},{"location":"misc/gitbasic/#_2","title":"\u63d0\u4ea4\u4fee\u6539","text":"<p>\u8fd0\u884c\u5b8c\u4ee5\u4e0a\u7684\u4ee3\u7801\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230github\u7684\u4ed3\u5e93\u5df2\u7ecf\u6709\u4e86README.md\u6587\u4ef6\u3002</p> <p>\u4e0a\u9762\u6bcf\u4e2a\u547d\u4ee4\u7684\u89e3\u91ca\u6211\u8ba9chat\u751f\u6210\u7684\uff0c\u4e5f\u65b9\u4fbf\u6211\u7406\u89e3\u3002\u3002\u3002\u539f\u6765 <code>git push -u origin master</code> \u4e5f\u4f1a\u8bbe\u7f6e\u9ed8\u8ba4\u5206\u652f\u3002</p> <p>\u4ee5\u540e\u54b1\u4eec\u6bcf\u6b21\u63d0\u4ea4\u4fee\u6539\uff0c\u53ea\u9700\u8981\u8fd0\u884c\u4e09\u4e2a\u547d\u4ee4\u3002</p> <pre><code>git add .\ngit commit -m \"...\"\ngit push\n</code></pre>"},{"location":"misc/gitbasic/#1git-add","title":"1.<code>git add</code>","text":"<p>\ud83d\udccc \u4f5c\u7528\uff1a</p> <ul> <li> <p>\u628a \u5f53\u524d\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u4fee\u6539\uff08\u65b0\u589e\u3001\u4fee\u6539\u3001\u5220\u9664\u7684\u6587\u4ef6\uff09\u52a0\u5165\u6682\u5b58\u533a\uff0c\u51c6\u5907\u63d0\u4ea4\u3002</p> </li> <li> <p>\u5176\u4e2d </p> </li> </ul> <pre><code>.\n</code></pre> <p>\u4ee3\u8868\u5f53\u524d\u76ee\u5f55\u7684\u6240\u6709\u6587\u4ef6\uff0c\u7b49\u4ef7\u4e8e\uff1a</p> <pre><code>git add --all\n</code></pre> <p>\ud83d\udca1 \u793a\u4f8b\uff1a</p> <ul> <li>\u5982\u679c\u4f60\u4fee\u6539\u4e86 <code>main.cpp</code>\uff0c\u65b0\u589e\u4e86 <code>utils.h</code>\uff0c\u5220\u9664\u4e86 <code>temp.txt</code>\uff0c\u6267\u884c <code>git add .</code> \u540e\uff0c\u8fd9\u4e9b\u53d8\u66f4\u90fd\u4f1a\u8fdb\u5165 \u6682\u5b58\u533a\uff0c\u7b49\u5f85\u63d0\u4ea4\u3002</li> </ul>"},{"location":"misc/gitbasic/#2-git-commit-m","title":"2. <code>git commit -m \"...\"</code>","text":"<pre><code>git commit -m \"...\"\n</code></pre> <p>\ud83d\udccc \u4f5c\u7528\uff1a</p> <ul> <li>\u63d0\u4ea4\u6682\u5b58\u533a\u7684\u4fee\u6539\u5230\u672c\u5730\u4ed3\u5e93\uff0c\u5e76\u8bb0\u5f55\u4e00\u6761\u63d0\u4ea4\u4fe1\u606f\uff08<code>-m \"...\"</code>\uff09\u3002</li> <li>\u8fd9\u76f8\u5f53\u4e8e\u5feb\u7167\uff0c\u4ee5\u540e\u53ef\u4ee5\u67e5\u770b\u6bcf\u6b21\u63d0\u4ea4\u7684\u5386\u53f2\uff0c\u751a\u81f3\u56de\u6eda\u5230\u67d0\u4e2a\u7248\u672c\u3002</li> <li>\u628a\u5f15\u53f7\u91cc\u7684\u5185\u5bb9\u6362\u6210\u4f60\u60f3\u7559\u8a00\u7684\u8bdd\uff0c\u4f46\u662f\u4e0d\u80fd\u4e3a\u7a7a\u3002</li> </ul> <p>\ud83d\udca1 \u793a\u4f8b\uff1a</p> <pre><code>git commit -m \"\u4fee\u590d\u4e86\u767b\u5f55\u754c\u9762\u52a0\u8f7d\u6162\u7684\u95ee\u9898\"\n</code></pre> <p>\u8fd9\u6837\u6211\u4eec\u5c31\u80fd\u77e5\u9053\u8fd9\u6b21\u63d0\u4ea4\u7684\u4e3b\u8981\u6539\u52a8\u5185\u5bb9\u3002</p>"},{"location":"misc/gitbasic/#3-git-push","title":"3. <code>git push</code>","text":"<pre><code>git push\n</code></pre> <p>\ud83d\udccc \u4f5c\u7528\uff1a</p> <ul> <li> <p>\u628a\u672c\u5730\u4ed3\u5e93\u7684\u4fee\u6539\u63a8\u9001\u5230\u8fdc\u7a0b\u4ed3\u5e93\uff08GitHub\uff09\u3002</p> </li> <li> <p>\u7531\u4e8e\u4e4b\u524d </p> </li> </ul> <pre><code>git push -u origin main\n</code></pre> <p>\u7ed1\u5b9a\u4e86\u9ed8\u8ba4\u4e0a\u6e38\u5206\u652f\uff0c\u4ee5\u540e </p> <pre><code>git push\n</code></pre> <p>\u5c31\u7b49\u4ef7\u4e8e\uff1a</p> <pre><code>git push origin main\n</code></pre> <p>\ud83d\udca1 \u793a\u4f8b\uff1a</p> <ul> <li>\u672c\u5730\u4fee\u6539\u7684\u4ee3\u7801\u63d0\u4ea4\u5230 GitHub \u4e0a\uff0c\u56e2\u961f\u6210\u5458\u6216\u5176\u4ed6\u4eba\u5c31\u80fd\u770b\u5230\u66f4\u65b0\u3002</li> </ul>"},{"location":"misc/gitbasic/#_3","title":"\u5b8c\u6574\u6d41\u7a0b","text":"<ol> <li>\u4fee\u6539\u4ee3\u7801\uff0c\u6bd4\u5982\u7f16\u8f91 <code>index.html</code>\u3002</li> <li><code>git add .</code> \u628a\u6539\u52a8\u52a0\u5165\u6682\u5b58\u533a\u3002</li> <li><code>git commit -m \"\u4f18\u5316\u524d\u7aef UI\"</code> \u63d0\u4ea4\u4fee\u6539\u3002</li> <li><code>git push</code> \u63a8\u9001\u5230 GitHub\u3002</li> </ol> <p>\u8fd9\u6837\uff0c\u6bcf\u6b21\u63d0\u4ea4\u90fd\u5f88\u7b80\u5355\u9ad8\u6548 \ud83c\udf89\u3002</p>"},{"location":"misc/gitbasic/#github-pages","title":"github pages","text":"<p>\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u725b\u975e\u5e38\u723d\u7684\u529f\u80fd\uff0c\u53ef\u4ee5\u8ba9\u54b1\u4eec\u65e0\u9700\u670d\u52a1\u5668\u5c31\u53ef\u4ee5\u901a\u8fc7\u57df\u540d\u6765\u8bbf\u95ee\u6211\u4eec\u7684\u7f51\u7ad9\u3002</p> <p>\u5e76\u4e14\u8fd8\u53ef\u4ee5\u6dfb\u52a0\u81ea\u5b9a\u4e49\u57df\u540d\uff0c\u4f7f\u5f97\u6211\u4eec\u65e0\u9700\u52a0\u901f\u5668\u5373\u53ef\u8bbf\u95ee\u6211\u4eec\u7684\u9875\u9762\u3002</p>"},{"location":"misc/gitbasic/#github-pages_1","title":"\u542f\u7528 GitHub Pages","text":"<p>\u5982\u679c\u4f60\u60f3\u8ba9 GitHub \u6258\u7ba1\u9759\u6001\u7f51\u7ad9\uff0c\u6bd4\u5982\u4e2a\u4eba\u535a\u5ba2\u3001\u6587\u6863\u7ad9\u70b9\uff0c\u6b65\u9aa4\u5982\u4e0b\uff1a</p> <ol> <li> <p>\u8fdb\u5165\u4f60\u7684\u4ed3\u5e93\uff0c\u70b9\u51fb <code>Settings</code></p> </li> <li> <p>\u5de6\u4fa7\u627e\u5230 <code>Pages</code></p> </li> <li> <p>\u9009\u62e9\u90e8\u7f72\u6765\u6e90\uff08Branch\uff09\uff0c\u4e00\u822c\u9009 <code>main</code> \u5206\u652f</p> </li> <li> <p>\u9009\u62e9\u6839\u76ee\u5f55 <code>/</code></p> </li> <li> <p>GitHub \u4f1a\u81ea\u52a8\u751f\u6210 URL\uff0c\u6bd4\u5982\uff1a</p> </li> </ol> <pre><code>https://\u4f60\u7684\u7528\u6237\u540d.github.io/\u4f60\u7684\u4ed3\u5e93\u540d/\n</code></pre>"},{"location":"misc/gitbasic/#_4","title":"\u4e0a\u4f20\u9759\u6001\u7f51\u7ad9","text":"<p>\u5982\u679c\u4f60\u6709 <code>index.html</code>\uff0c\u76f4\u63a5\u63d0\u4ea4\u5230\u4ed3\u5e93\u6839\u76ee\u5f55\uff1a</p> <pre><code>git add .\ngit commit -m \"\u6dfb\u52a0\u7f51\u7ad9\"\ngit push\n</code></pre> <p>\u7136\u540e\u7b49\u51e0\u5206\u949f\uff0cGitHub Pages \u5c31\u4f1a\u81ea\u52a8\u751f\u6210\u7f51\u7ad9\u3002</p>"},{"location":"misc/gitbasic/#_5","title":"\u81ea\u5b9a\u4e49\u57df\u540d","text":"<p>\u5728settings-&gt;pages \u9875\u9762\uff0c\u627e\u5230 custom domain \u9009\u9879\uff0c\u5728\u8fd9\u91cc\u586b\u5165\u4f60\u7684\u57df\u540d\uff0c\u5373\u53ef\u901a\u8fc7\u81ea\u5b9a\u4e49\u57df\u540d\u8bbf\u95ee\u4f60\u7684github pages\u9875\u9762\u3002\u64cd\u4f5c\u65b9\u5f0f\u5c31\u662f\uff0c\u5148\u5728\u4f60\u7684\u57df\u540d\u90a3\u6dfb\u52a0\u4e00\u4e2a\u8bb0\u5f55\uff0c\u8bb0\u5f55\u503c\u8bbe\u7f6e\u6210 <code>username.github.io</code> \uff0c username\u66ff\u6362\u4e3a\u4f60\u7684\u7528\u6237\u540d\uff0c\u7136\u540e\u518d\u5230github\u91cc\u8bbe\u7f6e\u81ea\u5b9a\u4e49\u57df\u540d\u3002\u8bb0\u5f97\u52fe\u9009\u4e0b\u9762\u7684\u5f3a\u5236https\uff0c\u8fd9\u6837\u5c31\u4e0d\u4f1a\u88ab\u63d0\u793a\u4e0d\u5b89\u5168\u4e86\u3002</p> <p>\u7a0d\u5fae\u7b49\u4e00\u4e0b\uff0c\u5c31\u53ef\u4ee5\u5728\u81ea\u5b9a\u4e49\u57df\u540d\u91cc\u8bbf\u95ee\u6211\u4eec\u7684\u9875\u9762\u4e86\u3002</p> <p>\u800c\u4e14\u6211\u4eec\u7684\u6bcf\u4e00\u4e2a\u9879\u76ee\u90fd\u53ef\u4ee5\u8bbe\u7f6e\u4e00\u4e2a\u5355\u72ec\u7684\u57df\u540d\uff0c\u53ea\u9700\u8981\u628a\u5bf9\u5e94\u7684\u57df\u540d\u7684\u8bb0\u5f55\u503c\u90fd\u6539\u4e3a <code>username.github.io</code> \uff0c\u7c7b\u578b\u4e3a <code>CNAME</code> \u7c7b\u578b\u3002</p>"},{"location":"misc/rndcfproblem/","title":"\u751f\u6210\u6307\u5b9a\u96be\u5ea6\u6570\u91cf\u7684\u968f\u673aCF\u9898\u76ee","text":""},{"location":"misc/rndcfproblem/#codeforces","title":"\u751f\u6210\u4efb\u610f\u6570\u91cf\u6307\u5b9a\u96be\u5ea6\u7684Codeforces\u9898\u76ee","text":"<p>\u539f\u6765\u8fd9\u4e48\u7b80\u5355\u54c8\u3002\u3002\u3002</p> <p>\u8ba9ai\u751f\u6210\u4e86\u4e00\u4e0b\uff0c\u7136\u540e\u6539\u4e86\u4e00\u4e0b\u3002\u3002\u3002</p> <pre><code>import requests\nimport random\n\n# \u5728\u8fd9\u91cc\u4fee\u6539\u9700\u8981\u7684\u7528\u6237\u540d\uff0crating \u533a\u95f4\uff0c\u9898\u76ee\u6570\u91cf\n\nmin_rating = 1400\nmax_rating = 1800\nhandles = ['Zhangwuji']\ncount = 5\n\ndef get_problems():  # \u83b7\u53d6\u9898\u76ee\u5217\u8868\n    url = \"https://codeforces.com/api/problemset.problems\"\n    res = requests.get(url)\n    if res.status_code == 200:\n        return res.json()['result']['problems']\n    else:\n        print(f\"Error: \u65e0\u6cd5\u83b7\u53d6\u9898\u76ee\u5217\u8868\")\n        return []\n\ndef get_solvedList(handles):  # \u83b7\u53d6\u5df2\u901a\u8fc7\u9898\u76ee\u5217\u8868\n    solved_problems = set()\n    for handle in handles:\n        url = f\"https://codeforces.com/api/user.status?handle={handle}\"\n        res = requests.get(url)\n        if res.status_code == 200:\n            x = res.json()['result']\n            for y in x:\n                if y['verdict'] == 'OK':  # \u53ea\u8bb0\u5f55\u901a\u8fc7\u7684\u9898\u76ee\n                    z = y['problem']\n                    solved_problems.add((z['contestId'], z['index']))\n        else:\n            print(f\"Error: \u65e0\u6cd5\u83b7\u53d6\u7528\u6237 {handle} \u7684\u63d0\u4ea4\u8bb0\u5f55\uff0c\u8bf7\u68c0\u67e5\u7528\u6237\u540d\u662f\u5426\u6b63\u786e\u3002\")\n    return solved_problems\n\nproblemset = get_problems()\nsolved_problems = get_solvedList(handles)\nproblemcount = len(problemset)  # \u9898\u76ee\u603b\u6570\n\ndef get_valid():\n    res=[]\n    for now in problemset:\n        rd = now['contestId']\n        id = now['index']\n        if 'rating' in now:\n            rt = now['rating']\n            if (rd,id) in solved_problems:\n                continue\n            if min_rating&lt;=rt&lt;=max_rating:\n                res.append(now)\n    return res\n\nvalidproblems = get_valid()\n\ndef gen_List(need):\n    return random.sample(validproblems,need)\n\ndef printproblems(problems):\n    print(f\"\\n\u829d\u58eb{len(problems)}\u4e2arating\u5728 [{min_rating}, {max_rating}] \u7684\u968f\u673a\u9898\u76ee\")\n    for x in problems:\n        rd = x['contestId']\n        id = x['index']\n        rt = x['rating']\n        name = f\"{rd}{id}\"\n        url = f\"https://codeforces.com/contest/{rd}/problem/{id}\"\n        print(f\"{name:7} {rt:5} {url}\")\n\nx = gen_List(count)\nprintproblems(x)\n</code></pre> <p>\u5509\u5509\uff0c\u641e\u8fd9\u79cd\u7eaf\u6d6a\u8d39\u65f6\u95f4\u5427\u3002\u3002\u3002</p> <p>\u867d\u7136\u633a\u597d\u73a9\u7684\u3002</p> <p>Duel \u8fd9\u4e2a\u7b97\u6cd5\u5355\u6311\u7f51\u7ad9\uff0c\u6628\u665a\u77e5\u9053\u7684\uff0c\uff0c\u611f\u89c9\u5f88\u4e0d\u9519\u3002\u6253\u7b97\u5728\u4e0a\u9762\u6bcf\u5929\u968f\u673a6\u4e2a\u9700\u8981\u7684\u96be\u5ea6\u7684\u9898\u76ee\u3002\u3002\u5982\u679c\u6709\u4e00\u4e2a\u4eba\u8ddf\u6211\u4e00\u8d77\u7ec3\uff0c\u53ef\u4ee5\u5728\u4e00\u6837\u7684\u623f\u95f4\uff0c\u90a3\u5c31\u4f1a\u6bcf\u5929\u5199\u4e00\u6837\u7684\u9898\u76ee\uff0c\u611f\u89c9\u4f1a\u633a\u4e0d\u9519\u7684\u3002\u3002\u3002</p> <p>\u5927\u5bb6\u65b0\u5e74\u5feb\u4e50\u3002\u795d\u5927\u5bb6\u8eab\u4f53\u5065\u5eb7\uff0c\u6280\u672f++\u3002</p>"},{"location":"misc/vscodesetting/","title":"win vscode\u914d\u7f6e","text":"<pre><code>{\n    \"clangd.path\": \"clangd\", // \u76f4\u63a5\u4f7f\u7528\u73af\u5883\u53d8\u91cf\n    // Clangd \u8fd0\u884c\u53c2\u6570(\u5728\u7ec8\u7aef/\u547d\u4ee4\u884c\u8f93\u5165 clangd --help-list-hidden \u53ef\u67e5\u770b\u66f4\u591a)\n    \"clangd.arguments\": [\n        //  \"--all-scopes-completion\", // \u5168\u5c40\u8865\u5168(\u8865\u5168\u5efa\u8bae\u4f1a\u7ed9\u51fa\u5728\u5f53\u524d\u4f5c\u7528\u57df\u4e0d\u53ef\u89c1\u7684\u7d22\u5f15,\u63d2\u5165\u540e\u81ea\u52a8\u8865\u5145\u4f5c\u7528\u57df\u6807\u8bc6\u7b26),\u4f8b\u5982\u5728main()\u4e2d\u76f4\u63a5\u5199cout,\u5373\u4f7f\u6ca1\u6709`#include &lt;iostream&gt;`,\u4e5f\u4f1a\u7ed9\u51fa`std::cout`\u7684\u5efa\u8bae,\u914d\u5408\"--header-insertion=iwyu\",\u8fd8\u53ef\u81ea\u52a8\u63d2\u5165\u7f3a\u5931\u7684\u5934\u6587\u4ef6\n        \"--background-index\", // \u540e\u53f0\u5206\u6790\u5e76\u4fdd\u5b58\u7d22\u5f15\u6587\u4ef6\n        \"--clang-tidy\", // \u542f\u7528 Clang-Tidy \u4ee5\u63d0\u4f9b\u300c\u9759\u6001\u68c0\u67e5\u300d\uff0c\u4e0b\u9762\u8bbe\u7f6e clang tidy \u89c4\u5219\n        \"--clang-tidy-checks=performance-*, bugprone-*, misc-*, google-*, modernize-*, readability-*, portability-*\",\n        \"--compile-commands-dir=${workspaceFolder}/build/\", // \u7f16\u8bd1\u6570\u636e\u5e93(\u4f8b\u5982 compile_commands.json \u6587\u4ef6)\u7684\u76ee\u5f55\u4f4d\u7f6e\n        \"--completion-parse=auto\", // \u5f53 clangd \u51c6\u5907\u5c31\u7eea\u65f6\uff0c\u7528\u5b83\u6765\u5206\u6790\u5efa\u8bae\n        \"--completion-style=bundled\", // \u5efa\u8bae\u98ce\u683c\uff1a\u6253\u5305(\u91cd\u8f7d\u51fd\u6570\u53ea\u4f1a\u7ed9\u51fa\u4e00\u4e2a\u5efa\u8bae);\u8fd8\u53ef\u4ee5\u8bbe\u7f6e\u4e3a detailed\n        // \"--query-driver=/usr/bin/clang++\", // MacOS \u4e0a\u9700\u8981\u8bbe\u5b9a clang \u7f16\u8bd1\u5668\u7684\u8def\u5f84\uff0chomebrew \u5b89\u88c5\u7684clang \u662f /usr/local/opt/llvm/bin/clang++\n        // \u542f\u7528\u914d\u7f6e\u6587\u4ef6(YAML\u683c\u5f0f)\u9879\u76ee\u914d\u7f6e\u6587\u4ef6\u662f\u5728\u9879\u76ee\u6587\u4ef6\u5939\u91cc\u7684\u201c.clangd\u201d,\u7528\u6237\u914d\u7f6e\u6587\u4ef6\u662f\u201cclangd/config.yaml\u201d,\u8be5\u6587\u4ef6\u6765\u81ea:Windows: %USERPROFILE%\\AppData\\Local || MacOS: ~/Library/Preferences/ || Others: $XDG_CONFIG_HOME, usually ~/.config\n        // \"--enable-config\",\n        \"--fallback-style=Webkit\", // \u9ed8\u8ba4\u683c\u5f0f\u5316\u98ce\u683c: \u5728\u6ca1\u627e\u5230 .clang-format \u6587\u4ef6\u65f6\u91c7\u7528,\u53ef\u7528\u7684\u6709 LLVM, Google, Chromium, Mozilla, Webkit, Microsoft, GNU\n        \"--function-arg-placeholders=false\", // \u8865\u5168\u51fd\u6570\u65f6\uff0c\u5c06\u4f1a\u7ed9\u53c2\u6570\u63d0\u4f9b\u5360\u4f4d\u7b26\uff0c\u952e\u5165\u540e\u6309 Tab \u53ef\u4ee5\u5207\u6362\u5230\u4e0b\u4e00\u5360\u4f4d\u7b26\uff0c\u4e43\u81f3\u51fd\u6570\u672b\n        //  \"--header-insertion-decorators\", // \u8f93\u5165\u5efa\u8bae\u4e2d\uff0c\u5df2\u5305\u542b\u5934\u6587\u4ef6\u7684\u9879\u4e0e\u8fd8\u672a\u5305\u542b\u5934\u6587\u4ef6\u7684\u9879\u4f1a\u4ee5\u5706\u70b9\u52a0\u4ee5\u533a\u5206\n        \"--header-insertion=never\", // \u63d2\u5165\u5efa\u8bae\u65f6\u81ea\u52a8\u5f15\u5165\u5934\u6587\u4ef6 iwyu [never,iwyu]\n        //  \"--include-cleaner-stdlib\", // \u4e3a\u6807\u51c6\u5e93\u5934\u6587\u4ef6\u542f\u7528\u6e05\u7406\u529f\u80fd(\u4e0d\u6210\u719f!!!)\n        // \"--log=verbose\", // \u8ba9 Clangd \u751f\u6210\u66f4\u8be6\u7ec6\u7684\u65e5\u5fd7\n        \"--pch-storage=memory\", // pch \u4f18\u5316\u7684\u4f4d\u7f6e(Memory \u6216 Disk,\u524d\u8005\u4f1a\u589e\u52a0\u5185\u5b58\u5f00\u9500\uff0c\u4f46\u4f1a\u63d0\u5347\u6027\u80fd)\n        \"--pretty\", // \u8f93\u51fa\u7684 JSON \u6587\u4ef6\u66f4\u7f8e\u89c2\n        \"--ranking-model=decision_forest\", // \u5efa\u8bae\u7684\u6392\u5e8f\u65b9\u6848\uff1ahueristics (\u542f\u53d1\u5f0f), decision_forest (\u51b3\u7b56\u6811)\n        // \"--query-driver=C:\\\\Users\\\\11850\\\\scoop\\\\apps\\\\msys2\\\\2023-07-18\\\\mingw64\\\\bin\\\\g++*\", // windows\u4e0b\u7684mingw\u4f4d\u7f6e\n        \"-j=12\" // \u540c\u65f6\u5f00\u542f\u7684\u4efb\u52a1\u6570\u91cf\n    ],\n    // Clangd \u627e\u4e0d\u5230\u7f16\u8bd1\u6570\u636e\u5e93(\u4f8b\u5982 compile_flags.json \u6587\u4ef6)\u65f6\u91c7\u7528\u7684\u8bbe\u7f6e,\u7f3a\u9677\u662f\u4e0d\u80fd\u76f4\u63a5\u7d22\u5f15\u540c\u4e00\u9879\u76ee\u7684\u4e0d\u540c\u6587\u4ef6,\u53ea\u80fd\u5206\u6790\u7cfb\u7edf\u5934\u6587\u4ef6\u3001\u5f53\u524d\u6587\u4ef6\u548cinclude\u7684\u6587\u4ef6\n    \"clangd.fallbackFlags\": [\n        \"-std=c++23\",\n        \"-I\\\"C:/winlibs-x86_64-posix-seh-gcc-14.2.0-mingw-w64ucrt-12.0.0-r2/mingw64/include\\\"\",\n        \"--target=x86_64-w64-windows-gnu\" // \u9ed8\u8ba4\u4f7f\u7528window gcc(MinGW),\u5982\u679c\u4f60\u662flinux\uff0c\u5c31\u6539\u6210\"--target=x86_64-pc-linux-gnu\"\n    ],\n    \"clangd.onConfigChanged\": \"restart\", // \u91cd\u542f clangd \u65f6\u91cd\u8f7d\u914d\u7f6e,\u5177\u4f53\u65b9\u6cd5: F1 + Fn \u6253\u5f00\u547d\u4ee4\u9762\u677f\uff0c\u7136\u540e\u641c\u7d22\u201cclangd: restart\u201d\n    \"clangd.serverCompletionRanking\": true, // \u501f\u52a9\u7f51\u4e0a\u7684\u4fe1\u606f\u6392\u5e8f\u5efa\u8bae\n    \"clangd.detectExtensionConflicts\": true, // \u5f53\u5176\u5b83\u62d3\u5c55\u4e0e clangd \u51b2\u7a81\u65f6\u8b66\u544a\u5e76\u5efa\u8bae\u7981\u7528\n    \"editor.suggest.snippetsPreventQuickSuggestions\": true,\n    \"editor.mouseWheelZoom\": true,\n    \"editor.stickyScroll.enabled\": false,\n    \"explorer.confirmDelete\": false,\n    \"explorer.compactFolders\": false,\n    \"workbench.iconTheme\": \"material-icon-theme\",\n    \"editor.minimap.renderCharacters\": false,\n    \"editor.minimap.enabled\": false,\n    \"files.exclude\": {\n        \"**/.git\": false\n    },\n    \"workbench.settings.applyToAllProfiles\": [\n\n    ],\n    \"files.autoSaveDelay\": 500,\n    \"files.autoSave\": \"afterDelay\",\n    \"code-runner.runInTerminal\": true,\n    \"code-runner.saveFileBeforeRun\": true,\n    \"code-runner.executorMapByGlob\": {\n        \"pom.xml\": \"cd $dir &amp;&amp; mvn clean package\"\n    },\n    \"code-runner.executorMap\": {\n        \"javascript\": \"node\",\n        \"java\": \"cd $dir &amp;&amp; javac $fileName &amp;&amp; java $fileNameWithoutExt\",\n        \"c\": \"cd $dir &amp;&amp; gcc $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt\",\n        \"zig\": \"zig run\",\n        // \"cpp\": \"cd $dir &amp;&amp; g++ $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt\",\n        // \"cpp\": \"cd $dir &amp;&amp; g++ -std=c++20 $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt\",\n        \"cpp\": \"cd $dir &amp;&amp; (if not exist .\\\\bin mkdir .\\\\bin) &amp;&amp; g++ -std=c++20 $fileName -o .\\\\bin\\\\$fileNameWithoutExt &amp;&amp; .\\\\bin\\\\$fileNameWithoutExt\",\n\n        \"objective-c\": \"cd $dir &amp;&amp; gcc -framework Cocoa $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt\",\n        \"php\": \"php\",\n        \"python\": \"python -u\",\n        \"perl\": \"perl\",\n        \"perl6\": \"perl6\",\n        \"ruby\": \"ruby\",\n        \"go\": \"go run\",\n        \"lua\": \"lua\",\n        \"groovy\": \"groovy\",\n        \"powershell\": \"powershell -ExecutionPolicy ByPass -File\",\n        \"bat\": \"cmd /c\",\n        \"shellscript\": \"bash\",\n        \"fsharp\": \"fsi\",\n        \"csharp\": \"scriptcs\",\n        \"vbscript\": \"cscript //Nologo\",\n        \"typescript\": \"ts-node\",\n        \"coffeescript\": \"coffee\",\n        \"scala\": \"scala\",\n        \"swift\": \"swift\",\n        \"julia\": \"julia\",\n        \"crystal\": \"crystal\",\n        \"ocaml\": \"ocaml\",\n        \"r\": \"Rscript\",\n        \"applescript\": \"osascript\",\n        \"clojure\": \"lein exec\",\n        \"haxe\": \"haxe --cwd $dirWithoutTrailingSlash --run $fileNameWithoutExt\",\n        \"rust\": \"cd $dir &amp;&amp; rustc $fileName &amp;&amp; $dir$fileNameWithoutExt\",\n        \"racket\": \"racket\",\n        \"scheme\": \"csi -script\",\n        \"ahk\": \"autohotkey\",\n        \"autoit\": \"autoit3\",\n        \"dart\": \"dart\",\n        \"pascal\": \"cd $dir &amp;&amp; fpc $fileName &amp;&amp; $dir$fileNameWithoutExt\",\n        \"d\": \"cd $dir &amp;&amp; dmd $fileName &amp;&amp; $dir$fileNameWithoutExt\",\n        \"haskell\": \"runghc\",\n        \"nim\": \"nim compile --verbosity:0 --hints:off --run\",\n        \"lisp\": \"sbcl --script\",\n        \"kit\": \"kitc --run\",\n        \"v\": \"v run\",\n        \"sass\": \"sass --style expanded\",\n        \"scss\": \"scss --style expanded\",\n        \"less\": \"cd $dir &amp;&amp; lessc $fileName $fileNameWithoutExt.css\",\n        \"FortranFreeForm\": \"cd $dir &amp;&amp; gfortran $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt\",\n        \"fortran-modern\": \"cd $dir &amp;&amp; gfortran $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt\",\n        \"fortran_fixed-form\": \"cd $dir &amp;&amp; gfortran $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt\",\n        \"fortran\": \"cd $dir &amp;&amp; gfortran $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt\",\n        \"sml\": \"cd $dir &amp;&amp; sml $fileName\",\n        \"mojo\": \"mojo run\",\n        \"erlang\": \"escript\",\n        \"spwn\": \"spwn build\",\n        \"pkl\": \"cd $dir &amp;&amp; pkl eval -f yaml $fileName -o $fileNameWithoutExt.yaml\",\n        \"gleam\": \"gleam run -m $fileNameWithoutExt\"\n    },\n    \"terminal.integrated.defaultProfile.windows\": \"Command Prompt\",\n    \"code-runner.executorMapByFileExtension\": {\n\n        \".vb\": \"cd $dir &amp;&amp; vbc /nologo $fileName &amp;&amp; $dir$fileNameWithoutExt\",\n        \".vbs\": \"cscript //Nologo\",\n        \".scala\": \"scala\",\n        \".jl\": \"julia\",\n        \".cr\": \"crystal\",\n        \".ml\": \"ocaml\",\n        \".zig\": \"zig run\",\n        \".exs\": \"elixir\",\n        \".hx\": \"haxe --cwd $dirWithoutTrailingSlash --run $fileNameWithoutExt\",\n        \".rkt\": \"racket\",\n        \".scm\": \"csi -script\",\n        \".ahk\": \"autohotkey\",\n        \".au3\": \"autoit3\",\n        \".kt\": \"cd $dir &amp;&amp; kotlinc $fileName -include-runtime -d $fileNameWithoutExt.jar &amp;&amp; java -jar $fileNameWithoutExt.jar\",\n        \".kts\": \"kotlinc -script\",\n        \".dart\": \"dart\",\n        \".pas\": \"cd $dir &amp;&amp; fpc $fileName &amp;&amp; $dir$fileNameWithoutExt\",\n        \".pp\": \"cd $dir &amp;&amp; fpc $fileName &amp;&amp; $dir$fileNameWithoutExt\",\n        \".d\": \"cd $dir &amp;&amp; dmd $fileName &amp;&amp; $dir$fileNameWithoutExt\",\n        \".hs\": \"runhaskell\",\n        \".nim\": \"nim compile --verbosity:0 --hints:off --run\",\n        \".csproj\": \"dotnet run --project\",\n        \".fsproj\": \"dotnet run --project\",\n        \".lisp\": \"sbcl --script\",\n        \".kit\": \"kitc --run\",\n        \".v\": \"v run\",\n        \".vsh\": \"v run\",\n        \".sass\": \"sass --style expanded\",\n        \".cu\": \"cd $dir &amp;&amp; nvcc $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt\",\n        \".ring\": \"ring\",\n        \".sml\": \"cd $dir &amp;&amp; sml $fileName\",\n        \".mojo\": \"mojo run\",\n        \".erl\": \"escript\",\n        \".spwn\": \"spwn build\",\n        \".pkl\": \"cd $dir &amp;&amp; pkl eval -f yaml $fileName -o $fileNameWithoutExt.yaml\",\n        \".gleam\": \"gleam run -m $fileNameWithoutExt\"\n    },\n    \"terminal.integrated.enableMultiLinePasteWarning\": \"never\",\n    \"C_Cpp.intelliSenseEngine\": \"disabled\",\n    \"security.workspace.trust.untrustedFiles\": \"open\",\n    \"window.commandCenter\": false,\n    \"window.menuBarVisibility\": \"compact\",\n    \"workbench.layoutControl.enabled\": false,\n    \"[python]\": {\n        \"editor.defaultFormatter\": \"eeyore.yapf\"\n    },\n    \"workbench.colorTheme\": \"Monokai\",\n}\n</code></pre>"},{"location":"misc/winrecovery/","title":"windows\u521b\u5efa\u6062\u590d\u5206\u533a","text":""},{"location":"misc/winrecovery/#windows","title":"windows\u91cd\u73b0\u521b\u5efa\u6062\u590d\u5206\u533a","text":"<p>\u6211\u662f\u4e4b\u524d\u60f3\u628aD\u76d8\u5220\u4e86\u53ea\u7559\u4e00\u4e2aC\u76d8\uff0c\u4f46\u662f\u6062\u590d\u5206\u533a\u5361\u5728\u4ed6\u4eec\u4e4b\u95f4\uff0c\u6240\u4ee5\u53ea\u80fd\u628a\u6062\u590d\u5206\u533a\u7ed9\u5220\u6389</p> <p>\u4f46\u662f\u53c8\u7a81\u7136\u60f3\u91cd\u7f6e\u7535\u8111\u4e86\uff0c\u6ca1\u6709\u6062\u590d\u5206\u533a\u7684\u8bdd\uff0c\u6574\u4e0d\u4e86\u3002</p> <p>\u53ef\u4ee5\u76f4\u63a5\u5728\u6062\u590d\u91cc\u91cd\u65b0\u5b89\u88c5\u4e00\u4e2awindows\uff0c</p> <p>\u7136\u540e\u6062\u590d\u5206\u533a\u5c31\u56de\u6765\u4e86\u3002\u3002\u3002\u6240\u4ee5\u4e0d\u8981\u5148\u5206\u76d8\uff0c\u4e0d\u7136\u6062\u590d\u5206\u533a\u4f1a\u5361\u5728c\u76d8\u548c\u5176\u4ed6\u76d8\u4e4b\u95f4\uff0c\u5c31\u5f88\u96be\u53d7\u3002</p> <p></p> <p>\u9009\u62e9\u8fd9\u4e2a\u7acb\u5373\u91cd\u65b0\u5b89\u88c5\u5c31\u53ef\u4ee5\uff0c\u53ef\u80fd\u8981\u591a\u7b49\u4e00\u4e0b\u3002</p> <p>\u91cd\u7f6e\u7535\u8111\u662f\u4e0d\u662f\u4f1a\u8ba9\u7535\u8111\u53d8\u5361\u6765\u7740\uff0c\u770b\u6709\u7684\u4eba\u8fd9\u6837\u8bf4\u3002\u6211\u5df2\u7ecf\u91cd\u7f6e\u8fc7\u4e94\u516d\u6b21\u4e86\u3002\u3002\u3002</p>"},{"location":"update/20250115/","title":"20250115","text":""},{"location":"update/20250115/#2025313","title":"2025\u5e743\u670813\u65e5","text":"<p>\u771f\u7684\u670d\u4e86\u5440\u8fd9\u4e2ab\u535a\u5ba2\uff0c\u6d6a\u8d39\u4e86\u5f88\u591a\u65f6\u95f4\u554a\u3002</p> <p>\u7a97\u53e3\u5bbd\u5ea6\u5728 <code>1220px</code> \u4ee5\u4e0b\u65f6\uff0c\u4f1a\u5f3a\u5236\u663e\u793a\u624b\u673a\u7aef\u7684 ui \uff0c\u800c\u4e14\u627e\u4e86\u597d\u4e45\u90fd\u6ca1\u627e\u5230\u548b\u6539\u3002\u95ee chat \u548c deepseek \u90fd\u95ee\u4e86\u597d\u4e45\uff0c\u5b83\u4eec\u6539\u5f97\u53cd\u800c\u66f4\u7cdf\u4e86\u3002</p> <p>\u6682\u65f6\u5148\u522b\u7422\u78e8\u8fd9\u4e9b\u4e86\uff0c\u4e3b\u8981\u8fd8\u662f\u597d\u597d\u5199\u535a\u5ba2\u5237\u9898\u5b66\u4e60\u5427\u3002\u5c31\u5f53\u662f\u4e2a\u6258\u7ba1 markdown \u6587\u6863\u7684\u5de5\u5177\uff0c\u800c\u4e14\u5176\u5b9e\u4e5f\u8fd8\u597d\u3002\u5c31\u662f\u50cf ubuntu \u90a3\u79cd\uff0c\u5982\u679c\u72b6\u6001\u680f\u5728\u4fa7\u8fb9\uff0c\u5c31\u76f4\u63a5\u53ea\u663e\u793a\u624b\u673a\u7aef\u90a3\u79cdui\u4e86\u3002</p> <p>\u5148\u5c3d\u91cf\u591a\u53bb\u66f4\u65b0\u535a\u5ba2\uff0c\u5177\u4f53\u7684\u4f18\u5316\u7684\u4e8b\u60c5\uff0c\u4ee5\u540e\u518d\u8003\u8651\u600e\u4e48\u505a\uff0c\u4e0d\u8981\u518d\u8fd9\u79cd\u6ca1\u6709\u6027\u4ef7\u6bd4\u7684\u4e8b\u60c5\u4e0a\u82b1\u8d39\u5f88\u4e45\u3002\u4e3b\u8981\u662f\u82b1\u4e86\u5f88\u591a\u65f6\u95f4\u90fd\u4e0d\u4e00\u5b9a\u80fd\u641e\u597d\uff0c\u800c\u641e\u4e0d\u597d\u4e0d\u4ec5\u6d6a\u8d39\u65f6\u95f4\uff0c\u8fd8\u5bb9\u6613\u5f71\u54cd\u60c5\u7eea\u3002\u800c\u4e14\u5176\u4ed6\u529f\u80fd\u5df2\u7ecf\u90fd\u5f88\u4e0d\u9519\u4e86\uff0c\u624b\u673a\u4e0a\u663e\u793a\u6548\u679c\u4e5f\u662f\u8fd8\u884c\u3002</p>"},{"location":"update/20250115/#202533","title":"2025\u5e743\u67083\u65e5","text":"<p>\u6709\u7684\u535a\u5ba2\u4f1a\u4e0d\u663e\u793a\u6807\u9898\u76ee\u5f55\uff0c\u5c31\u662f\u53f3\u4fa7\u90a3\u4e2a\u4e1c\u897f\uff0c\u73b0\u5728\u611f\u89c9\u5927\u6982\u7387\u662f\u6807\u9898\u8bbe\u7f6e\u7684\u95ee\u9898\u3002</p> <p>\u5e94\u8be5\u662f\u4e0d\u80fd\u6709\u591a\u4e2a\u4e00\u7ea7\u6807\u9898\uff0c\u7136\u540e\u56db\u7ea7\u6807\u9898\u6216\u8005\u4e94\u7ea7\u6807\u9898\u4ee5\u4e0b\u5c31\u4e0d\u4f1a\u663e\u793a\u51fa\u6765\u4e86\u3002\u5927\u6982\u63a8\u6d4b\u7684\u3002</p> <p>\u5916\u89c2\u5565\u7684\u5176\u5b9e\u6ca1\u5fc5\u8981\u6298\u817e\u592a\u591a\u65f6\u95f4\uff0c\u4e3b\u8981\u8fd8\u662f\u575a\u6301\u5199\u535a\u5ba2\u548c\u5b66\u4e60\u4e1c\u897f\u3002</p> <p>\u73b0\u5728\u5df2\u7ecf\u662f\u575a\u6301\u5199\u4e86\u4e00\u4e9b\u5185\u5bb9\u4e86\uff0c\u4e14\u5bf9\u6211\u4f3c\u4e4e\u662f\u6709\u4e00\u4e9b\u5e2e\u52a9\u7684\uff0c\u867d\u7136\u73b0\u5728\u4f53\u73b0\u5f97\u8fd8\u4e0d\u591a\u3002\u5f04\u4e86\u535a\u5ba2\u4e4b\u540e\uff0c\u6211\u7ecf\u5e38\u662f\u7761\u524d\u5c31\u662f\u66f4\u65b0\u4e0b\u4e1c\u897f\uff0c\u7136\u540e\u4e0a\u5e8a\u4e86\u5728\u624b\u673a\u4e0a\u770b\u81ea\u5df1\u7684\u535a\u5ba2\u3002\ud83e\udd23\ud83e\udd23\ud83e\udd23</p>"},{"location":"update/20250115/#2025217","title":"2025\u5e742\u670817\u65e5","text":"<p>\u7ec8\u4e8e\u628a\u7f51\u9875\u7684\u56fe\u6807\u548c\u5b57\u4f53\u6539\u4e86\uff0c\u4e4b\u524d\u7684\u770b\u7740\u597d\u522b\u626d\u3002</p> <p>\u539f\u6765\u5f97\u628a\u4e1c\u897f\u90fd\u653e\u5230docs\u6587\u4ef6\u5939\uff0c\u6211\u4ee5\u4e3a\u6709\u7684\u5f97\u653e\u5230site\u4e0b\u7684/assets\u6765\u7740\u3002\u7ed3\u679c\u90fd\u662f\u653edoc\u3002</p> <p>\u7136\u540e\u56fe\u6807\u5b83\u662f\u5927\u6982\u4e0d\u652f\u6301.ico\u548c.jpg\uff0c\u53ea\u80fd\u652f\u6301.png\u3002\u3002\u3002</p> <p>\u5b57\u4f53\u6362\u6210\u4e86\u843d\u971e\u5b64\u9e5c\uff0c\u611f\u89c9\u975e\u5e38\u7684\u597d\u770b\u554a\u3002</p>"},{"location":"update/20250115/#2025215","title":"2025\u5e742\u670815\u65e5","text":"<p>\u6b63\u597d\u8ddd\u79bb\u6574\u8fd9\u4e2a\u535a\u5ba2\u4e00\u4e2a\u6708\u4e86\u54c8\uff0c\uff0c\uff0c\u867d\u7136\u6ca1\u53d1\u8fc7\u51e0\u7bc7\u3002\u3002\u3002\u4ee5\u540e\u80af\u5b9a\u4f1a\u591a\u591a\u53d1\u7684\u3002\u3002\u3002</p> <p>\u4eca\u5929\u4e70\u4e86\u4e00\u4e2a\u57df\u540d\uff0c\u7136\u540e\u73b0\u5728\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u57df\u540d\u6765\u8bbf\u95ee\u535a\u5ba2\u4e86\uff0c\u7ec8\u4e8e\u4e0d\u7528\u52a0\u901f\u5668\u4e5f\u80fd\u968f\u65f6\u8bbf\u95ee\u4e86\u3002\u3002\u3002\u975e\u5e38\u7684\u723d\u554a\u3002\u800c\u4e14\u5f88\u7b80\u5355\uff0c\u53ea\u7528\u5728\u57df\u540d\u90a3\u6dfb\u52a0\u535a\u5ba2\u9875\u9762\u89e3\u6790\uff0c\u7136\u540e <code>github pages</code> \u91cc\u6dfb\u52a0 <code>custom domain</code> \u5c31\u884c\u4e86\u3002  </p> <p>\u66f4\u6539\u4e86\u5185\u5bb9\u63a8\u9001\u5230github\u4e4b\u540e\u53d1\u73b0\u9700\u8981\u518d\u91cd\u65b0\u5728github\u90a3\u586b\u5199\u57df\u540d\u3002\u3002\u3002\u6211\u8fd8\u5199\u4e86\u597d\u51e0\u6b21\u3002\u3002\u3002\u95ee\u4e86\u4e0bchat\uff0c\u53d1\u73b0\u662f\u56e0\u4e3a\u66f4\u65b0\u540egh-pages\u5206\u652f\u91cc\u6ca1\u6709CNAME\u6587\u4ef6\u4e86\uff0c\u56e0\u4e3a\u90e8\u7f72\u91cc\u7684\u4efb\u52a1\u6ca1\u6709\u8fd9\u4e2a\u3002</p> <p>\u53ea\u9700\u8981\u5728docs/\u91cc\u9762\u521b\u5efa\u4e00\u4e2aCNAME\u6587\u4ef6\uff0c\u7136\u540e\u628a\u57df\u540d\u5199\u8fdb\u53bb\u5c31\u884c\u4e86\u3002</p>"},{"location":"update/20250115/#2025115","title":"2025\u5e741\u670815\u65e5","text":"<p>\u670d\u4e86\uff0c\u4eca\u5929\u521a\u5f04\u8fd9\u4e2a\u535a\u5ba2\u561b\u3002</p> <p>\u641e\u4e86\u597d\u4e45\u554a\u3002\u3002\u3002</p> <p>\u9996\u5148\uff0c\u90a3\u4e2a\u56fe\u7247\u4e00\u76f4\u4e0d\u663e\u793a\uff0c\u641e\u4e86\u597d\u4e45\u3002</p> <p>\u7136\u540e\u6211\u653e\u5f03\u6323\u624e\u4e86</p> <p>\u6211\u89c2\u5bdf\u5230pages\u7684\u9875\u9762\u5e94\u8be5\u662f/site\u505a\u6839\u76ee\u5f55\u7684,\u6240\u4ee5\u628a\u56fe\u7247\u653e/site/assets/images/ \u5e94\u8be5\u5c31\u884c\u4e86\uff0c\u4f46\u662f\u8fd9\u6837\u672c\u5730\u5c31\u4e0d\u80fd\u663e\u793a\u4e86\u5417\uff0c\u4e0d\u61c2\u3002\u800c\u4e14\u6211\u770b\u522b\u4eba\u4e5f\u6709\u521b\u65b0\u7684\u56fe\u7247\u76ee\u5f55\u7684\uff0c\u4e0d\u77e5\u9053\u600e\u4e48\u641e\u554a\uff08\uff09\u3002</p> <p>\u6709\u7a7a\u518d\u7814\u7a76\u3002\u3002\u3002</p> <p>\u7136\u540e\u53e6\u4e00\u4e2a\u786c\u63a7\u6211\u4e00\u4e24\u4e2a\u5c0f\u65f6\u7684\u662f\uff0c\u521a\u624d\u4e0a\u4f20\u7684\u4e00\u4e2a\u6587\u6863\u91cc\uff0c\u6709\u4e00\u4e2a\u4ee3\u7801\u5757\u4e0d\u6b63\u5e38\u663e\u793a\uff0c\u771f\u7684\u662f\u96be\u53d7\u6b7b\u6211\u4e86\u3002\u3002\u3002\u7136\u540e\u4e00\u76f4\u6539\u4e00\u76f4\u8bd5\u3002\u3002\u3002\u7ed3\u679c\u662f\u56e0\u4e3a\u4ee3\u7801\u5f00\u5934\u548c\u6700\u524d\u9762\uff0c\u7a7a\u4e86\u4e00\u4e2a\u7a7a\u683c\u3002\u3002\u3002\u670d\u4e86\u771f\u7684\u662f\u3002\u4ee5\u540e\u4e00\u5b9a\u5f97\u591a\u6ce8\u610f</p> <p>\u5728mkdocs\u91cc\u7f16\u8f91\u5408\u9002\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u5728docs\u91cc\u67d0\u4e2a\u8def\u5f84\u521b\u5efa\u6587\u4ef6\uff0c\u5199\u597d\u76f4\u63a5<code>git push</code>\u7b49\u5f85\u5237\u65b0\u5373\u53ef\uff0c\u4e00\u822c\u4e00\u5206\u949f\u3002\u4e0d\u5f97\u4e0d\u8bf4\uff0c\u8fd9\u4e2a\u535a\u5ba2\u6bd4hexo\u535a\u5ba2\u65b9\u4fbf\uff0c\u800c\u4e14\u754c\u9762\u4e5f\u633a\u4e0d\u9519\uff0c\u6211\u4e4b\u524d\u4e00\u76f4\u60f3\u6574\u8fd9\u4e2a\uff0c\u56e0\u4e3a\u770b\u522b\u4eba\u7684\u662f\u8fd9\u6837\u5f88\u559c\u6b22\u3002</p> <p>1.\u60f3\u628a\u51e0\u4e2a\u5206\u7c7b\u653e\u5230\u9876\u90e8\uff0c\u7136\u540e\u5176\u4ed6\u9009\u9879\u4f4d\u7f6e\u4e0d\u53d8\u3002\u8fd9\u6837\u4f1a\u7a0d\u5fae\u597d\u770b\u4e00\u70b9</p> <p>2.\u770b\u770b\u600e\u4e48\u7f8e\u5316\u4e00\u4e0b\u4ee3\u7801\u5757\u5427\u3002</p> <p>3.\u7814\u7a76\u600e\u4e48\u624d\u80fd\u5728\u9875\u9762\u4e2d\u663e\u793a\u56fe\u7247\u3002</p> <p>\u4f46\u662f\u6709\u4e00\u8bf4\u4e00\u76ee\u524d\u8fd8\u662f\u5c3d\u5feb\u5237\u9898\uff0c\u6700\u8fd1\u90fd\u6ca1\u600e\u4e48\u5237\u3002</p>"}]}